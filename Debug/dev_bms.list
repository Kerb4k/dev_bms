
dev_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800831c  0800831c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008324  08008324  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800832c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200000a0  080083cc  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  080083cc  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2fc  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003182  00000000  00000000  0003a3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  0003d550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  0003eb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202ff  00000000  00000000  0003ffc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190e7  00000000  00000000  000602c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceb1f  00000000  00000000  000793ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147ecd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006064  00000000  00000000  00147f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a0 	.word	0x200000a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007eb0 	.word	0x08007eb0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a4 	.word	0x200000a4
 8000214:	08007eb0 	.word	0x08007eb0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <WakeIdle>:
#define T_WAKE_MAX		400
#define T_REFUP_MAX		4400
#define T_CYCLE_FAST_MAX	1185	// Measure 12 Cells

void WakeIdle(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000ed8:	20ff      	movs	r0, #255	; 0xff
 8000eda:	f001 f9e9 	bl	80022b0 <spi_write_read_byte>
	delay_u(IC_NUM * T_READY);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f001 f9b2 	bl	8002248 <delay_u>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <WakeUp>:

void WakeUp(void){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000eec:	20ff      	movs	r0, #255	; 0xff
 8000eee:	f001 f9df 	bl	80022b0 <spi_write_read_byte>
	delay_u(IC_NUM * T_WAKE_MAX);
 8000ef2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ef6:	f001 f9a7 	bl	8002248 <delay_u>

#if ((IC_NUM * T_WAKE_MAX) >= T_IDLE_MIN)
	spi_write_read_byte(0xFF);
	delay_u(IC_NUM * T_READY);
#endif
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}

08000efe <initialize>:
uint8_t ADCV[2]; //!< Cell Voltage conversion command
uint8_t ADAX[2]; //!< GPIO conversion command
uint8_t ADSTAT[2]; //!< STAT conversion command

void initialize(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af02      	add	r7, sp, #8
	init(MD_NORMAL,DCP_DISABLED,CELL_CH_ALL,AUX_CH_ALL,STS_CH_ALL);
 8000f04:	2300      	movs	r3, #0
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f000 f804 	bl	8000f1c <init>
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <init>:
				  uint8_t DCP,	//Discharge Permit
				  uint8_t CH,	//Cell Channels to be measured
				  uint8_t CHG,	//GPIO Channels to be measured
				  uint8_t CHST	//Status Channels to be measured
				  )
{
 8000f1c:	b490      	push	{r4, r7}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4604      	mov	r4, r0
 8000f24:	4608      	mov	r0, r1
 8000f26:	4611      	mov	r1, r2
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	71fb      	strb	r3, [r7, #7]
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71bb      	strb	r3, [r7, #6]
 8000f32:	460b      	mov	r3, r1
 8000f34:	717b      	strb	r3, [r7, #5]
 8000f36:	4613      	mov	r3, r2
 8000f38:	713b      	strb	r3, [r7, #4]
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	105b      	asrs	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
	ADCV[0] = md_bits + 0x02;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	3302      	adds	r3, #2
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <init+0xb8>)
 8000f4e:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	01db      	lsls	r3, r3, #7
 8000f54:	73fb      	strb	r3, [r7, #15]
	ADCV[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	4413      	add	r3, r2
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	797b      	ldrb	r3, [r7, #5]
 8000f64:	4413      	add	r3, r2
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	3360      	adds	r3, #96	; 0x60
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <init+0xb8>)
 8000f6e:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	105b      	asrs	r3, r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
	ADAX[0] = md_bits + 0x04;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	3304      	adds	r3, #4
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <init+0xbc>)
 8000f84:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	01db      	lsls	r3, r3, #7
 8000f8a:	73fb      	strb	r3, [r7, #15]
	ADAX[1] = md_bits + 0x60 + CHG;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	793b      	ldrb	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	3360      	adds	r3, #96	; 0x60
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <init+0xbc>)
 8000f9a:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	105b      	asrs	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
	ADSTAT[0] = md_bits + 0x04;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	3304      	adds	r3, #4
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <init+0xc0>)
 8000fb0:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	01db      	lsls	r3, r3, #7
 8000fb6:	73fb      	strb	r3, [r7, #15]
	ADSTAT[1] = md_bits + 0x68 + CHST;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	7e3b      	ldrb	r3, [r7, #24]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	3368      	adds	r3, #104	; 0x68
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <init+0xc0>)
 8000fc6:	705a      	strb	r2, [r3, #1]
}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc90      	pop	{r4, r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200000bc 	.word	0x200000bc
 8000fd8:	200000c0 	.word	0x200000c0
 8000fdc:	200000c4 	.word	0x200000c4

08000fe0 <pec15_calc>:

uint16_t pec15_calc(uint8_t len,	//Number of bytes that will be used to calculate a PEC
                    uint8_t *data	//Array of data that will be used to calculate  a PEC
                   )
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder, addr;

  remainder = 16;					//initialize the PEC
 8000fec:	2310      	movs	r3, #16
 8000fee:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	737b      	strb	r3, [r7, #13]
 8000ff4:	e018      	b.n	8001028 <pec15_calc+0x48>
  {
    addr = ((remainder>>7)^data[i])&0xff;	//calculate PEC table address
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	09db      	lsrs	r3, r3, #7
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	7b7b      	ldrb	r3, [r7, #13]
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	440b      	add	r3, r1
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	4053      	eors	r3, r2
 8001008:	b29b      	uxth	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	817b      	strh	r3, [r7, #10]
    remainder = (remainder<<8)^crc15Table[addr];
 800100e:	89fb      	ldrh	r3, [r7, #14]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b29a      	uxth	r2, r3
 8001014:	897b      	ldrh	r3, [r7, #10]
 8001016:	490b      	ldr	r1, [pc, #44]	; (8001044 <pec15_calc+0x64>)
 8001018:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800101c:	b29b      	uxth	r3, r3
 800101e:	4053      	eors	r3, r2
 8001020:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	3301      	adds	r3, #1
 8001026:	737b      	strb	r3, [r7, #13]
 8001028:	7b7a      	ldrb	r2, [r7, #13]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	429a      	cmp	r2, r3
 800102e:	d3e2      	bcc.n	8000ff6 <pec15_calc+0x16>
  }
  return(remainder*2);	//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	b29b      	uxth	r3, r3
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	08007ec8 	.word	0x08007ec8

08001048 <wrcfg>:

void wrcfg(uint8_t total_ic,
				   uint8_t config[][6]
				  )
{
 8001048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800104c:	b089      	sub	sp, #36	; 0x24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	6039      	str	r1, [r7, #0]
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	466b      	mov	r3, sp
 8001058:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 800105a:	2306      	movs	r3, #6
 800105c:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3304      	adds	r3, #4
 8001066:	76fb      	strb	r3, [r7, #27]

#if DYNAMIC_MEM
	uint8_t *cmd;
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
#else
	uint8_t cmd[CMD_LEN];
 8001068:	7efb      	ldrb	r3, [r7, #27]
 800106a:	3b01      	subs	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	7efb      	ldrb	r3, [r7, #27]
 8001070:	2200      	movs	r2, #0
 8001072:	4698      	mov	r8, r3
 8001074:	4691      	mov	r9, r2
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800108a:	7efb      	ldrb	r3, [r7, #27]
 800108c:	2200      	movs	r2, #0
 800108e:	461c      	mov	r4, r3
 8001090:	4615      	mov	r5, r2
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	00eb      	lsls	r3, r5, #3
 800109c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010a0:	00e2      	lsls	r2, r4, #3
 80010a2:	7efb      	ldrb	r3, [r7, #27]
 80010a4:	3307      	adds	r3, #7
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	ebad 0d03 	sub.w	sp, sp, r3
 80010ae:	466b      	mov	r3, sp
 80010b0:	3300      	adds	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	2201      	movs	r2, #1
 80010be:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x3d;
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	223d      	movs	r2, #61	; 0x3d
 80010c4:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6e;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	226e      	movs	r2, #110	; 0x6e
 80010ca:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	77bb      	strb	r3, [r7, #30]
 80010d4:	e03c      	b.n	8001150 <wrcfg+0x108>
	{
		/* the last IC on the stack. The first configuration written is */
		/* received by the last IC in the daisy chain */

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 80010d6:	2300      	movs	r3, #0
 80010d8:	77fb      	strb	r3, [r7, #31]
 80010da:	e012      	b.n	8001102 <wrcfg+0xba>
		{
			/* current_byte is the byte counter */

			cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 80010dc:	7fba      	ldrb	r2, [r7, #30]
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	3b06      	subs	r3, #6
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	18d1      	adds	r1, r2, r3
 80010ec:	7ffa      	ldrb	r2, [r7, #31]
 80010ee:	7f7b      	ldrb	r3, [r7, #29]
 80010f0:	5c89      	ldrb	r1, [r1, r2]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80010f6:	7f7b      	ldrb	r3, [r7, #29]
 80010f8:	3301      	adds	r3, #1
 80010fa:	777b      	strb	r3, [r7, #29]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 80010fc:	7ffb      	ldrb	r3, [r7, #31]
 80010fe:	3301      	adds	r3, #1
 8001100:	77fb      	strb	r3, [r7, #31]
 8001102:	7ffa      	ldrb	r2, [r7, #31]
 8001104:	7f3b      	ldrb	r3, [r7, #28]
 8001106:	429a      	cmp	r2, r3
 8001108:	d3e8      	bcc.n	80010dc <wrcfg+0x94>
		}
		cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 800110a:	7fba      	ldrb	r2, [r7, #30]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	3b06      	subs	r3, #6
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	4413      	add	r3, r2
 800111a:	461a      	mov	r2, r3
 800111c:	7f3b      	ldrb	r3, [r7, #28]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <pec15_calc>
 8001126:	4603      	mov	r3, r0
 8001128:	81fb      	strh	r3, [r7, #14]
		cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 800112a:	89fb      	ldrh	r3, [r7, #14]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b29a      	uxth	r2, r3
 8001130:	7f7b      	ldrb	r3, [r7, #29]
 8001132:	b2d1      	uxtb	r1, r2
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	54d1      	strb	r1, [r2, r3]
		cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8001138:	7f7b      	ldrb	r3, [r7, #29]
 800113a:	3301      	adds	r3, #1
 800113c:	89fa      	ldrh	r2, [r7, #14]
 800113e:	b2d1      	uxtb	r1, r2
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 8001144:	7f7b      	ldrb	r3, [r7, #29]
 8001146:	3302      	adds	r3, #2
 8001148:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 800114a:	7fbb      	ldrb	r3, [r7, #30]
 800114c:	3b01      	subs	r3, #1
 800114e:	77bb      	strb	r3, [r7, #30]
 8001150:	7fbb      	ldrb	r3, [r7, #30]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1bf      	bne.n	80010d6 <wrcfg+0x8e>
	}

	uint8_t rx_data;
	WakeIdle();
 8001156:	f7ff febd 	bl	8000ed4 <WakeIdle>
	//spi_write_array(CMD_LEN, cmd); //This function causes bad stuff!
	spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 800115a:	7ef8      	ldrb	r0, [r7, #27]
 800115c:	f107 030d 	add.w	r3, r7, #13
 8001160:	2200      	movs	r2, #0
 8001162:	6939      	ldr	r1, [r7, #16]
 8001164:	f001 f8e8 	bl	8002338 <spi_write_then_read_array_ltc>
 8001168:	46b5      	mov	sp, r6

#if DYNAMIC_MEM
	free(cmd);
#endif
}
 800116a:	bf00      	nop
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001174 <rdcfg>:

int8_t rdcfg(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 8001174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001178:	b089      	sub	sp, #36	; 0x24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	6039      	str	r1, [r7, #0]
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	466b      	mov	r3, sp
 8001184:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 8001186:	2308      	movs	r3, #8
 8001188:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	777b      	strb	r3, [r7, #29]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 800118e:	230c      	movs	r3, #12
 8001190:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 8001192:	7efb      	ldrb	r3, [r7, #27]
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	3b01      	subs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	7efb      	ldrb	r3, [r7, #27]
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	461a      	mov	r2, r3
 80011a0:	2300      	movs	r3, #0
 80011a2:	4690      	mov	r8, r2
 80011a4:	4699      	mov	r9, r3
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011ba:	7efb      	ldrb	r3, [r7, #27]
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	461a      	mov	r2, r3
 80011c0:	2300      	movs	r3, #0
 80011c2:	4614      	mov	r4, r2
 80011c4:	461d      	mov	r5, r3
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	00eb      	lsls	r3, r5, #3
 80011d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011d4:	00e2      	lsls	r2, r4, #3
 80011d6:	7efb      	ldrb	r3, [r7, #27]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	3307      	adds	r3, #7
 80011dc:	08db      	lsrs	r3, r3, #3
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	ebad 0d03 	sub.w	sp, sp, r3
 80011e4:	466b      	mov	r3, sp
 80011e6:	3300      	adds	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 80011ea:	2300      	movs	r3, #0
 80011ec:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x02;
 80011ee:	2302      	movs	r3, #2
 80011f0:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x2b;
 80011f2:	232b      	movs	r3, #43	; 0x2b
 80011f4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = 0x0a;
 80011f6:	230a      	movs	r3, #10
 80011f8:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 80011fa:	f7ff fe6b 	bl	8000ed4 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 80011fe:	7f3b      	ldrb	r3, [r7, #28]
 8001200:	79fa      	ldrb	r2, [r7, #7]
 8001202:	fb03 f202 	mul.w	r2, r3, r2
 8001206:	f107 0108 	add.w	r1, r7, #8
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	2004      	movs	r0, #4
 800120e:	f001 f893 	bl	8002338 <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 8001212:	2300      	movs	r3, #0
 8001214:	77bb      	strb	r3, [r7, #30]
 8001216:	e03a      	b.n	800128e <rdcfg+0x11a>
	{
		// executes for each LTC6804 in the daisy chain and packs the data
		// into the r_config array as well as check the received Config data
		// for any bit errors

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001218:	2300      	movs	r3, #0
 800121a:	77fb      	strb	r3, [r7, #31]
 800121c:	e010      	b.n	8001240 <rdcfg+0xcc>
		{
			r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 800121e:	7ffa      	ldrb	r2, [r7, #31]
 8001220:	7fbb      	ldrb	r3, [r7, #30]
 8001222:	7f39      	ldrb	r1, [r7, #28]
 8001224:	fb01 f303 	mul.w	r3, r1, r3
 8001228:	18d1      	adds	r1, r2, r3
 800122a:	7fbb      	ldrb	r3, [r7, #30]
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	441a      	add	r2, r3
 8001232:	7ffb      	ldrb	r3, [r7, #31]
 8001234:	6938      	ldr	r0, [r7, #16]
 8001236:	5c41      	ldrb	r1, [r0, r1]
 8001238:	54d1      	strb	r1, [r2, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800123a:	7ffb      	ldrb	r3, [r7, #31]
 800123c:	3301      	adds	r3, #1
 800123e:	77fb      	strb	r3, [r7, #31]
 8001240:	7ffa      	ldrb	r2, [r7, #31]
 8001242:	7f3b      	ldrb	r3, [r7, #28]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3ea      	bcc.n	800121e <rdcfg+0xaa>
		}

		received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8001248:	7fbb      	ldrb	r3, [r7, #30]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	4413      	add	r3, r2
 8001250:	799b      	ldrb	r3, [r3, #6]
 8001252:	b29b      	uxth	r3, r3
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b29a      	uxth	r2, r3
 8001258:	7fbb      	ldrb	r3, [r7, #30]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	6839      	ldr	r1, [r7, #0]
 800125e:	440b      	add	r3, r1
 8001260:	79db      	ldrb	r3, [r3, #7]
 8001262:	b29b      	uxth	r3, r3
 8001264:	4413      	add	r3, r2
 8001266:	81fb      	strh	r3, [r7, #14]
		data_pec = pec15_calc(6, &r_config[current_ic][0]);
 8001268:	7fbb      	ldrb	r3, [r7, #30]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4619      	mov	r1, r3
 8001272:	2006      	movs	r0, #6
 8001274:	f7ff feb4 	bl	8000fe0 <pec15_calc>
 8001278:	4603      	mov	r3, r0
 800127a:	81bb      	strh	r3, [r7, #12]
		if (received_pec != data_pec)
 800127c:	89fa      	ldrh	r2, [r7, #14]
 800127e:	89bb      	ldrh	r3, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <rdcfg+0x114>
		{
			pec_error = -1;
 8001284:	23ff      	movs	r3, #255	; 0xff
 8001286:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 8001288:	7fbb      	ldrb	r3, [r7, #30]
 800128a:	3301      	adds	r3, #1
 800128c:	77bb      	strb	r3, [r7, #30]
 800128e:	7fba      	ldrb	r2, [r7, #30]
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3c0      	bcc.n	8001218 <rdcfg+0xa4>
	}

#if DYNAMIC_MEM
	free(rx_data);
#endif
	return(pec_error);
 8001296:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800129a:	46b5      	mov	sp, r6
}
 800129c:	4618      	mov	r0, r3
 800129e:	3724      	adds	r7, #36	; 0x24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080012a6 <wrcfgb>:

void wrcfgb(uint8_t total_ic,
				   uint8_t config[][6]
				  ){
 80012a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	466b      	mov	r3, sp
 80012b6:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 80012b8:	2306      	movs	r3, #6
 80012ba:	773b      	strb	r3, [r7, #28]
		const uint8_t CMD_LEN = 4 + (8 * total_ic);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3304      	adds	r3, #4
 80012c4:	76fb      	strb	r3, [r7, #27]

	#if DYNAMIC_MEM
		uint8_t *cmd;
		cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
	#else
		uint8_t cmd[CMD_LEN];
 80012c6:	7efb      	ldrb	r3, [r7, #27]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	7efb      	ldrb	r3, [r7, #27]
 80012ce:	2200      	movs	r2, #0
 80012d0:	4698      	mov	r8, r3
 80012d2:	4691      	mov	r9, r2
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012e8:	7efb      	ldrb	r3, [r7, #27]
 80012ea:	2200      	movs	r2, #0
 80012ec:	461c      	mov	r4, r3
 80012ee:	4615      	mov	r5, r2
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	00eb      	lsls	r3, r5, #3
 80012fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012fe:	00e2      	lsls	r2, r4, #3
 8001300:	7efb      	ldrb	r3, [r7, #27]
 8001302:	3307      	adds	r3, #7
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	ebad 0d03 	sub.w	sp, sp, r3
 800130c:	466b      	mov	r3, sp
 800130e:	3300      	adds	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
	#endif

		cmd[0] = 0x00;
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
		cmd[1] = 0x24;
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2224      	movs	r2, #36	; 0x24
 800131c:	705a      	strb	r2, [r3, #1]
		//pec15_calc(2, cmd);
		cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 800131e:	6939      	ldr	r1, [r7, #16]
 8001320:	2002      	movs	r0, #2
 8001322:	f7ff fe5d 	bl	8000fe0 <pec15_calc>
 8001326:	4603      	mov	r3, r0
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	b29b      	uxth	r3, r3
 800132c:	b2da      	uxtb	r2, r3
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	709a      	strb	r2, [r3, #2]
		cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 8001332:	6939      	ldr	r1, [r7, #16]
 8001334:	2002      	movs	r0, #2
 8001336:	f7ff fe53 	bl	8000fe0 <pec15_calc>
 800133a:	4603      	mov	r3, r0
 800133c:	b2da      	uxtb	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	70da      	strb	r2, [r3, #3]

		cmd_index = 4;
 8001342:	2304      	movs	r3, #4
 8001344:	777b      	strb	r3, [r7, #29]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	77bb      	strb	r3, [r7, #30]
 800134a:	e03c      	b.n	80013c6 <wrcfgb+0x120>
		{
			/* the last IC on the stack. The first configuration written is */
			/* received by the last IC in the daisy chain */

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 800134c:	2300      	movs	r3, #0
 800134e:	77fb      	strb	r3, [r7, #31]
 8001350:	e012      	b.n	8001378 <wrcfgb+0xd2>
			{
				/* current_byte is the byte counter */

				cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 8001352:	7fba      	ldrb	r2, [r7, #30]
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	3b06      	subs	r3, #6
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	18d1      	adds	r1, r2, r3
 8001362:	7ffa      	ldrb	r2, [r7, #31]
 8001364:	7f7b      	ldrb	r3, [r7, #29]
 8001366:	5c89      	ldrb	r1, [r1, r2]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	54d1      	strb	r1, [r2, r3]
				cmd_index = cmd_index + 1;
 800136c:	7f7b      	ldrb	r3, [r7, #29]
 800136e:	3301      	adds	r3, #1
 8001370:	777b      	strb	r3, [r7, #29]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	3301      	adds	r3, #1
 8001376:	77fb      	strb	r3, [r7, #31]
 8001378:	7ffa      	ldrb	r2, [r7, #31]
 800137a:	7f3b      	ldrb	r3, [r7, #28]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3e8      	bcc.n	8001352 <wrcfgb+0xac>
			}
			cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 8001380:	7fba      	ldrb	r2, [r7, #30]
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	3b06      	subs	r3, #6
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	4413      	add	r3, r2
 8001390:	461a      	mov	r2, r3
 8001392:	7f3b      	ldrb	r3, [r7, #28]
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe22 	bl	8000fe0 <pec15_calc>
 800139c:	4603      	mov	r3, r0
 800139e:	81fb      	strh	r3, [r7, #14]
			cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 80013a0:	89fb      	ldrh	r3, [r7, #14]
 80013a2:	0a1b      	lsrs	r3, r3, #8
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	7f7b      	ldrb	r3, [r7, #29]
 80013a8:	b2d1      	uxtb	r1, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	54d1      	strb	r1, [r2, r3]
			cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 80013ae:	7f7b      	ldrb	r3, [r7, #29]
 80013b0:	3301      	adds	r3, #1
 80013b2:	89fa      	ldrh	r2, [r7, #14]
 80013b4:	b2d1      	uxtb	r1, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 2;
 80013ba:	7f7b      	ldrb	r3, [r7, #29]
 80013bc:	3302      	adds	r3, #2
 80013be:	777b      	strb	r3, [r7, #29]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 80013c0:	7fbb      	ldrb	r3, [r7, #30]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	77bb      	strb	r3, [r7, #30]
 80013c6:	7fbb      	ldrb	r3, [r7, #30]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1bf      	bne.n	800134c <wrcfgb+0xa6>
		}

		uint8_t rx_data;

		WakeIdle();
 80013cc:	f7ff fd82 	bl	8000ed4 <WakeIdle>
		spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 80013d0:	7ef8      	ldrb	r0, [r7, #27]
 80013d2:	f107 030d 	add.w	r3, r7, #13
 80013d6:	2200      	movs	r2, #0
 80013d8:	6939      	ldr	r1, [r7, #16]
 80013da:	f000 ffad 	bl	8002338 <spi_write_then_read_array_ltc>
 80013de:	46b5      	mov	sp, r6
#if DYNAMIC_MEM
	free(cmd);
#endif

}
 80013e0:	bf00      	nop
 80013e2:	3724      	adds	r7, #36	; 0x24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080013ea <rdcfgb>:

int8_t rdcfgb(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 80013ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	466b      	mov	r3, sp
 80013fa:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 80013fc:	2308      	movs	r3, #8
 80013fe:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	777b      	strb	r3, [r7, #29]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 8001404:	230c      	movs	r3, #12
 8001406:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 8001408:	7efb      	ldrb	r3, [r7, #27]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	3b01      	subs	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	7efb      	ldrb	r3, [r7, #27]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	461a      	mov	r2, r3
 8001416:	2300      	movs	r3, #0
 8001418:	4690      	mov	r8, r2
 800141a:	4699      	mov	r9, r3
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001428:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800142c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001430:	7efb      	ldrb	r3, [r7, #27]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	461a      	mov	r2, r3
 8001436:	2300      	movs	r3, #0
 8001438:	4614      	mov	r4, r2
 800143a:	461d      	mov	r5, r3
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	00eb      	lsls	r3, r5, #3
 8001446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800144a:	00e2      	lsls	r2, r4, #3
 800144c:	7efb      	ldrb	r3, [r7, #27]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	3307      	adds	r3, #7
 8001452:	08db      	lsrs	r3, r3, #3
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	ebad 0d03 	sub.w	sp, sp, r3
 800145a:	466b      	mov	r3, sp
 800145c:	3300      	adds	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 8001460:	2300      	movs	r3, #0
 8001462:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x26;
 8001464:	2326      	movs	r3, #38	; 0x26
 8001466:	727b      	strb	r3, [r7, #9]
	cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	4619      	mov	r1, r3
 800146e:	2002      	movs	r0, #2
 8001470:	f7ff fdb6 	bl	8000fe0 <pec15_calc>
 8001474:	4603      	mov	r3, r0
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	b29b      	uxth	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	4619      	mov	r1, r3
 8001484:	2002      	movs	r0, #2
 8001486:	f7ff fdab 	bl	8000fe0 <pec15_calc>
 800148a:	4603      	mov	r3, r0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001490:	f7ff fd20 	bl	8000ed4 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 8001494:	7f3b      	ldrb	r3, [r7, #28]
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	fb03 f202 	mul.w	r2, r3, r2
 800149c:	f107 0108 	add.w	r1, r7, #8
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2004      	movs	r0, #4
 80014a4:	f000 ff48 	bl	8002338 <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	77bb      	strb	r3, [r7, #30]
 80014ac:	e03a      	b.n	8001524 <rdcfgb+0x13a>
		{
			// executes for each LTC6804 in the daisy chain and packs the data
			// into the r_config array as well as check the received Config data
			// for any bit errors

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	77fb      	strb	r3, [r7, #31]
 80014b2:	e010      	b.n	80014d6 <rdcfgb+0xec>
			{
				r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 80014b4:	7ffa      	ldrb	r2, [r7, #31]
 80014b6:	7fbb      	ldrb	r3, [r7, #30]
 80014b8:	7f39      	ldrb	r1, [r7, #28]
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	18d1      	adds	r1, r2, r3
 80014c0:	7fbb      	ldrb	r3, [r7, #30]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	441a      	add	r2, r3
 80014c8:	7ffb      	ldrb	r3, [r7, #31]
 80014ca:	6938      	ldr	r0, [r7, #16]
 80014cc:	5c41      	ldrb	r1, [r0, r1]
 80014ce:	54d1      	strb	r1, [r2, r3]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80014d0:	7ffb      	ldrb	r3, [r7, #31]
 80014d2:	3301      	adds	r3, #1
 80014d4:	77fb      	strb	r3, [r7, #31]
 80014d6:	7ffa      	ldrb	r2, [r7, #31]
 80014d8:	7f3b      	ldrb	r3, [r7, #28]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3ea      	bcc.n	80014b4 <rdcfgb+0xca>
			}

			received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 80014de:	7fbb      	ldrb	r3, [r7, #30]
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	4413      	add	r3, r2
 80014e6:	799b      	ldrb	r3, [r3, #6]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	7fbb      	ldrb	r3, [r7, #30]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	6839      	ldr	r1, [r7, #0]
 80014f4:	440b      	add	r3, r1
 80014f6:	79db      	ldrb	r3, [r3, #7]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	4413      	add	r3, r2
 80014fc:	81fb      	strh	r3, [r7, #14]
			data_pec = pec15_calc(6, &r_config[current_ic][0]);
 80014fe:	7fbb      	ldrb	r3, [r7, #30]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	4413      	add	r3, r2
 8001506:	4619      	mov	r1, r3
 8001508:	2006      	movs	r0, #6
 800150a:	f7ff fd69 	bl	8000fe0 <pec15_calc>
 800150e:	4603      	mov	r3, r0
 8001510:	81bb      	strh	r3, [r7, #12]
			if (received_pec != data_pec)
 8001512:	89fa      	ldrh	r2, [r7, #14]
 8001514:	89bb      	ldrh	r3, [r7, #12]
 8001516:	429a      	cmp	r2, r3
 8001518:	d001      	beq.n	800151e <rdcfgb+0x134>
			{
				pec_error = -1;
 800151a:	23ff      	movs	r3, #255	; 0xff
 800151c:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 800151e:	7fbb      	ldrb	r3, [r7, #30]
 8001520:	3301      	adds	r3, #1
 8001522:	77bb      	strb	r3, [r7, #30]
 8001524:	7fba      	ldrb	r2, [r7, #30]
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	429a      	cmp	r2, r3
 800152a:	d3c0      	bcc.n	80014ae <rdcfgb+0xc4>
		}

	#if DYNAMIC_MEM
		free(rx_data);
	#endif
		return(pec_error);
 800152c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001530:	46b5      	mov	sp, r6

}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800153c <rdcv>:

uint8_t rdcv(uint8_t reg,				// Controls which cell voltage register is read back.
                     uint8_t total_ic,			// the number of ICs in the system
                     cell_data_t cell_codes[][18]	// Array of the parsed cell codes
                    )
{
 800153c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001540:	b08b      	sub	sp, #44	; 0x2c
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	603a      	str	r2, [r7, #0]
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	460b      	mov	r3, r1
 800154c:	71bb      	strb	r3, [r7, #6]
 800154e:	466b      	mov	r3, sp
 8001550:	461e      	mov	r6, r3

	const uint8_t NUM_RX_BYT = 8;
 8001552:	2308      	movs	r3, #8
 8001554:	f887 3020 	strb.w	r3, [r7, #32]
	const uint8_t BYT_IN_REG = 6;
 8001558:	2306      	movs	r3, #6
 800155a:	77fb      	strb	r3, [r7, #31]
	const uint8_t CELL_IN_REG = 3;
 800155c:	2303      	movs	r3, #3
 800155e:	77bb      	strb	r3, [r7, #30]

	uint8_t pec_error = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter=0;	//data counter
 8001566:	2300      	movs	r3, #0
 8001568:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if DYNAMIC_MEM
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 18;
 800156c:	2312      	movs	r3, #18
 800156e:	777b      	strb	r3, [r7, #29]
	uint8_t cell_data[NUM_RX_BYT * max_ic];
 8001570:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001574:	7f7a      	ldrb	r2, [r7, #29]
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	3b01      	subs	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001582:	7f7a      	ldrb	r2, [r7, #29]
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	461a      	mov	r2, r3
 800158a:	2300      	movs	r3, #0
 800158c:	4690      	mov	r8, r2
 800158e:	4699      	mov	r9, r3
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800159c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a8:	7f7a      	ldrb	r2, [r7, #29]
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	2300      	movs	r3, #0
 80015b2:	4614      	mov	r4, r2
 80015b4:	461d      	mov	r5, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	00eb      	lsls	r3, r5, #3
 80015c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015c4:	00e2      	lsls	r2, r4, #3
 80015c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015ca:	7f7a      	ldrb	r2, [r7, #29]
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	3307      	adds	r3, #7
 80015d2:	08db      	lsrs	r3, r3, #3
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	ebad 0d03 	sub.w	sp, sp, r3
 80015da:	466b      	mov	r3, sp
 80015dc:	3300      	adds	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
#endif


	if (reg == 0)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f040 8088 	bne.w	80016f8 <rdcv+0x1bc>
	{
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 80015e8:	2301      	movs	r3, #1
 80015ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80015ee:	e07d      	b.n	80016ec <rdcv+0x1b0>
		{
			data_counter = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			rdcv_reg(cell_reg, total_ic,cell_data );				 //Reads a single Cell voltage register
 80015f6:	79b9      	ldrb	r1, [r7, #6]
 80015f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f8f6 	bl	80017f0 <rdcv_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800160a:	e065      	b.n	80016d8 <rdcv+0x19c>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001612:	e02d      	b.n	8001670 <rdcv+0x134>
				{
					// loops once for each of the 3 cell voltage codes in the register

					parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 8001614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	b29a      	uxth	r2, r3
 800161e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001622:	3301      	adds	r3, #1
 8001624:	6979      	ldr	r1, [r7, #20]
 8001626:	5ccb      	ldrb	r3, [r1, r3]
 8001628:	b29b      	uxth	r3, r3
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b29b      	uxth	r3, r3
 800162e:	4413      	add	r3, r2
 8001630:	81fb      	strh	r3, [r7, #14]
					// create the parsed cell voltage code
					//cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
					cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)].voltage = parsed_cell;
 8001632:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	461a      	mov	r2, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4413      	add	r3, r2
 8001644:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001648:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800164c:	3a01      	subs	r2, #1
 800164e:	7fb8      	ldrb	r0, [r7, #30]
 8001650:	fb00 f202 	mul.w	r2, r0, r2
 8001654:	440a      	add	r2, r1
 8001656:	89f9      	ldrh	r1, [r7, #14]
 8001658:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 800165c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001660:	3302      	adds	r3, #2
 8001662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001666:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800166a:	3301      	adds	r3, #1
 800166c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001670:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001674:	7fbb      	ldrb	r3, [r7, #30]
 8001676:	429a      	cmp	r2, r3
 8001678:	d3cc      	bcc.n	8001614 <rdcv+0xd8>
					//must increment by two for each parsed cell code
				}
				received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 800167a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	5cd3      	ldrb	r3, [r2, r3]
 8001682:	b29b      	uxth	r3, r3
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b29a      	uxth	r2, r3
 8001688:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800168c:	3301      	adds	r3, #1
 800168e:	6979      	ldr	r1, [r7, #20]
 8001690:	5ccb      	ldrb	r3, [r1, r3]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4413      	add	r3, r2
 8001696:	827b      	strh	r3, [r7, #18]
				//after the 6 cell voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001698:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800169c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016a0:	fb02 f303 	mul.w	r3, r2, r3
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	441a      	add	r2, r3
 80016a8:	7ffb      	ldrb	r3, [r7, #31]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fc97 	bl	8000fe0 <pec15_calc>
 80016b2:	4603      	mov	r3, r0
 80016b4:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 80016b6:	8a7a      	ldrh	r2, [r7, #18]
 80016b8:	8a3b      	ldrh	r3, [r7, #16]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d002      	beq.n	80016c4 <rdcv+0x188>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 80016be:	23ff      	movs	r3, #255	; 0xff
 80016c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					//are detected in the serial data
				}
			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 80016c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016c8:	3302      	adds	r3, #2
 80016ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80016ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016d2:	3301      	adds	r3, #1
 80016d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80016d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d394      	bcc.n	800160c <rdcv+0xd0>
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 80016e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016e6:	3301      	adds	r3, #1
 80016e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80016ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	f67f af7d 	bls.w	80015f0 <rdcv+0xb4>
 80016f6:	e073      	b.n	80017e0 <rdcv+0x2a4>
		}
	}

	else
	{
		rdcv_reg(reg, total_ic,cell_data);
 80016f8:	79b9      	ldrb	r1, [r7, #6]
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f876 	bl	80017f0 <rdcv_reg>
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 8001704:	2300      	movs	r3, #0
 8001706:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800170a:	e064      	b.n	80017d6 <rdcv+0x29a>
		{
			// current_ic is used as the IC counter
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 800170c:	2300      	movs	r3, #0
 800170e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001712:	e02c      	b.n	800176e <rdcv+0x232>
			{
				// loops once for each of the 3 cell voltage codes in the register

				parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8); //Each cell code is received as two bytes and is combined to
 8001714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	5cd3      	ldrb	r3, [r2, r3]
 800171c:	b29a      	uxth	r2, r3
 800171e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001722:	3301      	adds	r3, #1
 8001724:	6979      	ldr	r1, [r7, #20]
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	b29b      	uxth	r3, r3
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	b29b      	uxth	r3, r3
 800172e:	4413      	add	r3, r2
 8001730:	81fb      	strh	r3, [r7, #14]
				// create the parsed cell voltage code

				//cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
				cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)].voltage = 0x0000FFFF & parsed_cell;
 8001732:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	461a      	mov	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4413      	add	r3, r2
 8001744:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001748:	79fa      	ldrb	r2, [r7, #7]
 800174a:	3a01      	subs	r2, #1
 800174c:	7fb8      	ldrb	r0, [r7, #30]
 800174e:	fb00 f202 	mul.w	r2, r0, r2
 8001752:	440a      	add	r2, r1
 8001754:	89f9      	ldrh	r1, [r7, #14]
 8001756:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter= data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 800175a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800175e:	3302      	adds	r3, #2
 8001760:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001764:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001768:	3301      	adds	r3, #1
 800176a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800176e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001772:	7fbb      	ldrb	r3, [r7, #30]
 8001774:	429a      	cmp	r2, r3
 8001776:	d3cd      	bcc.n	8001714 <rdcv+0x1d8>
				//must increment by two for each parsed cell code
			}
			received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001778:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	b29b      	uxth	r3, r3
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	b29a      	uxth	r2, r3
 8001786:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800178a:	3301      	adds	r3, #1
 800178c:	6979      	ldr	r1, [r7, #20]
 800178e:	5ccb      	ldrb	r3, [r1, r3]
 8001790:	b29b      	uxth	r3, r3
 8001792:	4413      	add	r3, r2
 8001794:	827b      	strh	r3, [r7, #18]
			//after the 6 cell voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001796:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800179a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	441a      	add	r2, r3
 80017a6:	7ffb      	ldrb	r3, [r7, #31]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fc18 	bl	8000fe0 <pec15_calc>
 80017b0:	4603      	mov	r3, r0
 80017b2:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80017b4:	8a7a      	ldrh	r2, [r7, #18]
 80017b6:	8a3b      	ldrh	r3, [r7, #16]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d002      	beq.n	80017c2 <rdcv+0x286>
			{
				pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 80017bc:	23ff      	movs	r3, #255	; 0xff
 80017be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//are detected in the serial data
			}
			data_counter= data_counter + 2;                       //Because the transmitted PEC code is 2 bytes long the data_counter
 80017c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017c6:	3302      	adds	r3, #2
 80017c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 80017cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017d0:	3301      	adds	r3, #1
 80017d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80017d6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80017da:	79bb      	ldrb	r3, [r7, #6]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d395      	bcc.n	800170c <rdcv+0x1d0>
		}
	}
#if DYNAMIC_MEM
	free(cell_data);
#endif
	return(pec_error);
 80017e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017e4:	46b5      	mov	sp, r6
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	372c      	adds	r7, #44	; 0x2c
 80017ea:	46bd      	mov	sp, r7
 80017ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080017f0 <rdcv_reg>:
*/
void rdcv_reg(uint8_t reg,			//Determines which cell voltage register is read back
                      uint8_t total_ic,		//the number of ICs in the
                      uint8_t *data			//An array of the unparsed cell codes
                     )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	603a      	str	r2, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	460b      	mov	r3, r1
 80017fe:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 8001800:	2308      	movs	r3, #8
 8001802:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d104      	bne.n	8001814 <rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 800180a:	2304      	movs	r3, #4
 800180c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800180e:	2300      	movs	r3, #0
 8001810:	723b      	strb	r3, [r7, #8]
 8001812:	e026      	b.n	8001862 <rdcv_reg+0x72>
	}
	else if (reg == 2)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d104      	bne.n	8001824 <rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 800181a:	2306      	movs	r3, #6
 800181c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800181e:	2300      	movs	r3, #0
 8001820:	723b      	strb	r3, [r7, #8]
 8001822:	e01e      	b.n	8001862 <rdcv_reg+0x72>
	}
	else if (reg == 3)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d104      	bne.n	8001834 <rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 800182a:	2308      	movs	r3, #8
 800182c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800182e:	2300      	movs	r3, #0
 8001830:	723b      	strb	r3, [r7, #8]
 8001832:	e016      	b.n	8001862 <rdcv_reg+0x72>
	}
	else if (reg == 4)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	2b04      	cmp	r3, #4
 8001838:	d104      	bne.n	8001844 <rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 800183a:	230a      	movs	r3, #10
 800183c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800183e:	2300      	movs	r3, #0
 8001840:	723b      	strb	r3, [r7, #8]
 8001842:	e00e      	b.n	8001862 <rdcv_reg+0x72>
	}
	else if (reg == 5) // LTC6813 - Cell register E
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	2b05      	cmp	r3, #5
 8001848:	d104      	bne.n	8001854 <rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 800184a:	2309      	movs	r3, #9
 800184c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800184e:	2300      	movs	r3, #0
 8001850:	723b      	strb	r3, [r7, #8]
 8001852:	e006      	b.n	8001862 <rdcv_reg+0x72>
	}
	else if (reg == 6) // LTC6813 - Cell register F
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	2b06      	cmp	r3, #6
 8001858:	d103      	bne.n	8001862 <rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 800185a:	230b      	movs	r3, #11
 800185c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800185e:	2300      	movs	r3, #0
 8001860:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	4619      	mov	r1, r3
 8001868:	2002      	movs	r0, #2
 800186a:	f7ff fbb9 	bl	8000fe0 <pec15_calc>
 800186e:	4603      	mov	r3, r0
 8001870:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001872:	89bb      	ldrh	r3, [r7, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	b29b      	uxth	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800187c:	89bb      	ldrh	r3, [r7, #12]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001882:	f7ff fb27 	bl	8000ed4 <WakeIdle>
	WakeIdle();
 8001886:	f7ff fb25 	bl	8000ed4 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	79ba      	ldrb	r2, [r7, #6]
 800188e:	fb03 f202 	mul.w	r2, r3, r2
 8001892:	f107 0108 	add.w	r1, r7, #8
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2004      	movs	r0, #4
 800189a:	f000 fd4d 	bl	8002338 <spi_write_then_read_array_ltc>
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <rdaux>:
*/
int8_t rdaux(uint8_t reg,				//Determines which GPIO voltage register is read back.
                     uint8_t total_ic,			//the number of ICs in the system
                     temp_data_t aux_codes[][GPIO_NUM]	//A two dimensional array of the gpio voltage codes.
                    )
{
 80018a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018aa:	b08d      	sub	sp, #52	; 0x34
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	603a      	str	r2, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	460b      	mov	r3, r1
 80018b6:	71bb      	strb	r3, [r7, #6]
 80018b8:	466b      	mov	r3, sp
 80018ba:	461e      	mov	r6, r3
	const uint8_t NUM_RX_BYT = 8;
 80018bc:	2308      	movs	r3, #8
 80018be:	77fb      	strb	r3, [r7, #31]
	const uint8_t BYT_IN_REG = 6;
 80018c0:	2306      	movs	r3, #6
 80018c2:	77bb      	strb	r3, [r7, #30]
	const uint8_t GPIO_IN_REG = 3;
 80018c4:	2303      	movs	r3, #3
 80018c6:	777b      	strb	r3, [r7, #29]

	uint8_t data_counter = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int8_t pec_error = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t data_pec;
#if DYNAMIC_MEM
	uint8_t *data;
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 80018d4:	230c      	movs	r3, #12
 80018d6:	773b      	strb	r3, [r7, #28]
	uint8_t data[NUM_RX_BYT * max_ic];
 80018d8:	7ffb      	ldrb	r3, [r7, #31]
 80018da:	7f3a      	ldrb	r2, [r7, #28]
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	3b01      	subs	r3, #1
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	7ffb      	ldrb	r3, [r7, #31]
 80018e6:	7f3a      	ldrb	r2, [r7, #28]
 80018e8:	fb02 f303 	mul.w	r3, r2, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	2300      	movs	r3, #0
 80018f0:	4690      	mov	r8, r2
 80018f2:	4699      	mov	r9, r3
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001900:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001904:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001908:	7ffb      	ldrb	r3, [r7, #31]
 800190a:	7f3a      	ldrb	r2, [r7, #28]
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	461a      	mov	r2, r3
 8001912:	2300      	movs	r3, #0
 8001914:	4614      	mov	r4, r2
 8001916:	461d      	mov	r5, r3
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	00eb      	lsls	r3, r5, #3
 8001922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001926:	00e2      	lsls	r2, r4, #3
 8001928:	7ffb      	ldrb	r3, [r7, #31]
 800192a:	7f3a      	ldrb	r2, [r7, #28]
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	3307      	adds	r3, #7
 8001932:	08db      	lsrs	r3, r3, #3
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	ebad 0d03 	sub.w	sp, sp, r3
 800193a:	466b      	mov	r3, sp
 800193c:	3300      	adds	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
#endif

	if (reg == 0)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 8087 	bne.w	8001a56 <rdaux+0x1b0>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 8001948:	2301      	movs	r3, #1
 800194a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800194e:	e07c      	b.n	8001a4a <rdaux+0x1a4>
		{
			data_counter = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8001956:	79b9      	ldrb	r1, [r7, #6]
 8001958:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f8fa 	bl	8001b58 <rdaux_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 8001964:	2300      	movs	r3, #0
 8001966:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800196a:	e064      	b.n	8001a36 <rdaux+0x190>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 800196c:	2300      	movs	r3, #0
 800196e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001972:	e02d      	b.n	80019d0 <rdaux+0x12a>
				{
					// loops once for each of the 3 gpio voltage codes in the register

					parsed_aux = data[data_counter] + (data[data_counter+1]<<8);              //Each gpio codes is received as two bytes and is combined to
 8001974:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	b29a      	uxth	r2, r3
 800197e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001982:	3301      	adds	r3, #1
 8001984:	6979      	ldr	r1, [r7, #20]
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	b29b      	uxth	r3, r3
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b29b      	uxth	r3, r3
 800198e:	4413      	add	r3, r2
 8001990:	81fb      	strh	r3, [r7, #14]
					// create the parsed gpio voltage code

					//aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
					aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001992:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	461a      	mov	r2, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80019a8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80019ac:	3a01      	subs	r2, #1
 80019ae:	7f78      	ldrb	r0, [r7, #29]
 80019b0:	fb00 f202 	mul.w	r2, r0, r2
 80019b4:	440a      	add	r2, r1
 80019b6:	89f9      	ldrh	r1, [r7, #14]
 80019b8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
					data_counter=data_counter+2;                        //Because gpio voltage codes are two bytes the data counter
 80019bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019c0:	3302      	adds	r3, #2
 80019c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 80019c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019ca:	3301      	adds	r3, #1
 80019cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80019d0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80019d4:	7f7b      	ldrb	r3, [r7, #29]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3cc      	bcc.n	8001974 <rdaux+0xce>
					//must increment by two for each parsed gpio voltage code
				}
				received_pec = (data[data_counter]<<8)+ data[data_counter+1];          //The received PEC for the current_ic is transmitted as the 7th and 8th
 80019da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019ec:	3301      	adds	r3, #1
 80019ee:	6979      	ldr	r1, [r7, #20]
 80019f0:	5ccb      	ldrb	r3, [r1, r3]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	827b      	strh	r3, [r7, #18]
				//after the 6 gpio voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 80019f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019fc:	7ffa      	ldrb	r2, [r7, #31]
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	441a      	add	r2, r3
 8001a06:	7fbb      	ldrb	r3, [r7, #30]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fae8 	bl	8000fe0 <pec15_calc>
 8001a10:	4603      	mov	r3, r0
 8001a12:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 8001a14:	8a7a      	ldrh	r2, [r7, #18]
 8001a16:	8a3b      	ldrh	r3, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d002      	beq.n	8001a22 <rdaux+0x17c>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 8001a1c:	23ff      	movs	r3, #255	; 0xff
 8001a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					//are detected in the received serial data
				}

				data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8001a22:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a26:	3302      	adds	r3, #2
 8001a28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 8001a2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a30:	3301      	adds	r3, #1
 8001a32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001a36:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001a3a:	79bb      	ldrb	r3, [r7, #6]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d395      	bcc.n	800196c <rdaux+0xc6>
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 8001a40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a44:	3301      	adds	r3, #1
 8001a46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001a4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	f67f af7e 	bls.w	8001950 <rdaux+0xaa>
 8001a54:	e067      	b.n	8001b26 <rdaux+0x280>
		}

	}
	else
	{
		rdaux_reg(reg, total_ic, data);
 8001a56:	79b9      	ldrb	r1, [r7, #6]
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 f87b 	bl	8001b58 <rdaux_reg>
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
 8001a66:	e05a      	b.n	8001b1e <rdaux+0x278>
		{
			// current_ic is used as an IC counter

			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
 8001a6c:	e028      	b.n	8001ac0 <rdaux+0x21a>
			{
				// once for each aux voltage in the register

				parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));        //Each gpio codes is received as two bytes and is combined to
 8001a6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	5cd3      	ldrb	r3, [r2, r3]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	6979      	ldr	r1, [r7, #20]
 8001a80:	5ccb      	ldrb	r3, [r1, r3]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	81fb      	strh	r3, [r7, #14]
				// create the parsed gpio voltage code
				//aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
				aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	461a      	mov	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	79fa      	ldrb	r2, [r7, #7]
 8001a9e:	3a01      	subs	r2, #1
 8001aa0:	7f79      	ldrb	r1, [r7, #29]
 8001aa2:	fb02 f101 	mul.w	r1, r2, r1
 8001aa6:	6a3a      	ldr	r2, [r7, #32]
 8001aa8:	440a      	add	r2, r1
 8001aaa:	89f9      	ldrh	r1, [r7, #14]
 8001aac:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
				data_counter=data_counter+2;                      //Because gpio voltage codes are two bytes the data counter
 8001ab0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	3301      	adds	r3, #1
 8001abe:	623b      	str	r3, [r7, #32]
 8001ac0:	7f7b      	ldrb	r3, [r7, #29]
 8001ac2:	6a3a      	ldr	r2, [r7, #32]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbd2      	blt.n	8001a6e <rdaux+0x1c8>
				//must increment by two for each parsed gpio voltage code
			}
			received_pec = (data[data_counter]<<8) + data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001ac8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	5cd3      	ldrb	r3, [r2, r3]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ada:	3301      	adds	r3, #1
 8001adc:	6979      	ldr	r1, [r7, #20]
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	827b      	strh	r3, [r7, #18]
			//after the 6 gpio voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
 8001ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aea:	fb02 f303 	mul.w	r3, r2, r3
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	441a      	add	r2, r3
 8001af2:	7fbb      	ldrb	r3, [r7, #30]
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fa72 	bl	8000fe0 <pec15_calc>
 8001afc:	4603      	mov	r3, r0
 8001afe:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 8001b00:	8a7a      	ldrh	r2, [r7, #18]
 8001b02:	8a3b      	ldrh	r3, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d002      	beq.n	8001b0e <rdaux+0x268>
			{
				pec_error = -1;                               //The pec_error variable is simply set negative if any PEC errors
 8001b08:	23ff      	movs	r3, #255	; 0xff
 8001b0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				//are detected in the received serial data
			}

			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8001b0e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001b12:	3302      	adds	r3, #2
 8001b14:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dba0      	blt.n	8001a68 <rdaux+0x1c2>
	}

#if DYNAMIC_MEM
	free(data);
#endif
	return (pec_error);
 8001b26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001b2a:	46b5      	mov	sp, r6
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3734      	adds	r7, #52	; 0x34
 8001b30:	46bd      	mov	sp, r7
 8001b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001b36 <adcv_delay>:

	free(data);
	return (pec_error);
}

adcv_delay(void){
 8001b36:	b580      	push	{r7, lr}
 8001b38:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001b3a:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8001b3e:	f000 fb83 	bl	8002248 <delay_u>
}
 8001b42:	bf00      	nop
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <adax_delay>:

void adax_delay(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001b4c:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8001b50:	f000 fb7a 	bl	8002248 <delay_u>

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <rdaux_reg>:
*/
void rdaux_reg(uint8_t reg,			//Determines which GPIO voltage register is read back
                       uint8_t total_ic,	//The number of ICs in the system
                       uint8_t *data		//Array of the unparsed auxiliary codes
                      )
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	603a      	str	r2, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	460b      	mov	r3, r1
 8001b66:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001b68:	2308      	movs	r3, #8
 8001b6a:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d104      	bne.n	8001b7c <rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 8001b72:	230c      	movs	r3, #12
 8001b74:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b76:	2300      	movs	r3, #0
 8001b78:	723b      	strb	r3, [r7, #8]
 8001b7a:	e01b      	b.n	8001bb4 <rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d104      	bne.n	8001b8c <rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 8001b82:	230e      	movs	r3, #14
 8001b84:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b86:	2300      	movs	r3, #0
 8001b88:	723b      	strb	r3, [r7, #8]
 8001b8a:	e013      	b.n	8001bb4 <rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d104      	bne.n	8001b9c <rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8001b92:	230d      	movs	r3, #13
 8001b94:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b96:	2300      	movs	r3, #0
 8001b98:	723b      	strb	r3, [r7, #8]
 8001b9a:	e00b      	b.n	8001bb4 <rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d104      	bne.n	8001bac <rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8001ba2:	230f      	movs	r3, #15
 8001ba4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	723b      	strb	r3, [r7, #8]
 8001baa:	e003      	b.n	8001bb4 <rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8001bac:	230c      	movs	r3, #12
 8001bae:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001bb4:	f107 0308 	add.w	r3, r7, #8
 8001bb8:	4619      	mov	r1, r3
 8001bba:	2002      	movs	r0, #2
 8001bbc:	f7ff fa10 	bl	8000fe0 <pec15_calc>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001bc4:	89bb      	ldrh	r3, [r7, #12]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001bce:	89bb      	ldrh	r3, [r7, #12]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001bd4:	f7ff f97e 	bl	8000ed4 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	79ba      	ldrb	r2, [r7, #6]
 8001bdc:	fb03 f202 	mul.w	r2, r3, r2
 8001be0:	f107 0108 	add.w	r1, r7, #8
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2004      	movs	r0, #4
 8001be8:	f000 fba6 	bl	8002338 <spi_write_then_read_array_ltc>
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <adcv>:

/*!
	\brief Starts cell voltage conversion.
*/
void adcv(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADCV[0];
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <adcv+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <adcv+0x44>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADCV);
 8001c06:	490c      	ldr	r1, [pc, #48]	; (8001c38 <adcv+0x44>)
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f7ff f9e9 	bl	8000fe0 <pec15_calc>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001c22:	f7ff f957 	bl	8000ed4 <WakeIdle>
	spi_write_array(4, cmd);
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	2004      	movs	r0, #4
 8001c2c:	f000 fb62 	bl	80022f4 <spi_write_array>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200000bc 	.word	0x200000bc

08001c3c <adax>:

/*!
	\brief Start an GPIO Conversion.
*/
void adax(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADAX[0];
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <adax+0x44>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <adax+0x44>)
 8001c4a:	785b      	ldrb	r3, [r3, #1]
 8001c4c:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADAX);
 8001c4e:	490c      	ldr	r1, [pc, #48]	; (8001c80 <adax+0x44>)
 8001c50:	2002      	movs	r0, #2
 8001c52:	f7ff f9c5 	bl	8000fe0 <pec15_calc>
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001c6a:	f7ff f933 	bl	8000ed4 <WakeIdle>
	spi_write_array(4, cmd);
 8001c6e:	463b      	mov	r3, r7
 8001c70:	4619      	mov	r1, r3
 8001c72:	2004      	movs	r0, #4
 8001c74:	f000 fb3e 	bl	80022f4 <spi_write_array>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200000c0 	.word	0x200000c0

08001c84 <calculate_power>:
}
/*!
	\brief	Calculate power from current data and Sum of Cells.
*/
void calculate_power(status_data_t *status_data)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	int32_t current = status_data->current;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	617b      	str	r3, [r7, #20]
		uint16_t voltage = status_data->IVT_voltage;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	827b      	strh	r3, [r7, #18]

		int32_t power = current * (int32_t)voltage;
 8001c98:	8a7a      	ldrh	r2, [r7, #18]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	60fb      	str	r3, [r7, #12]
		status_data->power = power;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	61da      	str	r2, [r3, #28]
}
 8001ca8:	bf00      	nop
 8001caa:	371c      	adds	r7, #28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <get_minmax_temperature>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][12]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_temperature(uint8_t total_ic, temp_data_t temp_data[][GPIO_NUM], status_data_t *status_data)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	73fb      	strb	r3, [r7, #15]
	int32_t min = temp_data[0][0].temp;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cc8:	61fb      	str	r3, [r7, #28]
	int32_t max = temp_data[0][0].temp;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cd0:	61bb      	str	r3, [r7, #24]
	uint8_t min_id = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75fb      	strb	r3, [r7, #23]
	uint8_t max_id = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0; i < total_ic; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	757b      	strb	r3, [r7, #21]
 8001cde:	e05f      	b.n	8001da0 <get_minmax_temperature+0xec>
	{
		for (uint8_t j = 0; j < GPIO_NUM; j++)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	753b      	strb	r3, [r7, #20]
 8001ce4:	e056      	b.n	8001d94 <get_minmax_temperature+0xe0>
		{

			if (temp_data[i][j].temp > max)
 8001ce6:	7d7a      	ldrb	r2, [r7, #21]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	441a      	add	r2, r3
 8001cf6:	7d3b      	ldrb	r3, [r7, #20]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d00:	461a      	mov	r2, r3
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4293      	cmp	r3, r2
 8001d06:	da18      	bge.n	8001d3a <get_minmax_temperature+0x86>
			{

				max = temp_data[i][j].temp;
 8001d08:	7d7a      	ldrb	r2, [r7, #21]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	461a      	mov	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	441a      	add	r2, r3
 8001d18:	7d3b      	ldrb	r3, [r7, #20]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d22:	61bb      	str	r3, [r7, #24]
				max_id = (i << 4) | (j & 0x0f);
 8001d24:	7d7b      	ldrb	r3, [r7, #21]
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	b25a      	sxtb	r2, r3
 8001d2a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	b25b      	sxtb	r3, r3
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	75bb      	strb	r3, [r7, #22]

			}
			if (temp_data[i][j].temp < min)
 8001d3a:	7d7a      	ldrb	r2, [r7, #21]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	461a      	mov	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	441a      	add	r2, r3
 8001d4a:	7d3b      	ldrb	r3, [r7, #20]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d54:	461a      	mov	r2, r3
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	dd18      	ble.n	8001d8e <get_minmax_temperature+0xda>
			{

				min = temp_data[i][j].temp;
 8001d5c:	7d7a      	ldrb	r2, [r7, #21]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	461a      	mov	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	441a      	add	r2, r3
 8001d6c:	7d3b      	ldrb	r3, [r7, #20]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d76:	61fb      	str	r3, [r7, #28]
				min_id = (i << 4) | (j & 0x0f);
 8001d78:	7d7b      	ldrb	r3, [r7, #21]
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	b25a      	sxtb	r2, r3
 8001d7e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	75fb      	strb	r3, [r7, #23]
		for (uint8_t j = 0; j < GPIO_NUM; j++)
 8001d8e:	7d3b      	ldrb	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	753b      	strb	r3, [r7, #20]
 8001d94:	7d3b      	ldrb	r3, [r7, #20]
 8001d96:	2b0b      	cmp	r3, #11
 8001d98:	d9a5      	bls.n	8001ce6 <get_minmax_temperature+0x32>
	for (uint8_t i = 0; i < total_ic; i++)
 8001d9a:	7d7b      	ldrb	r3, [r7, #21]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	757b      	strb	r3, [r7, #21]
 8001da0:	7d7a      	ldrb	r2, [r7, #21]
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d39b      	bcc.n	8001ce0 <get_minmax_temperature+0x2c>

			}
		}
	}
	status_data->min_temp = min;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	84da      	strh	r2, [r3, #38]	; 0x26
	status_data->max_temp = max;
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	851a      	strh	r2, [r3, #40]	; 0x28

	status_data->min_temp_id = min_id;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7dfa      	ldrb	r2, [r7, #23]
 8001dbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	status_data->max_temp_id = max_id;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7dba      	ldrb	r2, [r7, #22]
 8001dc4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8001dc8:	bf00      	nop
 8001dca:	3724      	adds	r7, #36	; 0x24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <get_minmax_voltage>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][CELL_NUM]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_voltage(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	73fb      	strb	r3, [r7, #15]
	uint16_t min = cell_data[0][0].voltage;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	82fb      	strh	r3, [r7, #22]
	uint16_t max = cell_data[0][0].voltage;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	82bb      	strh	r3, [r7, #20]
	uint8_t min_id = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	74fb      	strb	r3, [r7, #19]
	uint8_t max_id = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	74bb      	strb	r3, [r7, #18]


	for (uint8_t i = 0; i < total_ic; i++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	747b      	strb	r3, [r7, #17]
 8001dfa:	e064      	b.n	8001ec6 <get_minmax_voltage+0xf2>
	{
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	743b      	strb	r3, [r7, #16]
 8001e00:	e05b      	b.n	8001eba <get_minmax_voltage+0xe6>
		{
			if (cell_data[i][j].voltage > max)
 8001e02:	7c7a      	ldrb	r2, [r7, #17]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4413      	add	r3, r2
 8001e12:	7c3a      	ldrb	r2, [r7, #16]
 8001e14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e18:	8aba      	ldrh	r2, [r7, #20]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d216      	bcs.n	8001e4c <get_minmax_voltage+0x78>
			{
				max = cell_data[i][j].voltage;
 8001e1e:	7c7a      	ldrb	r2, [r7, #17]
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	7c3a      	ldrb	r2, [r7, #16]
 8001e30:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e34:	82bb      	strh	r3, [r7, #20]
				max_id = (i << 4) | (j & 0x0f);
 8001e36:	7c7b      	ldrb	r3, [r7, #17]
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	b25a      	sxtb	r2, r3
 8001e3c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	74bb      	strb	r3, [r7, #18]
			}
			if (cell_data[i][j].voltage < min && cell_data[i][j].voltage > 5000) //ignore cells under .5V
 8001e4c:	7c7a      	ldrb	r2, [r7, #17]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	461a      	mov	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	7c3a      	ldrb	r2, [r7, #16]
 8001e5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e62:	8afa      	ldrh	r2, [r7, #22]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d925      	bls.n	8001eb4 <get_minmax_voltage+0xe0>
 8001e68:	7c7a      	ldrb	r2, [r7, #17]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	461a      	mov	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4413      	add	r3, r2
 8001e78:	7c3a      	ldrb	r2, [r7, #16]
 8001e7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d916      	bls.n	8001eb4 <get_minmax_voltage+0xe0>
			{
				min = cell_data[i][j].voltage;
 8001e86:	7c7a      	ldrb	r2, [r7, #17]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	461a      	mov	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	4413      	add	r3, r2
 8001e96:	7c3a      	ldrb	r2, [r7, #16]
 8001e98:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e9c:	82fb      	strh	r3, [r7, #22]
				min_id = (i << 4) | (j & 0x0f);
 8001e9e:	7c7b      	ldrb	r3, [r7, #17]
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	b25a      	sxtb	r2, r3
 8001ea4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	74fb      	strb	r3, [r7, #19]
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001eb4:	7c3b      	ldrb	r3, [r7, #16]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	743b      	strb	r3, [r7, #16]
 8001eba:	7c3b      	ldrb	r3, [r7, #16]
 8001ebc:	2b11      	cmp	r3, #17
 8001ebe:	d9a0      	bls.n	8001e02 <get_minmax_voltage+0x2e>
	for (uint8_t i = 0; i < total_ic; i++)
 8001ec0:	7c7b      	ldrb	r3, [r7, #17]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	747b      	strb	r3, [r7, #17]
 8001ec6:	7c7a      	ldrb	r2, [r7, #17]
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d396      	bcc.n	8001dfc <get_minmax_voltage+0x28>
			}
		}
	}
	status_data->min_voltage = min;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	8afa      	ldrh	r2, [r7, #22]
 8001ed2:	859a      	strh	r2, [r3, #44]	; 0x2c
	status_data->max_voltage = max;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	8aba      	ldrh	r2, [r7, #20]
 8001ed8:	85da      	strh	r2, [r3, #46]	; 0x2e
	status_data->delta = max - min;
 8001eda:	8aba      	ldrh	r2, [r7, #20]
 8001edc:	8afb      	ldrh	r3, [r7, #22]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	849a      	strh	r2, [r3, #36]	; 0x24
	status_data->min_voltage_id = min_id;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7cfa      	ldrb	r2, [r7, #19]
 8001eec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	status_data->max_voltage_id = max_id;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7cba      	ldrb	r2, [r7, #18]
 8001ef4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001ef8:	bf00      	nop
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <get_duty_cycle>:

/*!
	\brief Returns the duty cycle of fan based on temperature input.
*/
uint8_t get_duty_cycle(int16_t temperature){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
	uint8_t duty_cycle;

			if (temperature > T2DC_HIGH_TEMPERATURE - 5)
 8001f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f12:	2b37      	cmp	r3, #55	; 0x37
 8001f14:	dd02      	ble.n	8001f1c <get_duty_cycle+0x18>
			{
				duty_cycle = T2DC_HIGH_DUTY_CYCLE;
 8001f16:	2364      	movs	r3, #100	; 0x64
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	e021      	b.n	8001f60 <get_duty_cycle+0x5c>
			}
			else if (temperature < T2DC_LOW_DUTY_CYCLE)
 8001f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f20:	2b59      	cmp	r3, #89	; 0x59
 8001f22:	dc02      	bgt.n	8001f2a <get_duty_cycle+0x26>
			{
				duty_cycle = T2DC_LOW_DUTY_CYCLE;
 8001f24:	235a      	movs	r3, #90	; 0x5a
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	e01a      	b.n	8001f60 <get_duty_cycle+0x5c>
			}
			else
			{
				duty_cycle = temperature * T2DC_M + T2DC_B;
 8001f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fac4 	bl	80004bc <__aeabi_i2d>
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <get_duty_cycle+0x68>)
 8001f3a:	f7fe fb29 	bl	8000590 <__aeabi_dmul>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <get_duty_cycle+0x6c>)
 8001f4c:	f7fe f96a 	bl	8000224 <__adddf3>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fdca 	bl	8000af0 <__aeabi_d2uiz>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	73fb      	strb	r3, [r7, #15]
			}

			return duty_cycle;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	3fd00000 	.word	0x3fd00000
 8001f70:	40554000 	.word	0x40554000

08001f74 <build_disch_cfg>:




void build_disch_cfg(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], uint8_t tx_config[][6],\
					 status_data_t *status_data, limit_t *limit){
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	4603      	mov	r3, r0
 8001f82:	73fb      	strb	r3, [r7, #15]
	uint16_t DCCx = 0x0000;
 8001f84:	2300      	movs	r3, #0
 8001f86:	82fb      	strh	r3, [r7, #22]
	//discharge all cells

	for (uint8_t i = 0; i < total_ic; i++){
 8001f88:	2300      	movs	r3, #0
 8001f8a:	757b      	strb	r3, [r7, #21]
 8001f8c:	e051      	b.n	8002032 <build_disch_cfg+0xbe>
		for (uint8_t j = 0; j < 12; j++){
 8001f8e:	2300      	movs	r3, #0
 8001f90:	753b      	strb	r3, [r7, #20]
 8001f92:	e02d      	b.n	8001ff0 <build_disch_cfg+0x7c>
			if (cell_data[i][j].voltage > (status_data->min_voltage + limit->tolerance)){
 8001f94:	7d7a      	ldrb	r2, [r7, #21]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	7d3a      	ldrb	r2, [r7, #20]
 8001fa6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001faa:	461a      	mov	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	8b9b      	ldrh	r3, [r3, #28]
 8001fb6:	440b      	add	r3, r1
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	dd0a      	ble.n	8001fd2 <build_disch_cfg+0x5e>
				DCCx |= (1<<j);
 8001fbc:	7d3b      	ldrb	r3, [r7, #20]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	82fb      	strh	r3, [r7, #22]
 8001fd0:	e00b      	b.n	8001fea <build_disch_cfg+0x76>
			}
			else{
				DCCx &= ~(1<<j);
 8001fd2:	7d3b      	ldrb	r3, [r7, #20]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	82fb      	strh	r3, [r7, #22]
		for (uint8_t j = 0; j < 12; j++){
 8001fea:	7d3b      	ldrb	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	753b      	strb	r3, [r7, #20]
 8001ff0:	7d3b      	ldrb	r3, [r7, #20]
 8001ff2:	2b0b      	cmp	r3, #11
 8001ff4:	d9ce      	bls.n	8001f94 <build_disch_cfg+0x20>
			}
		}
		tx_config[i][4] = (DCCx & 0x00ff);
 8001ff6:	7d7a      	ldrb	r2, [r7, #21]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	461a      	mov	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	8afa      	ldrh	r2, [r7, #22]
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	711a      	strb	r2, [r3, #4]
		tx_config[i][5] = ((DCCx >> 8) & 0x0f);
 800200c:	8afb      	ldrh	r3, [r7, #22]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29b      	uxth	r3, r3
 8002012:	b2d9      	uxtb	r1, r3
 8002014:	7d7a      	ldrb	r2, [r7, #21]
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	461a      	mov	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	f001 020f 	and.w	r2, r1, #15
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < total_ic; i++){
 800202c:	7d7b      	ldrb	r3, [r7, #21]
 800202e:	3301      	adds	r3, #1
 8002030:	757b      	strb	r3, [r7, #21]
 8002032:	7d7a      	ldrb	r2, [r7, #21]
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	429a      	cmp	r2, r3
 8002038:	d3a9      	bcc.n	8001f8e <build_disch_cfg+0x1a>
	tx_config[0][2] = 0;
	tx_config[0][3] = 0;
	tx_config[0][4] = 255;
	tx_config[0][5] =15;*/

}
 800203a:	bf00      	nop
 800203c:	bf00      	nop
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <build_disch_cfgb>:

void build_disch_cfgb(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], uint8_t tx_config[][6],\
status_data_t *status_data, limit_t *limit)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	4603      	mov	r3, r0
 8002056:	73fb      	strb	r3, [r7, #15]
	uint16_t DCCx = 0x0000;
 8002058:	2300      	movs	r3, #0
 800205a:	82fb      	strh	r3, [r7, #22]
		//discharge all cells

	for (uint8_t i = 0; i < total_ic; i++){
 800205c:	2300      	movs	r3, #0
 800205e:	757b      	strb	r3, [r7, #21]
 8002060:	e051      	b.n	8002106 <build_disch_cfgb+0xbe>
			for (uint8_t j = 12; j < CELL_NUM; j++){
 8002062:	230c      	movs	r3, #12
 8002064:	753b      	strb	r3, [r7, #20]
 8002066:	e02f      	b.n	80020c8 <build_disch_cfgb+0x80>
				if (cell_data[i][j].voltage > (status_data->min_voltage + limit->tolerance)){
 8002068:	7d7a      	ldrb	r2, [r7, #21]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	461a      	mov	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4413      	add	r3, r2
 8002078:	7d3a      	ldrb	r2, [r7, #20]
 800207a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800207e:	461a      	mov	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002084:	4619      	mov	r1, r3
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	8b9b      	ldrh	r3, [r3, #28]
 800208a:	440b      	add	r3, r1
 800208c:	429a      	cmp	r2, r3
 800208e:	dd0b      	ble.n	80020a8 <build_disch_cfgb+0x60>
					DCCx |= (1<<(j - 12));
 8002090:	7d3b      	ldrb	r3, [r7, #20]
 8002092:	3b0c      	subs	r3, #12
 8002094:	2201      	movs	r2, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	b21a      	sxth	r2, r3
 800209c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	82fb      	strh	r3, [r7, #22]
 80020a6:	e00c      	b.n	80020c2 <build_disch_cfgb+0x7a>
				}
				else{
					DCCx &= ~(1<<(j - 12));
 80020a8:	7d3b      	ldrb	r3, [r7, #20]
 80020aa:	3b0c      	subs	r3, #12
 80020ac:	2201      	movs	r2, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020bc:	4013      	ands	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	82fb      	strh	r3, [r7, #22]
			for (uint8_t j = 12; j < CELL_NUM; j++){
 80020c2:	7d3b      	ldrb	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	753b      	strb	r3, [r7, #20]
 80020c8:	7d3b      	ldrb	r3, [r7, #20]
 80020ca:	2b11      	cmp	r3, #17
 80020cc:	d9cc      	bls.n	8002068 <build_disch_cfgb+0x20>
				}
			}
			tx_config[i][0] = (DCCx & 0x0f) << 4 ;
 80020ce:	8afb      	ldrh	r3, [r7, #22]
 80020d0:	0119      	lsls	r1, r3, #4
 80020d2:	7d7a      	ldrb	r2, [r7, #21]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	461a      	mov	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	b2ca      	uxtb	r2, r1
 80020e4:	701a      	strb	r2, [r3, #0]
			tx_config[i][1] = (DCCx >> 4);
 80020e6:	8afb      	ldrh	r3, [r7, #22]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	b299      	uxth	r1, r3
 80020ec:	7d7a      	ldrb	r2, [r7, #21]
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	b2ca      	uxtb	r2, r1
 80020fe:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < total_ic; i++){
 8002100:	7d7b      	ldrb	r3, [r7, #21]
 8002102:	3301      	adds	r3, #1
 8002104:	757b      	strb	r3, [r7, #21]
 8002106:	7d7a      	ldrb	r2, [r7, #21]
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	429a      	cmp	r2, r3
 800210c:	d3a9      	bcc.n	8002062 <build_disch_cfgb+0x1a>
		}
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <CanSend>:
	}

	return offcan;
}

void CanSend(uint8_t *TxData, uint8_t identifier ){
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]

	TxHeader.Identifier = identifier;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <CanSend+0x30>)
 800212c:	6013      	str	r3, [r2, #0]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, TxData) != HAL_OK){
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4906      	ldr	r1, [pc, #24]	; (800214c <CanSend+0x30>)
 8002132:	4807      	ldr	r0, [pc, #28]	; (8002150 <CanSend+0x34>)
 8002134:	f001 fc32 	bl	800399c <HAL_FDCAN_AddMessageToTxFifoQ>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <CanSend+0x26>
	        // Transmission request Error
		Error_Handler();
 800213e:	f000 fbe3 	bl	8002908 <Error_Handler>
	}

}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000026c 	.word	0x2000026c
 8002150:	200000c8 	.word	0x200000c8

08002154 <Send_cell_data>:


void Send_cell_data(cell_data_t cell_data[][CELL_NUM]){
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

	uint8_t cell_id = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	77fb      	strb	r3, [r7, #31]
	for(int i = 0; i < IC_NUM; i++){
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
 8002164:	e068      	b.n	8002238 <Send_cell_data+0xe4>
		for(int j = 0; j < CELL_NUM; j += 3){
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	e05f      	b.n	800222c <Send_cell_data+0xd8>
			uint16_t buf = cell_data[i][j].voltage;
 800216c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	6a3a      	ldr	r2, [r7, #32]
 800217e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002182:	83bb      	strh	r3, [r7, #28]
			uint16_t buf2 = cell_data[i][j+1].voltage;
 8002184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	461a      	mov	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	6a3a      	ldr	r2, [r7, #32]
 8002196:	3201      	adds	r2, #1
 8002198:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800219c:	837b      	strh	r3, [r7, #26]
			uint16_t buf3 = cell_data[i][j+3].voltage;
 800219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	461a      	mov	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	6a3a      	ldr	r2, [r7, #32]
 80021b0:	3203      	adds	r2, #3
 80021b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021b6:	833b      	strh	r3, [r7, #24]

			uint8_t c1_1 = buf;
 80021b8:	8bbb      	ldrh	r3, [r7, #28]
 80021ba:	75fb      	strb	r3, [r7, #23]
			uint8_t c2_1 = buf >> 8;
 80021bc:	8bbb      	ldrh	r3, [r7, #28]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	75bb      	strb	r3, [r7, #22]

			uint8_t c1_2 = buf2;
 80021c4:	8b7b      	ldrh	r3, [r7, #26]
 80021c6:	757b      	strb	r3, [r7, #21]
			uint8_t c2_2 = buf2 >> 8;
 80021c8:	8b7b      	ldrh	r3, [r7, #26]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	753b      	strb	r3, [r7, #20]

			uint8_t c1_3 = buf3;
 80021d0:	8b3b      	ldrh	r3, [r7, #24]
 80021d2:	74fb      	strb	r3, [r7, #19]
			uint8_t c2_3 = buf3 >> 8;
 80021d4:	8b3b      	ldrh	r3, [r7, #24]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	b29b      	uxth	r3, r3
 80021da:	74bb      	strb	r3, [r7, #18]



			cell_id = i * 18 + j;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	00d2      	lsls	r2, r2, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	77fb      	strb	r3, [r7, #31]
			uint8_t TxData[8] = { c1_1, c2_1, c1_2, c2_2 ,c1_3, c2_3, 0, 0};
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
 80021f4:	723b      	strb	r3, [r7, #8]
 80021f6:	7dbb      	ldrb	r3, [r7, #22]
 80021f8:	727b      	strb	r3, [r7, #9]
 80021fa:	7d7b      	ldrb	r3, [r7, #21]
 80021fc:	72bb      	strb	r3, [r7, #10]
 80021fe:	7d3b      	ldrb	r3, [r7, #20]
 8002200:	72fb      	strb	r3, [r7, #11]
 8002202:	7cfb      	ldrb	r3, [r7, #19]
 8002204:	733b      	strb	r3, [r7, #12]
 8002206:	7cbb      	ldrb	r3, [r7, #18]
 8002208:	737b      	strb	r3, [r7, #13]
 800220a:	2300      	movs	r3, #0
 800220c:	73bb      	strb	r3, [r7, #14]
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]

			CanSend(&TxData, cell_id);
 8002212:	7ffa      	ldrb	r2, [r7, #31]
 8002214:	f107 0308 	add.w	r3, r7, #8
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff7e 	bl	800211c <CanSend>
			delay_u(100);
 8002220:	2064      	movs	r0, #100	; 0x64
 8002222:	f000 f811 	bl	8002248 <delay_u>
		for(int j = 0; j < CELL_NUM; j += 3){
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	3303      	adds	r3, #3
 800222a:	623b      	str	r3, [r7, #32]
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	2b11      	cmp	r3, #17
 8002230:	dd9c      	ble.n	800216c <Send_cell_data+0x18>
	for(int i = 0; i < IC_NUM; i++){
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	3301      	adds	r3, #1
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	2b00      	cmp	r3, #0
 800223c:	dd93      	ble.n	8002166 <Send_cell_data+0x12>





}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <delay_u>:
#include "conf.h"

extern SPI_HandleTypeDef hspi1;


void delay_u(uint32_t us){
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <delay_u+0x58>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <delay_u+0x58>)
 8002256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225a:	60d3      	str	r3, [r2, #12]
		    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <delay_u+0x5c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a10      	ldr	r2, [pc, #64]	; (80022a4 <delay_u+0x5c>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6013      	str	r3, [r2, #0]
		    // Get the current number of clock cycles
		    uint32_t const startTicks = DWT->CYCCNT;
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <delay_u+0x5c>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60fb      	str	r3, [r7, #12]
		    // Calculate the number of clock cycles for the desired delay
		    uint32_t const delayTicks = (SystemCoreClock / 1000000) * us;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <delay_u+0x60>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <delay_u+0x64>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	0c9a      	lsrs	r2, r3, #18
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	60bb      	str	r3, [r7, #8]
		    // Wait until the number of clock cycles has elapsed
		    while (DWT->CYCCNT - startTicks < delayTicks);
 8002282:	bf00      	nop
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <delay_u+0x5c>)
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	d8f8      	bhi.n	8002284 <delay_u+0x3c>
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000edf0 	.word	0xe000edf0
 80022a4:	e0001000 	.word	0xe0001000
 80022a8:	20000030 	.word	0x20000030
 80022ac:	431bde83 	.word	0x431bde83

080022b0 <spi_write_read_byte>:

void delay_m(uint32_t ms){
	HAL_Delay(ms);
}

uint8_t spi_write_read_byte(uint8_t wbyte){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]

	uint8_t rxByte;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2110      	movs	r1, #16
 80022be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c2:	f001 fee9 	bl	8004098 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &wbyte, &rxByte, 1, SPI_TIMEOUT);
 80022c6:	f107 020f 	add.w	r2, r7, #15
 80022ca:	1df9      	adds	r1, r7, #7
 80022cc:	f643 2398 	movw	r3, #15000	; 0x3a98
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2301      	movs	r3, #1
 80022d4:	4806      	ldr	r0, [pc, #24]	; (80022f0 <spi_write_read_byte+0x40>)
 80022d6:	f003 fa08 	bl	80056ea <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022da:	2201      	movs	r2, #1
 80022dc:	2110      	movs	r1, #16
 80022de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e2:	f001 fed9 	bl	8004098 <HAL_GPIO_WritePin>

	return rxByte;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000012c 	.word	0x2000012c

080022f4 <spi_write_array>:

uint32_t spi_write_array(uint8_t len, uint8_t *data){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002300:	2200      	movs	r2, #0
 8002302:	2110      	movs	r1, #16
 8002304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002308:	f001 fec6 	bl	8004098 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, len, SPI_TIMEOUT);
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	b29a      	uxth	r2, r3
 8002310:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002314:	6839      	ldr	r1, [r7, #0]
 8002316:	4807      	ldr	r0, [pc, #28]	; (8002334 <spi_write_array+0x40>)
 8002318:	f002 ff49 	bl	80051ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800231c:	2201      	movs	r2, #1
 800231e:	2110      	movs	r1, #16
 8002320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002324:	f001 feb8 	bl	8004098 <HAL_GPIO_WritePin>

	return 0;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000012c 	.word	0x2000012c

08002338 <spi_write_then_read_array_ltc>:

uint32_t spi_write_then_read_array_ltc(uint8_t wlen, uint8_t *wbuffer, uint8_t rlen, uint8_t *rbuffer){
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	4613      	mov	r3, r2
 8002348:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2110      	movs	r1, #16
 800234e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002352:	f001 fea1 	bl	8004098 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wbuffer, wlen, SPI_TIMEOUT);
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	b29a      	uxth	r2, r3
 800235a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	480a      	ldr	r0, [pc, #40]	; (800238c <spi_write_then_read_array_ltc+0x54>)
 8002362:	f002 ff24 	bl	80051ae <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rbuffer, rlen, SPI_TIMEOUT);
 8002366:	7bbb      	ldrb	r3, [r7, #14]
 8002368:	b29a      	uxth	r2, r3
 800236a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4806      	ldr	r0, [pc, #24]	; (800238c <spi_write_then_read_array_ltc+0x54>)
 8002372:	f003 f88a 	bl	800548a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002376:	2201      	movs	r2, #1
 8002378:	2110      	movs	r1, #16
 800237a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800237e:	f001 fe8b 	bl	8004098 <HAL_GPIO_WritePin>

	return 0;
 8002382:	2300      	movs	r3, #0

}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	2000012c 	.word	0x2000012c

08002390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002394:	f000 ff45 	bl	8003222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002398:	f000 f80d 	bl	80023b6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800239c:	f000 fa50 	bl	8002840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80023a0:	f000 fa02 	bl	80027a8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80023a4:	f000 f912 	bl	80025cc <MX_SPI1_Init>
  MX_TIM8_Init();
 80023a8:	f000 f94e 	bl	8002648 <MX_TIM8_Init>
  MX_FDCAN1_Init();
 80023ac:	f000 f844 	bl	8002438 <MX_FDCAN1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      // Here we create a FDCAN message
	  operation_main();
 80023b0:	f000 fab0 	bl	8002914 <operation_main>
    {
 80023b4:	e7fc      	b.n	80023b0 <main+0x20>

080023b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b094      	sub	sp, #80	; 0x50
 80023ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023bc:	f107 0318 	add.w	r3, r7, #24
 80023c0:	2238      	movs	r2, #56	; 0x38
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f005 fb67 	bl	8007a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80023dc:	f001 fe74 	bl	80040c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023e0:	2302      	movs	r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023ea:	2340      	movs	r3, #64	; 0x40
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f2:	f107 0318 	add.w	r3, r7, #24
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 ff0a 	bl	8004210 <HAL_RCC_OscConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002402:	f000 fa81 	bl	8002908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002406:	230f      	movs	r3, #15
 8002408:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800240a:	2301      	movs	r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f002 fa0e 	bl	8004840 <HAL_RCC_ClockConfig>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <SystemClock_Config+0x78>
  {
    Error_Handler();
 800242a:	f000 fa6d 	bl	8002908 <Error_Handler>
  }
}
 800242e:	bf00      	nop
 8002430:	3750      	adds	r7, #80	; 0x50
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan.Instance = FDCAN1;
 800243e:	4b60      	ldr	r3, [pc, #384]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002440:	4a60      	ldr	r2, [pc, #384]	; (80025c4 <MX_FDCAN1_Init+0x18c>)
 8002442:	601a      	str	r2, [r3, #0]
  hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002444:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002446:	2200      	movs	r2, #0
 8002448:	605a      	str	r2, [r3, #4]
  hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800244a:	4b5d      	ldr	r3, [pc, #372]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 8002450:	4b5b      	ldr	r3, [pc, #364]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  hfdcan.Init.AutoRetransmission = ENABLE;
 8002456:	4b5a      	ldr	r3, [pc, #360]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002458:	2201      	movs	r2, #1
 800245a:	741a      	strb	r2, [r3, #16]
  hfdcan.Init.TransmitPause = DISABLE;
 800245c:	4b58      	ldr	r3, [pc, #352]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 800245e:	2200      	movs	r2, #0
 8002460:	745a      	strb	r2, [r3, #17]
  hfdcan.Init.ProtocolException = DISABLE;
 8002462:	4b57      	ldr	r3, [pc, #348]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002464:	2200      	movs	r2, #0
 8002466:	749a      	strb	r2, [r3, #18]
  hfdcan.Init.NominalPrescaler = 1;
 8002468:	4b55      	ldr	r3, [pc, #340]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 800246a:	2201      	movs	r2, #1
 800246c:	615a      	str	r2, [r3, #20]
  hfdcan.Init.NominalSyncJumpWidth = 1;
 800246e:	4b54      	ldr	r3, [pc, #336]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002470:	2201      	movs	r2, #1
 8002472:	619a      	str	r2, [r3, #24]
  hfdcan.Init.NominalTimeSeg1 = 13;
 8002474:	4b52      	ldr	r3, [pc, #328]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002476:	220d      	movs	r2, #13
 8002478:	61da      	str	r2, [r3, #28]
  hfdcan.Init.NominalTimeSeg2 = 2;
 800247a:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 800247c:	2202      	movs	r2, #2
 800247e:	621a      	str	r2, [r3, #32]
  hfdcan.Init.DataPrescaler = 1;
 8002480:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002482:	2201      	movs	r2, #1
 8002484:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan.Init.DataSyncJumpWidth = 1;
 8002486:	4b4e      	ldr	r3, [pc, #312]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002488:	2201      	movs	r2, #1
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan.Init.DataTimeSeg1 = 1;
 800248c:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 800248e:	2201      	movs	r2, #1
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan.Init.DataTimeSeg2 = 1;
 8002492:	4b4b      	ldr	r3, [pc, #300]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002494:	2201      	movs	r2, #1
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan.Init.StdFiltersNbr = 28;
 8002498:	4b49      	ldr	r3, [pc, #292]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 800249a:	221c      	movs	r2, #28
 800249c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan.Init.ExtFiltersNbr = 0;
 800249e:	4b48      	ldr	r3, [pc, #288]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80024a4:	4b46      	ldr	r3, [pc, #280]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 80024aa:	4845      	ldr	r0, [pc, #276]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 80024ac:	f001 f830 	bl	8003510 <HAL_FDCAN_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80024b6:	f000 fa27 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef	sFilterConfig;

  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 80024ba:	2201      	movs	r2, #1
 80024bc:	2140      	movs	r1, #64	; 0x40
 80024be:	4840      	ldr	r0, [pc, #256]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 80024c0:	f001 fa0b 	bl	80038da <HAL_FDCAN_ConfigRxFifoOverwrite>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_FDCAN1_Init+0x96>
  	{
  		Error_Handler();
 80024ca:	f000 fa1d 	bl	8002908 <Error_Handler>
  	}
  	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 80024ce:	2201      	movs	r2, #1
 80024d0:	2141      	movs	r1, #65	; 0x41
 80024d2:	483b      	ldr	r0, [pc, #236]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 80024d4:	f001 fa01 	bl	80038da <HAL_FDCAN_ConfigRxFifoOverwrite>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_FDCAN1_Init+0xaa>
  	{
  		Error_Handler();
 80024de:	f000 fa13 	bl	8002908 <Error_Handler>
  	}

  	//only accept config/request can messages and sync can messages
  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80024e2:	2300      	movs	r3, #0
 80024e4:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIndex = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80024ea:	2302      	movs	r3, #2
 80024ec:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80024ee:	2301      	movs	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterID1 = CANID_CONFIG;
 80024f2:	f240 6302 	movw	r3, #1538	; 0x602
 80024f6:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterID2 = 0x7FF;
 80024f8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80024fc:	617b      	str	r3, [r7, #20]
  	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 80024fe:	463b      	mov	r3, r7
 8002500:	4619      	mov	r1, r3
 8002502:	482f      	ldr	r0, [pc, #188]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002504:	f001 f95e 	bl	80037c4 <HAL_FDCAN_ConfigFilter>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_FDCAN1_Init+0xda>
  	{
  		Error_Handler();
 800250e:	f000 f9fb 	bl	8002908 <Error_Handler>
  	}

  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002512:	2300      	movs	r3, #0
 8002514:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIndex = 1;
 8002516:	2301      	movs	r3, #1
 8002518:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800251a:	2302      	movs	r3, #2
 800251c:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800251e:	2301      	movs	r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterID1 = CANID_SYNC;
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterID2 = 0x7FF;
 8002526:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800252a:	617b      	str	r3, [r7, #20]
  	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 800252c:	463b      	mov	r3, r7
 800252e:	4619      	mov	r1, r3
 8002530:	4823      	ldr	r0, [pc, #140]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002532:	f001 f947 	bl	80037c4 <HAL_FDCAN_ConfigFilter>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_FDCAN1_Init+0x108>
  	{
  		Error_Handler();
 800253c:	f000 f9e4 	bl	8002908 <Error_Handler>
  	}

  	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 8002540:	2301      	movs	r3, #1
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2301      	movs	r3, #1
 8002546:	2202      	movs	r2, #2
 8002548:	2102      	movs	r1, #2
 800254a:	481d      	ldr	r0, [pc, #116]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 800254c:	f001 f994 	bl	8003878 <HAL_FDCAN_ConfigGlobalFilter>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_FDCAN1_Init+0x122>
  	{
  		Error_Handler();
 8002556:	f000 f9d7 	bl	8002908 <Error_Handler>
  	}

  	if(HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 800255a:	4819      	ldr	r0, [pc, #100]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 800255c:	f001 f9f6 	bl	800394c <HAL_FDCAN_Start>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_FDCAN1_Init+0x132>
  	{
  		Error_Handler();
 8002566:	f000 f9cf 	bl	8002908 <Error_Handler>
  	}
  	if(HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800256a:	2200      	movs	r2, #0
 800256c:	2101      	movs	r1, #1
 800256e:	4814      	ldr	r0, [pc, #80]	; (80025c0 <MX_FDCAN1_Init+0x188>)
 8002570:	f001 fa58 	bl	8003a24 <HAL_FDCAN_ActivateNotification>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_FDCAN1_Init+0x146>
  	{
  		Error_Handler();
 800257a:	f000 f9c5 	bl	8002908 <Error_Handler>
  	}

  	TxHeader.Identifier = 0x123; // Modify this with your identifier
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <MX_FDCAN1_Init+0x190>)
 8002580:	f240 1223 	movw	r2, #291	; 0x123
 8002584:	601a      	str	r2, [r3, #0]
  		TxHeader.IdType = FDCAN_STANDARD_ID;
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <MX_FDCAN1_Init+0x190>)
 8002588:	2200      	movs	r2, #0
 800258a:	605a      	str	r2, [r3, #4]
  		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <MX_FDCAN1_Init+0x190>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  		TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <MX_FDCAN1_Init+0x190>)
 8002594:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002598:	60da      	str	r2, [r3, #12]
  		TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <MX_FDCAN1_Init+0x190>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  		TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <MX_FDCAN1_Init+0x190>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	615a      	str	r2, [r3, #20]
  		TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <MX_FDCAN1_Init+0x190>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <MX_FDCAN1_Init+0x190>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
  		TxHeader.MessageMarker = 0;
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <MX_FDCAN1_Init+0x190>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	200000c8 	.word	0x200000c8
 80025c4:	40006400 	.word	0x40006400
 80025c8:	2000026c 	.word	0x2000026c

080025cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <MX_SPI1_Init+0x74>)
 80025d2:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <MX_SPI1_Init+0x78>)
 80025d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_SPI1_Init+0x74>)
 80025d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <MX_SPI1_Init+0x74>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <MX_SPI1_Init+0x74>)
 80025e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <MX_SPI1_Init+0x74>)
 80025ee:	2202      	movs	r2, #2
 80025f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <MX_SPI1_Init+0x74>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <MX_SPI1_Init+0x74>)
 80025fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <MX_SPI1_Init+0x74>)
 8002602:	2238      	movs	r2, #56	; 0x38
 8002604:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_SPI1_Init+0x74>)
 8002608:	2200      	movs	r2, #0
 800260a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_SPI1_Init+0x74>)
 800260e:	2200      	movs	r2, #0
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <MX_SPI1_Init+0x74>)
 8002614:	2200      	movs	r2, #0
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_SPI1_Init+0x74>)
 800261a:	2207      	movs	r2, #7
 800261c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <MX_SPI1_Init+0x74>)
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_SPI1_Init+0x74>)
 8002626:	2200      	movs	r2, #0
 8002628:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800262a:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_SPI1_Init+0x74>)
 800262c:	f002 fd14 	bl	8005058 <HAL_SPI_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002636:	f000 f967 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000012c 	.word	0x2000012c
 8002644:	40013000 	.word	0x40013000

08002648 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b09c      	sub	sp, #112	; 0x70
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800264e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002668:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
 8002678:	615a      	str	r2, [r3, #20]
 800267a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	2234      	movs	r2, #52	; 0x34
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f005 fa08 	bl	8007a98 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002688:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <MX_TIM8_Init+0x158>)
 800268a:	4a46      	ldr	r2, [pc, #280]	; (80027a4 <MX_TIM8_Init+0x15c>)
 800268c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800268e:	4b44      	ldr	r3, [pc, #272]	; (80027a0 <MX_TIM8_Init+0x158>)
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002694:	4b42      	ldr	r3, [pc, #264]	; (80027a0 <MX_TIM8_Init+0x158>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800269a:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <MX_TIM8_Init+0x158>)
 800269c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a2:	4b3f      	ldr	r3, [pc, #252]	; (80027a0 <MX_TIM8_Init+0x158>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026a8:	4b3d      	ldr	r3, [pc, #244]	; (80027a0 <MX_TIM8_Init+0x158>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026ae:	4b3c      	ldr	r3, [pc, #240]	; (80027a0 <MX_TIM8_Init+0x158>)
 80026b0:	2280      	movs	r2, #128	; 0x80
 80026b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026b4:	483a      	ldr	r0, [pc, #232]	; (80027a0 <MX_TIM8_Init+0x158>)
 80026b6:	f003 fbe7 	bl	8005e88 <HAL_TIM_Base_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80026c0:	f000 f922 	bl	8002908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80026ce:	4619      	mov	r1, r3
 80026d0:	4833      	ldr	r0, [pc, #204]	; (80027a0 <MX_TIM8_Init+0x158>)
 80026d2:	f003 fda5 	bl	8006220 <HAL_TIM_ConfigClockSource>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80026dc:	f000 f914 	bl	8002908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80026e0:	482f      	ldr	r0, [pc, #188]	; (80027a0 <MX_TIM8_Init+0x158>)
 80026e2:	f003 fc28 	bl	8005f36 <HAL_TIM_PWM_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80026ec:	f000 f90c 	bl	8002908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f0:	2300      	movs	r3, #0
 80026f2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002700:	4619      	mov	r1, r3
 8002702:	4827      	ldr	r0, [pc, #156]	; (80027a0 <MX_TIM8_Init+0x158>)
 8002704:	f004 faa8 	bl	8006c58 <HAL_TIMEx_MasterConfigSynchronization>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800270e:	f000 f8fb 	bl	8002908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002712:	2360      	movs	r3, #96	; 0x60
 8002714:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800271a:	2300      	movs	r3, #0
 800271c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800271e:	2300      	movs	r3, #0
 8002720:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800272e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002732:	2208      	movs	r2, #8
 8002734:	4619      	mov	r1, r3
 8002736:	481a      	ldr	r0, [pc, #104]	; (80027a0 <MX_TIM8_Init+0x158>)
 8002738:	f003 fc5e 	bl	8005ff8 <HAL_TIM_PWM_ConfigChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8002742:	f000 f8e1 	bl	8002908 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800275a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800276c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002776:	2300      	movs	r3, #0
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	4619      	mov	r1, r3
 8002782:	4807      	ldr	r0, [pc, #28]	; (80027a0 <MX_TIM8_Init+0x158>)
 8002784:	f004 faea 	bl	8006d5c <HAL_TIMEx_ConfigBreakDeadTime>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 800278e:	f000 f8bb 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002792:	4803      	ldr	r0, [pc, #12]	; (80027a0 <MX_TIM8_Init+0x158>)
 8002794:	f000 fb9c 	bl	8002ed0 <HAL_TIM_MspPostInit>

}
 8002798:	bf00      	nop
 800279a:	3770      	adds	r7, #112	; 0x70
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000190 	.word	0x20000190
 80027a4:	40013400 	.word	0x40013400

080027a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027ac:	4b22      	ldr	r3, [pc, #136]	; (8002838 <MX_USART2_UART_Init+0x90>)
 80027ae:	4a23      	ldr	r2, [pc, #140]	; (800283c <MX_USART2_UART_Init+0x94>)
 80027b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <MX_USART2_UART_Init+0x90>)
 80027b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027ba:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <MX_USART2_UART_Init+0x90>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <MX_USART2_UART_Init+0x90>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <MX_USART2_UART_Init+0x90>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027cc:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <MX_USART2_UART_Init+0x90>)
 80027ce:	220c      	movs	r2, #12
 80027d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <MX_USART2_UART_Init+0x90>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <MX_USART2_UART_Init+0x90>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <MX_USART2_UART_Init+0x90>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <MX_USART2_UART_Init+0x90>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ea:	4b13      	ldr	r3, [pc, #76]	; (8002838 <MX_USART2_UART_Init+0x90>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027f0:	4811      	ldr	r0, [pc, #68]	; (8002838 <MX_USART2_UART_Init+0x90>)
 80027f2:	f004 fb53 	bl	8006e9c <HAL_UART_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80027fc:	f000 f884 	bl	8002908 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002800:	2100      	movs	r1, #0
 8002802:	480d      	ldr	r0, [pc, #52]	; (8002838 <MX_USART2_UART_Init+0x90>)
 8002804:	f005 f854 	bl	80078b0 <HAL_UARTEx_SetTxFifoThreshold>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800280e:	f000 f87b 	bl	8002908 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002812:	2100      	movs	r1, #0
 8002814:	4808      	ldr	r0, [pc, #32]	; (8002838 <MX_USART2_UART_Init+0x90>)
 8002816:	f005 f889 	bl	800792c <HAL_UARTEx_SetRxFifoThreshold>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002820:	f000 f872 	bl	8002908 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002824:	4804      	ldr	r0, [pc, #16]	; (8002838 <MX_USART2_UART_Init+0x90>)
 8002826:	f005 f80a 	bl	800783e <HAL_UARTEx_DisableFifoMode>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002830:	f000 f86a 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200001dc 	.word	0x200001dc
 800283c:	40004400 	.word	0x40004400

08002840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002846:	f107 030c 	add.w	r3, r7, #12
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
 8002854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <MX_GPIO_Init+0xc0>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	4a29      	ldr	r2, [pc, #164]	; (8002900 <MX_GPIO_Init+0xc0>)
 800285c:	f043 0320 	orr.w	r3, r3, #32
 8002860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002862:	4b27      	ldr	r3, [pc, #156]	; (8002900 <MX_GPIO_Init+0xc0>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	4b24      	ldr	r3, [pc, #144]	; (8002900 <MX_GPIO_Init+0xc0>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002872:	4a23      	ldr	r2, [pc, #140]	; (8002900 <MX_GPIO_Init+0xc0>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <MX_GPIO_Init+0xc0>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <MX_GPIO_Init+0xc0>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <MX_GPIO_Init+0xc0>)
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <MX_GPIO_Init+0xc0>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	f248 0110 	movw	r1, #32784	; 0x8010
 80028a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a8:	f001 fbf6 	bl	8004098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028ac:	2200      	movs	r2, #0
 80028ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b2:	4814      	ldr	r0, [pc, #80]	; (8002904 <MX_GPIO_Init+0xc4>)
 80028b4:	f001 fbf0 	bl	8004098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 80028b8:	f248 0310 	movw	r3, #32784	; 0x8010
 80028bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028be:	2301      	movs	r3, #1
 80028c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	4619      	mov	r1, r3
 80028d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d4:	f001 fa5e 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80028d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028de:	2301      	movs	r3, #1
 80028e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	4619      	mov	r1, r3
 80028f0:	4804      	ldr	r0, [pc, #16]	; (8002904 <MX_GPIO_Init+0xc4>)
 80028f2:	f001 fa4f 	bl	8003d94 <HAL_GPIO_Init>

}
 80028f6:	bf00      	nop
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	48000400 	.word	0x48000400

08002908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800290c:	b672      	cpsid	i
}
 800290e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002910:	e7fe      	b.n	8002910 <Error_Handler+0x8>
	...

08002914 <operation_main>:
};

int charger_event_flag;
static uint8_t charger_event_counter;

void operation_main(void){
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0

	//open_AIR();
	//open_PRE();

	initialize();
 800291a:	f7fe faf0 	bl	8000efe <initialize>
	//fan_energize();
	init_slave_cfg();
 800291e:	f000 f955 	bl	8002bcc <init_slave_cfg>

	for(uint32_t i=0; i<NUMB_REASON_CODES; i++)
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	e008      	b.n	800293a <operation_main+0x26>
		{
			status_data.error_counters[i]=0;
 8002928:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <operation_main+0xb0>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	331a      	adds	r3, #26
 800292e:	2100      	movs	r1, #0
 8002930:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint32_t i=0; i<NUMB_REASON_CODES; i++)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3301      	adds	r3, #1
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b0c      	cmp	r3, #12
 800293e:	d9f3      	bls.n	8002928 <operation_main+0x14>
		}

		status_data.pec_error_counter = 0;
 8002940:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <operation_main+0xb0>)
 8002942:	2200      	movs	r2, #0
 8002944:	65da      	str	r2, [r3, #92]	; 0x5c
		status_data.pec_error_counter_last = 0;
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <operation_main+0xb0>)
 8002948:	2200      	movs	r2, #0
 800294a:	661a      	str	r2, [r3, #96]	; 0x60

		status_data.limping = 0;
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <operation_main+0xb0>)
 800294e:	2200      	movs	r2, #0
 8002950:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		status_data.recieved_IVT = 0;
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <operation_main+0xb0>)
 8002956:	2200      	movs	r2, #0
 8002958:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		status_data.opmode = 0;
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <operation_main+0xb0>)
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		status_data.opmode = (1 << 0)|(1 << 4);
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <operation_main+0xb0>)
 8002966:	2211      	movs	r2, #17
 8002968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		status_data.mode = 0;
 800296c:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <operation_main+0xb0>)
 800296e:	2200      	movs	r2, #0
 8002970:	711a      	strb	r2, [r3, #4]
	while(1){


		switch (status_data.mode){
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <operation_main+0xb0>)
 8002974:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d820      	bhi.n	80029be <operation_main+0xaa>
 800297c:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <operation_main+0x70>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	08002995 	.word	0x08002995
 8002988:	080029a3 	.word	0x080029a3
 800298c:	080029bf 	.word	0x080029bf
 8002990:	080029bf 	.word	0x080029bf
			case 0:
				core_routine(RETEST_YES);
 8002994:	2001      	movs	r0, #1
 8002996:	f000 f819 	bl	80029cc <core_routine>

				Send_cell_data(cell_data);
 800299a:	480b      	ldr	r0, [pc, #44]	; (80029c8 <operation_main+0xb4>)
 800299c:	f7ff fbda 	bl	8002154 <Send_cell_data>

				break;
 80029a0:	e00e      	b.n	80029c0 <operation_main+0xac>
			case 1:
				read_cell_voltage();
 80029a2:	f000 f8ad 	bl	8002b00 <read_cell_voltage>
				get_minmax_voltage(IC_NUM, cell_data, &status_data);
 80029a6:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <operation_main+0xb0>)
 80029a8:	4907      	ldr	r1, [pc, #28]	; (80029c8 <operation_main+0xb4>)
 80029aa:	2001      	movs	r0, #1
 80029ac:	f7ff fa12 	bl	8001dd4 <get_minmax_voltage>
				balance_routine();
 80029b0:	f000 f844 	bl	8002a3c <balance_routine>
				HAL_Delay(2000);
 80029b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029b8:	f000 fca4 	bl	8003304 <HAL_Delay>

				break;
 80029bc:	e000      	b.n	80029c0 <operation_main+0xac>
				break;
			case 3:
				//debug_routine();
				break;
			default:
				break;
 80029be:	bf00      	nop
		switch (status_data.mode){
 80029c0:	e7d7      	b.n	8002972 <operation_main+0x5e>
 80029c2:	bf00      	nop
 80029c4:	20000304 	.word	0x20000304
 80029c8:	20000290 	.word	0x20000290

080029cc <core_routine>:
		Data is checked against limits and a return value is generated.

	\return status of test_limits function (0: OK, -1 FAIL).
*/

int8_t core_routine(int32_t retest){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	empty_disch_cfg();
 80029d4:	f000 f854 	bl	8002a80 <empty_disch_cfg>
	read_cell_voltage();
 80029d8:	f000 f892 	bl	8002b00 <read_cell_voltage>
	read_temp_measurement();
 80029dc:	f000 f8ba 	bl	8002b54 <read_temp_measurement>
	get_minmax_voltage(IC_NUM, cell_data, &status_data);
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <core_routine+0x60>)
 80029e2:	4913      	ldr	r1, [pc, #76]	; (8002a30 <core_routine+0x64>)
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7ff f9f5 	bl	8001dd4 <get_minmax_voltage>
	get_minmax_temperature(IC_NUM, temp_data, &status_data);
 80029ea:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <core_routine+0x60>)
 80029ec:	4911      	ldr	r1, [pc, #68]	; (8002a34 <core_routine+0x68>)
 80029ee:	2001      	movs	r0, #1
 80029f0:	f7ff f960 	bl	8001cb4 <get_minmax_temperature>
	calculate_power(&status_data);
 80029f4:	480d      	ldr	r0, [pc, #52]	; (8002a2c <core_routine+0x60>)
 80029f6:	f7ff f945 	bl	8001c84 <calculate_power>
	set_fan_duty_cycle(get_duty_cycle(status_data.max_temp), status_data.manual_fan_dc);
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <core_routine+0x60>)
 80029fc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fa7f 	bl	8001f04 <get_duty_cycle>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <core_routine+0x60>)
 8002a0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f000 f95c 	bl	8002cd0 <set_fan_duty_cycle>
#if IVT
	calculate_soc(&status_data);
#endif


	return test_limits(&status_data, &limits, retest);
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4907      	ldr	r1, [pc, #28]	; (8002a38 <core_routine+0x6c>)
 8002a1c:	4803      	ldr	r0, [pc, #12]	; (8002a2c <core_routine+0x60>)
 8002a1e:	f000 f949 	bl	8002cb4 <test_limits>
 8002a22:	4603      	mov	r3, r0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000304 	.word	0x20000304
 8002a30:	20000290 	.word	0x20000290
 8002a34:	200002b4 	.word	0x200002b4
 8002a38:	20000000 	.word	0x20000000

08002a3c <balance_routine>:
	Discharge configuration bytes in slave_cfg_tx array are written, and
	configuration is sent to LTC-6811s. After some delay configuration is
	read back to slave_cfg_rx array.
*/
void balance_routine(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af02      	add	r7, sp, #8
	// TODO build_disch_cfg(IC_NUM, cell_data, slave_cfg_tx, &status_data, &limits);
	build_disch_cfg(IC_NUM, cell_data, slave_cfg_tx, &status_data, &limits);
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <balance_routine+0x30>)
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <balance_routine+0x34>)
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <balance_routine+0x38>)
 8002a4a:	490b      	ldr	r1, [pc, #44]	; (8002a78 <balance_routine+0x3c>)
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f7ff fa91 	bl	8001f74 <build_disch_cfg>
	build_disch_cfgb(IC_NUM, cell_data, slave_cfgb_tx, &status_data, &limits);
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <balance_routine+0x30>)
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <balance_routine+0x34>)
 8002a58:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <balance_routine+0x40>)
 8002a5a:	4907      	ldr	r1, [pc, #28]	; (8002a78 <balance_routine+0x3c>)
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f7ff faf3 	bl	8002048 <build_disch_cfgb>

	cfg_slaves();
 8002a62:	f000 f903 	bl	8002c6c <cfg_slaves>

}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	20000304 	.word	0x20000304
 8002a74:	200002e4 	.word	0x200002e4
 8002a78:	20000290 	.word	0x20000290
 8002a7c:	200002ec 	.word	0x200002ec

08002a80 <empty_disch_cfg>:

void empty_disch_cfg(void){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
	WakeUp();
 8002a86:	f7fe fa2f 	bl	8000ee8 <WakeUp>

	for(int i = 0; i < IC_NUM; i++){
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	e02a      	b.n	8002ae6 <empty_disch_cfg+0x66>
		slave_cfg_tx[i][4] = 0x00 ;
 8002a90:	4919      	ldr	r1, [pc, #100]	; (8002af8 <empty_disch_cfg+0x78>)
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 8002aa4:	4914      	ldr	r1, [pc, #80]	; (8002af8 <empty_disch_cfg+0x78>)
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3305      	adds	r3, #5
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]

		slave_cfgb_tx[i][4] = 0x00 ;
 8002ab8:	4910      	ldr	r1, [pc, #64]	; (8002afc <empty_disch_cfg+0x7c>)
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
		slave_cfgb_tx[i][5] = 0x00;
 8002acc:	490b      	ldr	r1, [pc, #44]	; (8002afc <empty_disch_cfg+0x7c>)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	440b      	add	r3, r1
 8002ada:	3305      	adds	r3, #5
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < IC_NUM; i++){
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	ddd1      	ble.n	8002a90 <empty_disch_cfg+0x10>
	}

	cfg_slaves();
 8002aec:	f000 f8be 	bl	8002c6c <cfg_slaves>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200002e4 	.word	0x200002e4
 8002afc:	200002ec 	.word	0x200002ec

08002b00 <read_cell_voltage>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_cell_voltage(void){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 8002b06:	f7fe f9ef 	bl	8000ee8 <WakeUp>
	adcv();
 8002b0a:	f7ff f873 	bl	8001bf4 <adcv>
	adcv_delay();
 8002b0e:	f7ff f812 	bl	8001b36 <adcv_delay>

	WakeIdle();
 8002b12:	f7fe f9df 	bl	8000ed4 <WakeIdle>

	for(uint8_t reg = 0; reg < 5; reg++){
 8002b16:	2300      	movs	r3, #0
 8002b18:	71fb      	strb	r3, [r7, #7]
 8002b1a:	e011      	b.n	8002b40 <read_cell_voltage+0x40>
		pec = rdcv(0, IC_NUM, cell_data);
 8002b1c:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <read_cell_voltage+0x50>)
 8002b1e:	2101      	movs	r1, #1
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7fe fd0b 	bl	800153c <rdcv>
 8002b26:	4603      	mov	r3, r0
 8002b28:	71bb      	strb	r3, [r7, #6]
		if (pec == 0) {
 8002b2a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <read_cell_voltage+0x36>
			return 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e008      	b.n	8002b48 <read_cell_voltage+0x48>
		}
		else increase_pec_counter();
 8002b36:	f000 f83b 	bl	8002bb0 <increase_pec_counter>
	for(uint8_t reg = 0; reg < 5; reg++){
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	71fb      	strb	r3, [r7, #7]
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d9ea      	bls.n	8002b1c <read_cell_voltage+0x1c>
	}
	//goto_safe_state(PEC_ERROR);
	return -1;
 8002b46:	23ff      	movs	r3, #255	; 0xff

}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000290 	.word	0x20000290

08002b54 <read_temp_measurement>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_temp_measurement(void){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 8002b5a:	f7fe f9c5 	bl	8000ee8 <WakeUp>
	adax();
 8002b5e:	f7ff f86d 	bl	8001c3c <adax>
	adax_delay();
 8002b62:	f7fe fff1 	bl	8001b48 <adax_delay>
	WakeIdle();
 8002b66:	f7fe f9b5 	bl	8000ed4 <WakeIdle>

	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	71fb      	strb	r3, [r7, #7]
 8002b6e:	e015      	b.n	8002b9c <read_temp_measurement+0x48>
			 pec = rdaux(0, IC_NUM, temp_data);  // pec = ltc6804_rdaux(0, IC_NUM, temp_data);
 8002b70:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <read_temp_measurement+0x58>)
 8002b72:	2101      	movs	r1, #1
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7fe fe96 	bl	80018a6 <rdaux>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71bb      	strb	r3, [r7, #6]
			 temp_calc(IC_NUM, temp_data); // Moved out of 'if' to execute even on pec error
 8002b7e:	490b      	ldr	r1, [pc, #44]	; (8002bac <read_temp_measurement+0x58>)
 8002b80:	2001      	movs	r0, #1
 8002b82:	f000 fa71 	bl	8003068 <temp_calc>
			if (pec == 0) {
 8002b86:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <read_temp_measurement+0x3e>
				return 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e008      	b.n	8002ba4 <read_temp_measurement+0x50>
			} else {
				increase_pec_counter();
 8002b92:	f000 f80d 	bl	8002bb0 <increase_pec_counter>
	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	71fb      	strb	r3, [r7, #7]
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d9e6      	bls.n	8002b70 <read_temp_measurement+0x1c>
			}
		}
		//goto_safe_state(PEC_ERROR);
		return -1;
 8002ba2:	23ff      	movs	r3, #255	; 0xff

}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	200002b4 	.word	0x200002b4

08002bb0 <increase_pec_counter>:

void increase_pec_counter(void){
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
	status_data.pec_error_counter+=1;
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <increase_pec_counter+0x18>)
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb8:	3301      	adds	r3, #1
 8002bba:	4a03      	ldr	r2, [pc, #12]	; (8002bc8 <increase_pec_counter+0x18>)
 8002bbc:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	20000304 	.word	0x20000304

08002bcc <init_slave_cfg>:
void init_slave_cfg(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < IC_NUM; i++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	71fb      	strb	r3, [r7, #7]
 8002bd6:	e03d      	b.n	8002c54 <init_slave_cfg+0x88>
	{
		slave_cfg_tx[i][0] = 0xfe;
 8002bd8:	79fa      	ldrb	r2, [r7, #7]
 8002bda:	4923      	ldr	r1, [pc, #140]	; (8002c68 <init_slave_cfg+0x9c>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	440b      	add	r3, r1
 8002be6:	22fe      	movs	r2, #254	; 0xfe
 8002be8:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][1] = 0x00;
 8002bea:	79fa      	ldrb	r2, [r7, #7]
 8002bec:	491e      	ldr	r1, [pc, #120]	; (8002c68 <init_slave_cfg+0x9c>)
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][2] = 0x00;
 8002bfe:	79fa      	ldrb	r2, [r7, #7]
 8002c00:	4919      	ldr	r1, [pc, #100]	; (8002c68 <init_slave_cfg+0x9c>)
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][3] = 0x00;
 8002c12:	79fa      	ldrb	r2, [r7, #7]
 8002c14:	4914      	ldr	r1, [pc, #80]	; (8002c68 <init_slave_cfg+0x9c>)
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	440b      	add	r3, r1
 8002c20:	3303      	adds	r3, #3
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][4] = 0x00;
 8002c26:	79fa      	ldrb	r2, [r7, #7]
 8002c28:	490f      	ldr	r1, [pc, #60]	; (8002c68 <init_slave_cfg+0x9c>)
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	440b      	add	r3, r1
 8002c34:	3304      	adds	r3, #4
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 8002c3a:	79fa      	ldrb	r2, [r7, #7]
 8002c3c:	490a      	ldr	r1, [pc, #40]	; (8002c68 <init_slave_cfg+0x9c>)
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	440b      	add	r3, r1
 8002c48:	3305      	adds	r3, #5
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < IC_NUM; i++)
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	3301      	adds	r3, #1
 8002c52:	71fb      	strb	r3, [r7, #7]
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0be      	beq.n	8002bd8 <init_slave_cfg+0xc>
	}
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	200002e4 	.word	0x200002e4

08002c6c <cfg_slaves>:

void cfg_slaves(void){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	WakeUp();
 8002c70:	f7fe f93a 	bl	8000ee8 <WakeUp>
	wrcfg(IC_NUM, slave_cfg_tx);
 8002c74:	490b      	ldr	r1, [pc, #44]	; (8002ca4 <cfg_slaves+0x38>)
 8002c76:	2001      	movs	r0, #1
 8002c78:	f7fe f9e6 	bl	8001048 <wrcfg>
	WakeUp();
 8002c7c:	f7fe f934 	bl	8000ee8 <WakeUp>
	wrcfgb(IC_NUM, slave_cfgb_tx); //TODO
 8002c80:	4909      	ldr	r1, [pc, #36]	; (8002ca8 <cfg_slaves+0x3c>)
 8002c82:	2001      	movs	r0, #1
 8002c84:	f7fe fb0f 	bl	80012a6 <wrcfgb>
	delay_u(500);
 8002c88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c8c:	f7ff fadc 	bl	8002248 <delay_u>
	rdcfg(IC_NUM, slave_cfg_rx);
 8002c90:	4906      	ldr	r1, [pc, #24]	; (8002cac <cfg_slaves+0x40>)
 8002c92:	2001      	movs	r0, #1
 8002c94:	f7fe fa6e 	bl	8001174 <rdcfg>
	rdcfgb(IC_NUM, slave_cfgb_rx);
 8002c98:	4905      	ldr	r1, [pc, #20]	; (8002cb0 <cfg_slaves+0x44>)
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f7fe fba5 	bl	80013ea <rdcfgb>
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	200002e4 	.word	0x200002e4
 8002ca8:	200002ec 	.word	0x200002ec
 8002cac:	200002f4 	.word	0x200002f4
 8002cb0:	200002fc 	.word	0x200002fc

08002cb4 <test_limits>:

int8_t test_limits(status_data_t *status_data, limit_t *limit, int32_t retest){
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
	{
		status_data->error_counters[OVERTEMP]--;
	}
#endif
*/
	return 0;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <set_fan_duty_cycle>:
void pwm_init(void){
	TIM8->CCR3 = INIT_DUTY_VALUE;
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
}

void set_fan_duty_cycle(uint8_t dc, int manual_mode_bit){
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	6039      	str	r1, [r7, #0]
 8002cda:	71fb      	strb	r3, [r7, #7]
	if (dc >= 100) {
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	2b63      	cmp	r3, #99	; 0x63
 8002ce0:	d902      	bls.n	8002ce8 <set_fan_duty_cycle+0x18>
			dc = 100;
 8002ce2:	2364      	movs	r3, #100	; 0x64
 8002ce4:	71fb      	strb	r3, [r7, #7]
 8002ce6:	e004      	b.n	8002cf2 <set_fan_duty_cycle+0x22>
		} else if (dc <= 0) {
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <set_fan_duty_cycle+0x22>
			dc = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	71fb      	strb	r3, [r7, #7]
		}

		if (manual_mode_bit == 0) {
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <set_fan_duty_cycle+0x2e>
			TIM8->CCR3 = INIT_DUTY_VALUE;
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <set_fan_duty_cycle+0x3c>)
 8002cfa:	221e      	movs	r2, #30
 8002cfc:	63da      	str	r2, [r3, #60]	; 0x3c
		}
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40013400 	.word	0x40013400

08002d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <HAL_MspInit+0x44>)
 8002d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1a:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <HAL_MspInit+0x44>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6613      	str	r3, [r2, #96]	; 0x60
 8002d22:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <HAL_MspInit+0x44>)
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_MspInit+0x44>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <HAL_MspInit+0x44>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6593      	str	r3, [r2, #88]	; 0x58
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_MspInit+0x44>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000

08002d58 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b09a      	sub	sp, #104	; 0x68
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d70:	f107 0310 	add.w	r3, r7, #16
 8002d74:	2244      	movs	r2, #68	; 0x44
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 fe8d 	bl	8007a98 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a20      	ldr	r2, [pc, #128]	; (8002e04 <HAL_FDCAN_MspInit+0xac>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d139      	bne.n	8002dfc <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d92:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d94:	f107 0310 	add.w	r3, r7, #16
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 ff6d 	bl	8004c78 <HAL_RCCEx_PeriphCLKConfig>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002da4:	f7ff fdb0 	bl	8002908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_FDCAN_MspInit+0xb0>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	4a16      	ldr	r2, [pc, #88]	; (8002e08 <HAL_FDCAN_MspInit+0xb0>)
 8002dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002db2:	6593      	str	r3, [r2, #88]	; 0x58
 8002db4:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <HAL_FDCAN_MspInit+0xb0>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_FDCAN_MspInit+0xb0>)
 8002dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc4:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <HAL_FDCAN_MspInit+0xb0>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_FDCAN_MspInit+0xb0>)
 8002dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002dd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002ddc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dde:	2302      	movs	r3, #2
 8002de0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de6:	2300      	movs	r3, #0
 8002de8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002dea:	2309      	movs	r3, #9
 8002dec:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002df2:	4619      	mov	r1, r3
 8002df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df8:	f000 ffcc 	bl	8003d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002dfc:	bf00      	nop
 8002dfe:	3768      	adds	r7, #104	; 0x68
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40006400 	.word	0x40006400
 8002e08:	40021000 	.word	0x40021000

08002e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <HAL_SPI_MspInit+0x7c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d128      	bne.n	8002e80 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <HAL_SPI_MspInit+0x80>)
 8002e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e32:	4a16      	ldr	r2, [pc, #88]	; (8002e8c <HAL_SPI_MspInit+0x80>)
 8002e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e38:	6613      	str	r3, [r2, #96]	; 0x60
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_SPI_MspInit+0x80>)
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e46:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_SPI_MspInit+0x80>)
 8002e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4a:	4a10      	ldr	r2, [pc, #64]	; (8002e8c <HAL_SPI_MspInit+0x80>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <HAL_SPI_MspInit+0x80>)
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e5e:	23e0      	movs	r3, #224	; 0xe0
 8002e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e6e:	2305      	movs	r3, #5
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e72:	f107 0314 	add.w	r3, r7, #20
 8002e76:	4619      	mov	r1, r3
 8002e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e7c:	f000 ff8a 	bl	8003d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e80:	bf00      	nop
 8002e82:	3728      	adds	r7, #40	; 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40013000 	.word	0x40013000
 8002e8c:	40021000 	.word	0x40021000

08002e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <HAL_TIM_Base_MspInit+0x38>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d10b      	bne.n	8002eba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <HAL_TIM_Base_MspInit+0x3c>)
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_TIM_Base_MspInit+0x3c>)
 8002ea8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eac:	6613      	str	r3, [r2, #96]	; 0x60
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <HAL_TIM_Base_MspInit+0x3c>)
 8002eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40013400 	.word	0x40013400
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 030c 	add.w	r3, r7, #12
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a11      	ldr	r2, [pc, #68]	; (8002f34 <HAL_TIM_MspPostInit+0x64>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d11b      	bne.n	8002f2a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <HAL_TIM_MspPostInit+0x68>)
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <HAL_TIM_MspPostInit+0x68>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_TIM_MspPostInit+0x68>)
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PB5     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1e:	f107 030c 	add.w	r3, r7, #12
 8002f22:	4619      	mov	r1, r3
 8002f24:	4805      	ldr	r0, [pc, #20]	; (8002f3c <HAL_TIM_MspPostInit+0x6c>)
 8002f26:	f000 ff35 	bl	8003d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002f2a:	bf00      	nop
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40013400 	.word	0x40013400
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	48000400 	.word	0x48000400

08002f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b09a      	sub	sp, #104	; 0x68
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f58:	f107 0310 	add.w	r3, r7, #16
 8002f5c:	2244      	movs	r2, #68	; 0x44
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f004 fd99 	bl	8007a98 <memset>
  if(huart->Instance==USART2)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_UART_MspInit+0xa8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d136      	bne.n	8002fde <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f70:	2302      	movs	r3, #2
 8002f72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f78:	f107 0310 	add.w	r3, r7, #16
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 fe7b 	bl	8004c78 <HAL_RCCEx_PeriphCLKConfig>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f88:	f7ff fcbe 	bl	8002908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_UART_MspInit+0xac>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	4a16      	ldr	r2, [pc, #88]	; (8002fec <HAL_UART_MspInit+0xac>)
 8002f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f96:	6593      	str	r3, [r2, #88]	; 0x58
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <HAL_UART_MspInit+0xac>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_UART_MspInit+0xac>)
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa8:	4a10      	ldr	r2, [pc, #64]	; (8002fec <HAL_UART_MspInit+0xac>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <HAL_UART_MspInit+0xac>)
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002fbc:	230c      	movs	r3, #12
 8002fbe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fcc:	2307      	movs	r3, #7
 8002fce:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fda:	f000 fedb 	bl	8003d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002fde:	bf00      	nop
 8002fe0:	3768      	adds	r7, #104	; 0x68
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40004400 	.word	0x40004400
 8002fec:	40021000 	.word	0x40021000

08002ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ff4:	e7fe      	b.n	8002ff4 <NMI_Handler+0x4>

08002ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ffa:	e7fe      	b.n	8002ffa <HardFault_Handler+0x4>

08002ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003000:	e7fe      	b.n	8003000 <MemManage_Handler+0x4>

08003002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003006:	e7fe      	b.n	8003006 <BusFault_Handler+0x4>

08003008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800300c:	e7fe      	b.n	800300c <UsageFault_Handler+0x4>

0800300e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800303c:	f000 f944 	bl	80032c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}

08003044 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <SystemInit+0x20>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	4a05      	ldr	r2, [pc, #20]	; (8003064 <SystemInit+0x20>)
 8003050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <temp_calc>:





void temp_calc(uint8_t total_ic,  temp_data_t temp_data[][GPIO_NUM]){ //fix arguments
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	6039      	str	r1, [r7, #0]
 8003072:	71fb      	strb	r3, [r7, #7]
	float v, r, vv , t;
	for(int i = 0; i < total_ic; i++){
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	e091      	b.n	800319e <temp_calc+0x136>
		for(int j = 0; j < GPIO_NUM; j++){
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e087      	b.n	8003190 <temp_calc+0x128>
			//vv =  ic[i].aux.a_codes[j];
			vv = temp_data[i][j].raw;
 8003080:	69fa      	ldr	r2, [r7, #28]
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	461a      	mov	r2, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4413      	add	r3, r2
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309e:	edc7 7a05 	vstr	s15, [r7, #20]
			v = vv/10000;
 80030a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80030a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80031c8 <temp_calc+0x160>
 80030aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030ae:	edc7 7a04 	vstr	s15, [r7, #16]
			r = (v*10000)/(3-v);
 80030b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80030b6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80031c8 <temp_calc+0x160>
 80030ba:	ee67 6a87 	vmul.f32	s13, s15, s14
 80030be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80030c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80030c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ce:	edc7 7a03 	vstr	s15, [r7, #12]
			t = log(r/10000);
 80030d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80030d6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80031c8 <temp_calc+0x160>
 80030da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80030de:	ee16 0a90 	vmov	r0, s13
 80030e2:	f7fd f9fd 	bl	80004e0 <__aeabi_f2d>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	ec43 2b10 	vmov	d0, r2, r3
 80030ee:	f004 fcdb 	bl	8007aa8 <log>
 80030f2:	ec53 2b10 	vmov	r2, r3, d0
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	f7fd fd19 	bl	8000b30 <__aeabi_d2f>
 80030fe:	4603      	mov	r3, r0
 8003100:	60bb      	str	r3, [r7, #8]
			    t = t / 3660;
 8003102:	ed97 7a02 	vldr	s14, [r7, #8]
 8003106:	eddf 6a31 	vldr	s13, [pc, #196]	; 80031cc <temp_calc+0x164>
 800310a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800310e:	edc7 7a02 	vstr	s15, [r7, #8]
			    t = t + 1/298.15;
 8003112:	68b8      	ldr	r0, [r7, #8]
 8003114:	f7fd f9e4 	bl	80004e0 <__aeabi_f2d>
 8003118:	a327      	add	r3, pc, #156	; (adr r3, 80031b8 <temp_calc+0x150>)
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f7fd f881 	bl	8000224 <__adddf3>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	f7fd fd01 	bl	8000b30 <__aeabi_d2f>
 800312e:	4603      	mov	r3, r0
 8003130:	60bb      	str	r3, [r7, #8]
			    t = 1/t;
 8003132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003136:	ed97 7a02 	vldr	s14, [r7, #8]
 800313a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800313e:	edc7 7a02 	vstr	s15, [r7, #8]

			    t -= 273.15;
 8003142:	68b8      	ldr	r0, [r7, #8]
 8003144:	f7fd f9cc 	bl	80004e0 <__aeabi_f2d>
 8003148:	a31d      	add	r3, pc, #116	; (adr r3, 80031c0 <temp_calc+0x158>)
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f7fd f867 	bl	8000220 <__aeabi_dsub>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f7fd fce9 	bl	8000b30 <__aeabi_d2f>
 800315e:	4603      	mov	r3, r0
 8003160:	60bb      	str	r3, [r7, #8]
		temp_data[i][j].temp = (int)t;
 8003162:	edd7 7a02 	vldr	s15, [r7, #8]
 8003166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	461a      	mov	r2, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	441a      	add	r2, r3
 800317a:	ee17 3a90 	vmov	r3, s15
 800317e:	b219      	sxth	r1, r3
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	460a      	mov	r2, r1
 8003188:	805a      	strh	r2, [r3, #2]
		for(int j = 0; j < GPIO_NUM; j++){
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	3301      	adds	r3, #1
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b0b      	cmp	r3, #11
 8003194:	f77f af74 	ble.w	8003080 <temp_calc+0x18>
	for(int i = 0; i < total_ic; i++){
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	3301      	adds	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	f6ff af69 	blt.w	800307a <temp_calc+0x12>
		//	ic[i].aux.s_temp[j] = t;

		}
	}

}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	f3af 8000 	nop.w
 80031b8:	dcb5db83 	.word	0xdcb5db83
 80031bc:	3f6b79e1 	.word	0x3f6b79e1
 80031c0:	66666666 	.word	0x66666666
 80031c4:	40711266 	.word	0x40711266
 80031c8:	461c4000 	.word	0x461c4000
 80031cc:	4564c000 	.word	0x4564c000

080031d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031d4:	480d      	ldr	r0, [pc, #52]	; (800320c <LoopForever+0x6>)
  ldr r1, =_edata
 80031d6:	490e      	ldr	r1, [pc, #56]	; (8003210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031d8:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <LoopForever+0xe>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80031dc:	e002      	b.n	80031e4 <LoopCopyDataInit>

080031de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e2:	3304      	adds	r3, #4

080031e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e8:	d3f9      	bcc.n	80031de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ea:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031ec:	4c0b      	ldr	r4, [pc, #44]	; (800321c <LoopForever+0x16>)
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f0:	e001      	b.n	80031f6 <LoopFillZerobss>

080031f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f4:	3204      	adds	r2, #4

080031f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f8:	d3fb      	bcc.n	80031f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031fa:	f7ff ff23 	bl	8003044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031fe:	f004 fc27 	bl	8007a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003202:	f7ff f8c5 	bl	8002390 <main>

08003206 <LoopForever>:

LoopForever:
    b LoopForever
 8003206:	e7fe      	b.n	8003206 <LoopForever>
  ldr   r0, =_estack
 8003208:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800320c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003210:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003214:	0800832c 	.word	0x0800832c
  ldr r2, =_sbss
 8003218:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800321c:	200003d4 	.word	0x200003d4

08003220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003220:	e7fe      	b.n	8003220 <ADC1_2_IRQHandler>

08003222 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800322c:	2003      	movs	r0, #3
 800322e:	f000 f93d 	bl	80034ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003232:	2000      	movs	r0, #0
 8003234:	f000 f80e 	bl	8003254 <HAL_InitTick>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	71fb      	strb	r3, [r7, #7]
 8003242:	e001      	b.n	8003248 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003244:	f7ff fd64 	bl	8002d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003248:	79fb      	ldrb	r3, [r7, #7]

}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_InitTick+0x68>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d022      	beq.n	80032ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <HAL_InitTick+0x6c>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_InitTick+0x68>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003274:	fbb1 f3f3 	udiv	r3, r1, r3
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	4618      	mov	r0, r3
 800327e:	f000 f93a 	bl	80034f6 <HAL_SYSTICK_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10f      	bne.n	80032a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	d809      	bhi.n	80032a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800328e:	2200      	movs	r2, #0
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	f04f 30ff 	mov.w	r0, #4294967295
 8003296:	f000 f914 	bl	80034c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800329a:	4a0a      	ldr	r2, [pc, #40]	; (80032c4 <HAL_InitTick+0x70>)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	e007      	b.n	80032b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	e004      	b.n	80032b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
 80032ac:	e001      	b.n	80032b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000038 	.word	0x20000038
 80032c0:	20000030 	.word	0x20000030
 80032c4:	20000034 	.word	0x20000034

080032c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_IncTick+0x1c>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_IncTick+0x20>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4413      	add	r3, r2
 80032d6:	4a03      	ldr	r2, [pc, #12]	; (80032e4 <HAL_IncTick+0x1c>)
 80032d8:	6013      	str	r3, [r2, #0]
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	200003d0 	.word	0x200003d0
 80032e8:	20000038 	.word	0x20000038

080032ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_GetTick+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	200003d0 	.word	0x200003d0

08003304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff ffee 	bl	80032ec <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d004      	beq.n	8003328 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_Delay+0x40>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003328:	bf00      	nop
 800332a:	f7ff ffdf 	bl	80032ec <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	429a      	cmp	r2, r3
 8003338:	d8f7      	bhi.n	800332a <HAL_Delay+0x26>
  {
  }
}
 800333a:	bf00      	nop
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000038 	.word	0x20000038

08003348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003364:	4013      	ands	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337a:	4a04      	ldr	r2, [pc, #16]	; (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	60d3      	str	r3, [r2, #12]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0307 	and.w	r3, r3, #7
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	6039      	str	r1, [r7, #0]
 80033b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	db0a      	blt.n	80033d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	490c      	ldr	r1, [pc, #48]	; (80033f8 <__NVIC_SetPriority+0x4c>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	0112      	lsls	r2, r2, #4
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	440b      	add	r3, r1
 80033d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d4:	e00a      	b.n	80033ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	4908      	ldr	r1, [pc, #32]	; (80033fc <__NVIC_SetPriority+0x50>)
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	3b04      	subs	r3, #4
 80033e4:	0112      	lsls	r2, r2, #4
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	440b      	add	r3, r1
 80033ea:	761a      	strb	r2, [r3, #24]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000e100 	.word	0xe000e100
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f1c3 0307 	rsb	r3, r3, #7
 800341a:	2b04      	cmp	r3, #4
 800341c:	bf28      	it	cs
 800341e:	2304      	movcs	r3, #4
 8003420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3304      	adds	r3, #4
 8003426:	2b06      	cmp	r3, #6
 8003428:	d902      	bls.n	8003430 <NVIC_EncodePriority+0x30>
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3b03      	subs	r3, #3
 800342e:	e000      	b.n	8003432 <NVIC_EncodePriority+0x32>
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	f04f 32ff 	mov.w	r2, #4294967295
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43da      	mvns	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	401a      	ands	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003448:	f04f 31ff 	mov.w	r1, #4294967295
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	43d9      	mvns	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	4313      	orrs	r3, r2
         );
}
 800345a:	4618      	mov	r0, r3
 800345c:	3724      	adds	r7, #36	; 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003478:	d301      	bcc.n	800347e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347a:	2301      	movs	r3, #1
 800347c:	e00f      	b.n	800349e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347e:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <SysTick_Config+0x40>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003486:	210f      	movs	r1, #15
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	f7ff ff8e 	bl	80033ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <SysTick_Config+0x40>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <SysTick_Config+0x40>)
 8003498:	2207      	movs	r2, #7
 800349a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	e000e010 	.word	0xe000e010

080034ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff47 	bl	8003348 <__NVIC_SetPriorityGrouping>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034d0:	f7ff ff5e 	bl	8003390 <__NVIC_GetPriorityGrouping>
 80034d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	6978      	ldr	r0, [r7, #20]
 80034dc:	f7ff ff90 	bl	8003400 <NVIC_EncodePriority>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff5f 	bl	80033ac <__NVIC_SetPriority>
}
 80034ee:	bf00      	nop
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffb2 	bl	8003468 <SysTick_Config>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e147      	b.n	80037b2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff fc0e 	bl	8002d58 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0210 	bic.w	r2, r2, #16
 800354a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800354c:	f7ff fece 	bl	80032ec <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003552:	e012      	b.n	800357a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003554:	f7ff feca 	bl	80032ec <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b0a      	cmp	r3, #10
 8003560:	d90b      	bls.n	800357a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	f043 0201 	orr.w	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2203      	movs	r2, #3
 8003572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e11b      	b.n	80037b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b08      	cmp	r3, #8
 8003586:	d0e5      	beq.n	8003554 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003598:	f7ff fea8 	bl	80032ec <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800359e:	e012      	b.n	80035c6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80035a0:	f7ff fea4 	bl	80032ec <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b0a      	cmp	r3, #10
 80035ac:	d90b      	bls.n	80035c6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b2:	f043 0201 	orr.w	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2203      	movs	r2, #3
 80035be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e0f5      	b.n	80037b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0e5      	beq.n	80035a0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0202 	orr.w	r2, r2, #2
 80035e2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a74      	ldr	r2, [pc, #464]	; (80037bc <HAL_FDCAN_Init+0x2ac>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d103      	bne.n	80035f6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80035ee:	4a74      	ldr	r2, [pc, #464]	; (80037c0 <HAL_FDCAN_Init+0x2b0>)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	7c1b      	ldrb	r3, [r3, #16]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d108      	bne.n	8003610 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800360c:	619a      	str	r2, [r3, #24]
 800360e:	e007      	b.n	8003620 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800361e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	7c5b      	ldrb	r3, [r3, #17]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d108      	bne.n	800363a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003636:	619a      	str	r2, [r3, #24]
 8003638:	e007      	b.n	800364a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699a      	ldr	r2, [r3, #24]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003648:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7c9b      	ldrb	r3, [r3, #18]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d108      	bne.n	8003664 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003660:	619a      	str	r2, [r3, #24]
 8003662:	e007      	b.n	8003674 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003672:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003698:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0210 	bic.w	r2, r2, #16
 80036a8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d108      	bne.n	80036c4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699a      	ldr	r2, [r3, #24]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0204 	orr.w	r2, r2, #4
 80036c0:	619a      	str	r2, [r3, #24]
 80036c2:	e02c      	b.n	800371e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d028      	beq.n	800371e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d01c      	beq.n	800370e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036e2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0210 	orr.w	r2, r2, #16
 80036f2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d110      	bne.n	800371e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0220 	orr.w	r2, r2, #32
 800370a:	619a      	str	r2, [r3, #24]
 800370c:	e007      	b.n	800371e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0220 	orr.w	r2, r2, #32
 800371c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	3b01      	subs	r3, #1
 8003724:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	3b01      	subs	r3, #1
 800372c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800372e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003736:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	3b01      	subs	r3, #1
 8003740:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003746:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003748:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003752:	d115      	bne.n	8003780 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	3b01      	subs	r3, #1
 8003760:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003762:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	3b01      	subs	r3, #1
 800376a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800376c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	3b01      	subs	r3, #1
 8003776:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800377c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800377e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa2a 	bl	8003bf0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40006400 	.word	0x40006400
 80037c0:	40006500 	.word	0x40006500

080037c4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037d4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d002      	beq.n	80037e2 <HAL_FDCAN_ConfigFilter+0x1e>
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d13d      	bne.n	800385e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d119      	bne.n	800381e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80037f6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80037fe:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e01d      	b.n	800385a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	075a      	lsls	r2, r3, #29
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	079a      	lsls	r2, r3, #30
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4413      	add	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3304      	adds	r3, #4
 8003852:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	e006      	b.n	800386c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003862:	f043 0202 	orr.w	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d116      	bne.n	80038c0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800389a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	011a      	lsls	r2, r3, #4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	431a      	orrs	r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	431a      	orrs	r2, r3
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e006      	b.n	80038ce <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c4:	f043 0204 	orr.w	r2, r3, #4
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
  }
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 80038da:	b480      	push	{r7}
 80038dc:	b085      	sub	sp, #20
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d11f      	bne.n	8003932 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d10d      	bne.n	8003914 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003900:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	025a      	lsls	r2, r3, #9
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003912:	e00c      	b.n	800392e <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800391c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	021a      	lsls	r2, r3, #8
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e006      	b.n	8003940 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	f043 0204 	orr.w	r2, r3, #4
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	d110      	bne.n	8003982 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e006      	b.n	8003990 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d12c      	bne.n	8003a0e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80039bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e023      	b.n	8003a1c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f956 	bl	8003c9c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2101      	movs	r1, #1
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003a00:	2201      	movs	r2, #1
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	409a      	lsls	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e006      	b.n	8003a1c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a12:	f043 0208 	orr.w	r2, r3, #8
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a36:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d003      	beq.n	8003a46 <HAL_FDCAN_ActivateNotification+0x22>
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	f040 80c8 	bne.w	8003bd6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d004      	beq.n	8003a62 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d03b      	beq.n	8003ada <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d031      	beq.n	8003ada <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d027      	beq.n	8003ada <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d004      	beq.n	8003a9e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d01d      	beq.n	8003ada <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d013      	beq.n	8003ada <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d004      	beq.n	8003ac6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00c      	beq.n	8003aea <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d004      	beq.n	8003afe <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d13b      	bne.n	8003b76 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d131      	bne.n	8003b76 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d127      	bne.n	8003b76 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d004      	beq.n	8003b3a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11d      	bne.n	8003b76 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d113      	bne.n	8003b76 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0202 	orr.w	r2, r2, #2
 8003b84:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e006      	b.n	8003be4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bda:	f043 0202 	orr.w	r2, r3, #2
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003bfa:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	041a      	lsls	r2, r3, #16
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c30:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	061a      	lsls	r2, r3, #24
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	e005      	b.n	8003c7e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3f3      	bcc.n	8003c72 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	4000a400 	.word	0x4000a400

08003c9c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003cba:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	e00a      	b.n	8003cde <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003cd0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003cd6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003cd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cdc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003ce8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003cee:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003cf4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	440b      	add	r3, r1
 8003d0e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	3304      	adds	r3, #4
 8003d26:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	e020      	b.n	8003d70 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	3303      	adds	r3, #3
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	440b      	add	r3, r1
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d46:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	440b      	add	r3, r1
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003d54:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	440a      	add	r2, r1
 8003d5c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003d5e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	3304      	adds	r3, #4
 8003d68:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	4a06      	ldr	r2, [pc, #24]	; (8003d90 <FDCAN_CopyMessageToRAM+0xf4>)
 8003d78:	5cd3      	ldrb	r3, [r2, r3]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d3d5      	bcc.n	8003d2e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8003d82:	bf00      	nop
 8003d84:	bf00      	nop
 8003d86:	3724      	adds	r7, #36	; 0x24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	080082e0 	.word	0x080082e0

08003d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003da2:	e15a      	b.n	800405a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	2101      	movs	r1, #1
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	4013      	ands	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 814c 	beq.w	8004054 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d005      	beq.n	8003dd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d130      	bne.n	8003e36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	2203      	movs	r2, #3
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4013      	ands	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	091b      	lsrs	r3, r3, #4
 8003e20:	f003 0201 	and.w	r2, r3, #1
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d017      	beq.n	8003e72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43db      	mvns	r3, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d123      	bne.n	8003ec6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	08da      	lsrs	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3208      	adds	r2, #8
 8003e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	220f      	movs	r2, #15
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	08da      	lsrs	r2, r3, #3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3208      	adds	r2, #8
 8003ec0:	6939      	ldr	r1, [r7, #16]
 8003ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4013      	ands	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 0203 	and.w	r2, r3, #3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80a6 	beq.w	8004054 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f08:	4b5b      	ldr	r3, [pc, #364]	; (8004078 <HAL_GPIO_Init+0x2e4>)
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0c:	4a5a      	ldr	r2, [pc, #360]	; (8004078 <HAL_GPIO_Init+0x2e4>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6613      	str	r3, [r2, #96]	; 0x60
 8003f14:	4b58      	ldr	r3, [pc, #352]	; (8004078 <HAL_GPIO_Init+0x2e4>)
 8003f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f20:	4a56      	ldr	r2, [pc, #344]	; (800407c <HAL_GPIO_Init+0x2e8>)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	089b      	lsrs	r3, r3, #2
 8003f26:	3302      	adds	r3, #2
 8003f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	220f      	movs	r2, #15
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f4a:	d01f      	beq.n	8003f8c <HAL_GPIO_Init+0x1f8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a4c      	ldr	r2, [pc, #304]	; (8004080 <HAL_GPIO_Init+0x2ec>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d019      	beq.n	8003f88 <HAL_GPIO_Init+0x1f4>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a4b      	ldr	r2, [pc, #300]	; (8004084 <HAL_GPIO_Init+0x2f0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_GPIO_Init+0x1f0>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a4a      	ldr	r2, [pc, #296]	; (8004088 <HAL_GPIO_Init+0x2f4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00d      	beq.n	8003f80 <HAL_GPIO_Init+0x1ec>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a49      	ldr	r2, [pc, #292]	; (800408c <HAL_GPIO_Init+0x2f8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <HAL_GPIO_Init+0x1e8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a48      	ldr	r2, [pc, #288]	; (8004090 <HAL_GPIO_Init+0x2fc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_GPIO_Init+0x1e4>
 8003f74:	2305      	movs	r3, #5
 8003f76:	e00a      	b.n	8003f8e <HAL_GPIO_Init+0x1fa>
 8003f78:	2306      	movs	r3, #6
 8003f7a:	e008      	b.n	8003f8e <HAL_GPIO_Init+0x1fa>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	e006      	b.n	8003f8e <HAL_GPIO_Init+0x1fa>
 8003f80:	2303      	movs	r3, #3
 8003f82:	e004      	b.n	8003f8e <HAL_GPIO_Init+0x1fa>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e002      	b.n	8003f8e <HAL_GPIO_Init+0x1fa>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_GPIO_Init+0x1fa>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	f002 0203 	and.w	r2, r2, #3
 8003f94:	0092      	lsls	r2, r2, #2
 8003f96:	4093      	lsls	r3, r2
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f9e:	4937      	ldr	r1, [pc, #220]	; (800407c <HAL_GPIO_Init+0x2e8>)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fac:	4b39      	ldr	r3, [pc, #228]	; (8004094 <HAL_GPIO_Init+0x300>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fd0:	4a30      	ldr	r2, [pc, #192]	; (8004094 <HAL_GPIO_Init+0x300>)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <HAL_GPIO_Init+0x300>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ffa:	4a26      	ldr	r2, [pc, #152]	; (8004094 <HAL_GPIO_Init+0x300>)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004000:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_GPIO_Init+0x300>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	43db      	mvns	r3, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004024:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_GPIO_Init+0x300>)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800402a:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <HAL_GPIO_Init+0x300>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	43db      	mvns	r3, r3
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4013      	ands	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800404e:	4a11      	ldr	r2, [pc, #68]	; (8004094 <HAL_GPIO_Init+0x300>)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	3301      	adds	r3, #1
 8004058:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	f47f ae9d 	bne.w	8003da4 <HAL_GPIO_Init+0x10>
  }
}
 800406a:	bf00      	nop
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40021000 	.word	0x40021000
 800407c:	40010000 	.word	0x40010000
 8004080:	48000400 	.word	0x48000400
 8004084:	48000800 	.word	0x48000800
 8004088:	48000c00 	.word	0x48000c00
 800408c:	48001000 	.word	0x48001000
 8004090:	48001400 	.word	0x48001400
 8004094:	40010400 	.word	0x40010400

08004098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	807b      	strh	r3, [r7, #2]
 80040a4:	4613      	mov	r3, r2
 80040a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040a8:	787b      	ldrb	r3, [r7, #1]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040ae:	887a      	ldrh	r2, [r7, #2]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040b4:	e002      	b.n	80040bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d141      	bne.n	800415a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040d6:	4b4b      	ldr	r3, [pc, #300]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e2:	d131      	bne.n	8004148 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040e4:	4b47      	ldr	r3, [pc, #284]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ea:	4a46      	ldr	r2, [pc, #280]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f4:	4b43      	ldr	r3, [pc, #268]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040fc:	4a41      	ldr	r2, [pc, #260]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004102:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004104:	4b40      	ldr	r3, [pc, #256]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2232      	movs	r2, #50	; 0x32
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	4a3f      	ldr	r2, [pc, #252]	; (800420c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	0c9b      	lsrs	r3, r3, #18
 8004116:	3301      	adds	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800411a:	e002      	b.n	8004122 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3b01      	subs	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004122:	4b38      	ldr	r3, [pc, #224]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412e:	d102      	bne.n	8004136 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f2      	bne.n	800411c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004136:	4b33      	ldr	r3, [pc, #204]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004142:	d158      	bne.n	80041f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e057      	b.n	80041f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004148:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414e:	4a2d      	ldr	r2, [pc, #180]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004154:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004158:	e04d      	b.n	80041f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004160:	d141      	bne.n	80041e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004162:	4b28      	ldr	r3, [pc, #160]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800416a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416e:	d131      	bne.n	80041d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004170:	4b24      	ldr	r3, [pc, #144]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004176:	4a23      	ldr	r2, [pc, #140]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004180:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004188:	4a1e      	ldr	r2, [pc, #120]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800418e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2232      	movs	r2, #50	; 0x32
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	4a1c      	ldr	r2, [pc, #112]	; (800420c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	0c9b      	lsrs	r3, r3, #18
 80041a2:	3301      	adds	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a6:	e002      	b.n	80041ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ae:	4b15      	ldr	r3, [pc, #84]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ba:	d102      	bne.n	80041c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f2      	bne.n	80041a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ce:	d112      	bne.n	80041f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e011      	b.n	80041f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041da:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041e4:	e007      	b.n	80041f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ee:	4a05      	ldr	r2, [pc, #20]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40007000 	.word	0x40007000
 8004208:	20000030 	.word	0x20000030
 800420c:	431bde83 	.word	0x431bde83

08004210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e306      	b.n	8004830 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d075      	beq.n	800431a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800422e:	4b97      	ldr	r3, [pc, #604]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004238:	4b94      	ldr	r3, [pc, #592]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b0c      	cmp	r3, #12
 8004246:	d102      	bne.n	800424e <HAL_RCC_OscConfig+0x3e>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d002      	beq.n	8004254 <HAL_RCC_OscConfig+0x44>
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d10b      	bne.n	800426c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004254:	4b8d      	ldr	r3, [pc, #564]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d05b      	beq.n	8004318 <HAL_RCC_OscConfig+0x108>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d157      	bne.n	8004318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e2e1      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004274:	d106      	bne.n	8004284 <HAL_RCC_OscConfig+0x74>
 8004276:	4b85      	ldr	r3, [pc, #532]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a84      	ldr	r2, [pc, #528]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 800427c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e01d      	b.n	80042c0 <HAL_RCC_OscConfig+0xb0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800428c:	d10c      	bne.n	80042a8 <HAL_RCC_OscConfig+0x98>
 800428e:	4b7f      	ldr	r3, [pc, #508]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a7e      	ldr	r2, [pc, #504]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	4b7c      	ldr	r3, [pc, #496]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a7b      	ldr	r2, [pc, #492]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e00b      	b.n	80042c0 <HAL_RCC_OscConfig+0xb0>
 80042a8:	4b78      	ldr	r3, [pc, #480]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a77      	ldr	r2, [pc, #476]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 80042ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	4b75      	ldr	r3, [pc, #468]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a74      	ldr	r2, [pc, #464]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 80042ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d013      	beq.n	80042f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7ff f810 	bl	80032ec <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d0:	f7ff f80c 	bl	80032ec <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	; 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e2a6      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e2:	4b6a      	ldr	r3, [pc, #424]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0xc0>
 80042ee:	e014      	b.n	800431a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fe fffc 	bl	80032ec <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f8:	f7fe fff8 	bl	80032ec <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	; 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e292      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800430a:	4b60      	ldr	r3, [pc, #384]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0xe8>
 8004316:	e000      	b.n	800431a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d075      	beq.n	8004412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004326:	4b59      	ldr	r3, [pc, #356]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004330:	4b56      	ldr	r3, [pc, #344]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b0c      	cmp	r3, #12
 800433e:	d102      	bne.n	8004346 <HAL_RCC_OscConfig+0x136>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d002      	beq.n	800434c <HAL_RCC_OscConfig+0x13c>
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d11f      	bne.n	800438c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800434c:	4b4f      	ldr	r3, [pc, #316]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_OscConfig+0x154>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e265      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004364:	4b49      	ldr	r3, [pc, #292]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	4946      	ldr	r1, [pc, #280]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004378:	4b45      	ldr	r3, [pc, #276]	; (8004490 <HAL_RCC_OscConfig+0x280>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7fe ff69 	bl	8003254 <HAL_InitTick>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d043      	beq.n	8004410 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e251      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d023      	beq.n	80043dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004394:	4b3d      	ldr	r3, [pc, #244]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3c      	ldr	r2, [pc, #240]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 800439a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fe ffa4 	bl	80032ec <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a8:	f7fe ffa0 	bl	80032ec <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e23a      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ba:	4b34      	ldr	r3, [pc, #208]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c6:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	061b      	lsls	r3, r3, #24
 80043d4:	492d      	ldr	r1, [pc, #180]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]
 80043da:	e01a      	b.n	8004412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a2a      	ldr	r2, [pc, #168]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 80043e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe ff80 	bl	80032ec <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f0:	f7fe ff7c 	bl	80032ec <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e216      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004402:	4b22      	ldr	r3, [pc, #136]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x1e0>
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004410:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d041      	beq.n	80044a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01c      	beq.n	8004460 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004426:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800442c:	4a17      	ldr	r2, [pc, #92]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004436:	f7fe ff59 	bl	80032ec <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443e:	f7fe ff55 	bl	80032ec <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e1ef      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004450:	4b0e      	ldr	r3, [pc, #56]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ef      	beq.n	800443e <HAL_RCC_OscConfig+0x22e>
 800445e:	e020      	b.n	80044a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004466:	4a09      	ldr	r2, [pc, #36]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004470:	f7fe ff3c 	bl	80032ec <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004476:	e00d      	b.n	8004494 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004478:	f7fe ff38 	bl	80032ec <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d906      	bls.n	8004494 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e1d2      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004494:	4b8c      	ldr	r3, [pc, #560]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 8004496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ea      	bne.n	8004478 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80a6 	beq.w	80045fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044b4:	4b84      	ldr	r3, [pc, #528]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_OscConfig+0x2b4>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_RCC_OscConfig+0x2b6>
 80044c4:	2300      	movs	r3, #0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ca:	4b7f      	ldr	r3, [pc, #508]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 80044cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ce:	4a7e      	ldr	r2, [pc, #504]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 80044d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d4:	6593      	str	r3, [r2, #88]	; 0x58
 80044d6:	4b7c      	ldr	r3, [pc, #496]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044e2:	2301      	movs	r3, #1
 80044e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e6:	4b79      	ldr	r3, [pc, #484]	; (80046cc <HAL_RCC_OscConfig+0x4bc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d118      	bne.n	8004524 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f2:	4b76      	ldr	r3, [pc, #472]	; (80046cc <HAL_RCC_OscConfig+0x4bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a75      	ldr	r2, [pc, #468]	; (80046cc <HAL_RCC_OscConfig+0x4bc>)
 80044f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fe:	f7fe fef5 	bl	80032ec <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004506:	f7fe fef1 	bl	80032ec <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e18b      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004518:	4b6c      	ldr	r3, [pc, #432]	; (80046cc <HAL_RCC_OscConfig+0x4bc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d108      	bne.n	800453e <HAL_RCC_OscConfig+0x32e>
 800452c:	4b66      	ldr	r3, [pc, #408]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	4a65      	ldr	r2, [pc, #404]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800453c:	e024      	b.n	8004588 <HAL_RCC_OscConfig+0x378>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b05      	cmp	r3, #5
 8004544:	d110      	bne.n	8004568 <HAL_RCC_OscConfig+0x358>
 8004546:	4b60      	ldr	r3, [pc, #384]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454c:	4a5e      	ldr	r2, [pc, #376]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 800454e:	f043 0304 	orr.w	r3, r3, #4
 8004552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004556:	4b5c      	ldr	r3, [pc, #368]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455c:	4a5a      	ldr	r2, [pc, #360]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004566:	e00f      	b.n	8004588 <HAL_RCC_OscConfig+0x378>
 8004568:	4b57      	ldr	r3, [pc, #348]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	4a56      	ldr	r2, [pc, #344]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004578:	4b53      	ldr	r3, [pc, #332]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	4a52      	ldr	r2, [pc, #328]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d016      	beq.n	80045be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fe feac 	bl	80032ec <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004596:	e00a      	b.n	80045ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004598:	f7fe fea8 	bl	80032ec <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e140      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ae:	4b46      	ldr	r3, [pc, #280]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ed      	beq.n	8004598 <HAL_RCC_OscConfig+0x388>
 80045bc:	e015      	b.n	80045ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fe fe95 	bl	80032ec <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045c4:	e00a      	b.n	80045dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c6:	f7fe fe91 	bl	80032ec <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e129      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045dc:	4b3a      	ldr	r3, [pc, #232]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1ed      	bne.n	80045c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045ea:	7ffb      	ldrb	r3, [r7, #31]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d105      	bne.n	80045fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	4a34      	ldr	r2, [pc, #208]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 80045f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d03c      	beq.n	8004682 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01c      	beq.n	800464a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004610:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 8004612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004616:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fe fe64 	bl	80032ec <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004628:	f7fe fe60 	bl	80032ec <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e0fa      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800463a:	4b23      	ldr	r3, [pc, #140]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 800463c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0ef      	beq.n	8004628 <HAL_RCC_OscConfig+0x418>
 8004648:	e01b      	b.n	8004682 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800464a:	4b1f      	ldr	r3, [pc, #124]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 800464c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fe fe47 	bl	80032ec <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004662:	f7fe fe43 	bl	80032ec <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e0dd      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004674:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 8004676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ef      	bne.n	8004662 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80d1 	beq.w	800482e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800468c:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 030c 	and.w	r3, r3, #12
 8004694:	2b0c      	cmp	r3, #12
 8004696:	f000 808b 	beq.w	80047b0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d15e      	bne.n	8004760 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <HAL_RCC_OscConfig+0x4b8>)
 80046a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ae:	f7fe fe1d 	bl	80032ec <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b4:	e00c      	b.n	80046d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b6:	f7fe fe19 	bl	80032ec <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d905      	bls.n	80046d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e0b3      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d0:	4b59      	ldr	r3, [pc, #356]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ec      	bne.n	80046b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046dc:	4b56      	ldr	r3, [pc, #344]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	4b56      	ldr	r3, [pc, #344]	; (800483c <HAL_RCC_OscConfig+0x62c>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6a11      	ldr	r1, [r2, #32]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ec:	3a01      	subs	r2, #1
 80046ee:	0112      	lsls	r2, r2, #4
 80046f0:	4311      	orrs	r1, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80046f6:	0212      	lsls	r2, r2, #8
 80046f8:	4311      	orrs	r1, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046fe:	0852      	lsrs	r2, r2, #1
 8004700:	3a01      	subs	r2, #1
 8004702:	0552      	lsls	r2, r2, #21
 8004704:	4311      	orrs	r1, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800470a:	0852      	lsrs	r2, r2, #1
 800470c:	3a01      	subs	r2, #1
 800470e:	0652      	lsls	r2, r2, #25
 8004710:	4311      	orrs	r1, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004716:	06d2      	lsls	r2, r2, #27
 8004718:	430a      	orrs	r2, r1
 800471a:	4947      	ldr	r1, [pc, #284]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 800471c:	4313      	orrs	r3, r2
 800471e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004720:	4b45      	ldr	r3, [pc, #276]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a44      	ldr	r2, [pc, #272]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 8004726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800472a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800472c:	4b42      	ldr	r3, [pc, #264]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4a41      	ldr	r2, [pc, #260]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 8004732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004736:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7fe fdd8 	bl	80032ec <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004740:	f7fe fdd4 	bl	80032ec <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e06e      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004752:	4b39      	ldr	r3, [pc, #228]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0x530>
 800475e:	e066      	b.n	800482e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004760:	4b35      	ldr	r3, [pc, #212]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a34      	ldr	r2, [pc, #208]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 8004766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800476c:	4b32      	ldr	r3, [pc, #200]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4a31      	ldr	r2, [pc, #196]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 8004772:	f023 0303 	bic.w	r3, r3, #3
 8004776:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004778:	4b2f      	ldr	r3, [pc, #188]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4a2e      	ldr	r2, [pc, #184]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 800477e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004786:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fe fdb0 	bl	80032ec <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fe fdac 	bl	80032ec <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e046      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a2:	4b25      	ldr	r3, [pc, #148]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x580>
 80047ae:	e03e      	b.n	800482e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e039      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80047bc:	4b1e      	ldr	r3, [pc, #120]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f003 0203 	and.w	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d12c      	bne.n	800482a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	3b01      	subs	r3, #1
 80047dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d123      	bne.n	800482a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d11b      	bne.n	800482a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d113      	bne.n	800482a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	3b01      	subs	r3, #1
 8004810:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d109      	bne.n	800482a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	3b01      	subs	r3, #1
 8004824:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d001      	beq.n	800482e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	019f800c 	.word	0x019f800c

08004840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e11e      	b.n	8004a96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004858:	4b91      	ldr	r3, [pc, #580]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d910      	bls.n	8004888 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b8e      	ldr	r3, [pc, #568]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 020f 	bic.w	r2, r3, #15
 800486e:	498c      	ldr	r1, [pc, #560]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4313      	orrs	r3, r2
 8004874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b8a      	ldr	r3, [pc, #552]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e106      	b.n	8004a96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d073      	beq.n	800497c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b03      	cmp	r3, #3
 800489a:	d129      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800489c:	4b81      	ldr	r3, [pc, #516]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0f4      	b.n	8004a96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048ac:	f000 f99e 	bl	8004bec <RCC_GetSysClockFreqFromPLLSource>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4a7c      	ldr	r2, [pc, #496]	; (8004aa8 <HAL_RCC_ClockConfig+0x268>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d93f      	bls.n	800493a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048ba:	4b7a      	ldr	r3, [pc, #488]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d033      	beq.n	800493a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d12f      	bne.n	800493a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048da:	4b72      	ldr	r3, [pc, #456]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048e2:	4a70      	ldr	r2, [pc, #448]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 80048e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e024      	b.n	800493a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048f8:	4b6a      	ldr	r3, [pc, #424]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0c6      	b.n	8004a96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004908:	4b66      	ldr	r3, [pc, #408]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0be      	b.n	8004a96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004918:	f000 f8ce 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 800491c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4a61      	ldr	r2, [pc, #388]	; (8004aa8 <HAL_RCC_ClockConfig+0x268>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d909      	bls.n	800493a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004926:	4b5f      	ldr	r3, [pc, #380]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492e:	4a5d      	ldr	r2, [pc, #372]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 8004930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004934:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004936:	2380      	movs	r3, #128	; 0x80
 8004938:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800493a:	4b5a      	ldr	r3, [pc, #360]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f023 0203 	bic.w	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4957      	ldr	r1, [pc, #348]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fe fcce 	bl	80032ec <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	e00a      	b.n	800496a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004954:	f7fe fcca 	bl	80032ec <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e095      	b.n	8004a96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	4b4e      	ldr	r3, [pc, #312]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 020c 	and.w	r2, r3, #12
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	429a      	cmp	r2, r3
 800497a:	d1eb      	bne.n	8004954 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d023      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004994:	4b43      	ldr	r3, [pc, #268]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4a42      	ldr	r2, [pc, #264]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 800499a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800499e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80049ac:	4b3d      	ldr	r3, [pc, #244]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049b4:	4a3b      	ldr	r2, [pc, #236]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 80049b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049bc:	4b39      	ldr	r3, [pc, #228]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4936      	ldr	r1, [pc, #216]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b80      	cmp	r3, #128	; 0x80
 80049d4:	d105      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049d6:	4b33      	ldr	r3, [pc, #204]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	4a32      	ldr	r2, [pc, #200]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 80049dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049e2:	4b2f      	ldr	r3, [pc, #188]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d21d      	bcs.n	8004a2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f0:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f023 020f 	bic.w	r2, r3, #15
 80049f8:	4929      	ldr	r1, [pc, #164]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a00:	f7fe fc74 	bl	80032ec <HAL_GetTick>
 8004a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a08:	f7fe fc70 	bl	80032ec <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e03b      	b.n	8004a96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b20      	ldr	r3, [pc, #128]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1ed      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a38:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4917      	ldr	r1, [pc, #92]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a56:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	490f      	ldr	r1, [pc, #60]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a6a:	f000 f825 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	490c      	ldr	r1, [pc, #48]	; (8004aac <HAL_RCC_ClockConfig+0x26c>)
 8004a7c:	5ccb      	ldrb	r3, [r1, r3]
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	fa22 f303 	lsr.w	r3, r2, r3
 8004a86:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <HAL_RCC_ClockConfig+0x270>)
 8004a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_RCC_ClockConfig+0x274>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fbe0 	bl	8003254 <HAL_InitTick>
 8004a94:	4603      	mov	r3, r0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40022000 	.word	0x40022000
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	04c4b400 	.word	0x04c4b400
 8004aac:	080082c8 	.word	0x080082c8
 8004ab0:	20000030 	.word	0x20000030
 8004ab4:	20000034 	.word	0x20000034

08004ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004abe:	4b2c      	ldr	r3, [pc, #176]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d102      	bne.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aca:	4b2a      	ldr	r3, [pc, #168]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	e047      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ad0:	4b27      	ldr	r3, [pc, #156]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d102      	bne.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004adc:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	e03e      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ae2:	4b23      	ldr	r3, [pc, #140]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 030c 	and.w	r3, r3, #12
 8004aea:	2b0c      	cmp	r3, #12
 8004aec:	d136      	bne.n	8004b5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aee:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004af8:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	3301      	adds	r3, #1
 8004b04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d10c      	bne.n	8004b26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b0c:	4a1a      	ldr	r2, [pc, #104]	; (8004b78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b14:	4a16      	ldr	r2, [pc, #88]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b16:	68d2      	ldr	r2, [r2, #12]
 8004b18:	0a12      	lsrs	r2, r2, #8
 8004b1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	617b      	str	r3, [r7, #20]
      break;
 8004b24:	e00c      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b26:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	4a10      	ldr	r2, [pc, #64]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b30:	68d2      	ldr	r2, [r2, #12]
 8004b32:	0a12      	lsrs	r2, r2, #8
 8004b34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	617b      	str	r3, [r7, #20]
      break;
 8004b3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	0e5b      	lsrs	r3, r3, #25
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	e001      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b60:	693b      	ldr	r3, [r7, #16]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40021000 	.word	0x40021000
 8004b74:	00f42400 	.word	0x00f42400
 8004b78:	007a1200 	.word	0x007a1200

08004b7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b80:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b82:	681b      	ldr	r3, [r3, #0]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20000030 	.word	0x20000030

08004b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b98:	f7ff fff0 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	0a1b      	lsrs	r3, r3, #8
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	4904      	ldr	r1, [pc, #16]	; (8004bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004baa:	5ccb      	ldrb	r3, [r1, r3]
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	080082d8 	.word	0x080082d8

08004bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bc4:	f7ff ffda 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	0adb      	lsrs	r3, r3, #11
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	4904      	ldr	r1, [pc, #16]	; (8004be8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bd6:	5ccb      	ldrb	r3, [r1, r3]
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40021000 	.word	0x40021000
 8004be8:	080082d8 	.word	0x080082d8

08004bec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bf2:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bfc:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	3301      	adds	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d10c      	bne.n	8004c2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c10:	4a17      	ldr	r2, [pc, #92]	; (8004c70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c1a:	68d2      	ldr	r2, [r2, #12]
 8004c1c:	0a12      	lsrs	r2, r2, #8
 8004c1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	617b      	str	r3, [r7, #20]
    break;
 8004c28:	e00c      	b.n	8004c44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c2a:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c32:	4a0e      	ldr	r2, [pc, #56]	; (8004c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c34:	68d2      	ldr	r2, [r2, #12]
 8004c36:	0a12      	lsrs	r2, r2, #8
 8004c38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]
    break;
 8004c42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c44:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	0e5b      	lsrs	r3, r3, #25
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c5e:	687b      	ldr	r3, [r7, #4]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	007a1200 	.word	0x007a1200
 8004c74:	00f42400 	.word	0x00f42400

08004c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c80:	2300      	movs	r3, #0
 8004c82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c84:	2300      	movs	r3, #0
 8004c86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8098 	beq.w	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c96:	2300      	movs	r3, #0
 8004c98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9a:	4b43      	ldr	r3, [pc, #268]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10d      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca6:	4b40      	ldr	r3, [pc, #256]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	4a3f      	ldr	r2, [pc, #252]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cb2:	4b3d      	ldr	r3, [pc, #244]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cba:	60bb      	str	r3, [r7, #8]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cc2:	4b3a      	ldr	r3, [pc, #232]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a39      	ldr	r2, [pc, #228]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ccc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cce:	f7fe fb0d 	bl	80032ec <HAL_GetTick>
 8004cd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cd4:	e009      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd6:	f7fe fb09 	bl	80032ec <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d902      	bls.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	74fb      	strb	r3, [r7, #19]
        break;
 8004ce8:	e005      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cea:	4b30      	ldr	r3, [pc, #192]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0ef      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004cf6:	7cfb      	ldrb	r3, [r7, #19]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d159      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cfc:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01e      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d019      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d18:	4b23      	ldr	r3, [pc, #140]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d24:	4b20      	ldr	r3, [pc, #128]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	4a1f      	ldr	r2, [pc, #124]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d34:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d44:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fe fac9 	bl	80032ec <HAL_GetTick>
 8004d5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5c:	e00b      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5e:	f7fe fac5 	bl	80032ec <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d902      	bls.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	74fb      	strb	r3, [r7, #19]
            break;
 8004d74:	e006      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d76:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ec      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8a:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	4903      	ldr	r1, [pc, #12]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004da0:	e008      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004da2:	7cfb      	ldrb	r3, [r7, #19]
 8004da4:	74bb      	strb	r3, [r7, #18]
 8004da6:	e005      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004da8:	40021000 	.word	0x40021000
 8004dac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	7cfb      	ldrb	r3, [r7, #19]
 8004db2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004db4:	7c7b      	ldrb	r3, [r7, #17]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d105      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dba:	4ba6      	ldr	r3, [pc, #664]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbe:	4aa5      	ldr	r2, [pc, #660]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dd2:	4ba0      	ldr	r3, [pc, #640]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd8:	f023 0203 	bic.w	r2, r3, #3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	499c      	ldr	r1, [pc, #624]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004df4:	4b97      	ldr	r3, [pc, #604]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f023 020c 	bic.w	r2, r3, #12
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	4994      	ldr	r1, [pc, #592]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e16:	4b8f      	ldr	r3, [pc, #572]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	498b      	ldr	r1, [pc, #556]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e38:	4b86      	ldr	r3, [pc, #536]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	4983      	ldr	r1, [pc, #524]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e5a:	4b7e      	ldr	r3, [pc, #504]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	497a      	ldr	r1, [pc, #488]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e7c:	4b75      	ldr	r3, [pc, #468]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	4972      	ldr	r1, [pc, #456]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e9e:	4b6d      	ldr	r3, [pc, #436]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	4969      	ldr	r1, [pc, #420]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ec0:	4b64      	ldr	r3, [pc, #400]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	4961      	ldr	r1, [pc, #388]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ee2:	4b5c      	ldr	r3, [pc, #368]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	4958      	ldr	r1, [pc, #352]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d015      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f04:	4b53      	ldr	r3, [pc, #332]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	4950      	ldr	r1, [pc, #320]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f22:	d105      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f24:	4b4b      	ldr	r3, [pc, #300]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	4a4a      	ldr	r2, [pc, #296]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d015      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f3c:	4b45      	ldr	r3, [pc, #276]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	4942      	ldr	r1, [pc, #264]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f5c:	4b3d      	ldr	r3, [pc, #244]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4a3c      	ldr	r2, [pc, #240]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f66:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f74:	4b37      	ldr	r3, [pc, #220]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	4934      	ldr	r1, [pc, #208]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f94:	4b2f      	ldr	r3, [pc, #188]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4a2e      	ldr	r2, [pc, #184]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d015      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fac:	4b29      	ldr	r3, [pc, #164]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fba:	4926      	ldr	r1, [pc, #152]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fcc:	4b21      	ldr	r3, [pc, #132]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d015      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	4918      	ldr	r1, [pc, #96]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005002:	d105      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a12      	ldr	r2, [pc, #72]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800500e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d015      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502a:	490a      	ldr	r1, [pc, #40]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800503a:	d105      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a04      	ldr	r2, [pc, #16]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005046:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005048:	7cbb      	ldrb	r3, [r7, #18]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40021000 	.word	0x40021000

08005058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e09d      	b.n	80051a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2b00      	cmp	r3, #0
 8005070:	d108      	bne.n	8005084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800507a:	d009      	beq.n	8005090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	61da      	str	r2, [r3, #28]
 8005082:	e005      	b.n	8005090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fd feae 	bl	8002e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050d0:	d902      	bls.n	80050d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e002      	b.n	80050de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050e6:	d007      	beq.n	80050f8 <HAL_SPI_Init+0xa0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050f0:	d002      	beq.n	80050f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513a:	ea42 0103 	orr.w	r1, r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	0c1b      	lsrs	r3, r3, #16
 8005154:	f003 0204 	and.w	r2, r3, #4
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005174:	ea42 0103 	orr.w	r1, r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005194:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b088      	sub	sp, #32
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_SPI_Transmit+0x22>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e158      	b.n	8005482 <HAL_SPI_Transmit+0x2d4>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051d8:	f7fe f888 	bl	80032ec <HAL_GetTick>
 80051dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d002      	beq.n	80051f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051ee:	2302      	movs	r3, #2
 80051f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051f2:	e13d      	b.n	8005470 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <HAL_SPI_Transmit+0x52>
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005204:	e134      	b.n	8005470 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2203      	movs	r2, #3
 800520a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	88fa      	ldrh	r2, [r7, #6]
 800521e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005250:	d10f      	bne.n	8005272 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005260:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005270:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d007      	beq.n	8005290 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800528e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005298:	d94b      	bls.n	8005332 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_SPI_Transmit+0xfa>
 80052a2:	8afb      	ldrh	r3, [r7, #22]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d13e      	bne.n	8005326 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	881a      	ldrh	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	1c9a      	adds	r2, r3, #2
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052cc:	e02b      	b.n	8005326 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d112      	bne.n	8005302 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	881a      	ldrh	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	1c9a      	adds	r2, r3, #2
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005300:	e011      	b.n	8005326 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005302:	f7fd fff3 	bl	80032ec <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d803      	bhi.n	800531a <HAL_SPI_Transmit+0x16c>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d102      	bne.n	8005320 <HAL_SPI_Transmit+0x172>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d102      	bne.n	8005326 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005324:	e0a4      	b.n	8005470 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1ce      	bne.n	80052ce <HAL_SPI_Transmit+0x120>
 8005330:	e07c      	b.n	800542c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_SPI_Transmit+0x192>
 800533a:	8afb      	ldrh	r3, [r7, #22]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d170      	bne.n	8005422 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b01      	cmp	r3, #1
 8005348:	d912      	bls.n	8005370 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	881a      	ldrh	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	1c9a      	adds	r2, r3, #2
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b02      	subs	r3, #2
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800536e:	e058      	b.n	8005422 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	330c      	adds	r3, #12
 800537a:	7812      	ldrb	r2, [r2, #0]
 800537c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005396:	e044      	b.n	8005422 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d12b      	bne.n	80053fe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d912      	bls.n	80053d6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	881a      	ldrh	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	1c9a      	adds	r2, r3, #2
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b02      	subs	r3, #2
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053d4:	e025      	b.n	8005422 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	330c      	adds	r3, #12
 80053e0:	7812      	ldrb	r2, [r2, #0]
 80053e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053fc:	e011      	b.n	8005422 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fe:	f7fd ff75 	bl	80032ec <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d803      	bhi.n	8005416 <HAL_SPI_Transmit+0x268>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d102      	bne.n	800541c <HAL_SPI_Transmit+0x26e>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005420:	e026      	b.n	8005470 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1b5      	bne.n	8005398 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 fce3 	bl	8005dfc <SPI_EndRxTxTransaction>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e000      	b.n	8005470 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800546e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005480:	7ffb      	ldrb	r3, [r7, #31]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b088      	sub	sp, #32
 800548e:	af02      	add	r7, sp, #8
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	603b      	str	r3, [r7, #0]
 8005496:	4613      	mov	r3, r2
 8005498:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a6:	d112      	bne.n	80054ce <HAL_SPI_Receive+0x44>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10e      	bne.n	80054ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2204      	movs	r2, #4
 80054b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054b8:	88fa      	ldrh	r2, [r7, #6]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f910 	bl	80056ea <HAL_SPI_TransmitReceive>
 80054ca:	4603      	mov	r3, r0
 80054cc:	e109      	b.n	80056e2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_SPI_Receive+0x52>
 80054d8:	2302      	movs	r3, #2
 80054da:	e102      	b.n	80056e2 <HAL_SPI_Receive+0x258>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e4:	f7fd ff02 	bl	80032ec <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d002      	beq.n	80054fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80054f6:	2302      	movs	r3, #2
 80054f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054fa:	e0e9      	b.n	80056d0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_SPI_Receive+0x7e>
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d102      	bne.n	800550e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800550c:	e0e0      	b.n	80056d0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2204      	movs	r2, #4
 8005512:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	88fa      	ldrh	r2, [r7, #6]
 8005526:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	88fa      	ldrh	r2, [r7, #6]
 800552e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005558:	d908      	bls.n	800556c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	e007      	b.n	800557c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800557a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005584:	d10f      	bne.n	80055a6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005594:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b0:	2b40      	cmp	r3, #64	; 0x40
 80055b2:	d007      	beq.n	80055c4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055cc:	d867      	bhi.n	800569e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055ce:	e030      	b.n	8005632 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d117      	bne.n	800560e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f103 020c 	add.w	r2, r3, #12
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	7812      	ldrb	r2, [r2, #0]
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800560c:	e011      	b.n	8005632 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800560e:	f7fd fe6d 	bl	80032ec <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d803      	bhi.n	8005626 <HAL_SPI_Receive+0x19c>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d102      	bne.n	800562c <HAL_SPI_Receive+0x1a2>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005630:	e04e      	b.n	80056d0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1c8      	bne.n	80055d0 <HAL_SPI_Receive+0x146>
 800563e:	e034      	b.n	80056aa <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b01      	cmp	r3, #1
 800564c:	d115      	bne.n	800567a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	b292      	uxth	r2, r2
 800565a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	1c9a      	adds	r2, r3, #2
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005678:	e011      	b.n	800569e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800567a:	f7fd fe37 	bl	80032ec <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d803      	bhi.n	8005692 <HAL_SPI_Receive+0x208>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d102      	bne.n	8005698 <HAL_SPI_Receive+0x20e>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d102      	bne.n	800569e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800569c:	e018      	b.n	80056d0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1ca      	bne.n	8005640 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 fb4c 	bl	8005d4c <SPI_EndRxTransaction>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	75fb      	strb	r3, [r7, #23]
 80056cc:	e000      	b.n	80056d0 <HAL_SPI_Receive+0x246>
  }

error :
 80056ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b08a      	sub	sp, #40	; 0x28
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056f8:	2301      	movs	r3, #1
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_SPI_TransmitReceive+0x26>
 800570c:	2302      	movs	r3, #2
 800570e:	e1fb      	b.n	8005b08 <HAL_SPI_TransmitReceive+0x41e>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005718:	f7fd fde8 	bl	80032ec <HAL_GetTick>
 800571c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005724:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800572c:	887b      	ldrh	r3, [r7, #2]
 800572e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005730:	887b      	ldrh	r3, [r7, #2]
 8005732:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005734:	7efb      	ldrb	r3, [r7, #27]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d00e      	beq.n	8005758 <HAL_SPI_TransmitReceive+0x6e>
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005740:	d106      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x66>
 800574a:	7efb      	ldrb	r3, [r7, #27]
 800574c:	2b04      	cmp	r3, #4
 800574e:	d003      	beq.n	8005758 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005750:	2302      	movs	r3, #2
 8005752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005756:	e1cd      	b.n	8005af4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <HAL_SPI_TransmitReceive+0x80>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_SPI_TransmitReceive+0x80>
 8005764:	887b      	ldrh	r3, [r7, #2]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d103      	bne.n	8005772 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005770:	e1c0      	b.n	8005af4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b04      	cmp	r3, #4
 800577c:	d003      	beq.n	8005786 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2205      	movs	r2, #5
 8005782:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	887a      	ldrh	r2, [r7, #2]
 8005796:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	887a      	ldrh	r2, [r7, #2]
 800579e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	887a      	ldrh	r2, [r7, #2]
 80057ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	887a      	ldrh	r2, [r7, #2]
 80057b2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057c8:	d802      	bhi.n	80057d0 <HAL_SPI_TransmitReceive+0xe6>
 80057ca:	8a3b      	ldrh	r3, [r7, #16]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d908      	bls.n	80057e2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057de:	605a      	str	r2, [r3, #4]
 80057e0:	e007      	b.n	80057f2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057f0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	d007      	beq.n	8005810 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800580e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005818:	d97c      	bls.n	8005914 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <HAL_SPI_TransmitReceive+0x13e>
 8005822:	8a7b      	ldrh	r3, [r7, #18]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d169      	bne.n	80058fc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	881a      	ldrh	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	1c9a      	adds	r2, r3, #2
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800584c:	e056      	b.n	80058fc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d11b      	bne.n	8005894 <HAL_SPI_TransmitReceive+0x1aa>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d016      	beq.n	8005894 <HAL_SPI_TransmitReceive+0x1aa>
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	2b01      	cmp	r3, #1
 800586a:	d113      	bne.n	8005894 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	881a      	ldrh	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	1c9a      	adds	r2, r3, #2
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d11c      	bne.n	80058dc <HAL_SPI_TransmitReceive+0x1f2>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d016      	beq.n	80058dc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	b292      	uxth	r2, r2
 80058ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	1c9a      	adds	r2, r3, #2
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058d8:	2301      	movs	r3, #1
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058dc:	f7fd fd06 	bl	80032ec <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d807      	bhi.n	80058fc <HAL_SPI_TransmitReceive+0x212>
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d003      	beq.n	80058fc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80058fa:	e0fb      	b.n	8005af4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1a3      	bne.n	800584e <HAL_SPI_TransmitReceive+0x164>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d19d      	bne.n	800584e <HAL_SPI_TransmitReceive+0x164>
 8005912:	e0df      	b.n	8005ad4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_SPI_TransmitReceive+0x23a>
 800591c:	8a7b      	ldrh	r3, [r7, #18]
 800591e:	2b01      	cmp	r3, #1
 8005920:	f040 80cb 	bne.w	8005aba <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b01      	cmp	r3, #1
 800592c:	d912      	bls.n	8005954 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	881a      	ldrh	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	1c9a      	adds	r2, r3, #2
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005948:	b29b      	uxth	r3, r3
 800594a:	3b02      	subs	r3, #2
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005952:	e0b2      	b.n	8005aba <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800597a:	e09e      	b.n	8005aba <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b02      	cmp	r3, #2
 8005988:	d134      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x30a>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02f      	beq.n	80059f4 <HAL_SPI_TransmitReceive+0x30a>
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	2b01      	cmp	r3, #1
 8005998:	d12c      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d912      	bls.n	80059ca <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	881a      	ldrh	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	1c9a      	adds	r2, r3, #2
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b02      	subs	r3, #2
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059c8:	e012      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d148      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x3aa>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d042      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d923      	bls.n	8005a62 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	b292      	uxth	r2, r2
 8005a26:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	1c9a      	adds	r2, r3, #2
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b02      	subs	r3, #2
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d81f      	bhi.n	8005a90 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a5e:	605a      	str	r2, [r3, #4]
 8005a60:	e016      	b.n	8005a90 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f103 020c 	add.w	r2, r3, #12
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	7812      	ldrb	r2, [r2, #0]
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a90:	2301      	movs	r3, #1
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a94:	f7fd fc2a 	bl	80032ec <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d803      	bhi.n	8005aac <HAL_SPI_TransmitReceive+0x3c2>
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d102      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x3c8>
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ab8:	e01c      	b.n	8005af4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f47f af5b 	bne.w	800597c <HAL_SPI_TransmitReceive+0x292>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f47f af54 	bne.w	800597c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f98f 	bl	8005dfc <SPI_EndRxTxTransaction>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d006      	beq.n	8005af2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2220      	movs	r2, #32
 8005aee:	661a      	str	r2, [r3, #96]	; 0x60
 8005af0:	e000      	b.n	8005af4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005af2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3728      	adds	r7, #40	; 0x28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b20:	f7fd fbe4 	bl	80032ec <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	1a9b      	subs	r3, r3, r2
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b30:	f7fd fbdc 	bl	80032ec <HAL_GetTick>
 8005b34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b36:	4b39      	ldr	r3, [pc, #228]	; (8005c1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	015b      	lsls	r3, r3, #5
 8005b3c:	0d1b      	lsrs	r3, r3, #20
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	fb02 f303 	mul.w	r3, r2, r3
 8005b44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b46:	e054      	b.n	8005bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d050      	beq.n	8005bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b50:	f7fd fbcc 	bl	80032ec <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d902      	bls.n	8005b66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d13d      	bne.n	8005be2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b7e:	d111      	bne.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b88:	d004      	beq.n	8005b94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b92:	d107      	bne.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bac:	d10f      	bne.n	8005bce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e017      	b.n	8005c12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	bf0c      	ite	eq
 8005c02:	2301      	moveq	r3, #1
 8005c04:	2300      	movne	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d19b      	bne.n	8005b48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000030 	.word	0x20000030

08005c20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	; 0x28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c32:	f7fd fb5b 	bl	80032ec <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	4413      	add	r3, r2
 8005c40:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005c42:	f7fd fb53 	bl	80032ec <HAL_GetTick>
 8005c46:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c50:	4b3d      	ldr	r3, [pc, #244]	; (8005d48 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	00da      	lsls	r2, r3, #3
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	0d1b      	lsrs	r3, r3, #20
 8005c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c62:	fb02 f303 	mul.w	r3, r2, r3
 8005c66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c68:	e060      	b.n	8005d2c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c70:	d107      	bne.n	8005c82 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d104      	bne.n	8005c82 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d050      	beq.n	8005d2c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c8a:	f7fd fb2f 	bl	80032ec <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d902      	bls.n	8005ca0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d13d      	bne.n	8005d1c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb8:	d111      	bne.n	8005cde <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc2:	d004      	beq.n	8005cce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ccc:	d107      	bne.n	8005cde <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cdc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce6:	d10f      	bne.n	8005d08 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e010      	b.n	8005d3e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	4013      	ands	r3, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d196      	bne.n	8005c6a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3728      	adds	r7, #40	; 0x28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000030 	.word	0x20000030

08005d4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d60:	d111      	bne.n	8005d86 <SPI_EndRxTransaction+0x3a>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6a:	d004      	beq.n	8005d76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d74:	d107      	bne.n	8005d86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d84:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2180      	movs	r1, #128	; 0x80
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7ff febd 	bl	8005b10 <SPI_WaitFlagStateUntilTimeout>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da0:	f043 0220 	orr.w	r2, r3, #32
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e023      	b.n	8005df4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005db4:	d11d      	bne.n	8005df2 <SPI_EndRxTransaction+0xa6>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dbe:	d004      	beq.n	8005dca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc8:	d113      	bne.n	8005df2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f7ff ff22 	bl	8005c20 <SPI_WaitFifoStateUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de6:	f043 0220 	orr.w	r2, r3, #32
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e000      	b.n	8005df4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff ff03 	bl	8005c20 <SPI_WaitFifoStateUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e027      	b.n	8005e80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2200      	movs	r2, #0
 8005e38:	2180      	movs	r1, #128	; 0x80
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff fe68 	bl	8005b10 <SPI_WaitFlagStateUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4a:	f043 0220 	orr.w	r2, r3, #32
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e014      	b.n	8005e80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7ff fedc 	bl	8005c20 <SPI_WaitFifoStateUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e72:	f043 0220 	orr.w	r2, r3, #32
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e000      	b.n	8005e80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e049      	b.n	8005f2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fc ffee 	bl	8002e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f000 faa4 	bl	8006414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e049      	b.n	8005fdc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d106      	bne.n	8005f62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f841 	bl	8005fe4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3304      	adds	r3, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f000 fa4d 	bl	8006414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006012:	2302      	movs	r3, #2
 8006014:	e0ff      	b.n	8006216 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b14      	cmp	r3, #20
 8006022:	f200 80f0 	bhi.w	8006206 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006026:	a201      	add	r2, pc, #4	; (adr r2, 800602c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	08006081 	.word	0x08006081
 8006030:	08006207 	.word	0x08006207
 8006034:	08006207 	.word	0x08006207
 8006038:	08006207 	.word	0x08006207
 800603c:	080060c1 	.word	0x080060c1
 8006040:	08006207 	.word	0x08006207
 8006044:	08006207 	.word	0x08006207
 8006048:	08006207 	.word	0x08006207
 800604c:	08006103 	.word	0x08006103
 8006050:	08006207 	.word	0x08006207
 8006054:	08006207 	.word	0x08006207
 8006058:	08006207 	.word	0x08006207
 800605c:	08006143 	.word	0x08006143
 8006060:	08006207 	.word	0x08006207
 8006064:	08006207 	.word	0x08006207
 8006068:	08006207 	.word	0x08006207
 800606c:	08006185 	.word	0x08006185
 8006070:	08006207 	.word	0x08006207
 8006074:	08006207 	.word	0x08006207
 8006078:	08006207 	.word	0x08006207
 800607c:	080061c5 	.word	0x080061c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fa54 	bl	8006534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0208 	orr.w	r2, r2, #8
 800609a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0204 	bic.w	r2, r2, #4
 80060aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6999      	ldr	r1, [r3, #24]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	619a      	str	r2, [r3, #24]
      break;
 80060be:	e0a5      	b.n	800620c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fac4 	bl	8006654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6999      	ldr	r1, [r3, #24]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	021a      	lsls	r2, r3, #8
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	619a      	str	r2, [r3, #24]
      break;
 8006100:	e084      	b.n	800620c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	4618      	mov	r0, r3
 800610a:	f000 fb2d 	bl	8006768 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0208 	orr.w	r2, r2, #8
 800611c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0204 	bic.w	r2, r2, #4
 800612c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69d9      	ldr	r1, [r3, #28]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	61da      	str	r2, [r3, #28]
      break;
 8006140:	e064      	b.n	800620c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fb95 	bl	8006878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800615c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69da      	ldr	r2, [r3, #28]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800616c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69d9      	ldr	r1, [r3, #28]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	021a      	lsls	r2, r3, #8
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	61da      	str	r2, [r3, #28]
      break;
 8006182:	e043      	b.n	800620c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fbfe 	bl	800698c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0208 	orr.w	r2, r2, #8
 800619e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0204 	bic.w	r2, r2, #4
 80061ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80061c2:	e023      	b.n	800620c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fc42 	bl	8006a54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	021a      	lsls	r2, r3, #8
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006204:	e002      	b.n	800620c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	75fb      	strb	r3, [r7, #23]
      break;
 800620a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006214:	7dfb      	ldrb	r3, [r7, #23]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop

08006220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_TIM_ConfigClockSource+0x1c>
 8006238:	2302      	movs	r3, #2
 800623a:	e0de      	b.n	80063fa <HAL_TIM_ConfigClockSource+0x1da>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800625a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800625e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a63      	ldr	r2, [pc, #396]	; (8006404 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	f000 80a9 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1ae>
 800627c:	4a61      	ldr	r2, [pc, #388]	; (8006404 <HAL_TIM_ConfigClockSource+0x1e4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	f200 80ae 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006284:	4a60      	ldr	r2, [pc, #384]	; (8006408 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	f000 80a1 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1ae>
 800628c:	4a5e      	ldr	r2, [pc, #376]	; (8006408 <HAL_TIM_ConfigClockSource+0x1e8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	f200 80a6 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006294:	4a5d      	ldr	r2, [pc, #372]	; (800640c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006296:	4293      	cmp	r3, r2
 8006298:	f000 8099 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1ae>
 800629c:	4a5b      	ldr	r2, [pc, #364]	; (800640c <HAL_TIM_ConfigClockSource+0x1ec>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	f200 809e 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80062a4:	4a5a      	ldr	r2, [pc, #360]	; (8006410 <HAL_TIM_ConfigClockSource+0x1f0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	f000 8091 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1ae>
 80062ac:	4a58      	ldr	r2, [pc, #352]	; (8006410 <HAL_TIM_ConfigClockSource+0x1f0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	f200 8096 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80062b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062b8:	f000 8089 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1ae>
 80062bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062c0:	f200 808e 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80062c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c8:	d03e      	beq.n	8006348 <HAL_TIM_ConfigClockSource+0x128>
 80062ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ce:	f200 8087 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80062d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d6:	f000 8086 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1c6>
 80062da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062de:	d87f      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80062e0:	2b70      	cmp	r3, #112	; 0x70
 80062e2:	d01a      	beq.n	800631a <HAL_TIM_ConfigClockSource+0xfa>
 80062e4:	2b70      	cmp	r3, #112	; 0x70
 80062e6:	d87b      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80062e8:	2b60      	cmp	r3, #96	; 0x60
 80062ea:	d050      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x16e>
 80062ec:	2b60      	cmp	r3, #96	; 0x60
 80062ee:	d877      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80062f0:	2b50      	cmp	r3, #80	; 0x50
 80062f2:	d03c      	beq.n	800636e <HAL_TIM_ConfigClockSource+0x14e>
 80062f4:	2b50      	cmp	r3, #80	; 0x50
 80062f6:	d873      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80062f8:	2b40      	cmp	r3, #64	; 0x40
 80062fa:	d058      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x18e>
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d86f      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006300:	2b30      	cmp	r3, #48	; 0x30
 8006302:	d064      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x1ae>
 8006304:	2b30      	cmp	r3, #48	; 0x30
 8006306:	d86b      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006308:	2b20      	cmp	r3, #32
 800630a:	d060      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x1ae>
 800630c:	2b20      	cmp	r3, #32
 800630e:	d867      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006310:	2b00      	cmp	r3, #0
 8006312:	d05c      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x1ae>
 8006314:	2b10      	cmp	r3, #16
 8006316:	d05a      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x1ae>
 8006318:	e062      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6899      	ldr	r1, [r3, #8]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f000 fc75 	bl	8006c18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800633c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	609a      	str	r2, [r3, #8]
      break;
 8006346:	e04f      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	6899      	ldr	r1, [r3, #8]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f000 fc5e 	bl	8006c18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800636a:	609a      	str	r2, [r3, #8]
      break;
 800636c:	e03c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6859      	ldr	r1, [r3, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	461a      	mov	r2, r3
 800637c:	f000 fbd0 	bl	8006b20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2150      	movs	r1, #80	; 0x50
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fc29 	bl	8006bde <TIM_ITRx_SetConfig>
      break;
 800638c:	e02c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6859      	ldr	r1, [r3, #4]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	461a      	mov	r2, r3
 800639c:	f000 fbef 	bl	8006b7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2160      	movs	r1, #96	; 0x60
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fc19 	bl	8006bde <TIM_ITRx_SetConfig>
      break;
 80063ac:	e01c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	6859      	ldr	r1, [r3, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	461a      	mov	r2, r3
 80063bc:	f000 fbb0 	bl	8006b20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2140      	movs	r1, #64	; 0x40
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fc09 	bl	8006bde <TIM_ITRx_SetConfig>
      break;
 80063cc:	e00c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f000 fc00 	bl	8006bde <TIM_ITRx_SetConfig>
      break;
 80063de:	e003      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
      break;
 80063e4:	e000      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80063e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	00100070 	.word	0x00100070
 8006408:	00100040 	.word	0x00100040
 800640c:	00100030 	.word	0x00100030
 8006410:	00100020 	.word	0x00100020

08006414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a3c      	ldr	r2, [pc, #240]	; (8006518 <TIM_Base_SetConfig+0x104>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00f      	beq.n	800644c <TIM_Base_SetConfig+0x38>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006432:	d00b      	beq.n	800644c <TIM_Base_SetConfig+0x38>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a39      	ldr	r2, [pc, #228]	; (800651c <TIM_Base_SetConfig+0x108>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d007      	beq.n	800644c <TIM_Base_SetConfig+0x38>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a38      	ldr	r2, [pc, #224]	; (8006520 <TIM_Base_SetConfig+0x10c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <TIM_Base_SetConfig+0x38>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a37      	ldr	r2, [pc, #220]	; (8006524 <TIM_Base_SetConfig+0x110>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d108      	bne.n	800645e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a2d      	ldr	r2, [pc, #180]	; (8006518 <TIM_Base_SetConfig+0x104>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01b      	beq.n	800649e <TIM_Base_SetConfig+0x8a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646c:	d017      	beq.n	800649e <TIM_Base_SetConfig+0x8a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a2a      	ldr	r2, [pc, #168]	; (800651c <TIM_Base_SetConfig+0x108>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d013      	beq.n	800649e <TIM_Base_SetConfig+0x8a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a29      	ldr	r2, [pc, #164]	; (8006520 <TIM_Base_SetConfig+0x10c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d00f      	beq.n	800649e <TIM_Base_SetConfig+0x8a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a28      	ldr	r2, [pc, #160]	; (8006524 <TIM_Base_SetConfig+0x110>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00b      	beq.n	800649e <TIM_Base_SetConfig+0x8a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a27      	ldr	r2, [pc, #156]	; (8006528 <TIM_Base_SetConfig+0x114>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d007      	beq.n	800649e <TIM_Base_SetConfig+0x8a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a26      	ldr	r2, [pc, #152]	; (800652c <TIM_Base_SetConfig+0x118>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d003      	beq.n	800649e <TIM_Base_SetConfig+0x8a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a25      	ldr	r2, [pc, #148]	; (8006530 <TIM_Base_SetConfig+0x11c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d108      	bne.n	80064b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a10      	ldr	r2, [pc, #64]	; (8006518 <TIM_Base_SetConfig+0x104>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00f      	beq.n	80064fc <TIM_Base_SetConfig+0xe8>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a11      	ldr	r2, [pc, #68]	; (8006524 <TIM_Base_SetConfig+0x110>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00b      	beq.n	80064fc <TIM_Base_SetConfig+0xe8>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a10      	ldr	r2, [pc, #64]	; (8006528 <TIM_Base_SetConfig+0x114>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d007      	beq.n	80064fc <TIM_Base_SetConfig+0xe8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a0f      	ldr	r2, [pc, #60]	; (800652c <TIM_Base_SetConfig+0x118>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d003      	beq.n	80064fc <TIM_Base_SetConfig+0xe8>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a0e      	ldr	r2, [pc, #56]	; (8006530 <TIM_Base_SetConfig+0x11c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d103      	bne.n	8006504 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	615a      	str	r2, [r3, #20]
}
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40012c00 	.word	0x40012c00
 800651c:	40000400 	.word	0x40000400
 8006520:	40000800 	.word	0x40000800
 8006524:	40013400 	.word	0x40013400
 8006528:	40014000 	.word	0x40014000
 800652c:	40014400 	.word	0x40014400
 8006530:	40014800 	.word	0x40014800

08006534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f023 0201 	bic.w	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0303 	bic.w	r3, r3, #3
 800656e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f023 0302 	bic.w	r3, r3, #2
 8006580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a2c      	ldr	r2, [pc, #176]	; (8006640 <TIM_OC1_SetConfig+0x10c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00f      	beq.n	80065b4 <TIM_OC1_SetConfig+0x80>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a2b      	ldr	r2, [pc, #172]	; (8006644 <TIM_OC1_SetConfig+0x110>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00b      	beq.n	80065b4 <TIM_OC1_SetConfig+0x80>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a2a      	ldr	r2, [pc, #168]	; (8006648 <TIM_OC1_SetConfig+0x114>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d007      	beq.n	80065b4 <TIM_OC1_SetConfig+0x80>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a29      	ldr	r2, [pc, #164]	; (800664c <TIM_OC1_SetConfig+0x118>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_OC1_SetConfig+0x80>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a28      	ldr	r2, [pc, #160]	; (8006650 <TIM_OC1_SetConfig+0x11c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d10c      	bne.n	80065ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f023 0308 	bic.w	r3, r3, #8
 80065ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f023 0304 	bic.w	r3, r3, #4
 80065cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <TIM_OC1_SetConfig+0x10c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00f      	beq.n	80065f6 <TIM_OC1_SetConfig+0xc2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a1a      	ldr	r2, [pc, #104]	; (8006644 <TIM_OC1_SetConfig+0x110>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00b      	beq.n	80065f6 <TIM_OC1_SetConfig+0xc2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a19      	ldr	r2, [pc, #100]	; (8006648 <TIM_OC1_SetConfig+0x114>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d007      	beq.n	80065f6 <TIM_OC1_SetConfig+0xc2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a18      	ldr	r2, [pc, #96]	; (800664c <TIM_OC1_SetConfig+0x118>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d003      	beq.n	80065f6 <TIM_OC1_SetConfig+0xc2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a17      	ldr	r2, [pc, #92]	; (8006650 <TIM_OC1_SetConfig+0x11c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d111      	bne.n	800661a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	621a      	str	r2, [r3, #32]
}
 8006634:	bf00      	nop
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	40012c00 	.word	0x40012c00
 8006644:	40013400 	.word	0x40013400
 8006648:	40014000 	.word	0x40014000
 800664c:	40014400 	.word	0x40014400
 8006650:	40014800 	.word	0x40014800

08006654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f023 0210 	bic.w	r2, r3, #16
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f023 0320 	bic.w	r3, r3, #32
 80066a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a28      	ldr	r2, [pc, #160]	; (8006754 <TIM_OC2_SetConfig+0x100>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_OC2_SetConfig+0x6c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a27      	ldr	r2, [pc, #156]	; (8006758 <TIM_OC2_SetConfig+0x104>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d10d      	bne.n	80066dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <TIM_OC2_SetConfig+0x100>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00f      	beq.n	8006704 <TIM_OC2_SetConfig+0xb0>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a1c      	ldr	r2, [pc, #112]	; (8006758 <TIM_OC2_SetConfig+0x104>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00b      	beq.n	8006704 <TIM_OC2_SetConfig+0xb0>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a1b      	ldr	r2, [pc, #108]	; (800675c <TIM_OC2_SetConfig+0x108>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d007      	beq.n	8006704 <TIM_OC2_SetConfig+0xb0>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a1a      	ldr	r2, [pc, #104]	; (8006760 <TIM_OC2_SetConfig+0x10c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_OC2_SetConfig+0xb0>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a19      	ldr	r2, [pc, #100]	; (8006764 <TIM_OC2_SetConfig+0x110>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d113      	bne.n	800672c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800670a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40012c00 	.word	0x40012c00
 8006758:	40013400 	.word	0x40013400
 800675c:	40014000 	.word	0x40014000
 8006760:	40014400 	.word	0x40014400
 8006764:	40014800 	.word	0x40014800

08006768 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0303 	bic.w	r3, r3, #3
 80067a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a27      	ldr	r2, [pc, #156]	; (8006864 <TIM_OC3_SetConfig+0xfc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d003      	beq.n	80067d2 <TIM_OC3_SetConfig+0x6a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a26      	ldr	r2, [pc, #152]	; (8006868 <TIM_OC3_SetConfig+0x100>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d10d      	bne.n	80067ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a1c      	ldr	r2, [pc, #112]	; (8006864 <TIM_OC3_SetConfig+0xfc>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00f      	beq.n	8006816 <TIM_OC3_SetConfig+0xae>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a1b      	ldr	r2, [pc, #108]	; (8006868 <TIM_OC3_SetConfig+0x100>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00b      	beq.n	8006816 <TIM_OC3_SetConfig+0xae>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1a      	ldr	r2, [pc, #104]	; (800686c <TIM_OC3_SetConfig+0x104>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d007      	beq.n	8006816 <TIM_OC3_SetConfig+0xae>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a19      	ldr	r2, [pc, #100]	; (8006870 <TIM_OC3_SetConfig+0x108>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d003      	beq.n	8006816 <TIM_OC3_SetConfig+0xae>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a18      	ldr	r2, [pc, #96]	; (8006874 <TIM_OC3_SetConfig+0x10c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d113      	bne.n	800683e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800681c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	621a      	str	r2, [r3, #32]
}
 8006858:	bf00      	nop
 800685a:	371c      	adds	r7, #28
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40013400 	.word	0x40013400
 800686c:	40014000 	.word	0x40014000
 8006870:	40014400 	.word	0x40014400
 8006874:	40014800 	.word	0x40014800

08006878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	031b      	lsls	r3, r3, #12
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a28      	ldr	r2, [pc, #160]	; (8006978 <TIM_OC4_SetConfig+0x100>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d003      	beq.n	80068e4 <TIM_OC4_SetConfig+0x6c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a27      	ldr	r2, [pc, #156]	; (800697c <TIM_OC4_SetConfig+0x104>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d10d      	bne.n	8006900 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	031b      	lsls	r3, r3, #12
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a1d      	ldr	r2, [pc, #116]	; (8006978 <TIM_OC4_SetConfig+0x100>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00f      	beq.n	8006928 <TIM_OC4_SetConfig+0xb0>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a1c      	ldr	r2, [pc, #112]	; (800697c <TIM_OC4_SetConfig+0x104>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00b      	beq.n	8006928 <TIM_OC4_SetConfig+0xb0>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <TIM_OC4_SetConfig+0x108>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <TIM_OC4_SetConfig+0xb0>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a1a      	ldr	r2, [pc, #104]	; (8006984 <TIM_OC4_SetConfig+0x10c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_OC4_SetConfig+0xb0>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a19      	ldr	r2, [pc, #100]	; (8006988 <TIM_OC4_SetConfig+0x110>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d113      	bne.n	8006950 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006936:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	019b      	lsls	r3, r3, #6
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	019b      	lsls	r3, r3, #6
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	4313      	orrs	r3, r2
 800694e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	621a      	str	r2, [r3, #32]
}
 800696a:	bf00      	nop
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40012c00 	.word	0x40012c00
 800697c:	40013400 	.word	0x40013400
 8006980:	40014000 	.word	0x40014000
 8006984:	40014400 	.word	0x40014400
 8006988:	40014800 	.word	0x40014800

0800698c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80069d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	041b      	lsls	r3, r3, #16
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a17      	ldr	r2, [pc, #92]	; (8006a40 <TIM_OC5_SetConfig+0xb4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00f      	beq.n	8006a06 <TIM_OC5_SetConfig+0x7a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <TIM_OC5_SetConfig+0xb8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00b      	beq.n	8006a06 <TIM_OC5_SetConfig+0x7a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <TIM_OC5_SetConfig+0xbc>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d007      	beq.n	8006a06 <TIM_OC5_SetConfig+0x7a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a14      	ldr	r2, [pc, #80]	; (8006a4c <TIM_OC5_SetConfig+0xc0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d003      	beq.n	8006a06 <TIM_OC5_SetConfig+0x7a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a13      	ldr	r2, [pc, #76]	; (8006a50 <TIM_OC5_SetConfig+0xc4>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d109      	bne.n	8006a1a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	021b      	lsls	r3, r3, #8
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	621a      	str	r2, [r3, #32]
}
 8006a34:	bf00      	nop
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	40012c00 	.word	0x40012c00
 8006a44:	40013400 	.word	0x40013400
 8006a48:	40014000 	.word	0x40014000
 8006a4c:	40014400 	.word	0x40014400
 8006a50:	40014800 	.word	0x40014800

08006a54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	051b      	lsls	r3, r3, #20
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a18      	ldr	r2, [pc, #96]	; (8006b0c <TIM_OC6_SetConfig+0xb8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00f      	beq.n	8006ad0 <TIM_OC6_SetConfig+0x7c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a17      	ldr	r2, [pc, #92]	; (8006b10 <TIM_OC6_SetConfig+0xbc>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00b      	beq.n	8006ad0 <TIM_OC6_SetConfig+0x7c>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a16      	ldr	r2, [pc, #88]	; (8006b14 <TIM_OC6_SetConfig+0xc0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d007      	beq.n	8006ad0 <TIM_OC6_SetConfig+0x7c>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <TIM_OC6_SetConfig+0xc4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_OC6_SetConfig+0x7c>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a14      	ldr	r2, [pc, #80]	; (8006b1c <TIM_OC6_SetConfig+0xc8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d109      	bne.n	8006ae4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	029b      	lsls	r3, r3, #10
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	621a      	str	r2, [r3, #32]
}
 8006afe:	bf00      	nop
 8006b00:	371c      	adds	r7, #28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40013400 	.word	0x40013400
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40014400 	.word	0x40014400
 8006b1c:	40014800 	.word	0x40014800

08006b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	f023 0201 	bic.w	r2, r3, #1
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f023 030a 	bic.w	r3, r3, #10
 8006b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b087      	sub	sp, #28
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f023 0210 	bic.w	r2, r3, #16
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	031b      	lsls	r3, r3, #12
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	621a      	str	r2, [r3, #32]
}
 8006bd2:	bf00      	nop
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f043 0307 	orr.w	r3, r3, #7
 8006c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	609a      	str	r2, [r3, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	021a      	lsls	r2, r3, #8
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	609a      	str	r2, [r3, #8]
}
 8006c4c:	bf00      	nop
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e065      	b.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a2c      	ldr	r2, [pc, #176]	; (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d004      	beq.n	8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a2b      	ldr	r2, [pc, #172]	; (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d108      	bne.n	8006cb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006caa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1b      	ldr	r2, [pc, #108]	; (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d018      	beq.n	8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce6:	d013      	beq.n	8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a18      	ldr	r2, [pc, #96]	; (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00e      	beq.n	8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a17      	ldr	r2, [pc, #92]	; (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a12      	ldr	r2, [pc, #72]	; (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a13      	ldr	r2, [pc, #76]	; (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d10c      	bne.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	40012c00 	.word	0x40012c00
 8006d4c:	40013400 	.word	0x40013400
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	40014000 	.word	0x40014000

08006d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d74:	2302      	movs	r3, #2
 8006d76:	e087      	b.n	8006e88 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	041b      	lsls	r3, r3, #16
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a27      	ldr	r2, [pc, #156]	; (8006e94 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a25      	ldr	r2, [pc, #148]	; (8006e98 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d106      	bne.n	8006e14 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a1e      	ldr	r2, [pc, #120]	; (8006e94 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d004      	beq.n	8006e28 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1d      	ldr	r2, [pc, #116]	; (8006e98 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d126      	bne.n	8006e76 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	051b      	lsls	r3, r3, #20
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a0e      	ldr	r2, [pc, #56]	; (8006e94 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d004      	beq.n	8006e68 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a0d      	ldr	r2, [pc, #52]	; (8006e98 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d106      	bne.n	8006e76 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40013400 	.word	0x40013400

08006e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e042      	b.n	8006f34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d106      	bne.n	8006ec6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7fc f83d 	bl	8002f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2224      	movs	r2, #36	; 0x24
 8006eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f82c 	bl	8006f3c <UART_SetConfig>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e022      	b.n	8006f34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 faec 	bl	80074d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fb73 	bl	8007618 <UART_CheckIdleState>
 8006f32:	4603      	mov	r3, r0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f40:	b08c      	sub	sp, #48	; 0x30
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	431a      	orrs	r2, r3
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4bab      	ldr	r3, [pc, #684]	; (8007218 <UART_SetConfig+0x2dc>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	6812      	ldr	r2, [r2, #0]
 8006f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f74:	430b      	orrs	r3, r1
 8006f76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4aa0      	ldr	r2, [pc, #640]	; (800721c <UART_SetConfig+0x2e0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006fb2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	6812      	ldr	r2, [r2, #0]
 8006fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc6:	f023 010f 	bic.w	r1, r3, #15
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a91      	ldr	r2, [pc, #580]	; (8007220 <UART_SetConfig+0x2e4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d125      	bne.n	800702c <UART_SetConfig+0xf0>
 8006fe0:	4b90      	ldr	r3, [pc, #576]	; (8007224 <UART_SetConfig+0x2e8>)
 8006fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d81a      	bhi.n	8007024 <UART_SetConfig+0xe8>
 8006fee:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <UART_SetConfig+0xb8>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	08007005 	.word	0x08007005
 8006ff8:	08007015 	.word	0x08007015
 8006ffc:	0800700d 	.word	0x0800700d
 8007000:	0800701d 	.word	0x0800701d
 8007004:	2301      	movs	r3, #1
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800700a:	e0d6      	b.n	80071ba <UART_SetConfig+0x27e>
 800700c:	2302      	movs	r3, #2
 800700e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007012:	e0d2      	b.n	80071ba <UART_SetConfig+0x27e>
 8007014:	2304      	movs	r3, #4
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800701a:	e0ce      	b.n	80071ba <UART_SetConfig+0x27e>
 800701c:	2308      	movs	r3, #8
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007022:	e0ca      	b.n	80071ba <UART_SetConfig+0x27e>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800702a:	e0c6      	b.n	80071ba <UART_SetConfig+0x27e>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a7d      	ldr	r2, [pc, #500]	; (8007228 <UART_SetConfig+0x2ec>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d138      	bne.n	80070a8 <UART_SetConfig+0x16c>
 8007036:	4b7b      	ldr	r3, [pc, #492]	; (8007224 <UART_SetConfig+0x2e8>)
 8007038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703c:	f003 030c 	and.w	r3, r3, #12
 8007040:	2b0c      	cmp	r3, #12
 8007042:	d82d      	bhi.n	80070a0 <UART_SetConfig+0x164>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x110>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	08007081 	.word	0x08007081
 8007050:	080070a1 	.word	0x080070a1
 8007054:	080070a1 	.word	0x080070a1
 8007058:	080070a1 	.word	0x080070a1
 800705c:	08007091 	.word	0x08007091
 8007060:	080070a1 	.word	0x080070a1
 8007064:	080070a1 	.word	0x080070a1
 8007068:	080070a1 	.word	0x080070a1
 800706c:	08007089 	.word	0x08007089
 8007070:	080070a1 	.word	0x080070a1
 8007074:	080070a1 	.word	0x080070a1
 8007078:	080070a1 	.word	0x080070a1
 800707c:	08007099 	.word	0x08007099
 8007080:	2300      	movs	r3, #0
 8007082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007086:	e098      	b.n	80071ba <UART_SetConfig+0x27e>
 8007088:	2302      	movs	r3, #2
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708e:	e094      	b.n	80071ba <UART_SetConfig+0x27e>
 8007090:	2304      	movs	r3, #4
 8007092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007096:	e090      	b.n	80071ba <UART_SetConfig+0x27e>
 8007098:	2308      	movs	r3, #8
 800709a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800709e:	e08c      	b.n	80071ba <UART_SetConfig+0x27e>
 80070a0:	2310      	movs	r3, #16
 80070a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a6:	e088      	b.n	80071ba <UART_SetConfig+0x27e>
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a5f      	ldr	r2, [pc, #380]	; (800722c <UART_SetConfig+0x2f0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d125      	bne.n	80070fe <UART_SetConfig+0x1c2>
 80070b2:	4b5c      	ldr	r3, [pc, #368]	; (8007224 <UART_SetConfig+0x2e8>)
 80070b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070bc:	2b30      	cmp	r3, #48	; 0x30
 80070be:	d016      	beq.n	80070ee <UART_SetConfig+0x1b2>
 80070c0:	2b30      	cmp	r3, #48	; 0x30
 80070c2:	d818      	bhi.n	80070f6 <UART_SetConfig+0x1ba>
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d00a      	beq.n	80070de <UART_SetConfig+0x1a2>
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d814      	bhi.n	80070f6 <UART_SetConfig+0x1ba>
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <UART_SetConfig+0x19a>
 80070d0:	2b10      	cmp	r3, #16
 80070d2:	d008      	beq.n	80070e6 <UART_SetConfig+0x1aa>
 80070d4:	e00f      	b.n	80070f6 <UART_SetConfig+0x1ba>
 80070d6:	2300      	movs	r3, #0
 80070d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070dc:	e06d      	b.n	80071ba <UART_SetConfig+0x27e>
 80070de:	2302      	movs	r3, #2
 80070e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e4:	e069      	b.n	80071ba <UART_SetConfig+0x27e>
 80070e6:	2304      	movs	r3, #4
 80070e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ec:	e065      	b.n	80071ba <UART_SetConfig+0x27e>
 80070ee:	2308      	movs	r3, #8
 80070f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f4:	e061      	b.n	80071ba <UART_SetConfig+0x27e>
 80070f6:	2310      	movs	r3, #16
 80070f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fc:	e05d      	b.n	80071ba <UART_SetConfig+0x27e>
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a4b      	ldr	r2, [pc, #300]	; (8007230 <UART_SetConfig+0x2f4>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d125      	bne.n	8007154 <UART_SetConfig+0x218>
 8007108:	4b46      	ldr	r3, [pc, #280]	; (8007224 <UART_SetConfig+0x2e8>)
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007112:	2bc0      	cmp	r3, #192	; 0xc0
 8007114:	d016      	beq.n	8007144 <UART_SetConfig+0x208>
 8007116:	2bc0      	cmp	r3, #192	; 0xc0
 8007118:	d818      	bhi.n	800714c <UART_SetConfig+0x210>
 800711a:	2b80      	cmp	r3, #128	; 0x80
 800711c:	d00a      	beq.n	8007134 <UART_SetConfig+0x1f8>
 800711e:	2b80      	cmp	r3, #128	; 0x80
 8007120:	d814      	bhi.n	800714c <UART_SetConfig+0x210>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <UART_SetConfig+0x1f0>
 8007126:	2b40      	cmp	r3, #64	; 0x40
 8007128:	d008      	beq.n	800713c <UART_SetConfig+0x200>
 800712a:	e00f      	b.n	800714c <UART_SetConfig+0x210>
 800712c:	2300      	movs	r3, #0
 800712e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007132:	e042      	b.n	80071ba <UART_SetConfig+0x27e>
 8007134:	2302      	movs	r3, #2
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800713a:	e03e      	b.n	80071ba <UART_SetConfig+0x27e>
 800713c:	2304      	movs	r3, #4
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007142:	e03a      	b.n	80071ba <UART_SetConfig+0x27e>
 8007144:	2308      	movs	r3, #8
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714a:	e036      	b.n	80071ba <UART_SetConfig+0x27e>
 800714c:	2310      	movs	r3, #16
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007152:	e032      	b.n	80071ba <UART_SetConfig+0x27e>
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a30      	ldr	r2, [pc, #192]	; (800721c <UART_SetConfig+0x2e0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d12a      	bne.n	80071b4 <UART_SetConfig+0x278>
 800715e:	4b31      	ldr	r3, [pc, #196]	; (8007224 <UART_SetConfig+0x2e8>)
 8007160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007164:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007168:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800716c:	d01a      	beq.n	80071a4 <UART_SetConfig+0x268>
 800716e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007172:	d81b      	bhi.n	80071ac <UART_SetConfig+0x270>
 8007174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007178:	d00c      	beq.n	8007194 <UART_SetConfig+0x258>
 800717a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800717e:	d815      	bhi.n	80071ac <UART_SetConfig+0x270>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <UART_SetConfig+0x250>
 8007184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007188:	d008      	beq.n	800719c <UART_SetConfig+0x260>
 800718a:	e00f      	b.n	80071ac <UART_SetConfig+0x270>
 800718c:	2300      	movs	r3, #0
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007192:	e012      	b.n	80071ba <UART_SetConfig+0x27e>
 8007194:	2302      	movs	r3, #2
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800719a:	e00e      	b.n	80071ba <UART_SetConfig+0x27e>
 800719c:	2304      	movs	r3, #4
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071a2:	e00a      	b.n	80071ba <UART_SetConfig+0x27e>
 80071a4:	2308      	movs	r3, #8
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071aa:	e006      	b.n	80071ba <UART_SetConfig+0x27e>
 80071ac:	2310      	movs	r3, #16
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b2:	e002      	b.n	80071ba <UART_SetConfig+0x27e>
 80071b4:	2310      	movs	r3, #16
 80071b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a17      	ldr	r2, [pc, #92]	; (800721c <UART_SetConfig+0x2e0>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	f040 80a8 	bne.w	8007316 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d834      	bhi.n	8007238 <UART_SetConfig+0x2fc>
 80071ce:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <UART_SetConfig+0x298>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	080071f9 	.word	0x080071f9
 80071d8:	08007239 	.word	0x08007239
 80071dc:	08007201 	.word	0x08007201
 80071e0:	08007239 	.word	0x08007239
 80071e4:	08007207 	.word	0x08007207
 80071e8:	08007239 	.word	0x08007239
 80071ec:	08007239 	.word	0x08007239
 80071f0:	08007239 	.word	0x08007239
 80071f4:	0800720f 	.word	0x0800720f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f8:	f7fd fccc 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 80071fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071fe:	e021      	b.n	8007244 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007200:	4b0c      	ldr	r3, [pc, #48]	; (8007234 <UART_SetConfig+0x2f8>)
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007204:	e01e      	b.n	8007244 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007206:	f7fd fc57 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 800720a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800720c:	e01a      	b.n	8007244 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800720e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007214:	e016      	b.n	8007244 <UART_SetConfig+0x308>
 8007216:	bf00      	nop
 8007218:	cfff69f3 	.word	0xcfff69f3
 800721c:	40008000 	.word	0x40008000
 8007220:	40013800 	.word	0x40013800
 8007224:	40021000 	.word	0x40021000
 8007228:	40004400 	.word	0x40004400
 800722c:	40004800 	.word	0x40004800
 8007230:	40004c00 	.word	0x40004c00
 8007234:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007242:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 812a 	beq.w	80074a0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	4a9e      	ldr	r2, [pc, #632]	; (80074cc <UART_SetConfig+0x590>)
 8007252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007256:	461a      	mov	r2, r3
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	fbb3 f3f2 	udiv	r3, r3, r2
 800725e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	4613      	mov	r3, r2
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	4413      	add	r3, r2
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	429a      	cmp	r2, r3
 800726e:	d305      	bcc.n	800727c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	429a      	cmp	r2, r3
 800727a:	d903      	bls.n	8007284 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007282:	e10d      	b.n	80074a0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	2200      	movs	r2, #0
 8007288:	60bb      	str	r3, [r7, #8]
 800728a:	60fa      	str	r2, [r7, #12]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	4a8e      	ldr	r2, [pc, #568]	; (80074cc <UART_SetConfig+0x590>)
 8007292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007296:	b29b      	uxth	r3, r3
 8007298:	2200      	movs	r2, #0
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072a6:	f7f9 fc93 	bl	8000bd0 <__aeabi_uldivmod>
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4610      	mov	r0, r2
 80072b0:	4619      	mov	r1, r3
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	020b      	lsls	r3, r1, #8
 80072bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072c0:	0202      	lsls	r2, r0, #8
 80072c2:	6979      	ldr	r1, [r7, #20]
 80072c4:	6849      	ldr	r1, [r1, #4]
 80072c6:	0849      	lsrs	r1, r1, #1
 80072c8:	2000      	movs	r0, #0
 80072ca:	460c      	mov	r4, r1
 80072cc:	4605      	mov	r5, r0
 80072ce:	eb12 0804 	adds.w	r8, r2, r4
 80072d2:	eb43 0905 	adc.w	r9, r3, r5
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	469a      	mov	sl, r3
 80072de:	4693      	mov	fp, r2
 80072e0:	4652      	mov	r2, sl
 80072e2:	465b      	mov	r3, fp
 80072e4:	4640      	mov	r0, r8
 80072e6:	4649      	mov	r1, r9
 80072e8:	f7f9 fc72 	bl	8000bd0 <__aeabi_uldivmod>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4613      	mov	r3, r2
 80072f2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fa:	d308      	bcc.n	800730e <UART_SetConfig+0x3d2>
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007302:	d204      	bcs.n	800730e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6a3a      	ldr	r2, [r7, #32]
 800730a:	60da      	str	r2, [r3, #12]
 800730c:	e0c8      	b.n	80074a0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007314:	e0c4      	b.n	80074a0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800731e:	d167      	bne.n	80073f0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007320:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007324:	2b08      	cmp	r3, #8
 8007326:	d828      	bhi.n	800737a <UART_SetConfig+0x43e>
 8007328:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <UART_SetConfig+0x3f4>)
 800732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732e:	bf00      	nop
 8007330:	08007355 	.word	0x08007355
 8007334:	0800735d 	.word	0x0800735d
 8007338:	08007365 	.word	0x08007365
 800733c:	0800737b 	.word	0x0800737b
 8007340:	0800736b 	.word	0x0800736b
 8007344:	0800737b 	.word	0x0800737b
 8007348:	0800737b 	.word	0x0800737b
 800734c:	0800737b 	.word	0x0800737b
 8007350:	08007373 	.word	0x08007373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007354:	f7fd fc1e 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8007358:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800735a:	e014      	b.n	8007386 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800735c:	f7fd fc30 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 8007360:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007362:	e010      	b.n	8007386 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007364:	4b5a      	ldr	r3, [pc, #360]	; (80074d0 <UART_SetConfig+0x594>)
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007368:	e00d      	b.n	8007386 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800736a:	f7fd fba5 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 800736e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007370:	e009      	b.n	8007386 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007378:	e005      	b.n	8007386 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007384:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 8089 	beq.w	80074a0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	4a4e      	ldr	r2, [pc, #312]	; (80074cc <UART_SetConfig+0x590>)
 8007394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007398:	461a      	mov	r2, r3
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	fbb3 f3f2 	udiv	r3, r3, r2
 80073a0:	005a      	lsls	r2, r3, #1
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	085b      	lsrs	r3, r3, #1
 80073a8:	441a      	add	r2, r3
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	2b0f      	cmp	r3, #15
 80073b8:	d916      	bls.n	80073e8 <UART_SetConfig+0x4ac>
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c0:	d212      	bcs.n	80073e8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f023 030f 	bic.w	r3, r3, #15
 80073ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	085b      	lsrs	r3, r3, #1
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	8bfb      	ldrh	r3, [r7, #30]
 80073da:	4313      	orrs	r3, r2
 80073dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	8bfa      	ldrh	r2, [r7, #30]
 80073e4:	60da      	str	r2, [r3, #12]
 80073e6:	e05b      	b.n	80074a0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073ee:	e057      	b.n	80074a0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d828      	bhi.n	800744a <UART_SetConfig+0x50e>
 80073f8:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <UART_SetConfig+0x4c4>)
 80073fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fe:	bf00      	nop
 8007400:	08007425 	.word	0x08007425
 8007404:	0800742d 	.word	0x0800742d
 8007408:	08007435 	.word	0x08007435
 800740c:	0800744b 	.word	0x0800744b
 8007410:	0800743b 	.word	0x0800743b
 8007414:	0800744b 	.word	0x0800744b
 8007418:	0800744b 	.word	0x0800744b
 800741c:	0800744b 	.word	0x0800744b
 8007420:	08007443 	.word	0x08007443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007424:	f7fd fbb6 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8007428:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800742a:	e014      	b.n	8007456 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800742c:	f7fd fbc8 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 8007430:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007432:	e010      	b.n	8007456 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007434:	4b26      	ldr	r3, [pc, #152]	; (80074d0 <UART_SetConfig+0x594>)
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007438:	e00d      	b.n	8007456 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800743a:	f7fd fb3d 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 800743e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007440:	e009      	b.n	8007456 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007448:	e005      	b.n	8007456 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007454:	bf00      	nop
    }

    if (pclk != 0U)
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	2b00      	cmp	r3, #0
 800745a:	d021      	beq.n	80074a0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	4a1a      	ldr	r2, [pc, #104]	; (80074cc <UART_SetConfig+0x590>)
 8007462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007466:	461a      	mov	r2, r3
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	fbb3 f2f2 	udiv	r2, r3, r2
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	441a      	add	r2, r3
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	fbb2 f3f3 	udiv	r3, r2, r3
 800747e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	2b0f      	cmp	r3, #15
 8007484:	d909      	bls.n	800749a <UART_SetConfig+0x55e>
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800748c:	d205      	bcs.n	800749a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	b29a      	uxth	r2, r3
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60da      	str	r2, [r3, #12]
 8007498:	e002      	b.n	80074a0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2200      	movs	r2, #0
 80074b4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2200      	movs	r2, #0
 80074ba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80074bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3730      	adds	r7, #48	; 0x30
 80074c4:	46bd      	mov	sp, r7
 80074c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ca:	bf00      	nop
 80074cc:	080082f0 	.word	0x080082f0
 80074d0:	00f42400 	.word	0x00f42400

080074d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	f003 0308 	and.w	r3, r3, #8
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01a      	beq.n	80075ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075d2:	d10a      	bne.n	80075ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00a      	beq.n	800760c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	430a      	orrs	r2, r1
 800760a:	605a      	str	r2, [r3, #4]
  }
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af02      	add	r7, sp, #8
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007628:	f7fb fe60 	bl	80032ec <HAL_GetTick>
 800762c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b08      	cmp	r3, #8
 800763a:	d10e      	bne.n	800765a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800763c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f82f 	bl	80076ae <UART_WaitOnFlagUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e025      	b.n	80076a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b04      	cmp	r3, #4
 8007666:	d10e      	bne.n	8007686 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f819 	bl	80076ae <UART_WaitOnFlagUntilTimeout>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e00f      	b.n	80076a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b09c      	sub	sp, #112	; 0x70
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	603b      	str	r3, [r7, #0]
 80076ba:	4613      	mov	r3, r2
 80076bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076be:	e0a9      	b.n	8007814 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	f000 80a5 	beq.w	8007814 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ca:	f7fb fe0f 	bl	80032ec <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d302      	bcc.n	80076e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80076da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d140      	bne.n	8007762 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076f4:	667b      	str	r3, [r7, #100]	; 0x64
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007700:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007704:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800770c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e6      	bne.n	80076e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007724:	f023 0301 	bic.w	r3, r3, #1
 8007728:	663b      	str	r3, [r7, #96]	; 0x60
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3308      	adds	r3, #8
 8007730:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007732:	64ba      	str	r2, [r7, #72]	; 0x48
 8007734:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e5      	bne.n	8007712 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2220      	movs	r2, #32
 800774a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2220      	movs	r2, #32
 8007752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e069      	b.n	8007836 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	d051      	beq.n	8007814 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800777a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800777e:	d149      	bne.n	8007814 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007788:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800779e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a8:	637b      	str	r3, [r7, #52]	; 0x34
 80077aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e6      	bne.n	800778a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3308      	adds	r3, #8
 80077c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	613b      	str	r3, [r7, #16]
   return(result);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f023 0301 	bic.w	r3, r3, #1
 80077d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3308      	adds	r3, #8
 80077da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077dc:	623a      	str	r2, [r7, #32]
 80077de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	69f9      	ldr	r1, [r7, #28]
 80077e2:	6a3a      	ldr	r2, [r7, #32]
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e5      	bne.n	80077bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2220      	movs	r2, #32
 8007804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e010      	b.n	8007836 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69da      	ldr	r2, [r3, #28]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	4013      	ands	r3, r2
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	429a      	cmp	r2, r3
 8007822:	bf0c      	ite	eq
 8007824:	2301      	moveq	r3, #1
 8007826:	2300      	movne	r3, #0
 8007828:	b2db      	uxtb	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	429a      	cmp	r2, r3
 8007830:	f43f af46 	beq.w	80076c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3770      	adds	r7, #112	; 0x70
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800784c:	2b01      	cmp	r3, #1
 800784e:	d101      	bne.n	8007854 <HAL_UARTEx_DisableFifoMode+0x16>
 8007850:	2302      	movs	r3, #2
 8007852:	e027      	b.n	80078a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2224      	movs	r2, #36	; 0x24
 8007860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0201 	bic.w	r2, r2, #1
 800787a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007882:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e02d      	b.n	8007924 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2224      	movs	r2, #36	; 0x24
 80078d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0201 	bic.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	430a      	orrs	r2, r1
 8007902:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f84f 	bl	80079a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2220      	movs	r2, #32
 8007916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007940:	2302      	movs	r3, #2
 8007942:	e02d      	b.n	80079a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2224      	movs	r2, #36	; 0x24
 8007950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0201 	bic.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f811 	bl	80079a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2220      	movs	r2, #32
 8007992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d108      	bne.n	80079ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079c8:	e031      	b.n	8007a2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079ca:	2308      	movs	r3, #8
 80079cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079ce:	2308      	movs	r3, #8
 80079d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	0e5b      	lsrs	r3, r3, #25
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	0f5b      	lsrs	r3, r3, #29
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	7b3a      	ldrb	r2, [r7, #12]
 80079f6:	4911      	ldr	r1, [pc, #68]	; (8007a3c <UARTEx_SetNbDataToProcess+0x94>)
 80079f8:	5c8a      	ldrb	r2, [r1, r2]
 80079fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80079fe:	7b3a      	ldrb	r2, [r7, #12]
 8007a00:	490f      	ldr	r1, [pc, #60]	; (8007a40 <UARTEx_SetNbDataToProcess+0x98>)
 8007a02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a04:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	7b7a      	ldrb	r2, [r7, #13]
 8007a14:	4909      	ldr	r1, [pc, #36]	; (8007a3c <UARTEx_SetNbDataToProcess+0x94>)
 8007a16:	5c8a      	ldrb	r2, [r1, r2]
 8007a18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a1c:	7b7a      	ldrb	r2, [r7, #13]
 8007a1e:	4908      	ldr	r1, [pc, #32]	; (8007a40 <UARTEx_SetNbDataToProcess+0x98>)
 8007a20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a22:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a2e:	bf00      	nop
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	08008308 	.word	0x08008308
 8007a40:	08008310 	.word	0x08008310

08007a44 <__errno>:
 8007a44:	4b01      	ldr	r3, [pc, #4]	; (8007a4c <__errno+0x8>)
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	2000003c 	.word	0x2000003c

08007a50 <__libc_init_array>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	4d0d      	ldr	r5, [pc, #52]	; (8007a88 <__libc_init_array+0x38>)
 8007a54:	4c0d      	ldr	r4, [pc, #52]	; (8007a8c <__libc_init_array+0x3c>)
 8007a56:	1b64      	subs	r4, r4, r5
 8007a58:	10a4      	asrs	r4, r4, #2
 8007a5a:	2600      	movs	r6, #0
 8007a5c:	42a6      	cmp	r6, r4
 8007a5e:	d109      	bne.n	8007a74 <__libc_init_array+0x24>
 8007a60:	4d0b      	ldr	r5, [pc, #44]	; (8007a90 <__libc_init_array+0x40>)
 8007a62:	4c0c      	ldr	r4, [pc, #48]	; (8007a94 <__libc_init_array+0x44>)
 8007a64:	f000 fa24 	bl	8007eb0 <_init>
 8007a68:	1b64      	subs	r4, r4, r5
 8007a6a:	10a4      	asrs	r4, r4, #2
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	42a6      	cmp	r6, r4
 8007a70:	d105      	bne.n	8007a7e <__libc_init_array+0x2e>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a78:	4798      	blx	r3
 8007a7a:	3601      	adds	r6, #1
 8007a7c:	e7ee      	b.n	8007a5c <__libc_init_array+0xc>
 8007a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a82:	4798      	blx	r3
 8007a84:	3601      	adds	r6, #1
 8007a86:	e7f2      	b.n	8007a6e <__libc_init_array+0x1e>
 8007a88:	08008324 	.word	0x08008324
 8007a8c:	08008324 	.word	0x08008324
 8007a90:	08008324 	.word	0x08008324
 8007a94:	08008328 	.word	0x08008328

08007a98 <memset>:
 8007a98:	4402      	add	r2, r0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d100      	bne.n	8007aa2 <memset+0xa>
 8007aa0:	4770      	bx	lr
 8007aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8007aa6:	e7f9      	b.n	8007a9c <memset+0x4>

08007aa8 <log>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	ed2d 8b02 	vpush	{d8}
 8007aae:	ec55 4b10 	vmov	r4, r5, d0
 8007ab2:	f000 f839 	bl	8007b28 <__ieee754_log>
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	462b      	mov	r3, r5
 8007aba:	4620      	mov	r0, r4
 8007abc:	4629      	mov	r1, r5
 8007abe:	eeb0 8a40 	vmov.f32	s16, s0
 8007ac2:	eef0 8a60 	vmov.f32	s17, s1
 8007ac6:	f7f8 fffd 	bl	8000ac4 <__aeabi_dcmpun>
 8007aca:	b998      	cbnz	r0, 8007af4 <log+0x4c>
 8007acc:	2200      	movs	r2, #0
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	f7f8 ffec 	bl	8000ab0 <__aeabi_dcmpgt>
 8007ad8:	b960      	cbnz	r0, 8007af4 <log+0x4c>
 8007ada:	2200      	movs	r2, #0
 8007adc:	2300      	movs	r3, #0
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f7f8 ffbd 	bl	8000a60 <__aeabi_dcmpeq>
 8007ae6:	b160      	cbz	r0, 8007b02 <log+0x5a>
 8007ae8:	f7ff ffac 	bl	8007a44 <__errno>
 8007aec:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007b18 <log+0x70>
 8007af0:	2322      	movs	r3, #34	; 0x22
 8007af2:	6003      	str	r3, [r0, #0]
 8007af4:	eeb0 0a48 	vmov.f32	s0, s16
 8007af8:	eef0 0a68 	vmov.f32	s1, s17
 8007afc:	ecbd 8b02 	vpop	{d8}
 8007b00:	bd38      	pop	{r3, r4, r5, pc}
 8007b02:	f7ff ff9f 	bl	8007a44 <__errno>
 8007b06:	ecbd 8b02 	vpop	{d8}
 8007b0a:	2321      	movs	r3, #33	; 0x21
 8007b0c:	6003      	str	r3, [r0, #0]
 8007b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b12:	4803      	ldr	r0, [pc, #12]	; (8007b20 <log+0x78>)
 8007b14:	f000 b9c4 	b.w	8007ea0 <nan>
 8007b18:	00000000 	.word	0x00000000
 8007b1c:	fff00000 	.word	0xfff00000
 8007b20:	08008318 	.word	0x08008318
 8007b24:	00000000 	.word	0x00000000

08007b28 <__ieee754_log>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	ec51 0b10 	vmov	r0, r1, d0
 8007b30:	ed2d 8b04 	vpush	{d8-d9}
 8007b34:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007b38:	b083      	sub	sp, #12
 8007b3a:	460d      	mov	r5, r1
 8007b3c:	da29      	bge.n	8007b92 <__ieee754_log+0x6a>
 8007b3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b42:	4303      	orrs	r3, r0
 8007b44:	ee10 2a10 	vmov	r2, s0
 8007b48:	d10c      	bne.n	8007b64 <__ieee754_log+0x3c>
 8007b4a:	49cf      	ldr	r1, [pc, #828]	; (8007e88 <__ieee754_log+0x360>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2300      	movs	r3, #0
 8007b50:	2000      	movs	r0, #0
 8007b52:	f7f8 fe47 	bl	80007e4 <__aeabi_ddiv>
 8007b56:	ec41 0b10 	vmov	d0, r0, r1
 8007b5a:	b003      	add	sp, #12
 8007b5c:	ecbd 8b04 	vpop	{d8-d9}
 8007b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b64:	2900      	cmp	r1, #0
 8007b66:	da05      	bge.n	8007b74 <__ieee754_log+0x4c>
 8007b68:	460b      	mov	r3, r1
 8007b6a:	f7f8 fb59 	bl	8000220 <__aeabi_dsub>
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2300      	movs	r3, #0
 8007b72:	e7ee      	b.n	8007b52 <__ieee754_log+0x2a>
 8007b74:	4bc5      	ldr	r3, [pc, #788]	; (8007e8c <__ieee754_log+0x364>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	f7f8 fd0a 	bl	8000590 <__aeabi_dmul>
 8007b7c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007b80:	460d      	mov	r5, r1
 8007b82:	4ac3      	ldr	r2, [pc, #780]	; (8007e90 <__ieee754_log+0x368>)
 8007b84:	4295      	cmp	r5, r2
 8007b86:	dd06      	ble.n	8007b96 <__ieee754_log+0x6e>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	f7f8 fb4a 	bl	8000224 <__adddf3>
 8007b90:	e7e1      	b.n	8007b56 <__ieee754_log+0x2e>
 8007b92:	2300      	movs	r3, #0
 8007b94:	e7f5      	b.n	8007b82 <__ieee754_log+0x5a>
 8007b96:	152c      	asrs	r4, r5, #20
 8007b98:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007b9c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007ba0:	441c      	add	r4, r3
 8007ba2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8007ba6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bae:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8007bb2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8007bb6:	ea42 0105 	orr.w	r1, r2, r5
 8007bba:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	4bb4      	ldr	r3, [pc, #720]	; (8007e94 <__ieee754_log+0x36c>)
 8007bc2:	f7f8 fb2d 	bl	8000220 <__aeabi_dsub>
 8007bc6:	1cab      	adds	r3, r5, #2
 8007bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	4682      	mov	sl, r0
 8007bd0:	468b      	mov	fp, r1
 8007bd2:	f04f 0200 	mov.w	r2, #0
 8007bd6:	dc53      	bgt.n	8007c80 <__ieee754_log+0x158>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f7f8 ff41 	bl	8000a60 <__aeabi_dcmpeq>
 8007bde:	b1d0      	cbz	r0, 8007c16 <__ieee754_log+0xee>
 8007be0:	2c00      	cmp	r4, #0
 8007be2:	f000 8122 	beq.w	8007e2a <__ieee754_log+0x302>
 8007be6:	4620      	mov	r0, r4
 8007be8:	f7f8 fc68 	bl	80004bc <__aeabi_i2d>
 8007bec:	a390      	add	r3, pc, #576	; (adr r3, 8007e30 <__ieee754_log+0x308>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	460f      	mov	r7, r1
 8007bf6:	f7f8 fccb 	bl	8000590 <__aeabi_dmul>
 8007bfa:	a38f      	add	r3, pc, #572	; (adr r3, 8007e38 <__ieee754_log+0x310>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	4604      	mov	r4, r0
 8007c02:	460d      	mov	r5, r1
 8007c04:	4630      	mov	r0, r6
 8007c06:	4639      	mov	r1, r7
 8007c08:	f7f8 fcc2 	bl	8000590 <__aeabi_dmul>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4620      	mov	r0, r4
 8007c12:	4629      	mov	r1, r5
 8007c14:	e7ba      	b.n	8007b8c <__ieee754_log+0x64>
 8007c16:	a38a      	add	r3, pc, #552	; (adr r3, 8007e40 <__ieee754_log+0x318>)
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	4650      	mov	r0, sl
 8007c1e:	4659      	mov	r1, fp
 8007c20:	f7f8 fcb6 	bl	8000590 <__aeabi_dmul>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	2000      	movs	r0, #0
 8007c2a:	499b      	ldr	r1, [pc, #620]	; (8007e98 <__ieee754_log+0x370>)
 8007c2c:	f7f8 faf8 	bl	8000220 <__aeabi_dsub>
 8007c30:	4652      	mov	r2, sl
 8007c32:	4606      	mov	r6, r0
 8007c34:	460f      	mov	r7, r1
 8007c36:	465b      	mov	r3, fp
 8007c38:	4650      	mov	r0, sl
 8007c3a:	4659      	mov	r1, fp
 8007c3c:	f7f8 fca8 	bl	8000590 <__aeabi_dmul>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4630      	mov	r0, r6
 8007c46:	4639      	mov	r1, r7
 8007c48:	f7f8 fca2 	bl	8000590 <__aeabi_dmul>
 8007c4c:	4606      	mov	r6, r0
 8007c4e:	460f      	mov	r7, r1
 8007c50:	b914      	cbnz	r4, 8007c58 <__ieee754_log+0x130>
 8007c52:	4632      	mov	r2, r6
 8007c54:	463b      	mov	r3, r7
 8007c56:	e0a2      	b.n	8007d9e <__ieee754_log+0x276>
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f7f8 fc2f 	bl	80004bc <__aeabi_i2d>
 8007c5e:	a374      	add	r3, pc, #464	; (adr r3, 8007e30 <__ieee754_log+0x308>)
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	4680      	mov	r8, r0
 8007c66:	4689      	mov	r9, r1
 8007c68:	f7f8 fc92 	bl	8000590 <__aeabi_dmul>
 8007c6c:	a372      	add	r3, pc, #456	; (adr r3, 8007e38 <__ieee754_log+0x310>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	4604      	mov	r4, r0
 8007c74:	460d      	mov	r5, r1
 8007c76:	4640      	mov	r0, r8
 8007c78:	4649      	mov	r1, r9
 8007c7a:	f7f8 fc89 	bl	8000590 <__aeabi_dmul>
 8007c7e:	e0a7      	b.n	8007dd0 <__ieee754_log+0x2a8>
 8007c80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c84:	f7f8 face 	bl	8000224 <__adddf3>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4650      	mov	r0, sl
 8007c8e:	4659      	mov	r1, fp
 8007c90:	f7f8 fda8 	bl	80007e4 <__aeabi_ddiv>
 8007c94:	ec41 0b18 	vmov	d8, r0, r1
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f7f8 fc0f 	bl	80004bc <__aeabi_i2d>
 8007c9e:	ec53 2b18 	vmov	r2, r3, d8
 8007ca2:	ec41 0b19 	vmov	d9, r0, r1
 8007ca6:	ec51 0b18 	vmov	r0, r1, d8
 8007caa:	f7f8 fc71 	bl	8000590 <__aeabi_dmul>
 8007cae:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8007cb2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8007cb6:	9301      	str	r3, [sp, #4]
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	4689      	mov	r9, r1
 8007cc0:	f7f8 fc66 	bl	8000590 <__aeabi_dmul>
 8007cc4:	a360      	add	r3, pc, #384	; (adr r3, 8007e48 <__ieee754_log+0x320>)
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	4606      	mov	r6, r0
 8007ccc:	460f      	mov	r7, r1
 8007cce:	f7f8 fc5f 	bl	8000590 <__aeabi_dmul>
 8007cd2:	a35f      	add	r3, pc, #380	; (adr r3, 8007e50 <__ieee754_log+0x328>)
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f7f8 faa4 	bl	8000224 <__adddf3>
 8007cdc:	4632      	mov	r2, r6
 8007cde:	463b      	mov	r3, r7
 8007ce0:	f7f8 fc56 	bl	8000590 <__aeabi_dmul>
 8007ce4:	a35c      	add	r3, pc, #368	; (adr r3, 8007e58 <__ieee754_log+0x330>)
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 fa9b 	bl	8000224 <__adddf3>
 8007cee:	4632      	mov	r2, r6
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	f7f8 fc4d 	bl	8000590 <__aeabi_dmul>
 8007cf6:	a35a      	add	r3, pc, #360	; (adr r3, 8007e60 <__ieee754_log+0x338>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	f7f8 fa92 	bl	8000224 <__adddf3>
 8007d00:	4642      	mov	r2, r8
 8007d02:	464b      	mov	r3, r9
 8007d04:	f7f8 fc44 	bl	8000590 <__aeabi_dmul>
 8007d08:	a357      	add	r3, pc, #348	; (adr r3, 8007e68 <__ieee754_log+0x340>)
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	4680      	mov	r8, r0
 8007d10:	4689      	mov	r9, r1
 8007d12:	4630      	mov	r0, r6
 8007d14:	4639      	mov	r1, r7
 8007d16:	f7f8 fc3b 	bl	8000590 <__aeabi_dmul>
 8007d1a:	a355      	add	r3, pc, #340	; (adr r3, 8007e70 <__ieee754_log+0x348>)
 8007d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d20:	f7f8 fa80 	bl	8000224 <__adddf3>
 8007d24:	4632      	mov	r2, r6
 8007d26:	463b      	mov	r3, r7
 8007d28:	f7f8 fc32 	bl	8000590 <__aeabi_dmul>
 8007d2c:	a352      	add	r3, pc, #328	; (adr r3, 8007e78 <__ieee754_log+0x350>)
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	f7f8 fa77 	bl	8000224 <__adddf3>
 8007d36:	4632      	mov	r2, r6
 8007d38:	463b      	mov	r3, r7
 8007d3a:	f7f8 fc29 	bl	8000590 <__aeabi_dmul>
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4602      	mov	r2, r0
 8007d42:	4649      	mov	r1, r9
 8007d44:	4640      	mov	r0, r8
 8007d46:	f7f8 fa6d 	bl	8000224 <__adddf3>
 8007d4a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007d4e:	9b01      	ldr	r3, [sp, #4]
 8007d50:	3551      	adds	r5, #81	; 0x51
 8007d52:	431d      	orrs	r5, r3
 8007d54:	2d00      	cmp	r5, #0
 8007d56:	4680      	mov	r8, r0
 8007d58:	4689      	mov	r9, r1
 8007d5a:	dd48      	ble.n	8007dee <__ieee754_log+0x2c6>
 8007d5c:	4b4e      	ldr	r3, [pc, #312]	; (8007e98 <__ieee754_log+0x370>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	4650      	mov	r0, sl
 8007d62:	4659      	mov	r1, fp
 8007d64:	f7f8 fc14 	bl	8000590 <__aeabi_dmul>
 8007d68:	4652      	mov	r2, sl
 8007d6a:	465b      	mov	r3, fp
 8007d6c:	f7f8 fc10 	bl	8000590 <__aeabi_dmul>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4606      	mov	r6, r0
 8007d76:	460f      	mov	r7, r1
 8007d78:	4640      	mov	r0, r8
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	f7f8 fa52 	bl	8000224 <__adddf3>
 8007d80:	ec53 2b18 	vmov	r2, r3, d8
 8007d84:	f7f8 fc04 	bl	8000590 <__aeabi_dmul>
 8007d88:	4680      	mov	r8, r0
 8007d8a:	4689      	mov	r9, r1
 8007d8c:	b964      	cbnz	r4, 8007da8 <__ieee754_log+0x280>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4630      	mov	r0, r6
 8007d94:	4639      	mov	r1, r7
 8007d96:	f7f8 fa43 	bl	8000220 <__aeabi_dsub>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4650      	mov	r0, sl
 8007da0:	4659      	mov	r1, fp
 8007da2:	f7f8 fa3d 	bl	8000220 <__aeabi_dsub>
 8007da6:	e6d6      	b.n	8007b56 <__ieee754_log+0x2e>
 8007da8:	a321      	add	r3, pc, #132	; (adr r3, 8007e30 <__ieee754_log+0x308>)
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	ec51 0b19 	vmov	r0, r1, d9
 8007db2:	f7f8 fbed 	bl	8000590 <__aeabi_dmul>
 8007db6:	a320      	add	r3, pc, #128	; (adr r3, 8007e38 <__ieee754_log+0x310>)
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	460d      	mov	r5, r1
 8007dc0:	ec51 0b19 	vmov	r0, r1, d9
 8007dc4:	f7f8 fbe4 	bl	8000590 <__aeabi_dmul>
 8007dc8:	4642      	mov	r2, r8
 8007dca:	464b      	mov	r3, r9
 8007dcc:	f7f8 fa2a 	bl	8000224 <__adddf3>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	f7f8 fa22 	bl	8000220 <__aeabi_dsub>
 8007ddc:	4652      	mov	r2, sl
 8007dde:	465b      	mov	r3, fp
 8007de0:	f7f8 fa1e 	bl	8000220 <__aeabi_dsub>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4620      	mov	r0, r4
 8007dea:	4629      	mov	r1, r5
 8007dec:	e7d9      	b.n	8007da2 <__ieee754_log+0x27a>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4650      	mov	r0, sl
 8007df4:	4659      	mov	r1, fp
 8007df6:	f7f8 fa13 	bl	8000220 <__aeabi_dsub>
 8007dfa:	ec53 2b18 	vmov	r2, r3, d8
 8007dfe:	f7f8 fbc7 	bl	8000590 <__aeabi_dmul>
 8007e02:	4606      	mov	r6, r0
 8007e04:	460f      	mov	r7, r1
 8007e06:	2c00      	cmp	r4, #0
 8007e08:	f43f af23 	beq.w	8007c52 <__ieee754_log+0x12a>
 8007e0c:	a308      	add	r3, pc, #32	; (adr r3, 8007e30 <__ieee754_log+0x308>)
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	ec51 0b19 	vmov	r0, r1, d9
 8007e16:	f7f8 fbbb 	bl	8000590 <__aeabi_dmul>
 8007e1a:	a307      	add	r3, pc, #28	; (adr r3, 8007e38 <__ieee754_log+0x310>)
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	4604      	mov	r4, r0
 8007e22:	460d      	mov	r5, r1
 8007e24:	ec51 0b19 	vmov	r0, r1, d9
 8007e28:	e727      	b.n	8007c7a <__ieee754_log+0x152>
 8007e2a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007e80 <__ieee754_log+0x358>
 8007e2e:	e694      	b.n	8007b5a <__ieee754_log+0x32>
 8007e30:	fee00000 	.word	0xfee00000
 8007e34:	3fe62e42 	.word	0x3fe62e42
 8007e38:	35793c76 	.word	0x35793c76
 8007e3c:	3dea39ef 	.word	0x3dea39ef
 8007e40:	55555555 	.word	0x55555555
 8007e44:	3fd55555 	.word	0x3fd55555
 8007e48:	df3e5244 	.word	0xdf3e5244
 8007e4c:	3fc2f112 	.word	0x3fc2f112
 8007e50:	96cb03de 	.word	0x96cb03de
 8007e54:	3fc74664 	.word	0x3fc74664
 8007e58:	94229359 	.word	0x94229359
 8007e5c:	3fd24924 	.word	0x3fd24924
 8007e60:	55555593 	.word	0x55555593
 8007e64:	3fe55555 	.word	0x3fe55555
 8007e68:	d078c69f 	.word	0xd078c69f
 8007e6c:	3fc39a09 	.word	0x3fc39a09
 8007e70:	1d8e78af 	.word	0x1d8e78af
 8007e74:	3fcc71c5 	.word	0x3fcc71c5
 8007e78:	9997fa04 	.word	0x9997fa04
 8007e7c:	3fd99999 	.word	0x3fd99999
	...
 8007e88:	c3500000 	.word	0xc3500000
 8007e8c:	43500000 	.word	0x43500000
 8007e90:	7fefffff 	.word	0x7fefffff
 8007e94:	3ff00000 	.word	0x3ff00000
 8007e98:	3fe00000 	.word	0x3fe00000
 8007e9c:	00000000 	.word	0x00000000

08007ea0 <nan>:
 8007ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007ea8 <nan+0x8>
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	00000000 	.word	0x00000000
 8007eac:	7ff80000 	.word	0x7ff80000

08007eb0 <_init>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	bf00      	nop
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr

08007ebc <_fini>:
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	bf00      	nop
 8007ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ec2:	bc08      	pop	{r3}
 8007ec4:	469e      	mov	lr, r3
 8007ec6:	4770      	bx	lr
