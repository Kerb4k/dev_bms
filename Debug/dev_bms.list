
dev_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042bc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08004494  08004494  00014494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d4  080046d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046dc  080046dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08004754  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004754  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffaf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002231  00000000  00000000  0003004f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00032280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00032e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dbcf  00000000  00000000  00033998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f149  00000000  00000000  00051567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b968f  00000000  00000000  000606b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119d3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003250  00000000  00000000  00119d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800447c 	.word	0x0800447c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800447c 	.word	0x0800447c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	6039      	str	r1, [r7, #0]
 8000526:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 8000528:	2310      	movs	r3, #16
 800052a:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 800052c:	2300      	movs	r3, #0
 800052e:	737b      	strb	r3, [r7, #13]
 8000530:	e019      	b.n	8000566 <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8000532:	89fb      	ldrh	r3, [r7, #14]
 8000534:	09db      	lsrs	r3, r3, #7
 8000536:	b29a      	uxth	r2, r3
 8000538:	7b7b      	ldrb	r3, [r7, #13]
 800053a:	6839      	ldr	r1, [r7, #0]
 800053c:	440b      	add	r3, r1
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b29b      	uxth	r3, r3
 8000542:	4053      	eors	r3, r2
 8000544:	b29b      	uxth	r3, r3
 8000546:	b2db      	uxtb	r3, r3
 8000548:	817b      	strh	r3, [r7, #10]

		remainder = (remainder<<8)^crc15Table[addr];
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	b21a      	sxth	r2, r3
 8000550:	897b      	ldrh	r3, [r7, #10]
 8000552:	490b      	ldr	r1, [pc, #44]	; (8000580 <pec15_calc+0x64>)
 8000554:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000558:	b21b      	sxth	r3, r3
 800055a:	4053      	eors	r3, r2
 800055c:	b21b      	sxth	r3, r3
 800055e:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000560:	7b7b      	ldrb	r3, [r7, #13]
 8000562:	3301      	adds	r3, #1
 8000564:	737b      	strb	r3, [r7, #13]
 8000566:	7b7a      	ldrb	r2, [r7, #13]
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	429a      	cmp	r2, r3
 800056c:	d3e1      	bcc.n	8000532 <pec15_calc+0x16>

	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 800056e:	89fb      	ldrh	r3, [r7, #14]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	b29b      	uxth	r3, r3
}
 8000574:	4618      	mov	r0, r3
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	08004494 	.word	0x08004494

08000584 <LTC681x_check_pec>:

/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 8000584:	b480      	push	{r7}
 8000586:	b08b      	sub	sp, #44	; 0x2c
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
	switch (reg)
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2b04      	cmp	r3, #4
 8000594:	f200 81b0 	bhi.w	80008f8 <LTC681x_check_pec+0x374>
 8000598:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <LTC681x_check_pec+0x1c>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	080005b5 	.word	0x080005b5
 80005a4:	080006c5 	.word	0x080006c5
 80005a8:	08000781 	.word	0x08000781
 80005ac:	0800083d 	.word	0x0800083d
 80005b0:	0800063d 	.word	0x0800063d
	{
		case CFGR:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
 80005b8:	e03c      	b.n	8000634 <LTC681x_check_pec+0xb0>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005bc:	f44f 729c 	mov.w	r2, #312	; 0x138
 80005c0:	fb02 f303 	mul.w	r3, r2, r3
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 80005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ce:	f44f 729c 	mov.w	r2, #312	; 0x138
 80005d2:	fb02 f303 	mul.w	r3, r2, r3
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	4413      	add	r3, r2
 80005da:	7b9b      	ldrb	r3, [r3, #14]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	f44f 709c 	mov.w	r0, #312	; 0x138
 80005e4:	fb00 f303 	mul.w	r3, r0, r3
 80005e8:	6838      	ldr	r0, [r7, #0]
 80005ea:	4403      	add	r3, r0
 80005ec:	440a      	add	r2, r1
 80005ee:	b292      	uxth	r2, r2
 80005f0:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 80005f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80005fa:	fb02 f303 	mul.w	r3, r2, r3
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	4413      	add	r3, r2
 8000602:	f8b3 1114 	ldrh.w	r1, [r3, #276]	; 0x114
 8000606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000608:	f44f 729c 	mov.w	r2, #312	; 0x138
 800060c:	fb02 f303 	mul.w	r3, r2, r3
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	4413      	add	r3, r2
 8000614:	7b9b      	ldrb	r3, [r3, #14]
 8000616:	b29a      	uxth	r2, r3
 8000618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061a:	f44f 709c 	mov.w	r0, #312	; 0x138
 800061e:	fb00 f303 	mul.w	r3, r0, r3
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	4403      	add	r3, r0
 8000626:	440a      	add	r2, r1
 8000628:	b292      	uxth	r2, r2
 800062a:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 800062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000630:	3301      	adds	r3, #1
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	2b00      	cmp	r3, #0
 8000638:	ddbf      	ble.n	80005ba <LTC681x_check_pec+0x36>
		  }
		break;
 800063a:	e15e      	b.n	80008fa <LTC681x_check_pec+0x376>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
 8000640:	e03c      	b.n	80006bc <LTC681x_check_pec+0x138>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000648:	fb02 f303 	mul.w	r3, r2, r3
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	4413      	add	r3, r2
 8000650:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	f44f 729c 	mov.w	r2, #312	; 0x138
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	4413      	add	r3, r2
 8000662:	7f5b      	ldrb	r3, [r3, #29]
 8000664:	b29a      	uxth	r2, r3
 8000666:	6a3b      	ldr	r3, [r7, #32]
 8000668:	f44f 709c 	mov.w	r0, #312	; 0x138
 800066c:	fb00 f303 	mul.w	r3, r0, r3
 8000670:	6838      	ldr	r0, [r7, #0]
 8000672:	4403      	add	r3, r0
 8000674:	440a      	add	r2, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 800067c:	6a3b      	ldr	r3, [r7, #32]
 800067e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000682:	fb02 f303 	mul.w	r3, r2, r3
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	4413      	add	r3, r2
 800068a:	f8b3 1114 	ldrh.w	r1, [r3, #276]	; 0x114
 800068e:	6a3b      	ldr	r3, [r7, #32]
 8000690:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000694:	fb02 f303 	mul.w	r3, r2, r3
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	4413      	add	r3, r2
 800069c:	7f5b      	ldrb	r3, [r3, #29]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	6a3b      	ldr	r3, [r7, #32]
 80006a2:	f44f 709c 	mov.w	r0, #312	; 0x138
 80006a6:	fb00 f303 	mul.w	r3, r0, r3
 80006aa:	6838      	ldr	r0, [r7, #0]
 80006ac:	4403      	add	r3, r0
 80006ae:	440a      	add	r2, r1
 80006b0:	b292      	uxth	r2, r2
 80006b2:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 80006b6:	6a3b      	ldr	r3, [r7, #32]
 80006b8:	3301      	adds	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	ddbf      	ble.n	8000642 <LTC681x_check_pec+0xbe>
		  }
		break;
 80006c2:	e11a      	b.n	80008fa <LTC681x_check_pec+0x376>
		case CELL:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
 80006c8:	e056      	b.n	8000778 <LTC681x_check_pec+0x1f4>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	e049      	b.n	8000764 <LTC681x_check_pec+0x1e0>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80006d6:	fb02 f303 	mul.w	r3, r2, r3
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	4413      	add	r3, r2
 80006de:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80006e8:	fb02 f303 	mul.w	r3, r2, r3
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	441a      	add	r2, r3
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	4413      	add	r3, r2
 80006f4:	3342      	adds	r3, #66	; 0x42
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	f44f 709c 	mov.w	r0, #312	; 0x138
 8000700:	fb00 f303 	mul.w	r3, r0, r3
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	4403      	add	r3, r0
 8000708:	440a      	add	r2, r1
 800070a:	b292      	uxth	r2, r2
 800070c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000716:	fb02 f303 	mul.w	r3, r2, r3
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	441a      	add	r2, r3
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	3388      	adds	r3, #136	; 0x88
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	4413      	add	r3, r2
 8000726:	88d9      	ldrh	r1, [r3, #6]
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800072e:	fb02 f303 	mul.w	r3, r2, r3
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	441a      	add	r2, r3
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	4413      	add	r3, r2
 800073a:	3342      	adds	r3, #66	; 0x42
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	69fa      	ldr	r2, [r7, #28]
 8000742:	f44f 709c 	mov.w	r0, #312	; 0x138
 8000746:	fb00 f202 	mul.w	r2, r0, r2
 800074a:	6838      	ldr	r0, [r7, #0]
 800074c:	4402      	add	r2, r0
 800074e:	440b      	add	r3, r1
 8000750:	b299      	uxth	r1, r3
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	3388      	adds	r3, #136	; 0x88
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	460a      	mov	r2, r1
 800075c:	80da      	strh	r2, [r3, #6]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	3301      	adds	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800076a:	461a      	mov	r2, r3
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	4293      	cmp	r3, r2
 8000770:	dbae      	blt.n	80006d0 <LTC681x_check_pec+0x14c>
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3301      	adds	r3, #1
 8000776:	61fb      	str	r3, [r7, #28]
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	2b00      	cmp	r3, #0
 800077c:	dda5      	ble.n	80006ca <LTC681x_check_pec+0x146>
			}
		  }
		break;
 800077e:	e0bc      	b.n	80008fa <LTC681x_check_pec+0x376>
		case AUX:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e056      	b.n	8000834 <LTC681x_check_pec+0x2b0>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	e049      	b.n	8000820 <LTC681x_check_pec+0x29c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000792:	fb02 f303 	mul.w	r3, r2, r3
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	4413      	add	r3, r2
 800079a:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80007a4:	fb02 f303 	mul.w	r3, r2, r3
 80007a8:	683a      	ldr	r2, [r7, #0]
 80007aa:	441a      	add	r2, r3
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	4413      	add	r3, r2
 80007b0:	335c      	adds	r3, #92	; 0x5c
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	f44f 709c 	mov.w	r0, #312	; 0x138
 80007bc:	fb00 f303 	mul.w	r3, r0, r3
 80007c0:	6838      	ldr	r0, [r7, #0]
 80007c2:	4403      	add	r3, r0
 80007c4:	440a      	add	r2, r1
 80007c6:	b292      	uxth	r2, r2
 80007c8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	f44f 729c 	mov.w	r2, #312	; 0x138
 80007d2:	fb02 f303 	mul.w	r3, r2, r3
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	441a      	add	r2, r3
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	3390      	adds	r3, #144	; 0x90
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	8859      	ldrh	r1, [r3, #2]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80007ea:	fb02 f303 	mul.w	r3, r2, r3
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	441a      	add	r2, r3
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	4413      	add	r3, r2
 80007f6:	335c      	adds	r3, #92	; 0x5c
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	f44f 709c 	mov.w	r0, #312	; 0x138
 8000802:	fb00 f202 	mul.w	r2, r0, r2
 8000806:	6838      	ldr	r0, [r7, #0]
 8000808:	4402      	add	r2, r0
 800080a:	440b      	add	r3, r1
 800080c:	b299      	uxth	r1, r3
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	3390      	adds	r3, #144	; 0x90
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	4413      	add	r3, r2
 8000816:	460a      	mov	r2, r1
 8000818:	805a      	strh	r2, [r3, #2]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	3301      	adds	r3, #1
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8000826:	461a      	mov	r2, r3
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	4293      	cmp	r3, r2
 800082c:	dbae      	blt.n	800078c <LTC681x_check_pec+0x208>
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	2b00      	cmp	r3, #0
 8000838:	dda5      	ble.n	8000786 <LTC681x_check_pec+0x202>
			}
		  }

		break;
 800083a:	e05e      	b.n	80008fa <LTC681x_check_pec+0x376>
		case STAT:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	e056      	b.n	80008f0 <LTC681x_check_pec+0x36c>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	e049      	b.n	80008dc <LTC681x_check_pec+0x358>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800084e:	fb02 f303 	mul.w	r3, r2, r3
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000860:	fb02 f303 	mul.w	r3, r2, r3
 8000864:	683a      	ldr	r2, [r7, #0]
 8000866:	441a      	add	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4413      	add	r3, r2
 800086c:	33bd      	adds	r3, #189	; 0xbd
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b29a      	uxth	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f44f 709c 	mov.w	r0, #312	; 0x138
 8000878:	fb00 f303 	mul.w	r3, r0, r3
 800087c:	6838      	ldr	r0, [r7, #0]
 800087e:	4403      	add	r3, r0
 8000880:	440a      	add	r2, r1
 8000882:	b292      	uxth	r2, r2
 8000884:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800088e:	fb02 f303 	mul.w	r3, r2, r3
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	441a      	add	r2, r3
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	3394      	adds	r3, #148	; 0x94
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	8859      	ldrh	r1, [r3, #2]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80008a6:	fb02 f303 	mul.w	r3, r2, r3
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	441a      	add	r2, r3
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	4413      	add	r3, r2
 80008b2:	33bd      	adds	r3, #189	; 0xbd
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	f44f 709c 	mov.w	r0, #312	; 0x138
 80008be:	fb00 f202 	mul.w	r2, r0, r2
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	4402      	add	r2, r0
 80008c6:	440b      	add	r3, r1
 80008c8:	b299      	uxth	r1, r3
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	3394      	adds	r3, #148	; 0x94
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4413      	add	r3, r2
 80008d2:	460a      	mov	r2, r1
 80008d4:	805a      	strh	r2, [r3, #2]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	3301      	adds	r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 80008e2:	3b01      	subs	r3, #1
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	dbae      	blt.n	8000848 <LTC681x_check_pec+0x2c4>
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3301      	adds	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	dda5      	ble.n	8000842 <LTC681x_check_pec+0x2be>
			}
		  }
		break;
 80008f6:	e000      	b.n	80008fa <LTC681x_check_pec+0x376>
		default:
		break;
 80008f8:	bf00      	nop
	}
}
 80008fa:	bf00      	nop
 80008fc:	372c      	adds	r7, #44	; 0x2c
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <cmd_68>:


/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2], SPI_HandleTypeDef *hspi) //The command to be transmitted
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	//uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	785b      	ldrb	r3, [r3, #1]
 800091c:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4619      	mov	r1, r3
 8000924:	2002      	movs	r0, #2
 8000926:	f7ff fdf9 	bl	800051c <pec15_calc>
 800092a:	4603      	mov	r3, r0
 800092c:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800092e:	89fb      	ldrh	r3, [r7, #14]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8000938:	89fb      	ldrh	r3, [r7, #14]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	72fb      	strb	r3, [r7, #11]


	wakeup_idle(hspi);
 800093e:	6838      	ldr	r0, [r7, #0]
 8000940:	f000 f80b 	bl	800095a <wakeup_idle>
	spi_write_array(4,cmd,hspi);
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	2004      	movs	r0, #4
 800094e:	f000 f9fe 	bl	8000d4e <spi_write_array>

}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <wakeup_idle>:


/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(SPI_HandleTypeDef *hspi) //Number of ICs in the system
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b084      	sub	sp, #16
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
	for (int i =0; i<ic_number; i++)
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e00d      	b.n	8000984 <wakeup_idle+0x2a>
		{
		   cs_low();
 8000968:	f000 f99b 	bl	8000ca2 <cs_low>
		   delay_u(300); // Guarantees the LTC681x will be in standby ///if it doesnt work use delay_u(300)
 800096c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000970:	f000 f9ac 	bl	8000ccc <delay_u>
		   cs_high();
 8000974:	f000 f99f 	bl	8000cb6 <cs_high>
		   delay_u(10); ///if it doesnt work use delay_u(10)
 8000978:	200a      	movs	r0, #10
 800097a:	f000 f9a7 	bl	8000ccc <delay_u>
	for (int i =0; i<ic_number; i++)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	3301      	adds	r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	ddee      	ble.n	8000968 <wakeup_idle+0xe>
		}
}
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <wakeup_sleep>:

/*!
 Wake the LTC681x from the sleep state
 @return void
 */
void wakeup_sleep(){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
	for (int i =0; i<ic_number; i++)
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	e00f      	b.n	80009c0 <wakeup_sleep+0x2c>
			{
			   cs_low(CS_PIN);
 80009a0:	200a      	movs	r0, #10
 80009a2:	f000 f97e 	bl	8000ca2 <cs_low>
			   delay_u(300); // Guarantees the LTC681x will be in standby ///if it doesnt work use delay_u(300)
 80009a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009aa:	f000 f98f 	bl	8000ccc <delay_u>
			   cs_high(CS_PIN);
 80009ae:	200a      	movs	r0, #10
 80009b0:	f000 f981 	bl	8000cb6 <cs_high>
			   delay_u(10); ///if it doesnt work use delay_u(10)
 80009b4:	200a      	movs	r0, #10
 80009b6:	f000 f989 	bl	8000ccc <delay_u>
	for (int i =0; i<ic_number; i++)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3301      	adds	r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	ddec      	ble.n	80009a0 <wakeup_sleep+0xc>
			}
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <parse_cells>:
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					//SPI_HandleTypeDef *hspi
					)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60ba      	str	r2, [r7, #8]
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4603      	mov	r3, r0
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	460b      	mov	r3, r1
 80009e0:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 80009e2:	2306      	movs	r3, #6
 80009e4:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 80009e6:	2303      	movs	r3, #3
 80009e8:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80009f4:	2300      	movs	r3, #0
 80009f6:	777b      	strb	r3, [r7, #29]
 80009f8:	e020      	b.n	8000a3c <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 80009fa:	7fbb      	ldrb	r3, [r7, #30]
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	7fbb      	ldrb	r3, [r7, #30]
 8000a06:	3301      	adds	r3, #1
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	440b      	add	r3, r1
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4413      	add	r3, r2
 8000a16:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8000a18:	7f7a      	ldrb	r2, [r7, #29]
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	7ef9      	ldrb	r1, [r7, #27]
 8000a20:	fb01 f303 	mul.w	r3, r1, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	8aba      	ldrh	r2, [r7, #20]
 8000a2e:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 8000a30:	7fbb      	ldrb	r3, [r7, #30]
 8000a32:	3302      	adds	r3, #2
 8000a34:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8000a36:	7f7b      	ldrb	r3, [r7, #29]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	777b      	strb	r3, [r7, #29]
 8000a3c:	7f7a      	ldrb	r2, [r7, #29]
 8000a3e:	7efb      	ldrb	r3, [r7, #27]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d3da      	bcc.n	80009fa <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8000a44:	7fbb      	ldrb	r3, [r7, #30]
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	7fbb      	ldrb	r3, [r7, #30]
 8000a52:	3301      	adds	r3, #1
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	440b      	add	r3, r1
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	461a      	mov	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	441a      	add	r2, r3
 8000a6c:	7f3b      	ldrb	r3, [r7, #28]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fd53 	bl	800051c <pec15_calc>
 8000a76:	4603      	mov	r3, r0
 8000a78:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 8000a7a:	8b3a      	ldrh	r2, [r7, #24]
 8000a7c:	8afb      	ldrh	r3, [r7, #22]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d008      	beq.n	8000a94 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8000a82:	2301      	movs	r3, #1
 8000a84:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a8c:	4413      	add	r3, r2
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e005      	b.n	8000aa0 <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a9a:	4413      	add	r3, r2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8000aa0:	7fbb      	ldrb	r3, [r7, #30]
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 8000aa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t *data, //An array of the unparsed cell codes
					  SPI_HandleTypeDef *hspi
                     )
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b088      	sub	sp, #32
 8000ab6:	af02      	add	r7, sp, #8
 8000ab8:	4603      	mov	r3, r0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	73fb      	strb	r3, [r7, #15]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d104      	bne.n	8000ad4 <LTC681x_rdcv_reg+0x22>
	{
		cmd[1] = 0x04;
 8000aca:	2304      	movs	r3, #4
 8000acc:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	743b      	strb	r3, [r7, #16]
 8000ad2:	e026      	b.n	8000b22 <LTC681x_rdcv_reg+0x70>
	}
	else if (reg == 2) //2: RDCVB
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d104      	bne.n	8000ae4 <LTC681x_rdcv_reg+0x32>
	{
		cmd[1] = 0x06;
 8000ada:	2306      	movs	r3, #6
 8000adc:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	743b      	strb	r3, [r7, #16]
 8000ae2:	e01e      	b.n	8000b22 <LTC681x_rdcv_reg+0x70>
	}
	else if (reg == 3) //3: RDCVC
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d104      	bne.n	8000af4 <LTC681x_rdcv_reg+0x42>
	{
		cmd[1] = 0x08;
 8000aea:	2308      	movs	r3, #8
 8000aec:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000aee:	2300      	movs	r3, #0
 8000af0:	743b      	strb	r3, [r7, #16]
 8000af2:	e016      	b.n	8000b22 <LTC681x_rdcv_reg+0x70>
	}
	else if (reg == 4) //4: RDCVD
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	d104      	bne.n	8000b04 <LTC681x_rdcv_reg+0x52>
	{
		cmd[1] = 0x0A;
 8000afa:	230a      	movs	r3, #10
 8000afc:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000afe:	2300      	movs	r3, #0
 8000b00:	743b      	strb	r3, [r7, #16]
 8000b02:	e00e      	b.n	8000b22 <LTC681x_rdcv_reg+0x70>
	}
	else if (reg == 5) //4: RDCVE
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	2b05      	cmp	r3, #5
 8000b08:	d104      	bne.n	8000b14 <LTC681x_rdcv_reg+0x62>
	{
		cmd[1] = 0x09;
 8000b0a:	2309      	movs	r3, #9
 8000b0c:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	743b      	strb	r3, [r7, #16]
 8000b12:	e006      	b.n	8000b22 <LTC681x_rdcv_reg+0x70>
	}
	else if (reg == 6) //4: RDCVF
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d103      	bne.n	8000b22 <LTC681x_rdcv_reg+0x70>
	{
		cmd[1] = 0x0B;
 8000b1a:	230b      	movs	r3, #11
 8000b1c:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	743b      	strb	r3, [r7, #16]
	}

	cmd_pec = pec15_calc(2, cmd);
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	4619      	mov	r1, r3
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff fcf7 	bl	800051c <pec15_calc>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	82bb      	strh	r3, [r7, #20]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000b32:	8abb      	ldrh	r3, [r7, #20]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t)(cmd_pec);
 8000b3c:	8abb      	ldrh	r3, [r7, #20]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	74fb      	strb	r3, [r7, #19]

	wakeup_idle(hspi);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff09 	bl	800095a <wakeup_idle>
	spi_write_read(cmd,4,data,(REG_LEN*ic_number),hspi);
 8000b48:	7dfa      	ldrb	r2, [r7, #23]
 8000b4a:	f107 0010 	add.w	r0, r7, #16
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	4613      	mov	r3, r2
 8000b54:	68ba      	ldr	r2, [r7, #8]
 8000b56:	2104      	movs	r1, #4
 8000b58:	f000 f90c 	bl	8000d74 <spi_write_read>

}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <rdcv>:

uint8_t rdcv(        cell_asic *ic, //!< Array of the parsed cell codes
					 SPI_HandleTypeDef *hspi
                    ){
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]


		int8_t pec_error = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	75fb      	strb	r3, [r7, #23]
	    uint8_t cell_data[NUM_RX_BYT * ic_number];
	    uint8_t c_ic = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	75bb      	strb	r3, [r7, #22]

	    // Executes once for each of the LTC6811 cell voltage registers
	    for (uint8_t cell_reg = 1; cell_reg < 7; cell_reg++) {
 8000b76:	2301      	movs	r3, #1
 8000b78:	757b      	strb	r3, [r7, #21]
 8000b7a:	e041      	b.n	8000c00 <rdcv+0x9c>

	    	LTC681x_rdcv_reg(cell_reg,cell_data,hspi );
 8000b7c:	f107 0108 	add.w	r1, r7, #8
 8000b80:	7d7b      	ldrb	r3, [r7, #21]
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff94 	bl	8000ab2 <LTC681x_rdcv_reg>
	    				for (int current_ic = 0; current_ic<ic_number; current_ic++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	e031      	b.n	8000bf4 <rdcv+0x90>
	    				{
	    				if (ic->isospi_reverse == false)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8000b96:	f083 0301 	eor.w	r3, r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d002      	beq.n	8000ba6 <rdcv+0x42>
	    				{
	    				  c_ic = current_ic;
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	75bb      	strb	r3, [r7, #22]
 8000ba4:	e003      	b.n	8000bae <rdcv+0x4a>
	    				}
	    				else
	    				{
	    				  c_ic = ic_number - current_ic - 1;
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	425b      	negs	r3, r3
 8000bac:	75bb      	strb	r3, [r7, #22]
	    				}
	    				pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	b2d8      	uxtb	r0, r3
	    													&ic[c_ic].cells.c_codes[0],
 8000bb2:	7dbb      	ldrb	r3, [r7, #22]
 8000bb4:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000bb8:	fb02 f303 	mul.w	r3, r2, r3
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4413      	add	r3, r2
	    				pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8000bc0:	f103 041e 	add.w	r4, r3, #30
	    													&ic[c_ic].cells.pec_match[0]);
 8000bc4:	7dbb      	ldrb	r3, [r7, #22]
 8000bc6:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	4413      	add	r3, r2
	    				pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8000bd2:	3342      	adds	r3, #66	; 0x42
 8000bd4:	f107 0208 	add.w	r2, r7, #8
 8000bd8:	7d79      	ldrb	r1, [r7, #21]
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4623      	mov	r3, r4
 8000bde:	f7ff fef7 	bl	80009d0 <parse_cells>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	7dfb      	ldrb	r3, [r7, #23]
 8000be8:	4413      	add	r3, r2
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	75fb      	strb	r3, [r7, #23]
	    				for (int current_ic = 0; current_ic<ic_number; current_ic++)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	ddca      	ble.n	8000b90 <rdcv+0x2c>
	    for (uint8_t cell_reg = 1; cell_reg < 7; cell_reg++) {
 8000bfa:	7d7b      	ldrb	r3, [r7, #21]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	757b      	strb	r3, [r7, #21]
 8000c00:	7d7b      	ldrb	r3, [r7, #21]
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d9ba      	bls.n	8000b7c <rdcv+0x18>
	    				}

	    }
	    LTC681x_check_pec(CELL, ic);
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff fcbb 	bl	8000584 <LTC681x_check_pec>

	  return(pec_error);
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	371c      	adds	r7, #28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd90      	pop	{r4, r7, pc}

08000c18 <adcv>:
void adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH, //Cell Channels to be measured
				   SPI_HandleTypeDef *hspi
                 )
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	460b      	mov	r3, r1
 8000c26:	71bb      	strb	r3, [r7, #6]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	105b      	asrs	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	01db      	lsls	r3, r3, #7
 8000c44:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	4413      	add	r3, r2
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	797b      	ldrb	r3, [r7, #5]
 8000c54:	4413      	add	r3, r2
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	3360      	adds	r3, #96	; 0x60
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd, hspi);
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	6839      	ldr	r1, [r7, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fe4f 	bl	8000908 <cmd_68>
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <cell_voltage>:

void cell_voltage(cell_asic *ic ,SPI_HandleTypeDef *hspi){
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
	wakeup_sleep();
 8000c7c:	f7ff fe8a 	bl	8000994 <wakeup_sleep>
	adcv(1, 0, 0, hspi);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff ffc6 	bl	8000c18 <adcv>
	//delay_u(T_refup_max+T_CYCLE_FAST_MAX); //waiting for conversion
	delay_m(10);
 8000c8c:	200a      	movs	r0, #10
 8000c8e:	f000 f851 	bl	8000d34 <delay_m>
	rdcv(ic, hspi);
 8000c92:	6839      	ldr	r1, [r7, #0]
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff65 	bl	8000b64 <rdcv>

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <cs_low>:
#define gpio_pin GPIO_PIN_4
#define gpio_type GPIOA



void cs_low(){
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(gpio_type, gpio_pin, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2110      	movs	r1, #16
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cae:	f000 fe2d 	bl	800190c <HAL_GPIO_WritePin>
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <cs_high>:

void cs_high(){
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(gpio_type, gpio_pin, 1);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2110      	movs	r1, #16
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc2:	f000 fe23 	bl	800190c <HAL_GPIO_WritePin>
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <delay_u>:


///////////////////////////////////
// library https://github.com/keatis/dwt_delay/
void delay_u(uint32_t microseconds)// microseconds
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	 CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <delay_u+0x58>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <delay_u+0x58>)
 8000cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cde:	60d3      	str	r3, [r2, #12]
	    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <delay_u+0x5c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <delay_u+0x5c>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6013      	str	r3, [r2, #0]
	    // Get the current number of clock cycles
	    uint32_t const startTicks = DWT->CYCCNT;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <delay_u+0x5c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]
	    // Calculate the number of clock cycles for the desired delay
	    uint32_t const delayTicks = (SystemCoreClock / 1000000) * microseconds;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <delay_u+0x60>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <delay_u+0x64>)
 8000cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfc:	0c9a      	lsrs	r2, r3, #18
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	fb02 f303 	mul.w	r3, r2, r3
 8000d04:	60bb      	str	r3, [r7, #8]
	    // Wait until the number of clock cycles has elapsed
	    while (DWT->CYCCNT - startTicks < delayTicks);
 8000d06:	bf00      	nop
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <delay_u+0x5c>)
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d8f8      	bhi.n	8000d08 <delay_u+0x3c>
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000edf0 	.word	0xe000edf0
 8000d28:	e0001000 	.word	0xe0001000
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	431bde83 	.word	0x431bde83

08000d34 <delay_m>:
//////////////////////////////////

void delay_m(uint16_t milli)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(milli);
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fb5b 	bl	80013fc <HAL_Delay>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <spi_write_array>:
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[], //Array of bytes to be written on the SPI port
					SPI_HandleTypeDef *hspi
					)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, data,len,1000); // might be changed in future
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f001 fe5b 	bl	8002a22 <HAL_SPI_Transmit>

}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
        uint8_t tx_len, //length of the tx data arry
        uint8_t *rx_data,//Input: array that will store the data read by the SPI port
        uint8_t rx_len ,//Option: number of bytes to be read from the SPI port
		SPI_HandleTypeDef * hspi //spi reference
       ){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	460b      	mov	r3, r1
 8000d82:	72fb      	strb	r3, [r7, #11]
 8000d84:	4613      	mov	r3, r2
 8000d86:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(gpio_type, gpio_pin, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f000 fdbc 	bl	800190c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(hspi, tx_Data, tx_len, 1000);
 8000d94:	7afb      	ldrb	r3, [r7, #11]
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9c:	68f9      	ldr	r1, [r7, #12]
 8000d9e:	69b8      	ldr	r0, [r7, #24]
 8000da0:	f001 fe3f 	bl	8002a22 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, rx_data, rx_len, 1000);
 8000da4:	7abb      	ldrb	r3, [r7, #10]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	69b8      	ldr	r0, [r7, #24]
 8000db0:	f001 ffa5 	bl	8002cfe <HAL_SPI_Receive>

	HAL_GPIO_WritePin(gpio_type, gpio_pin, 1);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2110      	movs	r1, #16
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f000 fda6 	bl	800190c <HAL_GPIO_WritePin>

}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dce:	f000 faa4 	bl	800131a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd2:	f000 f817 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd6:	f000 f8eb 	bl	8000fb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dda:	f000 f89d 	bl	8000f18 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000dde:	f000 f85d 	bl	8000e9c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  cell_asic *c_a = (cell_asic *)malloc(ic_number);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f003 fa88 	bl	80042f8 <malloc>
 8000de8:	4603      	mov	r3, r0
 8000dea:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cell_voltage(c_a, &hspi1);
 8000dec:	4904      	ldr	r1, [pc, #16]	; (8000e00 <main+0x38>)
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ff3f 	bl	8000c72 <cell_voltage>


	  HAL_Delay(500);
 8000df4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df8:	f000 fb00 	bl	80013fc <HAL_Delay>
	  cell_voltage(c_a, &hspi1);
 8000dfc:	e7f6      	b.n	8000dec <main+0x24>
 8000dfe:	bf00      	nop
 8000e00:	2000008c 	.word	0x2000008c

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b094      	sub	sp, #80	; 0x50
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	2238      	movs	r2, #56	; 0x38
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 fa78 	bl	8004308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 fd88 	bl	800193c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e36:	2340      	movs	r3, #64	; 0x40
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e42:	2304      	movs	r3, #4
 8000e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e46:	2355      	movs	r3, #85	; 0x55
 8000e48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fe12 	bl	8001a84 <HAL_RCC_OscConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e66:	f000 f8f9 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2104      	movs	r1, #4
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 f916 	bl	80020b4 <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e8e:	f000 f8e5 	bl	800105c <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3750      	adds	r7, #80	; 0x50
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <MX_SPI1_Init+0x78>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000eb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ece:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ed2:	2238      	movs	r2, #56	; 0x38
 8000ed4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000eea:	2207      	movs	r2, #7
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000efc:	f001 fce6 	bl	80028cc <HAL_SPI_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f06:	f000 f8a9 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000008c 	.word	0x2000008c
 8000f14:	40013000 	.word	0x40013000

08000f18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f1e:	4a23      	ldr	r2, [pc, #140]	; (8000fac <MX_USART2_UART_Init+0x94>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f62:	f002 fbcb 	bl	80036fc <HAL_UART_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f6c:	f000 f876 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f74:	f003 f8cc 	bl	8004110 <HAL_UARTEx_SetTxFifoThreshold>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f7e:	f000 f86d 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f86:	f003 f901 	bl	800418c <HAL_UARTEx_SetRxFifoThreshold>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f90:	f000 f864 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_USART2_UART_Init+0x90>)
 8000f96:	f003 f882 	bl	800409e <HAL_UARTEx_DisableFifoMode>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa0:	f000 f85c 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200000f0 	.word	0x200000f0
 8000fac:	40004400 	.word	0x40004400

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <MX_GPIO_Init+0xa4>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a22      	ldr	r2, [pc, #136]	; (8001054 <MX_GPIO_Init+0xa4>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b20      	ldr	r3, [pc, #128]	; (8001054 <MX_GPIO_Init+0xa4>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_GPIO_Init+0xa4>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <MX_GPIO_Init+0xa4>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_GPIO_Init+0xa4>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffe:	f000 fc85 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001008:	4813      	ldr	r0, [pc, #76]	; (8001058 <MX_GPIO_Init+0xa8>)
 800100a:	f000 fc7f 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800100e:	2310      	movs	r3, #16
 8001010:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f000 faee 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800102c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4619      	mov	r1, r3
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_GPIO_Init+0xa8>)
 8001046:	f000 fadf 	bl	8001608 <HAL_GPIO_Init>

}
 800104a:	bf00      	nop
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	48000400 	.word	0x48000400

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	e7fe      	b.n	8001064 <Error_Handler+0x8>
	...

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_MspInit+0x44>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_MspInit+0x44>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6613      	str	r3, [r2, #96]	; 0x60
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_MspInit+0x44>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_MspInit+0x44>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_MspInit+0x44>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_MspInit+0x44>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_SPI_MspInit+0x7c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d128      	bne.n	8001124 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	4a16      	ldr	r2, [pc, #88]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010dc:	6613      	str	r3, [r2, #96]	; 0x60
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001102:	23e0      	movs	r3, #224	; 0xe0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001112:	2305      	movs	r3, #5
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f000 fa72 	bl	8001608 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40013000 	.word	0x40013000
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b09a      	sub	sp, #104	; 0x68
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	2244      	movs	r2, #68	; 0x44
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f003 f8d7 	bl	8004308 <memset>
  if(huart->Instance==USART2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_UART_MspInit+0xa8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d136      	bne.n	80011d2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001164:	2302      	movs	r3, #2
 8001166:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4618      	mov	r0, r3
 8001172:	f001 f9bb 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800117c:	f7ff ff6e 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_UART_MspInit+0xac>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <HAL_UART_MspInit+0xac>)
 8001186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118a:	6593      	str	r3, [r2, #88]	; 0x58
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_UART_MspInit+0xac>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_UART_MspInit+0xac>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <HAL_UART_MspInit+0xac>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_UART_MspInit+0xac>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80011b0:	230c      	movs	r3, #12
 80011b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c0:	2307      	movs	r3, #7
 80011c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ce:	f000 fa1b 	bl	8001608 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3768      	adds	r7, #104	; 0x68
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40004400 	.word	0x40004400
 80011e0:	40021000 	.word	0x40021000

080011e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <NMI_Handler+0x4>

080011ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <MemManage_Handler+0x4>

080011f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <BusFault_Handler+0x4>

080011fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <UsageFault_Handler+0x4>

08001202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001230:	f000 f8c6 	bl	80013c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001268:	f003 f81c 	bl	80042a4 <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20008000 	.word	0x20008000
 8001298:	00000400 	.word	0x00000400
 800129c:	20000180 	.word	0x20000180
 80012a0:	20000198 	.word	0x20000198

080012a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <SystemInit+0x20>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <SystemInit+0x20>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480d      	ldr	r0, [pc, #52]	; (8001304 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ce:	490e      	ldr	r1, [pc, #56]	; (8001308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d0:	4a0e      	ldr	r2, [pc, #56]	; (800130c <LoopForever+0xe>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e4:	4c0b      	ldr	r4, [pc, #44]	; (8001314 <LoopForever+0x16>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012f2:	f7ff ffd7 	bl	80012a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f6:	f002 ffdb 	bl	80042b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012fa:	f7ff fd65 	bl	8000dc8 <main>

080012fe <LoopForever>:

LoopForever:
    b LoopForever
 80012fe:	e7fe      	b.n	80012fe <LoopForever>
  ldr   r0, =_estack
 8001300:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001308:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800130c:	080046e4 	.word	0x080046e4
  ldr r2, =_sbss
 8001310:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001314:	20000198 	.word	0x20000198

08001318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC1_2_IRQHandler>

0800131a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001324:	2003      	movs	r0, #3
 8001326:	f000 f93d 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800132a:	2000      	movs	r0, #0
 800132c:	f000 f80e 	bl	800134c <HAL_InitTick>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	e001      	b.n	8001340 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800133c:	f7ff fe94 	bl	8001068 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001340:	79fb      	ldrb	r3, [r7, #7]

}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_InitTick+0x68>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d022      	beq.n	80013a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_InitTick+0x6c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_InitTick+0x68>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800136c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001370:	fbb2 f3f3 	udiv	r3, r2, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f93a 	bl	80015ee <HAL_SYSTICK_Config>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10f      	bne.n	80013a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b0f      	cmp	r3, #15
 8001384:	d809      	bhi.n	800139a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001386:	2200      	movs	r2, #0
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	f04f 30ff 	mov.w	r0, #4294967295
 800138e:	f000 f914 	bl	80015ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <HAL_InitTick+0x70>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e007      	b.n	80013aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	e004      	b.n	80013aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e001      	b.n	80013aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000004 	.word	0x20000004

080013c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x1c>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_IncTick+0x20>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_IncTick+0x1c>)
 80013d0:	6013      	str	r3, [r2, #0]
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	20000184 	.word	0x20000184
 80013e0:	20000008 	.word	0x20000008

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000184 	.word	0x20000184

080013fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff ffee 	bl	80013e4 <HAL_GetTick>
 8001408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d004      	beq.n	8001420 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_Delay+0x40>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001420:	bf00      	nop
 8001422:	f7ff ffdf 	bl	80013e4 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	429a      	cmp	r2, r3
 8001430:	d8f7      	bhi.n	8001422 <HAL_Delay+0x26>
  {
  }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000008 	.word	0x20000008

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff47 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff5e 	bl	8001488 <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff90 	bl	80014f8 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5f 	bl	80014a4 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffb2 	bl	8001560 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001616:	e15a      	b.n	80018ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2101      	movs	r1, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 814c 	beq.w	80018c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d005      	beq.n	8001648 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001644:	2b02      	cmp	r3, #2
 8001646:	d130      	bne.n	80016aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800167e:	2201      	movs	r2, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	f003 0201 	and.w	r2, r3, #1
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d017      	beq.n	80016e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2203      	movs	r2, #3
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d123      	bne.n	800173a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	220f      	movs	r2, #15
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	08da      	lsrs	r2, r3, #3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3208      	adds	r2, #8
 8001734:	6939      	ldr	r1, [r7, #16]
 8001736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0203 	and.w	r2, r3, #3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80a6 	beq.w	80018c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177c:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <HAL_GPIO_Init+0x2e4>)
 800177e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001780:	4a5a      	ldr	r2, [pc, #360]	; (80018ec <HAL_GPIO_Init+0x2e4>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6613      	str	r3, [r2, #96]	; 0x60
 8001788:	4b58      	ldr	r3, [pc, #352]	; (80018ec <HAL_GPIO_Init+0x2e4>)
 800178a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001794:	4a56      	ldr	r2, [pc, #344]	; (80018f0 <HAL_GPIO_Init+0x2e8>)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017be:	d01f      	beq.n	8001800 <HAL_GPIO_Init+0x1f8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a4c      	ldr	r2, [pc, #304]	; (80018f4 <HAL_GPIO_Init+0x2ec>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d019      	beq.n	80017fc <HAL_GPIO_Init+0x1f4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a4b      	ldr	r2, [pc, #300]	; (80018f8 <HAL_GPIO_Init+0x2f0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d013      	beq.n	80017f8 <HAL_GPIO_Init+0x1f0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a4a      	ldr	r2, [pc, #296]	; (80018fc <HAL_GPIO_Init+0x2f4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00d      	beq.n	80017f4 <HAL_GPIO_Init+0x1ec>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a49      	ldr	r2, [pc, #292]	; (8001900 <HAL_GPIO_Init+0x2f8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_Init+0x1e8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a48      	ldr	r2, [pc, #288]	; (8001904 <HAL_GPIO_Init+0x2fc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_GPIO_Init+0x1e4>
 80017e8:	2305      	movs	r3, #5
 80017ea:	e00a      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017ec:	2306      	movs	r3, #6
 80017ee:	e008      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017f0:	2304      	movs	r3, #4
 80017f2:	e006      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017f4:	2303      	movs	r3, #3
 80017f6:	e004      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e002      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 8001800:	2300      	movs	r3, #0
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	f002 0203 	and.w	r2, r2, #3
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	4093      	lsls	r3, r2
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001812:	4937      	ldr	r1, [pc, #220]	; (80018f0 <HAL_GPIO_Init+0x2e8>)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001820:	4b39      	ldr	r3, [pc, #228]	; (8001908 <HAL_GPIO_Init+0x300>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001844:	4a30      	ldr	r2, [pc, #192]	; (8001908 <HAL_GPIO_Init+0x300>)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800184a:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <HAL_GPIO_Init+0x300>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800186e:	4a26      	ldr	r2, [pc, #152]	; (8001908 <HAL_GPIO_Init+0x300>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_GPIO_Init+0x300>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <HAL_GPIO_Init+0x300>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_GPIO_Init+0x300>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c2:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_GPIO_Init+0x300>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f47f ae9d 	bne.w	8001618 <HAL_GPIO_Init+0x10>
  }
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000
 80018f4:	48000400 	.word	0x48000400
 80018f8:	48000800 	.word	0x48000800
 80018fc:	48000c00 	.word	0x48000c00
 8001900:	48001000 	.word	0x48001000
 8001904:	48001400 	.word	0x48001400
 8001908:	40010400 	.word	0x40010400

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001928:	e002      	b.n	8001930 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d141      	bne.n	80019ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800194a:	4b4b      	ldr	r3, [pc, #300]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001956:	d131      	bne.n	80019bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001958:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800195e:	4a46      	ldr	r2, [pc, #280]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001964:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001968:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001970:	4a41      	ldr	r2, [pc, #260]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001976:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001978:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2232      	movs	r2, #50	; 0x32
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	4a3f      	ldr	r2, [pc, #252]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001984:	fba2 2303 	umull	r2, r3, r2, r3
 8001988:	0c9b      	lsrs	r3, r3, #18
 800198a:	3301      	adds	r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800198e:	e002      	b.n	8001996 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3b01      	subs	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a2:	d102      	bne.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f2      	bne.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b6:	d158      	bne.n	8001a6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e057      	b.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019c2:	4a2d      	ldr	r2, [pc, #180]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019cc:	e04d      	b.n	8001a6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d4:	d141      	bne.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019d6:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e2:	d131      	bne.n	8001a48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ea:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019fc:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2232      	movs	r2, #50	; 0x32
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	0c9b      	lsrs	r3, r3, #18
 8001a16:	3301      	adds	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a1a:	e002      	b.n	8001a22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2e:	d102      	bne.n	8001a36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f2      	bne.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a42:	d112      	bne.n	8001a6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e011      	b.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a58:	e007      	b.n	8001a6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a68:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40007000 	.word	0x40007000
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	431bde83 	.word	0x431bde83

08001a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e306      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d075      	beq.n	8001b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa2:	4b97      	ldr	r3, [pc, #604]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aac:	4b94      	ldr	r3, [pc, #592]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	d102      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3e>
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d002      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x44>
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	4b8d      	ldr	r3, [pc, #564]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d05b      	beq.n	8001b8c <HAL_RCC_OscConfig+0x108>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d157      	bne.n	8001b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e2e1      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_OscConfig+0x74>
 8001aea:	4b85      	ldr	r3, [pc, #532]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a84      	ldr	r2, [pc, #528]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xb0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x98>
 8001b02:	4b7f      	ldr	r3, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a7e      	ldr	r2, [pc, #504]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b7c      	ldr	r3, [pc, #496]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a7b      	ldr	r2, [pc, #492]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xb0>
 8001b1c:	4b78      	ldr	r3, [pc, #480]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a77      	ldr	r2, [pc, #476]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a74      	ldr	r2, [pc, #464]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fc52 	bl	80013e4 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fc4e 	bl	80013e4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e2a6      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b56:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xc0>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff fc3e 	bl	80013e4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fc3a 	bl	80013e4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e292      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7e:	4b60      	ldr	r3, [pc, #384]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0xe8>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d075      	beq.n	8001c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9a:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba4:	4b56      	ldr	r3, [pc, #344]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b0c      	cmp	r3, #12
 8001bb2:	d102      	bne.n	8001bba <HAL_RCC_OscConfig+0x136>
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d002      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x13c>
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d11f      	bne.n	8001c00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc0:	4b4f      	ldr	r3, [pc, #316]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x154>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e265      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	4946      	ldr	r1, [pc, #280]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bec:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fbab 	bl	800134c <HAL_InitTick>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d043      	beq.n	8001c84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e251      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d023      	beq.n	8001c50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c08:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a3c      	ldr	r2, [pc, #240]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fbe6 	bl	80013e4 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fbe2 	bl	80013e4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e23a      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	061b      	lsls	r3, r3, #24
 8001c48:	492d      	ldr	r1, [pc, #180]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
 8001c4e:	e01a      	b.n	8001c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a2a      	ldr	r2, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fbc2 	bl	80013e4 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff fbbe 	bl	80013e4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e216      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x1e0>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d041      	beq.n	8001d16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01c      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca0:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff fb9b 	bl	80013e4 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fb97 	bl	80013e4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e1ef      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0ef      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x22e>
 8001cd2:	e020      	b.n	8001d16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fb7e 	bl	80013e4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cea:	e00d      	b.n	8001d08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fb7a 	bl	80013e4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d906      	bls.n	8001d08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1d2      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d08:	4b8c      	ldr	r3, [pc, #560]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1ea      	bne.n	8001cec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80a6 	beq.w	8001e70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d28:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x2b4>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x2b6>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00d      	beq.n	8001d5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b7f      	ldr	r3, [pc, #508]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	4a7e      	ldr	r2, [pc, #504]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4a:	4b7c      	ldr	r3, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d56:	2301      	movs	r3, #1
 8001d58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5a:	4b79      	ldr	r3, [pc, #484]	; (8001f40 <HAL_RCC_OscConfig+0x4bc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d118      	bne.n	8001d98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d66:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCC_OscConfig+0x4bc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a75      	ldr	r2, [pc, #468]	; (8001f40 <HAL_RCC_OscConfig+0x4bc>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d72:	f7ff fb37 	bl	80013e4 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7a:	f7ff fb33 	bl	80013e4 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e18b      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8c:	4b6c      	ldr	r3, [pc, #432]	; (8001f40 <HAL_RCC_OscConfig+0x4bc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d108      	bne.n	8001db2 <HAL_RCC_OscConfig+0x32e>
 8001da0:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da6:	4a65      	ldr	r2, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db0:	e024      	b.n	8001dfc <HAL_RCC_OscConfig+0x378>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d110      	bne.n	8001ddc <HAL_RCC_OscConfig+0x358>
 8001dba:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc0:	4a5e      	ldr	r2, [pc, #376]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dca:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd0:	4a5a      	ldr	r2, [pc, #360]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dda:	e00f      	b.n	8001dfc <HAL_RCC_OscConfig+0x378>
 8001ddc:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	4a56      	ldr	r2, [pc, #344]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df2:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d016      	beq.n	8001e32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff faee 	bl	80013e4 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7ff faea 	bl	80013e4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e140      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e22:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ed      	beq.n	8001e0c <HAL_RCC_OscConfig+0x388>
 8001e30:	e015      	b.n	8001e5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e32:	f7ff fad7 	bl	80013e4 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fad3 	bl	80013e4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e129      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e50:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ed      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e5e:	7ffb      	ldrb	r3, [r7, #31]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e64:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	4a34      	ldr	r2, [pc, #208]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d03c      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e8a:	4a2c      	ldr	r2, [pc, #176]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7ff faa6 	bl	80013e4 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9c:	f7ff faa2 	bl	80013e4 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e0fa      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ef      	beq.n	8001e9c <HAL_RCC_OscConfig+0x418>
 8001ebc:	e01b      	b.n	8001ef6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ece:	f7ff fa89 	bl	80013e4 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed6:	f7ff fa85 	bl	80013e4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e0dd      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1ef      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 80d1 	beq.w	80020a2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	f000 808b 	beq.w	8002024 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d15e      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7ff fa5f 	bl	80013e4 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f28:	e00c      	b.n	8001f44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7ff fa5b 	bl	80013e4 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d905      	bls.n	8001f44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0b3      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f44:	4b59      	ldr	r3, [pc, #356]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ec      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f50:	4b56      	ldr	r3, [pc, #344]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <HAL_RCC_OscConfig+0x62c>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6a11      	ldr	r1, [r2, #32]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f60:	3a01      	subs	r2, #1
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	4311      	orrs	r1, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f6a:	0212      	lsls	r2, r2, #8
 8001f6c:	4311      	orrs	r1, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f72:	0852      	lsrs	r2, r2, #1
 8001f74:	3a01      	subs	r2, #1
 8001f76:	0552      	lsls	r2, r2, #21
 8001f78:	4311      	orrs	r1, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f7e:	0852      	lsrs	r2, r2, #1
 8001f80:	3a01      	subs	r2, #1
 8001f82:	0652      	lsls	r2, r2, #25
 8001f84:	4311      	orrs	r1, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f8a:	06d2      	lsls	r2, r2, #27
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	4947      	ldr	r1, [pc, #284]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f94:	4b45      	ldr	r3, [pc, #276]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a44      	ldr	r2, [pc, #272]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa0:	4b42      	ldr	r3, [pc, #264]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a41      	ldr	r2, [pc, #260]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff fa1a 	bl	80013e4 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff fa16 	bl	80013e4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e06e      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc6:	4b39      	ldr	r3, [pc, #228]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x530>
 8001fd2:	e066      	b.n	80020a2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a34      	ldr	r2, [pc, #208]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fde:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fe0:	4b32      	ldr	r3, [pc, #200]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4a31      	ldr	r2, [pc, #196]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fe6:	f023 0303 	bic.w	r3, r3, #3
 8001fea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fec:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a2e      	ldr	r2, [pc, #184]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001ff2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7ff f9f2 	bl	80013e4 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff f9ee 	bl	80013e4 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e046      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002016:	4b25      	ldr	r3, [pc, #148]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x580>
 8002022:	e03e      	b.n	80020a2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e039      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002030:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f003 0203 	and.w	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	429a      	cmp	r2, r3
 8002042:	d12c      	bne.n	800209e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	3b01      	subs	r3, #1
 8002050:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d123      	bne.n	800209e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d11b      	bne.n	800209e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d113      	bne.n	800209e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	3b01      	subs	r3, #1
 8002084:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d109      	bne.n	800209e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	019f800c 	.word	0x019f800c

080020b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e11e      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b91      	ldr	r3, [pc, #580]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d910      	bls.n	80020fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b8e      	ldr	r3, [pc, #568]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 020f 	bic.w	r2, r3, #15
 80020e2:	498c      	ldr	r1, [pc, #560]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b8a      	ldr	r3, [pc, #552]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e106      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d073      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d129      	bne.n	8002164 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002110:	4b81      	ldr	r3, [pc, #516]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0f4      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002120:	f000 f99e 	bl	8002460 <RCC_GetSysClockFreqFromPLLSource>
 8002124:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4a7c      	ldr	r2, [pc, #496]	; (800231c <HAL_RCC_ClockConfig+0x268>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d93f      	bls.n	80021ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800212e:	4b7a      	ldr	r3, [pc, #488]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002142:	2b00      	cmp	r3, #0
 8002144:	d033      	beq.n	80021ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d12f      	bne.n	80021ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800214e:	4b72      	ldr	r3, [pc, #456]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002156:	4a70      	ldr	r2, [pc, #448]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e024      	b.n	80021ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d107      	bne.n	800217c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216c:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0c6      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800217c:	4b66      	ldr	r3, [pc, #408]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0be      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800218c:	f000 f8ce 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8002190:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4a61      	ldr	r2, [pc, #388]	; (800231c <HAL_RCC_ClockConfig+0x268>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d909      	bls.n	80021ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800219a:	4b5f      	ldr	r3, [pc, #380]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021a2:	4a5d      	ldr	r2, [pc, #372]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80021a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b5a      	ldr	r3, [pc, #360]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4957      	ldr	r1, [pc, #348]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c0:	f7ff f910 	bl	80013e4 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7ff f90c 	bl	80013e4 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e095      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b4e      	ldr	r3, [pc, #312]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d023      	beq.n	8002244 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002208:	4b43      	ldr	r3, [pc, #268]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a42      	ldr	r2, [pc, #264]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800220e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002212:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002220:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002228:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800222a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800222e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b39      	ldr	r3, [pc, #228]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4936      	ldr	r1, [pc, #216]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
 8002242:	e008      	b.n	8002256 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b80      	cmp	r3, #128	; 0x80
 8002248:	d105      	bne.n	8002256 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800224a:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	4a32      	ldr	r2, [pc, #200]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002250:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002254:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d21d      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002264:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 020f 	bic.w	r2, r3, #15
 800226c:	4929      	ldr	r1, [pc, #164]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002274:	f7ff f8b6 	bl	80013e4 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7ff f8b2 	bl	80013e4 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e03b      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d1ed      	bne.n	800227c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4917      	ldr	r1, [pc, #92]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	490f      	ldr	r1, [pc, #60]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022de:	f000 f825 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	490c      	ldr	r1, [pc, #48]	; (8002320 <HAL_RCC_ClockConfig+0x26c>)
 80022f0:	5ccb      	ldrb	r3, [r1, r3]
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	fa22 f303 	lsr.w	r3, r2, r3
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_RCC_ClockConfig+0x270>)
 80022fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_RCC_ClockConfig+0x274>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff f822 	bl	800134c <HAL_InitTick>
 8002308:	4603      	mov	r3, r0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40022000 	.word	0x40022000
 8002318:	40021000 	.word	0x40021000
 800231c:	04c4b400 	.word	0x04c4b400
 8002320:	08004694 	.word	0x08004694
 8002324:	20000000 	.word	0x20000000
 8002328:	20000004 	.word	0x20000004

0800232c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002332:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b04      	cmp	r3, #4
 800233c:	d102      	bne.n	8002344 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800233e:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	e047      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d102      	bne.n	8002356 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002350:	4b26      	ldr	r3, [pc, #152]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	e03e      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d136      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	3301      	adds	r3, #1
 8002378:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d10c      	bne.n	800239a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002380:	4a1a      	ldr	r2, [pc, #104]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	4a16      	ldr	r2, [pc, #88]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800238a:	68d2      	ldr	r2, [r2, #12]
 800238c:	0a12      	lsrs	r2, r2, #8
 800238e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002392:	fb02 f303 	mul.w	r3, r2, r3
 8002396:	617b      	str	r3, [r7, #20]
      break;
 8002398:	e00c      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800239a:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a4:	68d2      	ldr	r2, [r2, #12]
 80023a6:	0a12      	lsrs	r2, r2, #8
 80023a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	617b      	str	r3, [r7, #20]
      break;
 80023b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0e5b      	lsrs	r3, r3, #25
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	3301      	adds	r3, #1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	e001      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023d4:	693b      	ldr	r3, [r7, #16]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	371c      	adds	r7, #28
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	00f42400 	.word	0x00f42400
 80023ec:	007a1200 	.word	0x007a1200

080023f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000000 	.word	0x20000000

08002408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800240c:	f7ff fff0 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4904      	ldr	r1, [pc, #16]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x28>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	080046a4 	.word	0x080046a4

08002434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002438:	f7ff ffda 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0adb      	lsrs	r3, r3, #11
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_RCC_GetPCLK2Freq+0x28>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	080046a4 	.word	0x080046a4

08002460 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3301      	adds	r3, #1
 800247c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d10c      	bne.n	800249e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002484:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800248e:	68d2      	ldr	r2, [r2, #12]
 8002490:	0a12      	lsrs	r2, r2, #8
 8002492:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
    break;
 800249c:	e00c      	b.n	80024b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024a8:	68d2      	ldr	r2, [r2, #12]
 80024aa:	0a12      	lsrs	r2, r2, #8
 80024ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
    break;
 80024b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0e5b      	lsrs	r3, r3, #25
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024d2:	687b      	ldr	r3, [r7, #4]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40021000 	.word	0x40021000
 80024e4:	007a1200 	.word	0x007a1200
 80024e8:	00f42400 	.word	0x00f42400

080024ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024f4:	2300      	movs	r3, #0
 80024f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f8:	2300      	movs	r3, #0
 80024fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8098 	beq.w	800263a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250e:	4b43      	ldr	r3, [pc, #268]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10d      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	4b40      	ldr	r3, [pc, #256]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	4a3f      	ldr	r2, [pc, #252]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6593      	str	r3, [r2, #88]	; 0x58
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002532:	2301      	movs	r3, #1
 8002534:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002536:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a39      	ldr	r2, [pc, #228]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002542:	f7fe ff4f 	bl	80013e4 <HAL_GetTick>
 8002546:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002548:	e009      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7fe ff4b 	bl	80013e4 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d902      	bls.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	74fb      	strb	r3, [r7, #19]
        break;
 800255c:	e005      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800255e:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0ef      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d159      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002570:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01e      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	d019      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800258c:	4b23      	ldr	r3, [pc, #140]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002596:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002598:	4b20      	ldr	r3, [pc, #128]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	4a1b      	ldr	r2, [pc, #108]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025b8:	4a18      	ldr	r2, [pc, #96]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe ff0b 	bl	80013e4 <HAL_GetTick>
 80025ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d0:	e00b      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7fe ff07 	bl	80013e4 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d902      	bls.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	74fb      	strb	r3, [r7, #19]
            break;
 80025e8:	e006      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ec      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10b      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	4903      	ldr	r1, [pc, #12]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002614:	e008      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	74bb      	strb	r3, [r7, #18]
 800261a:	e005      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002628:	7c7b      	ldrb	r3, [r7, #17]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d105      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262e:	4ba6      	ldr	r3, [pc, #664]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	4aa5      	ldr	r2, [pc, #660]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002638:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002646:	4ba0      	ldr	r3, [pc, #640]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f023 0203 	bic.w	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	499c      	ldr	r1, [pc, #624]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002668:	4b97      	ldr	r3, [pc, #604]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 020c 	bic.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	4994      	ldr	r1, [pc, #592]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800268a:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	498b      	ldr	r1, [pc, #556]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026ac:	4b86      	ldr	r3, [pc, #536]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	4983      	ldr	r1, [pc, #524]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ce:	4b7e      	ldr	r3, [pc, #504]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	497a      	ldr	r1, [pc, #488]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026f0:	4b75      	ldr	r3, [pc, #468]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	4972      	ldr	r1, [pc, #456]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002712:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002718:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4969      	ldr	r1, [pc, #420]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002734:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4961      	ldr	r1, [pc, #388]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002756:	4b5c      	ldr	r3, [pc, #368]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	4958      	ldr	r1, [pc, #352]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d015      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	4950      	ldr	r1, [pc, #320]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002796:	d105      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002798:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a4a      	ldr	r2, [pc, #296]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027b0:	4b45      	ldr	r3, [pc, #276]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	4942      	ldr	r1, [pc, #264]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ce:	d105      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d0:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4a3c      	ldr	r2, [pc, #240]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d015      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027e8:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4934      	ldr	r1, [pc, #208]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002806:	d105      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a2e      	ldr	r2, [pc, #184]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002812:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d015      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002820:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	4926      	ldr	r1, [pc, #152]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800283e:	d105      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a20      	ldr	r2, [pc, #128]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800284a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d015      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	4918      	ldr	r1, [pc, #96]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002876:	d105      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002882:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002890:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	490a      	ldr	r1, [pc, #40]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028ae:	d105      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e09d      	b.n	8002a1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d108      	bne.n	80028f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ee:	d009      	beq.n	8002904 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
 80028f6:	e005      	b.n	8002904 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe fbc6 	bl	80010b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002944:	d902      	bls.n	800294c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	e002      	b.n	8002952 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800294c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002950:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800295a:	d007      	beq.n	800296c <HAL_SPI_Init+0xa0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002964:	d002      	beq.n	800296c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	ea42 0103 	orr.w	r1, r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	f003 0204 	and.w	r2, r3, #4
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029e8:	ea42 0103 	orr.w	r1, r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b088      	sub	sp, #32
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_SPI_Transmit+0x22>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e158      	b.n	8002cf6 <HAL_SPI_Transmit+0x2d4>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a4c:	f7fe fcca 	bl	80013e4 <HAL_GetTick>
 8002a50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d002      	beq.n	8002a68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
 8002a64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a66:	e13d      	b.n	8002ce4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_SPI_Transmit+0x52>
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a78:	e134      	b.n	8002ce4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	88fa      	ldrh	r2, [r7, #6]
 8002a98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac4:	d10f      	bne.n	8002ae6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d007      	beq.n	8002b04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b0c:	d94b      	bls.n	8002ba6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_SPI_Transmit+0xfa>
 8002b16:	8afb      	ldrh	r3, [r7, #22]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d13e      	bne.n	8002b9a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	881a      	ldrh	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	1c9a      	adds	r2, r3, #2
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b40:	e02b      	b.n	8002b9a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d112      	bne.n	8002b76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	881a      	ldrh	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	1c9a      	adds	r2, r3, #2
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b74:	e011      	b.n	8002b9a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b76:	f7fe fc35 	bl	80013e4 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d803      	bhi.n	8002b8e <HAL_SPI_Transmit+0x16c>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d102      	bne.n	8002b94 <HAL_SPI_Transmit+0x172>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b98:	e0a4      	b.n	8002ce4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ce      	bne.n	8002b42 <HAL_SPI_Transmit+0x120>
 8002ba4:	e07c      	b.n	8002ca0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_SPI_Transmit+0x192>
 8002bae:	8afb      	ldrh	r3, [r7, #22]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d170      	bne.n	8002c96 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d912      	bls.n	8002be4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	881a      	ldrh	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	1c9a      	adds	r2, r3, #2
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b02      	subs	r3, #2
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002be2:	e058      	b.n	8002c96 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	7812      	ldrb	r2, [r2, #0]
 8002bf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c0a:	e044      	b.n	8002c96 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d12b      	bne.n	8002c72 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d912      	bls.n	8002c4a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	881a      	ldrh	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	1c9a      	adds	r2, r3, #2
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b02      	subs	r3, #2
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c48:	e025      	b.n	8002c96 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	7812      	ldrb	r2, [r2, #0]
 8002c56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c70:	e011      	b.n	8002c96 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c72:	f7fe fbb7 	bl	80013e4 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d803      	bhi.n	8002c8a <HAL_SPI_Transmit+0x268>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d102      	bne.n	8002c90 <HAL_SPI_Transmit+0x26e>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c94:	e026      	b.n	8002ce4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1b5      	bne.n	8002c0c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	6839      	ldr	r1, [r7, #0]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 fce3 	bl	8003670 <SPI_EndRxTxTransaction>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	77fb      	strb	r3, [r7, #31]
 8002ce0:	e000      	b.n	8002ce4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002ce2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002cf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b088      	sub	sp, #32
 8002d02:	af02      	add	r7, sp, #8
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d1a:	d112      	bne.n	8002d42 <HAL_SPI_Receive+0x44>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10e      	bne.n	8002d42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2204      	movs	r2, #4
 8002d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	4613      	mov	r3, r2
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f910 	bl	8002f5e <HAL_SPI_TransmitReceive>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	e109      	b.n	8002f56 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_SPI_Receive+0x52>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e102      	b.n	8002f56 <HAL_SPI_Receive+0x258>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d58:	f7fe fb44 	bl	80013e4 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d002      	beq.n	8002d70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d6e:	e0e9      	b.n	8002f44 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_SPI_Receive+0x7e>
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d80:	e0e0      	b.n	8002f44 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2204      	movs	r2, #4
 8002d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	88fa      	ldrh	r2, [r7, #6]
 8002d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	88fa      	ldrh	r2, [r7, #6]
 8002da2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dcc:	d908      	bls.n	8002de0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	e007      	b.n	8002df0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df8:	d10f      	bne.n	8002e1a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e24:	2b40      	cmp	r3, #64	; 0x40
 8002e26:	d007      	beq.n	8002e38 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e40:	d867      	bhi.n	8002f12 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e42:	e030      	b.n	8002ea6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d117      	bne.n	8002e82 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f103 020c 	add.w	r2, r3, #12
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	7812      	ldrb	r2, [r2, #0]
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002e80:	e011      	b.n	8002ea6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e82:	f7fe faaf 	bl	80013e4 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d803      	bhi.n	8002e9a <HAL_SPI_Receive+0x19c>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d102      	bne.n	8002ea0 <HAL_SPI_Receive+0x1a2>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ea4:	e04e      	b.n	8002f44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1c8      	bne.n	8002e44 <HAL_SPI_Receive+0x146>
 8002eb2:	e034      	b.n	8002f1e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d115      	bne.n	8002eee <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	b292      	uxth	r2, r2
 8002ece:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	1c9a      	adds	r2, r3, #2
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002eec:	e011      	b.n	8002f12 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eee:	f7fe fa79 	bl	80013e4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d803      	bhi.n	8002f06 <HAL_SPI_Receive+0x208>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d102      	bne.n	8002f0c <HAL_SPI_Receive+0x20e>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f10:	e018      	b.n	8002f44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1ca      	bne.n	8002eb4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	6839      	ldr	r1, [r7, #0]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fb4c 	bl	80035c0 <SPI_EndRxTransaction>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	75fb      	strb	r3, [r7, #23]
 8002f40:	e000      	b.n	8002f44 <HAL_SPI_Receive+0x246>
  }

error :
 8002f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b08a      	sub	sp, #40	; 0x28
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x26>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e1fb      	b.n	800337c <HAL_SPI_TransmitReceive+0x41e>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f8c:	f7fe fa2a 	bl	80013e4 <HAL_GetTick>
 8002f90:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f98:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002fa0:	887b      	ldrh	r3, [r7, #2]
 8002fa2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fa8:	7efb      	ldrb	r3, [r7, #27]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d00e      	beq.n	8002fcc <HAL_SPI_TransmitReceive+0x6e>
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fb4:	d106      	bne.n	8002fc4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <HAL_SPI_TransmitReceive+0x66>
 8002fbe:	7efb      	ldrb	r3, [r7, #27]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d003      	beq.n	8002fcc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002fca:	e1cd      	b.n	8003368 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_SPI_TransmitReceive+0x80>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_SPI_TransmitReceive+0x80>
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d103      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002fe4:	e1c0      	b.n	8003368 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d003      	beq.n	8002ffa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2205      	movs	r2, #5
 8002ff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	887a      	ldrh	r2, [r7, #2]
 800300a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	887a      	ldrh	r2, [r7, #2]
 8003012:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	887a      	ldrh	r2, [r7, #2]
 8003020:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	887a      	ldrh	r2, [r7, #2]
 8003026:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800303c:	d802      	bhi.n	8003044 <HAL_SPI_TransmitReceive+0xe6>
 800303e:	8a3b      	ldrh	r3, [r7, #16]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d908      	bls.n	8003056 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	e007      	b.n	8003066 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003064:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d007      	beq.n	8003084 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800308c:	d97c      	bls.n	8003188 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_SPI_TransmitReceive+0x13e>
 8003096:	8a7b      	ldrh	r3, [r7, #18]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d169      	bne.n	8003170 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	881a      	ldrh	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	1c9a      	adds	r2, r3, #2
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030c0:	e056      	b.n	8003170 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d11b      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x1aa>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x1aa>
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d113      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b01      	cmp	r3, #1
 8003114:	d11c      	bne.n	8003150 <HAL_SPI_TransmitReceive+0x1f2>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d016      	beq.n	8003150 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	b292      	uxth	r2, r2
 800312e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	1c9a      	adds	r2, r3, #2
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800314c:	2301      	movs	r3, #1
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003150:	f7fe f948 	bl	80013e4 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315c:	429a      	cmp	r2, r3
 800315e:	d807      	bhi.n	8003170 <HAL_SPI_TransmitReceive+0x212>
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d003      	beq.n	8003170 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800316e:	e0fb      	b.n	8003368 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1a3      	bne.n	80030c2 <HAL_SPI_TransmitReceive+0x164>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d19d      	bne.n	80030c2 <HAL_SPI_TransmitReceive+0x164>
 8003186:	e0df      	b.n	8003348 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x23a>
 8003190:	8a7b      	ldrh	r3, [r7, #18]
 8003192:	2b01      	cmp	r3, #1
 8003194:	f040 80cb 	bne.w	800332e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d912      	bls.n	80031c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	881a      	ldrh	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	1c9a      	adds	r2, r3, #2
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b02      	subs	r3, #2
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031c6:	e0b2      	b.n	800332e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	330c      	adds	r3, #12
 80031d2:	7812      	ldrb	r2, [r2, #0]
 80031d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031ee:	e09e      	b.n	800332e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d134      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x30a>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d02f      	beq.n	8003268 <HAL_SPI_TransmitReceive+0x30a>
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	2b01      	cmp	r3, #1
 800320c:	d12c      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d912      	bls.n	800323e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	881a      	ldrh	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	1c9a      	adds	r2, r3, #2
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b02      	subs	r3, #2
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800323c:	e012      	b.n	8003264 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d148      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x3aa>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d042      	beq.n	8003308 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b01      	cmp	r3, #1
 800328c:	d923      	bls.n	80032d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	b292      	uxth	r2, r2
 800329a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	1c9a      	adds	r2, r3, #2
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b02      	subs	r3, #2
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d81f      	bhi.n	8003304 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	e016      	b.n	8003304 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f103 020c 	add.w	r2, r3, #12
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	7812      	ldrb	r2, [r2, #0]
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003304:	2301      	movs	r3, #1
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003308:	f7fe f86c 	bl	80013e4 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003314:	429a      	cmp	r2, r3
 8003316:	d803      	bhi.n	8003320 <HAL_SPI_TransmitReceive+0x3c2>
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331e:	d102      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x3c8>
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800332c:	e01c      	b.n	8003368 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	f47f af5b 	bne.w	80031f0 <HAL_SPI_TransmitReceive+0x292>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	f47f af54 	bne.w	80031f0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f98f 	bl	8003670 <SPI_EndRxTxTransaction>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d006      	beq.n	8003366 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	661a      	str	r2, [r3, #96]	; 0x60
 8003364:	e000      	b.n	8003368 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003366:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800337c:	4618      	mov	r0, r3
 800337e:	3728      	adds	r7, #40	; 0x28
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003394:	f7fe f826 	bl	80013e4 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	4413      	add	r3, r2
 80033a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033a4:	f7fe f81e 	bl	80013e4 <HAL_GetTick>
 80033a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033aa:	4b39      	ldr	r3, [pc, #228]	; (8003490 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	015b      	lsls	r3, r3, #5
 80033b0:	0d1b      	lsrs	r3, r3, #20
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
 80033b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ba:	e054      	b.n	8003466 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c2:	d050      	beq.n	8003466 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033c4:	f7fe f80e 	bl	80013e4 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d902      	bls.n	80033da <SPI_WaitFlagStateUntilTimeout+0x56>
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d13d      	bne.n	8003456 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033f2:	d111      	bne.n	8003418 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fc:	d004      	beq.n	8003408 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003406:	d107      	bne.n	8003418 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003416:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003420:	d10f      	bne.n	8003442 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003440:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e017      	b.n	8003486 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3b01      	subs	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4013      	ands	r3, r2
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	429a      	cmp	r2, r3
 8003474:	bf0c      	ite	eq
 8003476:	2301      	moveq	r3, #1
 8003478:	2300      	movne	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	429a      	cmp	r2, r3
 8003482:	d19b      	bne.n	80033bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000000 	.word	0x20000000

08003494 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034a6:	f7fd ff9d 	bl	80013e4 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80034b6:	f7fd ff95 	bl	80013e4 <HAL_GetTick>
 80034ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	330c      	adds	r3, #12
 80034c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80034c4:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00da      	lsls	r2, r3, #3
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	0d1b      	lsrs	r3, r3, #20
 80034d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80034dc:	e060      	b.n	80035a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034e4:	d107      	bne.n	80034f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d104      	bne.n	80034f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d050      	beq.n	80035a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034fe:	f7fd ff71 	bl	80013e4 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350a:	429a      	cmp	r2, r3
 800350c:	d902      	bls.n	8003514 <SPI_WaitFifoStateUntilTimeout+0x80>
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	2b00      	cmp	r3, #0
 8003512:	d13d      	bne.n	8003590 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003522:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352c:	d111      	bne.n	8003552 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003536:	d004      	beq.n	8003542 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d107      	bne.n	8003552 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003550:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355a:	d10f      	bne.n	800357c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800357a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e010      	b.n	80035b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	3b01      	subs	r3, #1
 800359e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4013      	ands	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d196      	bne.n	80034de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3728      	adds	r7, #40	; 0x28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000000 	.word	0x20000000

080035c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d4:	d111      	bne.n	80035fa <SPI_EndRxTransaction+0x3a>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035de:	d004      	beq.n	80035ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e8:	d107      	bne.n	80035fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2200      	movs	r2, #0
 8003602:	2180      	movs	r1, #128	; 0x80
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff febd 	bl	8003384 <SPI_WaitFlagStateUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e023      	b.n	8003668 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003628:	d11d      	bne.n	8003666 <SPI_EndRxTransaction+0xa6>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003632:	d004      	beq.n	800363e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363c:	d113      	bne.n	8003666 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7ff ff22 	bl	8003494 <SPI_WaitFifoStateUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e000      	b.n	8003668 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2200      	movs	r2, #0
 8003684:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f7ff ff03 	bl	8003494 <SPI_WaitFifoStateUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d007      	beq.n	80036a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003698:	f043 0220 	orr.w	r2, r3, #32
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e027      	b.n	80036f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2200      	movs	r2, #0
 80036ac:	2180      	movs	r1, #128	; 0x80
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f7ff fe68 	bl	8003384 <SPI_WaitFlagStateUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036be:	f043 0220 	orr.w	r2, r3, #32
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e014      	b.n	80036f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f7ff fedc 	bl	8003494 <SPI_WaitFifoStateUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e6:	f043 0220 	orr.w	r2, r3, #32
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e000      	b.n	80036f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e042      	b.n	8003794 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003714:	2b00      	cmp	r3, #0
 8003716:	d106      	bne.n	8003726 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fd fd07 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2224      	movs	r2, #36	; 0x24
 800372a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f82c 	bl	800379c <UART_SetConfig>
 8003744:	4603      	mov	r3, r0
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e022      	b.n	8003794 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 faec 	bl	8003d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800376a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800377a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fb73 	bl	8003e78 <UART_CheckIdleState>
 8003792:	4603      	mov	r3, r0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800379c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a0:	b08c      	sub	sp, #48	; 0x30
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4bab      	ldr	r3, [pc, #684]	; (8003a78 <UART_SetConfig+0x2dc>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4aa0      	ldr	r2, [pc, #640]	; (8003a7c <UART_SetConfig+0x2e0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003804:	4313      	orrs	r3, r2
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003812:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800381c:	430b      	orrs	r3, r1
 800381e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	f023 010f 	bic.w	r1, r3, #15
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a91      	ldr	r2, [pc, #580]	; (8003a80 <UART_SetConfig+0x2e4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d125      	bne.n	800388c <UART_SetConfig+0xf0>
 8003840:	4b90      	ldr	r3, [pc, #576]	; (8003a84 <UART_SetConfig+0x2e8>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b03      	cmp	r3, #3
 800384c:	d81a      	bhi.n	8003884 <UART_SetConfig+0xe8>
 800384e:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <UART_SetConfig+0xb8>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	08003865 	.word	0x08003865
 8003858:	08003875 	.word	0x08003875
 800385c:	0800386d 	.word	0x0800386d
 8003860:	0800387d 	.word	0x0800387d
 8003864:	2301      	movs	r3, #1
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800386a:	e0d6      	b.n	8003a1a <UART_SetConfig+0x27e>
 800386c:	2302      	movs	r3, #2
 800386e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003872:	e0d2      	b.n	8003a1a <UART_SetConfig+0x27e>
 8003874:	2304      	movs	r3, #4
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800387a:	e0ce      	b.n	8003a1a <UART_SetConfig+0x27e>
 800387c:	2308      	movs	r3, #8
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003882:	e0ca      	b.n	8003a1a <UART_SetConfig+0x27e>
 8003884:	2310      	movs	r3, #16
 8003886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800388a:	e0c6      	b.n	8003a1a <UART_SetConfig+0x27e>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a7d      	ldr	r2, [pc, #500]	; (8003a88 <UART_SetConfig+0x2ec>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d138      	bne.n	8003908 <UART_SetConfig+0x16c>
 8003896:	4b7b      	ldr	r3, [pc, #492]	; (8003a84 <UART_SetConfig+0x2e8>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	d82d      	bhi.n	8003900 <UART_SetConfig+0x164>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <UART_SetConfig+0x110>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038e1 	.word	0x080038e1
 80038b0:	08003901 	.word	0x08003901
 80038b4:	08003901 	.word	0x08003901
 80038b8:	08003901 	.word	0x08003901
 80038bc:	080038f1 	.word	0x080038f1
 80038c0:	08003901 	.word	0x08003901
 80038c4:	08003901 	.word	0x08003901
 80038c8:	08003901 	.word	0x08003901
 80038cc:	080038e9 	.word	0x080038e9
 80038d0:	08003901 	.word	0x08003901
 80038d4:	08003901 	.word	0x08003901
 80038d8:	08003901 	.word	0x08003901
 80038dc:	080038f9 	.word	0x080038f9
 80038e0:	2300      	movs	r3, #0
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038e6:	e098      	b.n	8003a1a <UART_SetConfig+0x27e>
 80038e8:	2302      	movs	r3, #2
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ee:	e094      	b.n	8003a1a <UART_SetConfig+0x27e>
 80038f0:	2304      	movs	r3, #4
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f6:	e090      	b.n	8003a1a <UART_SetConfig+0x27e>
 80038f8:	2308      	movs	r3, #8
 80038fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038fe:	e08c      	b.n	8003a1a <UART_SetConfig+0x27e>
 8003900:	2310      	movs	r3, #16
 8003902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003906:	e088      	b.n	8003a1a <UART_SetConfig+0x27e>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a5f      	ldr	r2, [pc, #380]	; (8003a8c <UART_SetConfig+0x2f0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d125      	bne.n	800395e <UART_SetConfig+0x1c2>
 8003912:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <UART_SetConfig+0x2e8>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800391c:	2b30      	cmp	r3, #48	; 0x30
 800391e:	d016      	beq.n	800394e <UART_SetConfig+0x1b2>
 8003920:	2b30      	cmp	r3, #48	; 0x30
 8003922:	d818      	bhi.n	8003956 <UART_SetConfig+0x1ba>
 8003924:	2b20      	cmp	r3, #32
 8003926:	d00a      	beq.n	800393e <UART_SetConfig+0x1a2>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d814      	bhi.n	8003956 <UART_SetConfig+0x1ba>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <UART_SetConfig+0x19a>
 8003930:	2b10      	cmp	r3, #16
 8003932:	d008      	beq.n	8003946 <UART_SetConfig+0x1aa>
 8003934:	e00f      	b.n	8003956 <UART_SetConfig+0x1ba>
 8003936:	2300      	movs	r3, #0
 8003938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800393c:	e06d      	b.n	8003a1a <UART_SetConfig+0x27e>
 800393e:	2302      	movs	r3, #2
 8003940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003944:	e069      	b.n	8003a1a <UART_SetConfig+0x27e>
 8003946:	2304      	movs	r3, #4
 8003948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800394c:	e065      	b.n	8003a1a <UART_SetConfig+0x27e>
 800394e:	2308      	movs	r3, #8
 8003950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003954:	e061      	b.n	8003a1a <UART_SetConfig+0x27e>
 8003956:	2310      	movs	r3, #16
 8003958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395c:	e05d      	b.n	8003a1a <UART_SetConfig+0x27e>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a4b      	ldr	r2, [pc, #300]	; (8003a90 <UART_SetConfig+0x2f4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d125      	bne.n	80039b4 <UART_SetConfig+0x218>
 8003968:	4b46      	ldr	r3, [pc, #280]	; (8003a84 <UART_SetConfig+0x2e8>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003972:	2bc0      	cmp	r3, #192	; 0xc0
 8003974:	d016      	beq.n	80039a4 <UART_SetConfig+0x208>
 8003976:	2bc0      	cmp	r3, #192	; 0xc0
 8003978:	d818      	bhi.n	80039ac <UART_SetConfig+0x210>
 800397a:	2b80      	cmp	r3, #128	; 0x80
 800397c:	d00a      	beq.n	8003994 <UART_SetConfig+0x1f8>
 800397e:	2b80      	cmp	r3, #128	; 0x80
 8003980:	d814      	bhi.n	80039ac <UART_SetConfig+0x210>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <UART_SetConfig+0x1f0>
 8003986:	2b40      	cmp	r3, #64	; 0x40
 8003988:	d008      	beq.n	800399c <UART_SetConfig+0x200>
 800398a:	e00f      	b.n	80039ac <UART_SetConfig+0x210>
 800398c:	2300      	movs	r3, #0
 800398e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003992:	e042      	b.n	8003a1a <UART_SetConfig+0x27e>
 8003994:	2302      	movs	r3, #2
 8003996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800399a:	e03e      	b.n	8003a1a <UART_SetConfig+0x27e>
 800399c:	2304      	movs	r3, #4
 800399e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a2:	e03a      	b.n	8003a1a <UART_SetConfig+0x27e>
 80039a4:	2308      	movs	r3, #8
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039aa:	e036      	b.n	8003a1a <UART_SetConfig+0x27e>
 80039ac:	2310      	movs	r3, #16
 80039ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b2:	e032      	b.n	8003a1a <UART_SetConfig+0x27e>
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a30      	ldr	r2, [pc, #192]	; (8003a7c <UART_SetConfig+0x2e0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d12a      	bne.n	8003a14 <UART_SetConfig+0x278>
 80039be:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <UART_SetConfig+0x2e8>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039cc:	d01a      	beq.n	8003a04 <UART_SetConfig+0x268>
 80039ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039d2:	d81b      	bhi.n	8003a0c <UART_SetConfig+0x270>
 80039d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d8:	d00c      	beq.n	80039f4 <UART_SetConfig+0x258>
 80039da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039de:	d815      	bhi.n	8003a0c <UART_SetConfig+0x270>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <UART_SetConfig+0x250>
 80039e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e8:	d008      	beq.n	80039fc <UART_SetConfig+0x260>
 80039ea:	e00f      	b.n	8003a0c <UART_SetConfig+0x270>
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039f2:	e012      	b.n	8003a1a <UART_SetConfig+0x27e>
 80039f4:	2302      	movs	r3, #2
 80039f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039fa:	e00e      	b.n	8003a1a <UART_SetConfig+0x27e>
 80039fc:	2304      	movs	r3, #4
 80039fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a02:	e00a      	b.n	8003a1a <UART_SetConfig+0x27e>
 8003a04:	2308      	movs	r3, #8
 8003a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a0a:	e006      	b.n	8003a1a <UART_SetConfig+0x27e>
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a12:	e002      	b.n	8003a1a <UART_SetConfig+0x27e>
 8003a14:	2310      	movs	r3, #16
 8003a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <UART_SetConfig+0x2e0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	f040 80a8 	bne.w	8003b76 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d834      	bhi.n	8003a98 <UART_SetConfig+0x2fc>
 8003a2e:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <UART_SetConfig+0x298>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a59 	.word	0x08003a59
 8003a38:	08003a99 	.word	0x08003a99
 8003a3c:	08003a61 	.word	0x08003a61
 8003a40:	08003a99 	.word	0x08003a99
 8003a44:	08003a67 	.word	0x08003a67
 8003a48:	08003a99 	.word	0x08003a99
 8003a4c:	08003a99 	.word	0x08003a99
 8003a50:	08003a99 	.word	0x08003a99
 8003a54:	08003a6f 	.word	0x08003a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a58:	f7fe fcd6 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8003a5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a5e:	e021      	b.n	8003aa4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <UART_SetConfig+0x2f8>)
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a64:	e01e      	b.n	8003aa4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a66:	f7fe fc61 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8003a6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a6c:	e01a      	b.n	8003aa4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a74:	e016      	b.n	8003aa4 <UART_SetConfig+0x308>
 8003a76:	bf00      	nop
 8003a78:	cfff69f3 	.word	0xcfff69f3
 8003a7c:	40008000 	.word	0x40008000
 8003a80:	40013800 	.word	0x40013800
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40004400 	.word	0x40004400
 8003a8c:	40004800 	.word	0x40004800
 8003a90:	40004c00 	.word	0x40004c00
 8003a94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003aa2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 812a 	beq.w	8003d00 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	4a9e      	ldr	r2, [pc, #632]	; (8003d2c <UART_SetConfig+0x590>)
 8003ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d305      	bcc.n	8003adc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d903      	bls.n	8003ae4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ae2:	e10d      	b.n	8003d00 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	60fa      	str	r2, [r7, #12]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	4a8e      	ldr	r2, [pc, #568]	; (8003d2c <UART_SetConfig+0x590>)
 8003af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2200      	movs	r2, #0
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b06:	f7fc fb87 	bl	8000218 <__aeabi_uldivmod>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4610      	mov	r0, r2
 8003b10:	4619      	mov	r1, r3
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	020b      	lsls	r3, r1, #8
 8003b1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b20:	0202      	lsls	r2, r0, #8
 8003b22:	6979      	ldr	r1, [r7, #20]
 8003b24:	6849      	ldr	r1, [r1, #4]
 8003b26:	0849      	lsrs	r1, r1, #1
 8003b28:	2000      	movs	r0, #0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	4605      	mov	r5, r0
 8003b2e:	eb12 0804 	adds.w	r8, r2, r4
 8003b32:	eb43 0905 	adc.w	r9, r3, r5
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	469a      	mov	sl, r3
 8003b3e:	4693      	mov	fp, r2
 8003b40:	4652      	mov	r2, sl
 8003b42:	465b      	mov	r3, fp
 8003b44:	4640      	mov	r0, r8
 8003b46:	4649      	mov	r1, r9
 8003b48:	f7fc fb66 	bl	8000218 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4613      	mov	r3, r2
 8003b52:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b5a:	d308      	bcc.n	8003b6e <UART_SetConfig+0x3d2>
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b62:	d204      	bcs.n	8003b6e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6a3a      	ldr	r2, [r7, #32]
 8003b6a:	60da      	str	r2, [r3, #12]
 8003b6c:	e0c8      	b.n	8003d00 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b74:	e0c4      	b.n	8003d00 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7e:	d167      	bne.n	8003c50 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003b80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d828      	bhi.n	8003bda <UART_SetConfig+0x43e>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <UART_SetConfig+0x3f4>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003bbd 	.word	0x08003bbd
 8003b98:	08003bc5 	.word	0x08003bc5
 8003b9c:	08003bdb 	.word	0x08003bdb
 8003ba0:	08003bcb 	.word	0x08003bcb
 8003ba4:	08003bdb 	.word	0x08003bdb
 8003ba8:	08003bdb 	.word	0x08003bdb
 8003bac:	08003bdb 	.word	0x08003bdb
 8003bb0:	08003bd3 	.word	0x08003bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f7fe fc28 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8003bb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bba:	e014      	b.n	8003be6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bbc:	f7fe fc3a 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 8003bc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bc2:	e010      	b.n	8003be6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc4:	4b5a      	ldr	r3, [pc, #360]	; (8003d30 <UART_SetConfig+0x594>)
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bc8:	e00d      	b.n	8003be6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bca:	f7fe fbaf 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8003bce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bd0:	e009      	b.n	8003be6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bd8:	e005      	b.n	8003be6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8089 	beq.w	8003d00 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	4a4e      	ldr	r2, [pc, #312]	; (8003d2c <UART_SetConfig+0x590>)
 8003bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c00:	005a      	lsls	r2, r3, #1
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	441a      	add	r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	d916      	bls.n	8003c48 <UART_SetConfig+0x4ac>
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c20:	d212      	bcs.n	8003c48 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f023 030f 	bic.w	r3, r3, #15
 8003c2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	8bfb      	ldrh	r3, [r7, #30]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	8bfa      	ldrh	r2, [r7, #30]
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	e05b      	b.n	8003d00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c4e:	e057      	b.n	8003d00 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d828      	bhi.n	8003caa <UART_SetConfig+0x50e>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <UART_SetConfig+0x4c4>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c85 	.word	0x08003c85
 8003c64:	08003c8d 	.word	0x08003c8d
 8003c68:	08003c95 	.word	0x08003c95
 8003c6c:	08003cab 	.word	0x08003cab
 8003c70:	08003c9b 	.word	0x08003c9b
 8003c74:	08003cab 	.word	0x08003cab
 8003c78:	08003cab 	.word	0x08003cab
 8003c7c:	08003cab 	.word	0x08003cab
 8003c80:	08003ca3 	.word	0x08003ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c84:	f7fe fbc0 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8003c88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c8a:	e014      	b.n	8003cb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c8c:	f7fe fbd2 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 8003c90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c92:	e010      	b.n	8003cb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c94:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <UART_SetConfig+0x594>)
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c98:	e00d      	b.n	8003cb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9a:	f7fe fb47 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8003c9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ca0:	e009      	b.n	8003cb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ca8:	e005      	b.n	8003cb6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cb4:	bf00      	nop
    }

    if (pclk != 0U)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d021      	beq.n	8003d00 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	4a1a      	ldr	r2, [pc, #104]	; (8003d2c <UART_SetConfig+0x590>)
 8003cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	fbb3 f2f2 	udiv	r2, r3, r2
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	441a      	add	r2, r3
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	2b0f      	cmp	r3, #15
 8003ce4:	d909      	bls.n	8003cfa <UART_SetConfig+0x55e>
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d205      	bcs.n	8003cfa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60da      	str	r2, [r3, #12]
 8003cf8:	e002      	b.n	8003d00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2200      	movs	r2, #0
 8003d14:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003d1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3730      	adds	r7, #48	; 0x30
 8003d24:	46bd      	mov	sp, r7
 8003d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2a:	bf00      	nop
 8003d2c:	080046ac 	.word	0x080046ac
 8003d30:	00f42400 	.word	0x00f42400

08003d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01a      	beq.n	8003e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e32:	d10a      	bne.n	8003e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e88:	f7fd faac 	bl	80013e4 <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d10e      	bne.n	8003eba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f82f 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e025      	b.n	8003f06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d10e      	bne.n	8003ee6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f819 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e00f      	b.n	8003f06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b09c      	sub	sp, #112	; 0x70
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	e0a9      	b.n	8004074 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	f000 80a5 	beq.w	8004074 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7fd fa5b 	bl	80013e4 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d140      	bne.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f54:	667b      	str	r3, [r7, #100]	; 0x64
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e6      	bne.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3308      	adds	r3, #8
 8003f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	663b      	str	r3, [r7, #96]	; 0x60
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3308      	adds	r3, #8
 8003f90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f92:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e069      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d051      	beq.n	8004074 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fde:	d149      	bne.n	8004074 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
 800400a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800400e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e6      	bne.n	8003fea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3308      	adds	r3, #8
 8004022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	613b      	str	r3, [r7, #16]
   return(result);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	66bb      	str	r3, [r7, #104]	; 0x68
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3308      	adds	r3, #8
 800403a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800403c:	623a      	str	r2, [r7, #32]
 800403e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	69f9      	ldr	r1, [r7, #28]
 8004042:	6a3a      	ldr	r2, [r7, #32]
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	61bb      	str	r3, [r7, #24]
   return(result);
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e5      	bne.n	800401c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e010      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4013      	ands	r3, r2
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	429a      	cmp	r2, r3
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	429a      	cmp	r2, r3
 8004090:	f43f af46 	beq.w	8003f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3770      	adds	r7, #112	; 0x70
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e027      	b.n	8004104 <HAL_UARTEx_DisableFifoMode+0x66>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2224      	movs	r2, #36	; 0x24
 80040c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0201 	bic.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80040e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004124:	2302      	movs	r3, #2
 8004126:	e02d      	b.n	8004184 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2224      	movs	r2, #36	; 0x24
 8004134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f84f 	bl	8004208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e02d      	b.n	8004200 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	; 0x24
 80041b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f811 	bl	8004208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004214:	2b00      	cmp	r3, #0
 8004216:	d108      	bne.n	800422a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004228:	e031      	b.n	800428e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800422a:	2308      	movs	r3, #8
 800422c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800422e:	2308      	movs	r3, #8
 8004230:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	0e5b      	lsrs	r3, r3, #25
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	0f5b      	lsrs	r3, r3, #29
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004252:	7bbb      	ldrb	r3, [r7, #14]
 8004254:	7b3a      	ldrb	r2, [r7, #12]
 8004256:	4911      	ldr	r1, [pc, #68]	; (800429c <UARTEx_SetNbDataToProcess+0x94>)
 8004258:	5c8a      	ldrb	r2, [r1, r2]
 800425a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800425e:	7b3a      	ldrb	r2, [r7, #12]
 8004260:	490f      	ldr	r1, [pc, #60]	; (80042a0 <UARTEx_SetNbDataToProcess+0x98>)
 8004262:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004264:	fb93 f3f2 	sdiv	r3, r3, r2
 8004268:	b29a      	uxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	7b7a      	ldrb	r2, [r7, #13]
 8004274:	4909      	ldr	r1, [pc, #36]	; (800429c <UARTEx_SetNbDataToProcess+0x94>)
 8004276:	5c8a      	ldrb	r2, [r1, r2]
 8004278:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800427c:	7b7a      	ldrb	r2, [r7, #13]
 800427e:	4908      	ldr	r1, [pc, #32]	; (80042a0 <UARTEx_SetNbDataToProcess+0x98>)
 8004280:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004282:	fb93 f3f2 	sdiv	r3, r3, r2
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	080046c4 	.word	0x080046c4
 80042a0:	080046cc 	.word	0x080046cc

080042a4 <__errno>:
 80042a4:	4b01      	ldr	r3, [pc, #4]	; (80042ac <__errno+0x8>)
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	2000000c 	.word	0x2000000c

080042b0 <__libc_init_array>:
 80042b0:	b570      	push	{r4, r5, r6, lr}
 80042b2:	4d0d      	ldr	r5, [pc, #52]	; (80042e8 <__libc_init_array+0x38>)
 80042b4:	4c0d      	ldr	r4, [pc, #52]	; (80042ec <__libc_init_array+0x3c>)
 80042b6:	1b64      	subs	r4, r4, r5
 80042b8:	10a4      	asrs	r4, r4, #2
 80042ba:	2600      	movs	r6, #0
 80042bc:	42a6      	cmp	r6, r4
 80042be:	d109      	bne.n	80042d4 <__libc_init_array+0x24>
 80042c0:	4d0b      	ldr	r5, [pc, #44]	; (80042f0 <__libc_init_array+0x40>)
 80042c2:	4c0c      	ldr	r4, [pc, #48]	; (80042f4 <__libc_init_array+0x44>)
 80042c4:	f000 f8da 	bl	800447c <_init>
 80042c8:	1b64      	subs	r4, r4, r5
 80042ca:	10a4      	asrs	r4, r4, #2
 80042cc:	2600      	movs	r6, #0
 80042ce:	42a6      	cmp	r6, r4
 80042d0:	d105      	bne.n	80042de <__libc_init_array+0x2e>
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
 80042d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d8:	4798      	blx	r3
 80042da:	3601      	adds	r6, #1
 80042dc:	e7ee      	b.n	80042bc <__libc_init_array+0xc>
 80042de:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e2:	4798      	blx	r3
 80042e4:	3601      	adds	r6, #1
 80042e6:	e7f2      	b.n	80042ce <__libc_init_array+0x1e>
 80042e8:	080046dc 	.word	0x080046dc
 80042ec:	080046dc 	.word	0x080046dc
 80042f0:	080046dc 	.word	0x080046dc
 80042f4:	080046e0 	.word	0x080046e0

080042f8 <malloc>:
 80042f8:	4b02      	ldr	r3, [pc, #8]	; (8004304 <malloc+0xc>)
 80042fa:	4601      	mov	r1, r0
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	f000 b82b 	b.w	8004358 <_malloc_r>
 8004302:	bf00      	nop
 8004304:	2000000c 	.word	0x2000000c

08004308 <memset>:
 8004308:	4402      	add	r2, r0
 800430a:	4603      	mov	r3, r0
 800430c:	4293      	cmp	r3, r2
 800430e:	d100      	bne.n	8004312 <memset+0xa>
 8004310:	4770      	bx	lr
 8004312:	f803 1b01 	strb.w	r1, [r3], #1
 8004316:	e7f9      	b.n	800430c <memset+0x4>

08004318 <sbrk_aligned>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	4e0e      	ldr	r6, [pc, #56]	; (8004354 <sbrk_aligned+0x3c>)
 800431c:	460c      	mov	r4, r1
 800431e:	6831      	ldr	r1, [r6, #0]
 8004320:	4605      	mov	r5, r0
 8004322:	b911      	cbnz	r1, 800432a <sbrk_aligned+0x12>
 8004324:	f000 f88c 	bl	8004440 <_sbrk_r>
 8004328:	6030      	str	r0, [r6, #0]
 800432a:	4621      	mov	r1, r4
 800432c:	4628      	mov	r0, r5
 800432e:	f000 f887 	bl	8004440 <_sbrk_r>
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	d00a      	beq.n	800434c <sbrk_aligned+0x34>
 8004336:	1cc4      	adds	r4, r0, #3
 8004338:	f024 0403 	bic.w	r4, r4, #3
 800433c:	42a0      	cmp	r0, r4
 800433e:	d007      	beq.n	8004350 <sbrk_aligned+0x38>
 8004340:	1a21      	subs	r1, r4, r0
 8004342:	4628      	mov	r0, r5
 8004344:	f000 f87c 	bl	8004440 <_sbrk_r>
 8004348:	3001      	adds	r0, #1
 800434a:	d101      	bne.n	8004350 <sbrk_aligned+0x38>
 800434c:	f04f 34ff 	mov.w	r4, #4294967295
 8004350:	4620      	mov	r0, r4
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	2000018c 	.word	0x2000018c

08004358 <_malloc_r>:
 8004358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800435c:	1ccd      	adds	r5, r1, #3
 800435e:	f025 0503 	bic.w	r5, r5, #3
 8004362:	3508      	adds	r5, #8
 8004364:	2d0c      	cmp	r5, #12
 8004366:	bf38      	it	cc
 8004368:	250c      	movcc	r5, #12
 800436a:	2d00      	cmp	r5, #0
 800436c:	4607      	mov	r7, r0
 800436e:	db01      	blt.n	8004374 <_malloc_r+0x1c>
 8004370:	42a9      	cmp	r1, r5
 8004372:	d905      	bls.n	8004380 <_malloc_r+0x28>
 8004374:	230c      	movs	r3, #12
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	2600      	movs	r6, #0
 800437a:	4630      	mov	r0, r6
 800437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004380:	4e2e      	ldr	r6, [pc, #184]	; (800443c <_malloc_r+0xe4>)
 8004382:	f000 f86d 	bl	8004460 <__malloc_lock>
 8004386:	6833      	ldr	r3, [r6, #0]
 8004388:	461c      	mov	r4, r3
 800438a:	bb34      	cbnz	r4, 80043da <_malloc_r+0x82>
 800438c:	4629      	mov	r1, r5
 800438e:	4638      	mov	r0, r7
 8004390:	f7ff ffc2 	bl	8004318 <sbrk_aligned>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	4604      	mov	r4, r0
 8004398:	d14d      	bne.n	8004436 <_malloc_r+0xde>
 800439a:	6834      	ldr	r4, [r6, #0]
 800439c:	4626      	mov	r6, r4
 800439e:	2e00      	cmp	r6, #0
 80043a0:	d140      	bne.n	8004424 <_malloc_r+0xcc>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	4631      	mov	r1, r6
 80043a6:	4638      	mov	r0, r7
 80043a8:	eb04 0803 	add.w	r8, r4, r3
 80043ac:	f000 f848 	bl	8004440 <_sbrk_r>
 80043b0:	4580      	cmp	r8, r0
 80043b2:	d13a      	bne.n	800442a <_malloc_r+0xd2>
 80043b4:	6821      	ldr	r1, [r4, #0]
 80043b6:	3503      	adds	r5, #3
 80043b8:	1a6d      	subs	r5, r5, r1
 80043ba:	f025 0503 	bic.w	r5, r5, #3
 80043be:	3508      	adds	r5, #8
 80043c0:	2d0c      	cmp	r5, #12
 80043c2:	bf38      	it	cc
 80043c4:	250c      	movcc	r5, #12
 80043c6:	4629      	mov	r1, r5
 80043c8:	4638      	mov	r0, r7
 80043ca:	f7ff ffa5 	bl	8004318 <sbrk_aligned>
 80043ce:	3001      	adds	r0, #1
 80043d0:	d02b      	beq.n	800442a <_malloc_r+0xd2>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	442b      	add	r3, r5
 80043d6:	6023      	str	r3, [r4, #0]
 80043d8:	e00e      	b.n	80043f8 <_malloc_r+0xa0>
 80043da:	6822      	ldr	r2, [r4, #0]
 80043dc:	1b52      	subs	r2, r2, r5
 80043de:	d41e      	bmi.n	800441e <_malloc_r+0xc6>
 80043e0:	2a0b      	cmp	r2, #11
 80043e2:	d916      	bls.n	8004412 <_malloc_r+0xba>
 80043e4:	1961      	adds	r1, r4, r5
 80043e6:	42a3      	cmp	r3, r4
 80043e8:	6025      	str	r5, [r4, #0]
 80043ea:	bf18      	it	ne
 80043ec:	6059      	strne	r1, [r3, #4]
 80043ee:	6863      	ldr	r3, [r4, #4]
 80043f0:	bf08      	it	eq
 80043f2:	6031      	streq	r1, [r6, #0]
 80043f4:	5162      	str	r2, [r4, r5]
 80043f6:	604b      	str	r3, [r1, #4]
 80043f8:	4638      	mov	r0, r7
 80043fa:	f104 060b 	add.w	r6, r4, #11
 80043fe:	f000 f835 	bl	800446c <__malloc_unlock>
 8004402:	f026 0607 	bic.w	r6, r6, #7
 8004406:	1d23      	adds	r3, r4, #4
 8004408:	1af2      	subs	r2, r6, r3
 800440a:	d0b6      	beq.n	800437a <_malloc_r+0x22>
 800440c:	1b9b      	subs	r3, r3, r6
 800440e:	50a3      	str	r3, [r4, r2]
 8004410:	e7b3      	b.n	800437a <_malloc_r+0x22>
 8004412:	6862      	ldr	r2, [r4, #4]
 8004414:	42a3      	cmp	r3, r4
 8004416:	bf0c      	ite	eq
 8004418:	6032      	streq	r2, [r6, #0]
 800441a:	605a      	strne	r2, [r3, #4]
 800441c:	e7ec      	b.n	80043f8 <_malloc_r+0xa0>
 800441e:	4623      	mov	r3, r4
 8004420:	6864      	ldr	r4, [r4, #4]
 8004422:	e7b2      	b.n	800438a <_malloc_r+0x32>
 8004424:	4634      	mov	r4, r6
 8004426:	6876      	ldr	r6, [r6, #4]
 8004428:	e7b9      	b.n	800439e <_malloc_r+0x46>
 800442a:	230c      	movs	r3, #12
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	4638      	mov	r0, r7
 8004430:	f000 f81c 	bl	800446c <__malloc_unlock>
 8004434:	e7a1      	b.n	800437a <_malloc_r+0x22>
 8004436:	6025      	str	r5, [r4, #0]
 8004438:	e7de      	b.n	80043f8 <_malloc_r+0xa0>
 800443a:	bf00      	nop
 800443c:	20000188 	.word	0x20000188

08004440 <_sbrk_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	4d06      	ldr	r5, [pc, #24]	; (800445c <_sbrk_r+0x1c>)
 8004444:	2300      	movs	r3, #0
 8004446:	4604      	mov	r4, r0
 8004448:	4608      	mov	r0, r1
 800444a:	602b      	str	r3, [r5, #0]
 800444c:	f7fc fef4 	bl	8001238 <_sbrk>
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	d102      	bne.n	800445a <_sbrk_r+0x1a>
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	b103      	cbz	r3, 800445a <_sbrk_r+0x1a>
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	bd38      	pop	{r3, r4, r5, pc}
 800445c:	20000190 	.word	0x20000190

08004460 <__malloc_lock>:
 8004460:	4801      	ldr	r0, [pc, #4]	; (8004468 <__malloc_lock+0x8>)
 8004462:	f000 b809 	b.w	8004478 <__retarget_lock_acquire_recursive>
 8004466:	bf00      	nop
 8004468:	20000194 	.word	0x20000194

0800446c <__malloc_unlock>:
 800446c:	4801      	ldr	r0, [pc, #4]	; (8004474 <__malloc_unlock+0x8>)
 800446e:	f000 b804 	b.w	800447a <__retarget_lock_release_recursive>
 8004472:	bf00      	nop
 8004474:	20000194 	.word	0x20000194

08004478 <__retarget_lock_acquire_recursive>:
 8004478:	4770      	bx	lr

0800447a <__retarget_lock_release_recursive>:
 800447a:	4770      	bx	lr

0800447c <_init>:
 800447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447e:	bf00      	nop
 8004480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004482:	bc08      	pop	{r3}
 8004484:	469e      	mov	lr, r3
 8004486:	4770      	bx	lr

08004488 <_fini>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	bf00      	nop
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr
