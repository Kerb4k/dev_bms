
dev_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008528  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08008700  08008700  00018700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b54  08008b54  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b5c  08008b5c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b5c  08008b5c  00018b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b60  08008b60  00018b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200000a0  08008c04  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  08008c04  00020718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b477  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000329b  00000000  00000000  0003b547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0003e7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003fe38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a26  00000000  00000000  00041340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a49e  00000000  00000000  00061d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf008  00000000  00000000  0007c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b20c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000621c  00000000  00000000  0014b25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a0 	.word	0x200000a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080086e8 	.word	0x080086e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a4 	.word	0x200000a4
 8000214:	080086e8 	.word	0x080086e8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <WakeIdle>:
#define T_WAKE_MAX		400
#define T_REFUP_MAX		4400
#define T_CYCLE_FAST_MAX	1185	// Measure 12 Cells

void WakeIdle(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000e98:	20ff      	movs	r0, #255	; 0xff
 8000e9a:	f001 f92d 	bl	80020f8 <spi_write_read_byte>
	delay_u(IC_NUM * T_READY);
 8000e9e:	2050      	movs	r0, #80	; 0x50
 8000ea0:	f001 f8f6 	bl	8002090 <delay_u>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <WakeUp>:

void WakeUp(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000eac:	20ff      	movs	r0, #255	; 0xff
 8000eae:	f001 f923 	bl	80020f8 <spi_write_read_byte>
	delay_u(IC_NUM * T_WAKE_MAX);
 8000eb2:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 8000eb6:	f001 f8eb 	bl	8002090 <delay_u>

#if ((IC_NUM * T_WAKE_MAX) >= T_IDLE_MIN)
	spi_write_read_byte(0xFF);
	delay_u(IC_NUM * T_READY);
#endif
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <initialize>:
uint8_t ADCV[2]; //!< Cell Voltage conversion command
uint8_t ADAX[2]; //!< GPIO conversion command
uint8_t ADSTAT[2]; //!< STAT conversion command

void initialize(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af02      	add	r7, sp, #8
	init(MD_NORMAL,DCP_DISABLED,CELL_CH_ALL,AUX_CH_ALL,STS_CH_ALL);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f000 f804 	bl	8000edc <init>
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <init>:
				  uint8_t DCP,	//Discharge Permit
				  uint8_t CH,	//Cell Channels to be measured
				  uint8_t CHG,	//GPIO Channels to be measured
				  uint8_t CHST	//Status Channels to be measured
				  )
{
 8000edc:	b490      	push	{r4, r7}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4623      	mov	r3, r4
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71bb      	strb	r3, [r7, #6]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	717b      	strb	r3, [r7, #5]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	713b      	strb	r3, [r7, #4]
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	105b      	asrs	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
	ADCV[0] = md_bits + 0x02;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	3302      	adds	r3, #2
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <init+0xb8>)
 8000f0e:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	01db      	lsls	r3, r3, #7
 8000f14:	73fb      	strb	r3, [r7, #15]
	ADCV[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	797b      	ldrb	r3, [r7, #5]
 8000f24:	4413      	add	r3, r2
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	3360      	adds	r3, #96	; 0x60
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <init+0xb8>)
 8000f2e:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	105b      	asrs	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
	ADAX[0] = md_bits + 0x04;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	3304      	adds	r3, #4
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <init+0xbc>)
 8000f44:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	01db      	lsls	r3, r3, #7
 8000f4a:	73fb      	strb	r3, [r7, #15]
	ADAX[1] = md_bits + 0x60 + CHG;
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3360      	adds	r3, #96	; 0x60
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <init+0xbc>)
 8000f5a:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	105b      	asrs	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
	ADSTAT[0] = md_bits + 0x04;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <init+0xc0>)
 8000f70:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	01db      	lsls	r3, r3, #7
 8000f76:	73fb      	strb	r3, [r7, #15]
	ADSTAT[1] = md_bits + 0x68 + CHST;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	7e3b      	ldrb	r3, [r7, #24]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	3368      	adds	r3, #104	; 0x68
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <init+0xc0>)
 8000f86:	705a      	strb	r2, [r3, #1]
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc90      	pop	{r4, r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200000bc 	.word	0x200000bc
 8000f98:	200000c0 	.word	0x200000c0
 8000f9c:	200000c4 	.word	0x200000c4

08000fa0 <pec15_calc>:

uint16_t pec15_calc(uint8_t len,	//Number of bytes that will be used to calculate a PEC
                    uint8_t *data	//Array of data that will be used to calculate  a PEC
                   )
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder, addr;

  remainder = 16;					//initialize the PEC
 8000fac:	2310      	movs	r3, #16
 8000fae:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	737b      	strb	r3, [r7, #13]
 8000fb4:	e018      	b.n	8000fe8 <pec15_calc+0x48>
  {
    addr = ((remainder>>7)^data[i])&0xff;	//calculate PEC table address
 8000fb6:	89fb      	ldrh	r3, [r7, #14]
 8000fb8:	09db      	lsrs	r3, r3, #7
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	7b7b      	ldrb	r3, [r7, #13]
 8000fbe:	6839      	ldr	r1, [r7, #0]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	817b      	strh	r3, [r7, #10]
    remainder = (remainder<<8)^crc15Table[addr];
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	897b      	ldrh	r3, [r7, #10]
 8000fd6:	490b      	ldr	r1, [pc, #44]	; (8001004 <pec15_calc+0x64>)
 8000fd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	4053      	eors	r3, r2
 8000fe0:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	737b      	strb	r3, [r7, #13]
 8000fe8:	7b7a      	ldrb	r2, [r7, #13]
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d3e2      	bcc.n	8000fb6 <pec15_calc+0x16>
  }
  return(remainder*2);	//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	b29b      	uxth	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	08008700 	.word	0x08008700

08001008 <wrcfg>:

void wrcfg(uint8_t total_ic,
				   uint8_t config[][6]
				  )
{
 8001008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100c:	b089      	sub	sp, #36	; 0x24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	6039      	str	r1, [r7, #0]
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	466b      	mov	r3, sp
 8001018:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 800101a:	2306      	movs	r3, #6
 800101c:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	3304      	adds	r3, #4
 8001026:	76fb      	strb	r3, [r7, #27]

#if DYNAMIC_MEM
	uint8_t *cmd;
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
#else
	uint8_t cmd[CMD_LEN];
 8001028:	7efb      	ldrb	r3, [r7, #27]
 800102a:	3b01      	subs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	7efb      	ldrb	r3, [r7, #27]
 8001030:	2200      	movs	r2, #0
 8001032:	4698      	mov	r8, r3
 8001034:	4691      	mov	r9, r2
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800104a:	7efb      	ldrb	r3, [r7, #27]
 800104c:	2200      	movs	r2, #0
 800104e:	461c      	mov	r4, r3
 8001050:	4615      	mov	r5, r2
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	00eb      	lsls	r3, r5, #3
 800105c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001060:	00e2      	lsls	r2, r4, #3
 8001062:	7efb      	ldrb	r3, [r7, #27]
 8001064:	3307      	adds	r3, #7
 8001066:	08db      	lsrs	r3, r3, #3
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	ebad 0d03 	sub.w	sp, sp, r3
 800106e:	466b      	mov	r3, sp
 8001070:	3300      	adds	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	2201      	movs	r2, #1
 800107e:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x3d;
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	223d      	movs	r2, #61	; 0x3d
 8001084:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6e;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	226e      	movs	r2, #110	; 0x6e
 800108a:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 800108c:	2304      	movs	r3, #4
 800108e:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	77bb      	strb	r3, [r7, #30]
 8001094:	e03c      	b.n	8001110 <wrcfg+0x108>
	{
		/* the last IC on the stack. The first configuration written is */
		/* received by the last IC in the daisy chain */

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 8001096:	2300      	movs	r3, #0
 8001098:	77fb      	strb	r3, [r7, #31]
 800109a:	e012      	b.n	80010c2 <wrcfg+0xba>
		{
			/* current_byte is the byte counter */

			cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 800109c:	7fba      	ldrb	r2, [r7, #30]
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	3b06      	subs	r3, #6
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	18d1      	adds	r1, r2, r3
 80010ac:	7ffa      	ldrb	r2, [r7, #31]
 80010ae:	7f7b      	ldrb	r3, [r7, #29]
 80010b0:	5c89      	ldrb	r1, [r1, r2]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80010b6:	7f7b      	ldrb	r3, [r7, #29]
 80010b8:	3301      	adds	r3, #1
 80010ba:	777b      	strb	r3, [r7, #29]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 80010bc:	7ffb      	ldrb	r3, [r7, #31]
 80010be:	3301      	adds	r3, #1
 80010c0:	77fb      	strb	r3, [r7, #31]
 80010c2:	7ffa      	ldrb	r2, [r7, #31]
 80010c4:	7f3b      	ldrb	r3, [r7, #28]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3e8      	bcc.n	800109c <wrcfg+0x94>
		}
		cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 80010ca:	7fba      	ldrb	r2, [r7, #30]
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	3b06      	subs	r3, #6
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	461a      	mov	r2, r3
 80010dc:	7f3b      	ldrb	r3, [r7, #28]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <pec15_calc>
 80010e6:	4603      	mov	r3, r0
 80010e8:	81fb      	strh	r3, [r7, #14]
		cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	7f7b      	ldrb	r3, [r7, #29]
 80010f2:	b2d1      	uxtb	r1, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	54d1      	strb	r1, [r2, r3]
		cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 80010f8:	7f7b      	ldrb	r3, [r7, #29]
 80010fa:	3301      	adds	r3, #1
 80010fc:	89fa      	ldrh	r2, [r7, #14]
 80010fe:	b2d1      	uxtb	r1, r2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 8001104:	7f7b      	ldrb	r3, [r7, #29]
 8001106:	3302      	adds	r3, #2
 8001108:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 800110a:	7fbb      	ldrb	r3, [r7, #30]
 800110c:	3b01      	subs	r3, #1
 800110e:	77bb      	strb	r3, [r7, #30]
 8001110:	7fbb      	ldrb	r3, [r7, #30]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1bf      	bne.n	8001096 <wrcfg+0x8e>
	}

	uint8_t rx_data;
	WakeIdle();
 8001116:	f7ff febd 	bl	8000e94 <WakeIdle>
	//spi_write_array(CMD_LEN, cmd); //This function causes bad stuff!
	spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 800111a:	7ef8      	ldrb	r0, [r7, #27]
 800111c:	f107 030d 	add.w	r3, r7, #13
 8001120:	2200      	movs	r2, #0
 8001122:	6939      	ldr	r1, [r7, #16]
 8001124:	f001 f82c 	bl	8002180 <spi_write_then_read_array_ltc>
 8001128:	46b5      	mov	sp, r6

#if DYNAMIC_MEM
	free(cmd);
#endif
}
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001134 <rdcfg>:

int8_t rdcfg(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 8001134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001138:	b089      	sub	sp, #36	; 0x24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	6039      	str	r1, [r7, #0]
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	466b      	mov	r3, sp
 8001144:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 8001146:	2308      	movs	r3, #8
 8001148:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	777b      	strb	r3, [r7, #29]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 800114e:	230c      	movs	r3, #12
 8001150:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 8001152:	7efb      	ldrb	r3, [r7, #27]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	3b01      	subs	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	7efb      	ldrb	r3, [r7, #27]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	461a      	mov	r2, r3
 8001160:	2300      	movs	r3, #0
 8001162:	4690      	mov	r8, r2
 8001164:	4699      	mov	r9, r3
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800117a:	7efb      	ldrb	r3, [r7, #27]
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	461a      	mov	r2, r3
 8001180:	2300      	movs	r3, #0
 8001182:	4614      	mov	r4, r2
 8001184:	461d      	mov	r5, r3
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	00eb      	lsls	r3, r5, #3
 8001190:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001194:	00e2      	lsls	r2, r4, #3
 8001196:	7efb      	ldrb	r3, [r7, #27]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	3307      	adds	r3, #7
 800119c:	08db      	lsrs	r3, r3, #3
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	ebad 0d03 	sub.w	sp, sp, r3
 80011a4:	466b      	mov	r3, sp
 80011a6:	3300      	adds	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 80011aa:	2300      	movs	r3, #0
 80011ac:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x02;
 80011ae:	2302      	movs	r3, #2
 80011b0:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x2b;
 80011b2:	232b      	movs	r3, #43	; 0x2b
 80011b4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = 0x0a;
 80011b6:	230a      	movs	r3, #10
 80011b8:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 80011ba:	f7ff fe6b 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 80011be:	7f3b      	ldrb	r3, [r7, #28]
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	fb03 f202 	mul.w	r2, r3, r2
 80011c6:	f107 0108 	add.w	r1, r7, #8
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	2004      	movs	r0, #4
 80011ce:	f000 ffd7 	bl	8002180 <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	77bb      	strb	r3, [r7, #30]
 80011d6:	e03a      	b.n	800124e <rdcfg+0x11a>
	{
		// executes for each LTC6804 in the daisy chain and packs the data
		// into the r_config array as well as check the received Config data
		// for any bit errors

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80011d8:	2300      	movs	r3, #0
 80011da:	77fb      	strb	r3, [r7, #31]
 80011dc:	e010      	b.n	8001200 <rdcfg+0xcc>
		{
			r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 80011de:	7ffa      	ldrb	r2, [r7, #31]
 80011e0:	7fbb      	ldrb	r3, [r7, #30]
 80011e2:	7f39      	ldrb	r1, [r7, #28]
 80011e4:	fb01 f303 	mul.w	r3, r1, r3
 80011e8:	18d1      	adds	r1, r2, r3
 80011ea:	7fbb      	ldrb	r3, [r7, #30]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	441a      	add	r2, r3
 80011f2:	7ffb      	ldrb	r3, [r7, #31]
 80011f4:	6938      	ldr	r0, [r7, #16]
 80011f6:	5c41      	ldrb	r1, [r0, r1]
 80011f8:	54d1      	strb	r1, [r2, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80011fa:	7ffb      	ldrb	r3, [r7, #31]
 80011fc:	3301      	adds	r3, #1
 80011fe:	77fb      	strb	r3, [r7, #31]
 8001200:	7ffa      	ldrb	r2, [r7, #31]
 8001202:	7f3b      	ldrb	r3, [r7, #28]
 8001204:	429a      	cmp	r2, r3
 8001206:	d3ea      	bcc.n	80011de <rdcfg+0xaa>
		}

		received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8001208:	7fbb      	ldrb	r3, [r7, #30]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	799b      	ldrb	r3, [r3, #6]
 8001212:	b29b      	uxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b29a      	uxth	r2, r3
 8001218:	7fbb      	ldrb	r3, [r7, #30]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	440b      	add	r3, r1
 8001220:	79db      	ldrb	r3, [r3, #7]
 8001222:	b29b      	uxth	r3, r3
 8001224:	4413      	add	r3, r2
 8001226:	81fb      	strh	r3, [r7, #14]
		data_pec = pec15_calc(6, &r_config[current_ic][0]);
 8001228:	7fbb      	ldrb	r3, [r7, #30]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4619      	mov	r1, r3
 8001232:	2006      	movs	r0, #6
 8001234:	f7ff feb4 	bl	8000fa0 <pec15_calc>
 8001238:	4603      	mov	r3, r0
 800123a:	81bb      	strh	r3, [r7, #12]
		if (received_pec != data_pec)
 800123c:	89fa      	ldrh	r2, [r7, #14]
 800123e:	89bb      	ldrh	r3, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <rdcfg+0x114>
		{
			pec_error = -1;
 8001244:	23ff      	movs	r3, #255	; 0xff
 8001246:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 8001248:	7fbb      	ldrb	r3, [r7, #30]
 800124a:	3301      	adds	r3, #1
 800124c:	77bb      	strb	r3, [r7, #30]
 800124e:	7fba      	ldrb	r2, [r7, #30]
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	429a      	cmp	r2, r3
 8001254:	d3c0      	bcc.n	80011d8 <rdcfg+0xa4>
	}

#if DYNAMIC_MEM
	free(rx_data);
#endif
	return(pec_error);
 8001256:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800125a:	46b5      	mov	sp, r6
}
 800125c:	4618      	mov	r0, r3
 800125e:	3724      	adds	r7, #36	; 0x24
 8001260:	46bd      	mov	sp, r7
 8001262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001266 <wrcfgb>:

void wrcfgb(uint8_t total_ic,
				   uint8_t config[][6]
				  ){
 8001266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	466b      	mov	r3, sp
 8001276:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 8001278:	2306      	movs	r3, #6
 800127a:	773b      	strb	r3, [r7, #28]
		const uint8_t CMD_LEN = 4 + (8 * total_ic);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3304      	adds	r3, #4
 8001284:	76fb      	strb	r3, [r7, #27]

	#if DYNAMIC_MEM
		uint8_t *cmd;
		cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
	#else
		uint8_t cmd[CMD_LEN];
 8001286:	7efb      	ldrb	r3, [r7, #27]
 8001288:	3b01      	subs	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	7efb      	ldrb	r3, [r7, #27]
 800128e:	2200      	movs	r2, #0
 8001290:	4698      	mov	r8, r3
 8001292:	4691      	mov	r9, r2
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012a8:	7efb      	ldrb	r3, [r7, #27]
 80012aa:	2200      	movs	r2, #0
 80012ac:	461c      	mov	r4, r3
 80012ae:	4615      	mov	r5, r2
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	00eb      	lsls	r3, r5, #3
 80012ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012be:	00e2      	lsls	r2, r4, #3
 80012c0:	7efb      	ldrb	r3, [r7, #27]
 80012c2:	3307      	adds	r3, #7
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	ebad 0d03 	sub.w	sp, sp, r3
 80012cc:	466b      	mov	r3, sp
 80012ce:	3300      	adds	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
	#endif

		cmd[0] = 0x00;
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
		cmd[1] = 0x24;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	705a      	strb	r2, [r3, #1]
		//pec15_calc(2, cmd);
		cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 80012de:	6939      	ldr	r1, [r7, #16]
 80012e0:	2002      	movs	r0, #2
 80012e2:	f7ff fe5d 	bl	8000fa0 <pec15_calc>
 80012e6:	4603      	mov	r3, r0
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	709a      	strb	r2, [r3, #2]
		cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 80012f2:	6939      	ldr	r1, [r7, #16]
 80012f4:	2002      	movs	r0, #2
 80012f6:	f7ff fe53 	bl	8000fa0 <pec15_calc>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	70da      	strb	r2, [r3, #3]

		cmd_index = 4;
 8001302:	2304      	movs	r3, #4
 8001304:	777b      	strb	r3, [r7, #29]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	77bb      	strb	r3, [r7, #30]
 800130a:	e03c      	b.n	8001386 <wrcfgb+0x120>
		{
			/* the last IC on the stack. The first configuration written is */
			/* received by the last IC in the daisy chain */

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
 8001310:	e012      	b.n	8001338 <wrcfgb+0xd2>
			{
				/* current_byte is the byte counter */

				cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 8001312:	7fba      	ldrb	r2, [r7, #30]
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	3b06      	subs	r3, #6
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	18d1      	adds	r1, r2, r3
 8001322:	7ffa      	ldrb	r2, [r7, #31]
 8001324:	7f7b      	ldrb	r3, [r7, #29]
 8001326:	5c89      	ldrb	r1, [r1, r2]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	54d1      	strb	r1, [r2, r3]
				cmd_index = cmd_index + 1;
 800132c:	7f7b      	ldrb	r3, [r7, #29]
 800132e:	3301      	adds	r3, #1
 8001330:	777b      	strb	r3, [r7, #29]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	3301      	adds	r3, #1
 8001336:	77fb      	strb	r3, [r7, #31]
 8001338:	7ffa      	ldrb	r2, [r7, #31]
 800133a:	7f3b      	ldrb	r3, [r7, #28]
 800133c:	429a      	cmp	r2, r3
 800133e:	d3e8      	bcc.n	8001312 <wrcfgb+0xac>
			}
			cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 8001340:	7fba      	ldrb	r2, [r7, #30]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	3b06      	subs	r3, #6
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	4413      	add	r3, r2
 8001350:	461a      	mov	r2, r3
 8001352:	7f3b      	ldrb	r3, [r7, #28]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fe22 	bl	8000fa0 <pec15_calc>
 800135c:	4603      	mov	r3, r0
 800135e:	81fb      	strh	r3, [r7, #14]
			cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8001360:	89fb      	ldrh	r3, [r7, #14]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	b29a      	uxth	r2, r3
 8001366:	7f7b      	ldrb	r3, [r7, #29]
 8001368:	b2d1      	uxtb	r1, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	54d1      	strb	r1, [r2, r3]
			cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 800136e:	7f7b      	ldrb	r3, [r7, #29]
 8001370:	3301      	adds	r3, #1
 8001372:	89fa      	ldrh	r2, [r7, #14]
 8001374:	b2d1      	uxtb	r1, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 2;
 800137a:	7f7b      	ldrb	r3, [r7, #29]
 800137c:	3302      	adds	r3, #2
 800137e:	777b      	strb	r3, [r7, #29]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001380:	7fbb      	ldrb	r3, [r7, #30]
 8001382:	3b01      	subs	r3, #1
 8001384:	77bb      	strb	r3, [r7, #30]
 8001386:	7fbb      	ldrb	r3, [r7, #30]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1bf      	bne.n	800130c <wrcfgb+0xa6>
		}

		uint8_t rx_data;

		WakeIdle();
 800138c:	f7ff fd82 	bl	8000e94 <WakeIdle>
		spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 8001390:	7ef8      	ldrb	r0, [r7, #27]
 8001392:	f107 030d 	add.w	r3, r7, #13
 8001396:	2200      	movs	r2, #0
 8001398:	6939      	ldr	r1, [r7, #16]
 800139a:	f000 fef1 	bl	8002180 <spi_write_then_read_array_ltc>
 800139e:	46b5      	mov	sp, r6
#if DYNAMIC_MEM
	free(cmd);
#endif

}
 80013a0:	bf00      	nop
 80013a2:	3724      	adds	r7, #36	; 0x24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080013aa <rdcfgb>:

int8_t rdcfgb(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 80013aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	466b      	mov	r3, sp
 80013ba:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 80013bc:	2308      	movs	r3, #8
 80013be:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	777b      	strb	r3, [r7, #29]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 80013c4:	230c      	movs	r3, #12
 80013c6:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 80013c8:	7efb      	ldrb	r3, [r7, #27]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	3b01      	subs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	461a      	mov	r2, r3
 80013d6:	2300      	movs	r3, #0
 80013d8:	4690      	mov	r8, r2
 80013da:	4699      	mov	r9, r3
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013f0:	7efb      	ldrb	r3, [r7, #27]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	461a      	mov	r2, r3
 80013f6:	2300      	movs	r3, #0
 80013f8:	4614      	mov	r4, r2
 80013fa:	461d      	mov	r5, r3
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	00eb      	lsls	r3, r5, #3
 8001406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800140a:	00e2      	lsls	r2, r4, #3
 800140c:	7efb      	ldrb	r3, [r7, #27]
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	3307      	adds	r3, #7
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	ebad 0d03 	sub.w	sp, sp, r3
 800141a:	466b      	mov	r3, sp
 800141c:	3300      	adds	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 8001420:	2300      	movs	r3, #0
 8001422:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x26;
 8001424:	2326      	movs	r3, #38	; 0x26
 8001426:	727b      	strb	r3, [r7, #9]
	cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	4619      	mov	r1, r3
 800142e:	2002      	movs	r0, #2
 8001430:	f7ff fdb6 	bl	8000fa0 <pec15_calc>
 8001434:	4603      	mov	r3, r0
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	b29b      	uxth	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4619      	mov	r1, r3
 8001444:	2002      	movs	r0, #2
 8001446:	f7ff fdab 	bl	8000fa0 <pec15_calc>
 800144a:	4603      	mov	r3, r0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001450:	f7ff fd20 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 8001454:	7f3b      	ldrb	r3, [r7, #28]
 8001456:	79fa      	ldrb	r2, [r7, #7]
 8001458:	fb03 f202 	mul.w	r2, r3, r2
 800145c:	f107 0108 	add.w	r1, r7, #8
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2004      	movs	r0, #4
 8001464:	f000 fe8c 	bl	8002180 <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 8001468:	2300      	movs	r3, #0
 800146a:	77bb      	strb	r3, [r7, #30]
 800146c:	e03a      	b.n	80014e4 <rdcfgb+0x13a>
		{
			// executes for each LTC6804 in the daisy chain and packs the data
			// into the r_config array as well as check the received Config data
			// for any bit errors

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800146e:	2300      	movs	r3, #0
 8001470:	77fb      	strb	r3, [r7, #31]
 8001472:	e010      	b.n	8001496 <rdcfgb+0xec>
			{
				r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 8001474:	7ffa      	ldrb	r2, [r7, #31]
 8001476:	7fbb      	ldrb	r3, [r7, #30]
 8001478:	7f39      	ldrb	r1, [r7, #28]
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	18d1      	adds	r1, r2, r3
 8001480:	7fbb      	ldrb	r3, [r7, #30]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	441a      	add	r2, r3
 8001488:	7ffb      	ldrb	r3, [r7, #31]
 800148a:	6938      	ldr	r0, [r7, #16]
 800148c:	5c41      	ldrb	r1, [r0, r1]
 800148e:	54d1      	strb	r1, [r2, r3]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001490:	7ffb      	ldrb	r3, [r7, #31]
 8001492:	3301      	adds	r3, #1
 8001494:	77fb      	strb	r3, [r7, #31]
 8001496:	7ffa      	ldrb	r2, [r7, #31]
 8001498:	7f3b      	ldrb	r3, [r7, #28]
 800149a:	429a      	cmp	r2, r3
 800149c:	d3ea      	bcc.n	8001474 <rdcfgb+0xca>
			}

			received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 800149e:	7fbb      	ldrb	r3, [r7, #30]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	799b      	ldrb	r3, [r3, #6]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	7fbb      	ldrb	r3, [r7, #30]
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	6839      	ldr	r1, [r7, #0]
 80014b4:	440b      	add	r3, r1
 80014b6:	79db      	ldrb	r3, [r3, #7]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	81fb      	strh	r3, [r7, #14]
			data_pec = pec15_calc(6, &r_config[current_ic][0]);
 80014be:	7fbb      	ldrb	r3, [r7, #30]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	2006      	movs	r0, #6
 80014ca:	f7ff fd69 	bl	8000fa0 <pec15_calc>
 80014ce:	4603      	mov	r3, r0
 80014d0:	81bb      	strh	r3, [r7, #12]
			if (received_pec != data_pec)
 80014d2:	89fa      	ldrh	r2, [r7, #14]
 80014d4:	89bb      	ldrh	r3, [r7, #12]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d001      	beq.n	80014de <rdcfgb+0x134>
			{
				pec_error = -1;
 80014da:	23ff      	movs	r3, #255	; 0xff
 80014dc:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80014de:	7fbb      	ldrb	r3, [r7, #30]
 80014e0:	3301      	adds	r3, #1
 80014e2:	77bb      	strb	r3, [r7, #30]
 80014e4:	7fba      	ldrb	r2, [r7, #30]
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d3c0      	bcc.n	800146e <rdcfgb+0xc4>
		}

	#if DYNAMIC_MEM
		free(rx_data);
	#endif
		return(pec_error);
 80014ec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80014f0:	46b5      	mov	sp, r6

}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014fc <rdcv>:

uint8_t rdcv(uint8_t reg,				// Controls which cell voltage register is read back.
                     uint8_t total_ic,			// the number of ICs in the system
                     cell_data_t cell_codes[][18]	// Array of the parsed cell codes
                    )
{
 80014fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001500:	b08b      	sub	sp, #44	; 0x2c
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	603a      	str	r2, [r7, #0]
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	460b      	mov	r3, r1
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	466b      	mov	r3, sp
 8001510:	461e      	mov	r6, r3

	const uint8_t NUM_RX_BYT = 8;
 8001512:	2308      	movs	r3, #8
 8001514:	f887 3020 	strb.w	r3, [r7, #32]
	const uint8_t BYT_IN_REG = 6;
 8001518:	2306      	movs	r3, #6
 800151a:	77fb      	strb	r3, [r7, #31]
	const uint8_t CELL_IN_REG = 3;
 800151c:	2303      	movs	r3, #3
 800151e:	77bb      	strb	r3, [r7, #30]

	uint8_t pec_error = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter=0;	//data counter
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if DYNAMIC_MEM
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 18;
 800152c:	2312      	movs	r3, #18
 800152e:	777b      	strb	r3, [r7, #29]
	uint8_t cell_data[NUM_RX_BYT * max_ic];
 8001530:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001534:	7f7a      	ldrb	r2, [r7, #29]
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001542:	7f7a      	ldrb	r2, [r7, #29]
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	461a      	mov	r2, r3
 800154a:	2300      	movs	r3, #0
 800154c:	4690      	mov	r8, r2
 800154e:	4699      	mov	r9, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800155c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001560:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001564:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001568:	7f7a      	ldrb	r2, [r7, #29]
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	461a      	mov	r2, r3
 8001570:	2300      	movs	r3, #0
 8001572:	4614      	mov	r4, r2
 8001574:	461d      	mov	r5, r3
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	00eb      	lsls	r3, r5, #3
 8001580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001584:	00e2      	lsls	r2, r4, #3
 8001586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800158a:	7f7a      	ldrb	r2, [r7, #29]
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	3307      	adds	r3, #7
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	ebad 0d03 	sub.w	sp, sp, r3
 800159a:	466b      	mov	r3, sp
 800159c:	3300      	adds	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
#endif


	if (reg == 0)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 8088 	bne.w	80016b8 <rdcv+0x1bc>
	{
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 80015a8:	2301      	movs	r3, #1
 80015aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80015ae:	e07d      	b.n	80016ac <rdcv+0x1b0>
		{
			data_counter = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			rdcv_reg(cell_reg, total_ic,cell_data );				 //Reads a single Cell voltage register
 80015b6:	79b9      	ldrb	r1, [r7, #6]
 80015b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f8f6 	bl	80017b0 <rdcv_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80015ca:	e065      	b.n	8001698 <rdcv+0x19c>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015d2:	e02d      	b.n	8001630 <rdcv+0x134>
				{
					// loops once for each of the 3 cell voltage codes in the register

					parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 80015d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015e2:	3301      	adds	r3, #1
 80015e4:	6979      	ldr	r1, [r7, #20]
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	81fb      	strh	r3, [r7, #14]
					// create the parsed cell voltage code
					//cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
					cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)].voltage = parsed_cell;
 80015f2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	461a      	mov	r2, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001608:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800160c:	3a01      	subs	r2, #1
 800160e:	7fb8      	ldrb	r0, [r7, #30]
 8001610:	fb00 f202 	mul.w	r2, r0, r2
 8001614:	440a      	add	r2, r1
 8001616:	89f9      	ldrh	r1, [r7, #14]
 8001618:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 800161c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001620:	3302      	adds	r3, #2
 8001622:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800162a:	3301      	adds	r3, #1
 800162c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001630:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001634:	7fbb      	ldrb	r3, [r7, #30]
 8001636:	429a      	cmp	r2, r3
 8001638:	d3cc      	bcc.n	80015d4 <rdcv+0xd8>
					//must increment by two for each parsed cell code
				}
				received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 800163a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	b29b      	uxth	r3, r3
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b29a      	uxth	r2, r3
 8001648:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800164c:	3301      	adds	r3, #1
 800164e:	6979      	ldr	r1, [r7, #20]
 8001650:	5ccb      	ldrb	r3, [r1, r3]
 8001652:	b29b      	uxth	r3, r3
 8001654:	4413      	add	r3, r2
 8001656:	827b      	strh	r3, [r7, #18]
				//after the 6 cell voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800165c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	441a      	add	r2, r3
 8001668:	7ffb      	ldrb	r3, [r7, #31]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fc97 	bl	8000fa0 <pec15_calc>
 8001672:	4603      	mov	r3, r0
 8001674:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 8001676:	8a7a      	ldrh	r2, [r7, #18]
 8001678:	8a3b      	ldrh	r3, [r7, #16]
 800167a:	429a      	cmp	r2, r3
 800167c:	d002      	beq.n	8001684 <rdcv+0x188>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 800167e:	23ff      	movs	r3, #255	; 0xff
 8001680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					//are detected in the serial data
				}
			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8001684:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001688:	3302      	adds	r3, #2
 800168a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 800168e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001692:	3301      	adds	r3, #1
 8001694:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001698:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800169c:	79bb      	ldrb	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d394      	bcc.n	80015cc <rdcv+0xd0>
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 80016a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016a6:	3301      	adds	r3, #1
 80016a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80016ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016b0:	2b06      	cmp	r3, #6
 80016b2:	f67f af7d 	bls.w	80015b0 <rdcv+0xb4>
 80016b6:	e073      	b.n	80017a0 <rdcv+0x2a4>
		}
	}

	else
	{
		rdcv_reg(reg, total_ic,cell_data);
 80016b8:	79b9      	ldrb	r1, [r7, #6]
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f876 	bl	80017b0 <rdcv_reg>
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80016ca:	e064      	b.n	8001796 <rdcv+0x29a>
		{
			// current_ic is used as the IC counter
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80016d2:	e02c      	b.n	800172e <rdcv+0x232>
			{
				// loops once for each of the 3 cell voltage codes in the register

				parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8); //Each cell code is received as two bytes and is combined to
 80016d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016e2:	3301      	adds	r3, #1
 80016e4:	6979      	ldr	r1, [r7, #20]
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	81fb      	strh	r3, [r7, #14]
				// create the parsed cell voltage code

				//cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
				cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)].voltage = 0x0000FFFF & parsed_cell;
 80016f2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	461a      	mov	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001708:	79fa      	ldrb	r2, [r7, #7]
 800170a:	3a01      	subs	r2, #1
 800170c:	7fb8      	ldrb	r0, [r7, #30]
 800170e:	fb00 f202 	mul.w	r2, r0, r2
 8001712:	440a      	add	r2, r1
 8001714:	89f9      	ldrh	r1, [r7, #14]
 8001716:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter= data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 800171a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800171e:	3302      	adds	r3, #2
 8001720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001724:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001728:	3301      	adds	r3, #1
 800172a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800172e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001732:	7fbb      	ldrb	r3, [r7, #30]
 8001734:	429a      	cmp	r2, r3
 8001736:	d3cd      	bcc.n	80016d4 <rdcv+0x1d8>
				//must increment by two for each parsed cell code
			}
			received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	b29b      	uxth	r3, r3
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b29a      	uxth	r2, r3
 8001746:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800174a:	3301      	adds	r3, #1
 800174c:	6979      	ldr	r1, [r7, #20]
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4413      	add	r3, r2
 8001754:	827b      	strh	r3, [r7, #18]
			//after the 6 cell voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001756:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800175a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	441a      	add	r2, r3
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fc18 	bl	8000fa0 <pec15_calc>
 8001770:	4603      	mov	r3, r0
 8001772:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 8001774:	8a7a      	ldrh	r2, [r7, #18]
 8001776:	8a3b      	ldrh	r3, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d002      	beq.n	8001782 <rdcv+0x286>
			{
				pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 800177c:	23ff      	movs	r3, #255	; 0xff
 800177e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//are detected in the serial data
			}
			data_counter= data_counter + 2;                       //Because the transmitted PEC code is 2 bytes long the data_counter
 8001782:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001786:	3302      	adds	r3, #2
 8001788:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 800178c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001790:	3301      	adds	r3, #1
 8001792:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001796:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800179a:	79bb      	ldrb	r3, [r7, #6]
 800179c:	429a      	cmp	r2, r3
 800179e:	d395      	bcc.n	80016cc <rdcv+0x1d0>
		}
	}
#if DYNAMIC_MEM
	free(cell_data);
#endif
	return(pec_error);
 80017a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a4:	46b5      	mov	sp, r6
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	372c      	adds	r7, #44	; 0x2c
 80017aa:	46bd      	mov	sp, r7
 80017ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080017b0 <rdcv_reg>:
*/
void rdcv_reg(uint8_t reg,			//Determines which cell voltage register is read back
                      uint8_t total_ic,		//the number of ICs in the
                      uint8_t *data			//An array of the unparsed cell codes
                     )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	603a      	str	r2, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	460b      	mov	r3, r1
 80017be:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 80017c0:	2308      	movs	r3, #8
 80017c2:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d104      	bne.n	80017d4 <rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 80017ca:	2304      	movs	r3, #4
 80017cc:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017ce:	2300      	movs	r3, #0
 80017d0:	723b      	strb	r3, [r7, #8]
 80017d2:	e026      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 2)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d104      	bne.n	80017e4 <rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 80017da:	2306      	movs	r3, #6
 80017dc:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	723b      	strb	r3, [r7, #8]
 80017e2:	e01e      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 3)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d104      	bne.n	80017f4 <rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 80017ea:	2308      	movs	r3, #8
 80017ec:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017ee:	2300      	movs	r3, #0
 80017f0:	723b      	strb	r3, [r7, #8]
 80017f2:	e016      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 4)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d104      	bne.n	8001804 <rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 80017fa:	230a      	movs	r3, #10
 80017fc:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017fe:	2300      	movs	r3, #0
 8001800:	723b      	strb	r3, [r7, #8]
 8001802:	e00e      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 5) // LTC6813 - Cell register E
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d104      	bne.n	8001814 <rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 800180a:	2309      	movs	r3, #9
 800180c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800180e:	2300      	movs	r3, #0
 8001810:	723b      	strb	r3, [r7, #8]
 8001812:	e006      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 6) // LTC6813 - Cell register F
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2b06      	cmp	r3, #6
 8001818:	d103      	bne.n	8001822 <rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 800181a:	230b      	movs	r3, #11
 800181c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800181e:	2300      	movs	r3, #0
 8001820:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4619      	mov	r1, r3
 8001828:	2002      	movs	r0, #2
 800182a:	f7ff fbb9 	bl	8000fa0 <pec15_calc>
 800182e:	4603      	mov	r3, r0
 8001830:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001832:	89bb      	ldrh	r3, [r7, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800183c:	89bb      	ldrh	r3, [r7, #12]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001842:	f7ff fb27 	bl	8000e94 <WakeIdle>
	WakeIdle();
 8001846:	f7ff fb25 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	79ba      	ldrb	r2, [r7, #6]
 800184e:	fb03 f202 	mul.w	r2, r3, r2
 8001852:	f107 0108 	add.w	r1, r7, #8
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2004      	movs	r0, #4
 800185a:	f000 fc91 	bl	8002180 <spi_write_then_read_array_ltc>
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <rdaux>:
*/
int8_t rdaux(uint8_t reg,				//Determines which GPIO voltage register is read back.
                     uint8_t total_ic,			//the number of ICs in the system
                     temp_data_t aux_codes[][GPIO_NUM]	//A two dimensional array of the gpio voltage codes.
                    )
{
 8001866:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800186a:	b08d      	sub	sp, #52	; 0x34
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	603a      	str	r2, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	460b      	mov	r3, r1
 8001876:	71bb      	strb	r3, [r7, #6]
 8001878:	466b      	mov	r3, sp
 800187a:	461e      	mov	r6, r3
	const uint8_t NUM_RX_BYT = 8;
 800187c:	2308      	movs	r3, #8
 800187e:	77fb      	strb	r3, [r7, #31]
	const uint8_t BYT_IN_REG = 6;
 8001880:	2306      	movs	r3, #6
 8001882:	77bb      	strb	r3, [r7, #30]
	const uint8_t GPIO_IN_REG = 3;
 8001884:	2303      	movs	r3, #3
 8001886:	777b      	strb	r3, [r7, #29]

	uint8_t data_counter = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int8_t pec_error = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t data_pec;
#if DYNAMIC_MEM
	uint8_t *data;
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 8001894:	230c      	movs	r3, #12
 8001896:	773b      	strb	r3, [r7, #28]
	uint8_t data[NUM_RX_BYT * max_ic];
 8001898:	7ffb      	ldrb	r3, [r7, #31]
 800189a:	7f3a      	ldrb	r2, [r7, #28]
 800189c:	fb02 f303 	mul.w	r3, r2, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	7ffb      	ldrb	r3, [r7, #31]
 80018a6:	7f3a      	ldrb	r2, [r7, #28]
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	2300      	movs	r3, #0
 80018b0:	4690      	mov	r8, r2
 80018b2:	4699      	mov	r9, r3
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018c8:	7ffb      	ldrb	r3, [r7, #31]
 80018ca:	7f3a      	ldrb	r2, [r7, #28]
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	2300      	movs	r3, #0
 80018d4:	4614      	mov	r4, r2
 80018d6:	461d      	mov	r5, r3
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	00eb      	lsls	r3, r5, #3
 80018e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e6:	00e2      	lsls	r2, r4, #3
 80018e8:	7ffb      	ldrb	r3, [r7, #31]
 80018ea:	7f3a      	ldrb	r2, [r7, #28]
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	3307      	adds	r3, #7
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	ebad 0d03 	sub.w	sp, sp, r3
 80018fa:	466b      	mov	r3, sp
 80018fc:	3300      	adds	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
#endif

	if (reg == 0)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 8087 	bne.w	8001a16 <rdaux+0x1b0>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 8001908:	2301      	movs	r3, #1
 800190a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800190e:	e07c      	b.n	8001a0a <rdaux+0x1a4>
		{
			data_counter = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8001916:	79b9      	ldrb	r1, [r7, #6]
 8001918:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f8fa 	bl	8001b18 <rdaux_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 8001924:	2300      	movs	r3, #0
 8001926:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800192a:	e064      	b.n	80019f6 <rdaux+0x190>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 800192c:	2300      	movs	r3, #0
 800192e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001932:	e02d      	b.n	8001990 <rdaux+0x12a>
				{
					// loops once for each of the 3 gpio voltage codes in the register

					parsed_aux = data[data_counter] + (data[data_counter+1]<<8);              //Each gpio codes is received as two bytes and is combined to
 8001934:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	5cd3      	ldrb	r3, [r2, r3]
 800193c:	b29a      	uxth	r2, r3
 800193e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001942:	3301      	adds	r3, #1
 8001944:	6979      	ldr	r1, [r7, #20]
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	b29b      	uxth	r3, r3
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b29b      	uxth	r3, r3
 800194e:	4413      	add	r3, r2
 8001950:	81fb      	strh	r3, [r7, #14]
					// create the parsed gpio voltage code

					//aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
					aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001952:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	461a      	mov	r2, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4413      	add	r3, r2
 8001964:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8001968:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800196c:	3a01      	subs	r2, #1
 800196e:	7f78      	ldrb	r0, [r7, #29]
 8001970:	fb00 f202 	mul.w	r2, r0, r2
 8001974:	440a      	add	r2, r1
 8001976:	89f9      	ldrh	r1, [r7, #14]
 8001978:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
					data_counter=data_counter+2;                        //Because gpio voltage codes are two bytes the data counter
 800197c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001980:	3302      	adds	r3, #2
 8001982:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 8001986:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800198a:	3301      	adds	r3, #1
 800198c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001990:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001994:	7f7b      	ldrb	r3, [r7, #29]
 8001996:	429a      	cmp	r2, r3
 8001998:	d3cc      	bcc.n	8001934 <rdaux+0xce>
					//must increment by two for each parsed gpio voltage code
				}
				received_pec = (data[data_counter]<<8)+ data[data_counter+1];          //The received PEC for the current_ic is transmitted as the 7th and 8th
 800199a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019ac:	3301      	adds	r3, #1
 80019ae:	6979      	ldr	r1, [r7, #20]
 80019b0:	5ccb      	ldrb	r3, [r1, r3]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	827b      	strh	r3, [r7, #18]
				//after the 6 gpio voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 80019b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019bc:	7ffa      	ldrb	r2, [r7, #31]
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	441a      	add	r2, r3
 80019c6:	7fbb      	ldrb	r3, [r7, #30]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fae8 	bl	8000fa0 <pec15_calc>
 80019d0:	4603      	mov	r3, r0
 80019d2:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 80019d4:	8a7a      	ldrh	r2, [r7, #18]
 80019d6:	8a3b      	ldrh	r3, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d002      	beq.n	80019e2 <rdaux+0x17c>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 80019dc:	23ff      	movs	r3, #255	; 0xff
 80019de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					//are detected in the received serial data
				}

				data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 80019e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019e6:	3302      	adds	r3, #2
 80019e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80019ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019f0:	3301      	adds	r3, #1
 80019f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80019f6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d395      	bcc.n	800192c <rdaux+0xc6>
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 8001a00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a04:	3301      	adds	r3, #1
 8001a06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001a0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	f67f af7e 	bls.w	8001910 <rdaux+0xaa>
 8001a14:	e067      	b.n	8001ae6 <rdaux+0x280>
		}

	}
	else
	{
		rdaux_reg(reg, total_ic, data);
 8001a16:	79b9      	ldrb	r1, [r7, #6]
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f87b 	bl	8001b18 <rdaux_reg>
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	e05a      	b.n	8001ade <rdaux+0x278>
		{
			// current_ic is used as an IC counter

			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	e028      	b.n	8001a80 <rdaux+0x21a>
			{
				// once for each aux voltage in the register

				parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));        //Each gpio codes is received as two bytes and is combined to
 8001a2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	6979      	ldr	r1, [r7, #20]
 8001a40:	5ccb      	ldrb	r3, [r1, r3]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	81fb      	strh	r3, [r7, #14]
				// create the parsed gpio voltage code
				//aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
				aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	461a      	mov	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	79fa      	ldrb	r2, [r7, #7]
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	7f79      	ldrb	r1, [r7, #29]
 8001a62:	fb02 f101 	mul.w	r1, r2, r1
 8001a66:	6a3a      	ldr	r2, [r7, #32]
 8001a68:	440a      	add	r2, r1
 8001a6a:	89f9      	ldrh	r1, [r7, #14]
 8001a6c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
				data_counter=data_counter+2;                      //Because gpio voltage codes are two bytes the data counter
 8001a70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a74:	3302      	adds	r3, #2
 8001a76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	7f7b      	ldrb	r3, [r7, #29]
 8001a82:	6a3a      	ldr	r2, [r7, #32]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbd2      	blt.n	8001a2e <rdaux+0x1c8>
				//must increment by two for each parsed gpio voltage code
			}
			received_pec = (data[data_counter]<<8) + data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001a88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	827b      	strh	r3, [r7, #18]
			//after the 6 gpio voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	fb02 f303 	mul.w	r3, r2, r3
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	441a      	add	r2, r3
 8001ab2:	7fbb      	ldrb	r3, [r7, #30]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fa72 	bl	8000fa0 <pec15_calc>
 8001abc:	4603      	mov	r3, r0
 8001abe:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 8001ac0:	8a7a      	ldrh	r2, [r7, #18]
 8001ac2:	8a3b      	ldrh	r3, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d002      	beq.n	8001ace <rdaux+0x268>
			{
				pec_error = -1;                               //The pec_error variable is simply set negative if any PEC errors
 8001ac8:	23ff      	movs	r3, #255	; 0xff
 8001aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				//are detected in the received serial data
			}

			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8001ace:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	3301      	adds	r3, #1
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	79bb      	ldrb	r3, [r7, #6]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	dba0      	blt.n	8001a28 <rdaux+0x1c2>
	}

#if DYNAMIC_MEM
	free(data);
#endif
	return (pec_error);
 8001ae6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001aea:	46b5      	mov	sp, r6
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3734      	adds	r7, #52	; 0x34
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001af6 <adcv_delay>:

	free(data);
	return (pec_error);
}

adcv_delay(void){
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001afa:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8001afe:	f000 fac7 	bl	8002090 <delay_u>
}
 8001b02:	bf00      	nop
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <adax_delay>:

void adax_delay(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001b0c:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8001b10:	f000 fabe 	bl	8002090 <delay_u>

}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <rdaux_reg>:
*/
void rdaux_reg(uint8_t reg,			//Determines which GPIO voltage register is read back
                       uint8_t total_ic,	//The number of ICs in the system
                       uint8_t *data		//Array of the unparsed auxiliary codes
                      )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	603a      	str	r2, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	460b      	mov	r3, r1
 8001b26:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001b28:	2308      	movs	r3, #8
 8001b2a:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d104      	bne.n	8001b3c <rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 8001b32:	230c      	movs	r3, #12
 8001b34:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b36:	2300      	movs	r3, #0
 8001b38:	723b      	strb	r3, [r7, #8]
 8001b3a:	e01b      	b.n	8001b74 <rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d104      	bne.n	8001b4c <rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 8001b42:	230e      	movs	r3, #14
 8001b44:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b46:	2300      	movs	r3, #0
 8001b48:	723b      	strb	r3, [r7, #8]
 8001b4a:	e013      	b.n	8001b74 <rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d104      	bne.n	8001b5c <rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8001b52:	230d      	movs	r3, #13
 8001b54:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b56:	2300      	movs	r3, #0
 8001b58:	723b      	strb	r3, [r7, #8]
 8001b5a:	e00b      	b.n	8001b74 <rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d104      	bne.n	8001b6c <rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8001b62:	230f      	movs	r3, #15
 8001b64:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b66:	2300      	movs	r3, #0
 8001b68:	723b      	strb	r3, [r7, #8]
 8001b6a:	e003      	b.n	8001b74 <rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b70:	2300      	movs	r3, #0
 8001b72:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	4619      	mov	r1, r3
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	f7ff fa10 	bl	8000fa0 <pec15_calc>
 8001b80:	4603      	mov	r3, r0
 8001b82:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001b84:	89bb      	ldrh	r3, [r7, #12]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001b8e:	89bb      	ldrh	r3, [r7, #12]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001b94:	f7ff f97e 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	79ba      	ldrb	r2, [r7, #6]
 8001b9c:	fb03 f202 	mul.w	r2, r3, r2
 8001ba0:	f107 0108 	add.w	r1, r7, #8
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2004      	movs	r0, #4
 8001ba8:	f000 faea 	bl	8002180 <spi_write_then_read_array_ltc>
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <adcv>:

/*!
	\brief Starts cell voltage conversion.
*/
void adcv(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADCV[0];
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <adcv+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <adcv+0x44>)
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADCV);
 8001bc6:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <adcv+0x44>)
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f7ff f9e9 	bl	8000fa0 <pec15_calc>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001be2:	f7ff f957 	bl	8000e94 <WakeIdle>
	spi_write_array(4, cmd);
 8001be6:	463b      	mov	r3, r7
 8001be8:	4619      	mov	r1, r3
 8001bea:	2004      	movs	r0, #4
 8001bec:	f000 faa6 	bl	800213c <spi_write_array>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200000bc 	.word	0x200000bc

08001bfc <adax>:

/*!
	\brief Start an GPIO Conversion.
*/
void adax(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADAX[0];
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <adax+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <adax+0x44>)
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADAX);
 8001c0e:	490c      	ldr	r1, [pc, #48]	; (8001c40 <adax+0x44>)
 8001c10:	2002      	movs	r0, #2
 8001c12:	f7ff f9c5 	bl	8000fa0 <pec15_calc>
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001c2a:	f7ff f933 	bl	8000e94 <WakeIdle>
	spi_write_array(4, cmd);
 8001c2e:	463b      	mov	r3, r7
 8001c30:	4619      	mov	r1, r3
 8001c32:	2004      	movs	r0, #4
 8001c34:	f000 fa82 	bl	800213c <spi_write_array>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200000c0 	.word	0x200000c0

08001c44 <calc_sum_of_cells>:


}

void calc_sum_of_cells(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	73fb      	strb	r3, [r7, #15]

	uint16_t soc = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	82fb      	strh	r3, [r7, #22]

	for(uint8_t i = 0; i < total_ic; i++){
 8001c56:	2300      	movs	r3, #0
 8001c58:	757b      	strb	r3, [r7, #21]
 8001c5a:	e01e      	b.n	8001c9a <calc_sum_of_cells+0x56>
		for(uint8_t j = 0; j < CELL_NUM; j++){
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	753b      	strb	r3, [r7, #20]
 8001c60:	e015      	b.n	8001c8e <calc_sum_of_cells+0x4a>
			soc += (cell_data[i][j].voltage / 100);
 8001c62:	7d7a      	ldrb	r2, [r7, #21]
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4413      	add	r3, r2
 8001c72:	7d3a      	ldrb	r2, [r7, #20]
 8001c74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <calc_sum_of_cells+0x84>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	8afb      	ldrh	r3, [r7, #22]
 8001c84:	4413      	add	r3, r2
 8001c86:	82fb      	strh	r3, [r7, #22]
		for(uint8_t j = 0; j < CELL_NUM; j++){
 8001c88:	7d3b      	ldrb	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	753b      	strb	r3, [r7, #20]
 8001c8e:	7d3b      	ldrb	r3, [r7, #20]
 8001c90:	2b11      	cmp	r3, #17
 8001c92:	d9e6      	bls.n	8001c62 <calc_sum_of_cells+0x1e>
	for(uint8_t i = 0; i < total_ic; i++){
 8001c94:	7d7b      	ldrb	r3, [r7, #21]
 8001c96:	3301      	adds	r3, #1
 8001c98:	757b      	strb	r3, [r7, #21]
 8001c9a:	7d7a      	ldrb	r2, [r7, #21]
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3dc      	bcc.n	8001c5c <calc_sum_of_cells+0x18>
		}
	}
	status_data->sum_of_cells = (float)soc /100;
 8001ca2:	8afb      	ldrh	r3, [r7, #22]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cac:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001ccc <calc_sum_of_cells+0x88>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001cba:	bf00      	nop
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	51eb851f 	.word	0x51eb851f
 8001ccc:	42c80000 	.word	0x42c80000

08001cd0 <calculate_soc>:

		int32_t power = status_data->IVT_I * (int32_t)voltage;
		status_data->power = power;
}

void calculate_soc(status_data_t *status_data){
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

	//float consumed = status_data->IVT_I * FREQUENCY/3600;

	status_data->soc = 100 - (status_data->IVT_Wh / ACCU_Wh)*100;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <calculate_soc+0x3c>)
 8001cde:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce2:	441a      	add	r2, r3
 8001ce4:	1312      	asrs	r2, r2, #12
 8001ce6:	17db      	asrs	r3, r3, #31
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	3301      	adds	r3, #1
 8001cec:	2264      	movs	r2, #100	; 0x64
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	edc3 7a04 	vstr	s15, [r3, #16]

}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	9ee009ef 	.word	0x9ee009ef

08001d10 <get_minmax_temperature>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][12]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_temperature(uint8_t total_ic, temp_data_t temp_data[][GPIO_NUM], status_data_t *status_data)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	73fb      	strb	r3, [r7, #15]
	int32_t min = temp_data[0][0].temp;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d24:	61fb      	str	r3, [r7, #28]
	int32_t max = temp_data[0][0].temp;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d2c:	61bb      	str	r3, [r7, #24]
	uint8_t min_id = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]
	uint8_t max_id = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0; i < total_ic; i++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	757b      	strb	r3, [r7, #21]
 8001d3a:	e05f      	b.n	8001dfc <get_minmax_temperature+0xec>
	{
		for (uint8_t j = 0; j < GPIO_NUM-7; j++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	753b      	strb	r3, [r7, #20]
 8001d40:	e056      	b.n	8001df0 <get_minmax_temperature+0xe0>
		{

			if (temp_data[i][j].temp > max)
 8001d42:	7d7a      	ldrb	r2, [r7, #21]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	441a      	add	r2, r3
 8001d52:	7d3b      	ldrb	r3, [r7, #20]
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4293      	cmp	r3, r2
 8001d62:	da18      	bge.n	8001d96 <get_minmax_temperature+0x86>
			{

				max = temp_data[i][j].temp;
 8001d64:	7d7a      	ldrb	r2, [r7, #21]
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	441a      	add	r2, r3
 8001d74:	7d3b      	ldrb	r3, [r7, #20]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
				max_id = (i << 4) | (j & 0x0f);
 8001d80:	7d7b      	ldrb	r3, [r7, #21]
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	b25a      	sxtb	r2, r3
 8001d86:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	75bb      	strb	r3, [r7, #22]

			}
			if (temp_data[i][j].temp < min)
 8001d96:	7d7a      	ldrb	r2, [r7, #21]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	461a      	mov	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	441a      	add	r2, r3
 8001da6:	7d3b      	ldrb	r3, [r7, #20]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001db0:	461a      	mov	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	4293      	cmp	r3, r2
 8001db6:	dd18      	ble.n	8001dea <get_minmax_temperature+0xda>
			{

				min = temp_data[i][j].temp;
 8001db8:	7d7a      	ldrb	r2, [r7, #21]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	441a      	add	r2, r3
 8001dc8:	7d3b      	ldrb	r3, [r7, #20]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dd2:	61fb      	str	r3, [r7, #28]
				min_id = (i << 4) | (j & 0x0f);
 8001dd4:	7d7b      	ldrb	r3, [r7, #21]
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	b25a      	sxtb	r2, r3
 8001dda:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	b25b      	sxtb	r3, r3
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b25b      	sxtb	r3, r3
 8001de8:	75fb      	strb	r3, [r7, #23]
		for (uint8_t j = 0; j < GPIO_NUM-7; j++)
 8001dea:	7d3b      	ldrb	r3, [r7, #20]
 8001dec:	3301      	adds	r3, #1
 8001dee:	753b      	strb	r3, [r7, #20]
 8001df0:	7d3b      	ldrb	r3, [r7, #20]
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d9a5      	bls.n	8001d42 <get_minmax_temperature+0x32>
	for (uint8_t i = 0; i < total_ic; i++)
 8001df6:	7d7b      	ldrb	r3, [r7, #21]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	757b      	strb	r3, [r7, #21]
 8001dfc:	7d7a      	ldrb	r2, [r7, #21]
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d39b      	bcc.n	8001d3c <get_minmax_temperature+0x2c>

			}
		}
	}
	status_data->min_temp = min;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	84da      	strh	r2, [r3, #38]	; 0x26
	status_data->max_temp = max;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	b21a      	sxth	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	851a      	strh	r2, [r3, #40]	; 0x28

	status_data->min_temp_id = min_id;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7dfa      	ldrb	r2, [r7, #23]
 8001e18:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	status_data->max_temp_id = max_id;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7dba      	ldrb	r2, [r7, #22]
 8001e20:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8001e24:	bf00      	nop
 8001e26:	3724      	adds	r7, #36	; 0x24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <get_minmax_voltage>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][CELL_NUM]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_voltage(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	73fb      	strb	r3, [r7, #15]
	uint16_t min = cell_data[0][0].voltage;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	82fb      	strh	r3, [r7, #22]
	uint16_t max = cell_data[0][0].voltage;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	82bb      	strh	r3, [r7, #20]
	uint8_t min_id = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	74fb      	strb	r3, [r7, #19]
	uint8_t max_id = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	74bb      	strb	r3, [r7, #18]


	for (uint8_t i = 0; i < total_ic; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	747b      	strb	r3, [r7, #17]
 8001e56:	e064      	b.n	8001f22 <get_minmax_voltage+0xf2>
	{
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	743b      	strb	r3, [r7, #16]
 8001e5c:	e05b      	b.n	8001f16 <get_minmax_voltage+0xe6>
		{
			if (cell_data[i][j].voltage > max)
 8001e5e:	7c7a      	ldrb	r2, [r7, #17]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	7c3a      	ldrb	r2, [r7, #16]
 8001e70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e74:	8aba      	ldrh	r2, [r7, #20]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d216      	bcs.n	8001ea8 <get_minmax_voltage+0x78>
			{
				max = cell_data[i][j].voltage;
 8001e7a:	7c7a      	ldrb	r2, [r7, #17]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	461a      	mov	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4413      	add	r3, r2
 8001e8a:	7c3a      	ldrb	r2, [r7, #16]
 8001e8c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e90:	82bb      	strh	r3, [r7, #20]
				max_id = (i << 4) | (j & 0x0f);
 8001e92:	7c7b      	ldrb	r3, [r7, #17]
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	b25a      	sxtb	r2, r3
 8001e98:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	b25b      	sxtb	r3, r3
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	74bb      	strb	r3, [r7, #18]
			}
			if (cell_data[i][j].voltage < min && cell_data[i][j].voltage > 5000) //ignore cells under .5V
 8001ea8:	7c7a      	ldrb	r2, [r7, #17]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	7c3a      	ldrb	r2, [r7, #16]
 8001eba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ebe:	8afa      	ldrh	r2, [r7, #22]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d925      	bls.n	8001f10 <get_minmax_voltage+0xe0>
 8001ec4:	7c7a      	ldrb	r2, [r7, #17]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	7c3a      	ldrb	r2, [r7, #16]
 8001ed6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d916      	bls.n	8001f10 <get_minmax_voltage+0xe0>
			{
				min = cell_data[i][j].voltage;
 8001ee2:	7c7a      	ldrb	r2, [r7, #17]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	7c3a      	ldrb	r2, [r7, #16]
 8001ef4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ef8:	82fb      	strh	r3, [r7, #22]
				min_id = (i << 4) | (j & 0x0f);
 8001efa:	7c7b      	ldrb	r3, [r7, #17]
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	b25a      	sxtb	r2, r3
 8001f00:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	b25b      	sxtb	r3, r3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	74fb      	strb	r3, [r7, #19]
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001f10:	7c3b      	ldrb	r3, [r7, #16]
 8001f12:	3301      	adds	r3, #1
 8001f14:	743b      	strb	r3, [r7, #16]
 8001f16:	7c3b      	ldrb	r3, [r7, #16]
 8001f18:	2b11      	cmp	r3, #17
 8001f1a:	d9a0      	bls.n	8001e5e <get_minmax_voltage+0x2e>
	for (uint8_t i = 0; i < total_ic; i++)
 8001f1c:	7c7b      	ldrb	r3, [r7, #17]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	747b      	strb	r3, [r7, #17]
 8001f22:	7c7a      	ldrb	r2, [r7, #17]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d396      	bcc.n	8001e58 <get_minmax_voltage+0x28>
			}
		}
	}
	status_data->min_voltage = min;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	8afa      	ldrh	r2, [r7, #22]
 8001f2e:	859a      	strh	r2, [r3, #44]	; 0x2c
	status_data->max_voltage = max;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	8aba      	ldrh	r2, [r7, #20]
 8001f34:	85da      	strh	r2, [r3, #46]	; 0x2e
	status_data->delta = max - min;
 8001f36:	8aba      	ldrh	r2, [r7, #20]
 8001f38:	8afb      	ldrh	r3, [r7, #22]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	849a      	strh	r2, [r3, #36]	; 0x24
	status_data->min_voltage_id = min_id;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7cfa      	ldrb	r2, [r7, #19]
 8001f48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	status_data->max_voltage_id = max_id;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7cba      	ldrb	r2, [r7, #18]
 8001f50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <CanSend>:
	}

	return offcan;
}

void CanSend(uint8_t *TxData, uint32_t identifier ){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier = identifier;
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <CanSend+0x2c>)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6013      	str	r3, [r2, #0]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4906      	ldr	r1, [pc, #24]	; (8001f8c <CanSend+0x2c>)
 8001f74:	4806      	ldr	r0, [pc, #24]	; (8001f90 <CanSend+0x30>)
 8001f76:	f001 ff61 	bl	8003e3c <HAL_FDCAN_AddMessageToTxFifoQ>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <CanSend+0x24>
	        // Transmission request Error
		Error_Handler();
 8001f80:	f000 fbfc 	bl	800277c <Error_Handler>
	}

}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000026c 	.word	0x2000026c
 8001f90:	200000c8 	.word	0x200000c8

08001f94 <ReadCANBusMessage>:

int ReadCANBusMessage(uint32_t messageIdentifier, uint8_t* RxData1)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
    /* Infinite loop to keep trying to read the message */
	uint32_t t = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]

    while(t < 4294967295)
 8001fa2:	e015      	b.n	8001fd0 <ReadCANBusMessage+0x3c>
    {
    	t++;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
        /* Check if a new message is available in RX FIFO 0 */
        if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData1) == HAL_OK)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <ReadCANBusMessage+0x50>)
 8001fae:	2140      	movs	r1, #64	; 0x40
 8001fb0:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <ReadCANBusMessage+0x54>)
 8001fb2:	f001 ff87 	bl	8003ec4 <HAL_FDCAN_GetRxMessage>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d109      	bne.n	8001fd0 <ReadCANBusMessage+0x3c>
        {
            /* Validate the Identifier */
            if(RxHeader.Identifier == messageIdentifier)
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <ReadCANBusMessage+0x50>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d101      	bne.n	8001fca <ReadCANBusMessage+0x36>
            {
                return 0; // Message successfully read and validated
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e007      	b.n	8001fda <ReadCANBusMessage+0x46>
            }
            delay_u(10);
 8001fca:	200a      	movs	r0, #10
 8001fcc:	f000 f860 	bl	8002090 <delay_u>
    while(t < 4294967295)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd6:	d1e5      	bne.n	8001fa4 <ReadCANBusMessage+0x10>
        }
        // Else, ignore the error and try again
    }
    return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000290 	.word	0x20000290
 8001fe8:	200000c8 	.word	0x200000c8

08001fec <Send_Soc>:

}



void Send_Soc(status_data_t *status_data){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Data[8];

	Tx_Data[0] = (uint8_t)status_data->soc;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ffe:	edc7 7a00 	vstr	s15, [r7]
 8002002:	783b      	ldrb	r3, [r7, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	723b      	strb	r3, [r7, #8]
	uint16_t buf = status_data->max_voltage / 10;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800200c:	4a1f      	ldr	r2, [pc, #124]	; (800208c <Send_Soc+0xa0>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	08db      	lsrs	r3, r3, #3
 8002014:	82fb      	strh	r3, [r7, #22]
	uint8_t c1 = buf;
 8002016:	8afb      	ldrh	r3, [r7, #22]
 8002018:	757b      	strb	r3, [r7, #21]
	uint8_t c2 = buf >> 8;
 800201a:	8afb      	ldrh	r3, [r7, #22]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	b29b      	uxth	r3, r3
 8002020:	753b      	strb	r3, [r7, #20]
	Tx_Data[1] = c1;
 8002022:	7d7b      	ldrb	r3, [r7, #21]
 8002024:	727b      	strb	r3, [r7, #9]
	Tx_Data[2] = c2;
 8002026:	7d3b      	ldrb	r3, [r7, #20]
 8002028:	72bb      	strb	r3, [r7, #10]
	if(status_data->air_s == true)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <Send_Soc+0x4e>
	Tx_Data[3] = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	72fb      	strb	r3, [r7, #11]
 8002038:	e001      	b.n	800203e <Send_Soc+0x52>
	else
	Tx_Data[3] = 1;
 800203a:	2301      	movs	r3, #1
 800203c:	72fb      	strb	r3, [r7, #11]

	uint16_t buf1 = (uint16_t)status_data->sum_of_cells;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002048:	ee17 3a90 	vmov	r3, s15
 800204c:	827b      	strh	r3, [r7, #18]

	Tx_Data[4]= (uint8_t)(buf1);
 800204e:	8a7b      	ldrh	r3, [r7, #18]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	733b      	strb	r3, [r7, #12]
	Tx_Data[5]= (uint8_t)(buf1 >> 8);
 8002054:	8a7b      	ldrh	r3, [r7, #18]
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	b29b      	uxth	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	737b      	strb	r3, [r7, #13]

	uint16_t buf2 = (uint16_t)status_data->max_temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002064:	823b      	strh	r3, [r7, #16]

	Tx_Data[6]= (uint8_t)(buf1);
 8002066:	8a7b      	ldrh	r3, [r7, #18]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	73bb      	strb	r3, [r7, #14]
	Tx_Data[7]= (uint8_t)(buf1 >> 8);
 800206c:	8a7b      	ldrh	r3, [r7, #18]
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	b29b      	uxth	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	73fb      	strb	r3, [r7, #15]

	CanSend(Tx_Data, CAN_SOC);
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	2197      	movs	r1, #151	; 0x97
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff6f 	bl	8001f60 <CanSend>

}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	cccccccd 	.word	0xcccccccd

08002090 <delay_u>:
#include "conf.h"

extern SPI_HandleTypeDef hspi1;


void delay_u(uint32_t us){
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <delay_u+0x58>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <delay_u+0x58>)
 800209e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a2:	60d3      	str	r3, [r2, #12]
		    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <delay_u+0x5c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a10      	ldr	r2, [pc, #64]	; (80020ec <delay_u+0x5c>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6013      	str	r3, [r2, #0]
		    // Get the current number of clock cycles
		    uint32_t const startTicks = DWT->CYCCNT;
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <delay_u+0x5c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
		    // Calculate the number of clock cycles for the desired delay
		    uint32_t const delayTicks = (SystemCoreClock / 1000000) * us;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <delay_u+0x60>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <delay_u+0x64>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	0c9a      	lsrs	r2, r3, #18
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	60bb      	str	r3, [r7, #8]
		    // Wait until the number of clock cycles has elapsed
		    while (DWT->CYCCNT - startTicks < delayTicks);
 80020ca:	bf00      	nop
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <delay_u+0x5c>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d8f8      	bhi.n	80020cc <delay_u+0x3c>
}
 80020da:	bf00      	nop
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000edf0 	.word	0xe000edf0
 80020ec:	e0001000 	.word	0xe0001000
 80020f0:	20000030 	.word	0x20000030
 80020f4:	431bde83 	.word	0x431bde83

080020f8 <spi_write_read_byte>:

void delay_m(uint32_t ms){
	HAL_Delay(ms);
}

uint8_t spi_write_read_byte(uint8_t wbyte){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]

	uint8_t rxByte;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2110      	movs	r1, #16
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f002 fb07 	bl	800471c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &wbyte, &rxByte, 1, SPI_TIMEOUT);
 800210e:	f107 020f 	add.w	r2, r7, #15
 8002112:	1df9      	adds	r1, r7, #7
 8002114:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2301      	movs	r3, #1
 800211c:	4806      	ldr	r0, [pc, #24]	; (8002138 <spi_write_read_byte+0x40>)
 800211e:	f003 fe26 	bl	8005d6e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002122:	2201      	movs	r2, #1
 8002124:	2110      	movs	r1, #16
 8002126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212a:	f002 faf7 	bl	800471c <HAL_GPIO_WritePin>

	return rxByte;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2000012c 	.word	0x2000012c

0800213c <spi_write_array>:

uint32_t spi_write_array(uint8_t len, uint8_t *data){
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	2110      	movs	r1, #16
 800214c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002150:	f002 fae4 	bl	800471c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, len, SPI_TIMEOUT);
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	b29a      	uxth	r2, r3
 8002158:	f643 2398 	movw	r3, #15000	; 0x3a98
 800215c:	6839      	ldr	r1, [r7, #0]
 800215e:	4807      	ldr	r0, [pc, #28]	; (800217c <spi_write_array+0x40>)
 8002160:	f003 fb67 	bl	8005832 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002164:	2201      	movs	r2, #1
 8002166:	2110      	movs	r1, #16
 8002168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216c:	f002 fad6 	bl	800471c <HAL_GPIO_WritePin>

	return 0;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	2000012c 	.word	0x2000012c

08002180 <spi_write_then_read_array_ltc>:

uint32_t spi_write_then_read_array_ltc(uint8_t wlen, uint8_t *wbuffer, uint8_t rlen, uint8_t *rbuffer){
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4603      	mov	r3, r0
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	4613      	mov	r3, r2
 8002190:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2110      	movs	r1, #16
 8002196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219a:	f002 fabf 	bl	800471c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wbuffer, wlen, SPI_TIMEOUT);
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	f643 2398 	movw	r3, #15000	; 0x3a98
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	480a      	ldr	r0, [pc, #40]	; (80021d4 <spi_write_then_read_array_ltc+0x54>)
 80021aa:	f003 fb42 	bl	8005832 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rbuffer, rlen, SPI_TIMEOUT);
 80021ae:	7bbb      	ldrb	r3, [r7, #14]
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	f643 2398 	movw	r3, #15000	; 0x3a98
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4806      	ldr	r0, [pc, #24]	; (80021d4 <spi_write_then_read_array_ltc+0x54>)
 80021ba:	f003 fca8 	bl	8005b0e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021be:	2201      	movs	r2, #1
 80021c0:	2110      	movs	r1, #16
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c6:	f002 faa9 	bl	800471c <HAL_GPIO_WritePin>

	return 0;
 80021ca:	2300      	movs	r3, #0

}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	2000012c 	.word	0x2000012c

080021d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021de:	f001 fa70 	bl	80036c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e2:	f000 f815 	bl	8002210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021e6:	f000 fa6f 	bl	80026c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80021ea:	f000 fa21 	bl	8002630 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80021ee:	f000 f931 	bl	8002454 <MX_SPI1_Init>
  MX_TIM8_Init();
 80021f2:	f000 f96d 	bl	80024d0 <MX_TIM8_Init>
  MX_FDCAN1_Init();
 80021f6:	f000 f84b 	bl	8002290 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80021fa:	2108      	movs	r1, #8
 80021fc:	4803      	ldr	r0, [pc, #12]	; (800220c <main+0x34>)
 80021fe:	f005 f86d 	bl	80072dc <HAL_TIMEx_PWMN_Start>
  uint16_t pulse = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      // Here we create a FDCAN message

	 operation_main();
 8002206:	f000 fabf 	bl	8002788 <operation_main>
 800220a:	e7fc      	b.n	8002206 <main+0x2e>
 800220c:	20000190 	.word	0x20000190

08002210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b094      	sub	sp, #80	; 0x50
 8002214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002216:	f107 0318 	add.w	r3, r7, #24
 800221a:	2238      	movs	r2, #56	; 0x38
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f006 f856 	bl	80082d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002232:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002236:	f002 fa89 	bl	800474c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800223a:	2302      	movs	r3, #2
 800223c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800223e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002244:	2340      	movs	r3, #64	; 0x40
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002248:	2300      	movs	r3, #0
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800224c:	f107 0318 	add.w	r3, r7, #24
 8002250:	4618      	mov	r0, r3
 8002252:	f002 fb1f 	bl	8004894 <HAL_RCC_OscConfig>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800225c:	f000 fa8e 	bl	800277c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002260:	230f      	movs	r3, #15
 8002262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002264:	2301      	movs	r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f002 fe23 	bl	8004ec4 <HAL_RCC_ClockConfig>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002284:	f000 fa7a 	bl	800277c <Error_Handler>
  }
}
 8002288:	bf00      	nop
 800228a:	3750      	adds	r7, #80	; 0x50
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002296:	4b6c      	ldr	r3, [pc, #432]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 8002298:	4a6c      	ldr	r2, [pc, #432]	; (800244c <MX_FDCAN1_Init+0x1bc>)
 800229a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800229c:	4b6a      	ldr	r3, [pc, #424]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 800229e:	2200      	movs	r2, #0
 80022a0:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80022a2:	4b69      	ldr	r3, [pc, #420]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80022a8:	4b67      	ldr	r3, [pc, #412]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80022ae:	4b66      	ldr	r3, [pc, #408]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80022b4:	4b64      	ldr	r3, [pc, #400]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022bc:	2200      	movs	r2, #0
 80022be:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80022c0:	4b61      	ldr	r3, [pc, #388]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80022c6:	4b60      	ldr	r3, [pc, #384]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80022cc:	4b5e      	ldr	r3, [pc, #376]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022ce:	220d      	movs	r2, #13
 80022d0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80022d2:	4b5d      	ldr	r3, [pc, #372]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022d4:	2202      	movs	r2, #2
 80022d6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80022d8:	4b5b      	ldr	r3, [pc, #364]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022da:	2201      	movs	r2, #1
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80022de:	4b5a      	ldr	r3, [pc, #360]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80022e4:	4b58      	ldr	r3, [pc, #352]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80022ea:	4b57      	ldr	r3, [pc, #348]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 29;
 80022f0:	4b55      	ldr	r3, [pc, #340]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022f2:	221d      	movs	r2, #29
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80022f6:	4b54      	ldr	r3, [pc, #336]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80022fc:	4b52      	ldr	r3, [pc, #328]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80022fe:	2200      	movs	r2, #0
 8002300:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002302:	4851      	ldr	r0, [pc, #324]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 8002304:	f001 fb54 	bl	80039b0 <HAL_FDCAN_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800230e:	f000 fa35 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan1, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8002312:	2201      	movs	r2, #1
 8002314:	2140      	movs	r1, #64	; 0x40
 8002316:	484c      	ldr	r0, [pc, #304]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 8002318:	f001 fd2f 	bl	8003d7a <HAL_FDCAN_ConfigRxFifoOverwrite>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_FDCAN1_Init+0x96>
    {
      Error_Handler();
 8002322:	f000 fa2b 	bl	800277c <Error_Handler>
    }
  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan1, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8002326:	2201      	movs	r2, #1
 8002328:	2141      	movs	r1, #65	; 0x41
 800232a:	4847      	ldr	r0, [pc, #284]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 800232c:	f001 fd25 	bl	8003d7a <HAL_FDCAN_ConfigRxFifoOverwrite>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_FDCAN1_Init+0xaa>
    {
      Error_Handler();
 8002336:	f000 fa21 	bl	800277c <Error_Handler>
    }

  //only accept config/request can messages and sync can messages
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002342:	2302      	movs	r3, #2
 8002344:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002346:	2301      	movs	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 1900; //CANID_CONFIG;
 800234a:	f240 736c 	movw	r3, #1900	; 0x76c
 800234e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8002350:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002354:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002356:	463b      	mov	r3, r7
 8002358:	4619      	mov	r1, r3
 800235a:	483b      	ldr	r0, [pc, #236]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 800235c:	f001 fc82 	bl	8003c64 <HAL_FDCAN_ConfigFilter>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_FDCAN1_Init+0xda>
    {
      Error_Handler();
 8002366:	f000 fa09 	bl	800277c <Error_Handler>
    }

  // Additional filter configuration for 0x52x messages
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800236a:	2300      	movs	r3, #0
 800236c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 1;
 800236e:	2301      	movs	r3, #1
 8002370:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002372:	2302      	movs	r3, #2
 8002374:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002376:	2301      	movs	r3, #1
 8002378:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x520;   // Start of the range
 800237a:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800237e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x700;   // Mask for the filter. This will allow IDs 0x520 - 0x52F
 8002380:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002384:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002386:	463b      	mov	r3, r7
 8002388:	4619      	mov	r1, r3
 800238a:	482f      	ldr	r0, [pc, #188]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 800238c:	f001 fc6a 	bl	8003c64 <HAL_FDCAN_ConfigFilter>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_FDCAN1_Init+0x10a>
  {
      Error_Handler();
 8002396:	f000 f9f1 	bl	800277c <Error_Handler>
  }

  // Filter configuration for message ID 150
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800239a:	2300      	movs	r3, #0
 800239c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 2; // Different index for this filter
 800239e:	2302      	movs	r3, #2
 80023a0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80023a2:	2302      	movs	r3, #2
 80023a4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80023a6:	2301      	movs	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 150;   // Specific ID
 80023aa:	2396      	movs	r3, #150	; 0x96
 80023ac:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;   // Mask for the filter. This will allow only ID 150
 80023ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80023b2:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80023b4:	463b      	mov	r3, r7
 80023b6:	4619      	mov	r1, r3
 80023b8:	4823      	ldr	r0, [pc, #140]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80023ba:	f001 fc53 	bl	8003c64 <HAL_FDCAN_ConfigFilter>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_FDCAN1_Init+0x138>
  {
      Error_Handler();
 80023c4:	f000 f9da 	bl	800277c <Error_Handler>
  }

  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 80023c8:	2301      	movs	r3, #1
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2301      	movs	r3, #1
 80023ce:	2202      	movs	r2, #2
 80023d0:	2102      	movs	r1, #2
 80023d2:	481d      	ldr	r0, [pc, #116]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80023d4:	f001 fca0 	bl	8003d18 <HAL_FDCAN_ConfigGlobalFilter>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_FDCAN1_Init+0x152>
    {
      Error_Handler();
 80023de:	f000 f9cd 	bl	800277c <Error_Handler>
    }

  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80023e2:	4819      	ldr	r0, [pc, #100]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80023e4:	f001 fd02 	bl	8003dec <HAL_FDCAN_Start>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_FDCAN1_Init+0x162>
    {
      Error_Handler();
 80023ee:	f000 f9c5 	bl	800277c <Error_Handler>
    }
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80023f2:	2200      	movs	r2, #0
 80023f4:	2101      	movs	r1, #1
 80023f6:	4814      	ldr	r0, [pc, #80]	; (8002448 <MX_FDCAN1_Init+0x1b8>)
 80023f8:	f001 fe3e 	bl	8004078 <HAL_FDCAN_ActivateNotification>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_FDCAN1_Init+0x176>
    {
      Error_Handler();
 8002402:	f000 f9bb 	bl	800277c <Error_Handler>
    }

  TxHeader.Identifier = 0x123; // Modify this with your identifier
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <MX_FDCAN1_Init+0x1c0>)
 8002408:	f240 1223 	movw	r2, #291	; 0x123
 800240c:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <MX_FDCAN1_Init+0x1c0>)
 8002410:	2200      	movs	r2, #0
 8002412:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_FDCAN1_Init+0x1c0>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <MX_FDCAN1_Init+0x1c0>)
 800241c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002420:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <MX_FDCAN1_Init+0x1c0>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <MX_FDCAN1_Init+0x1c0>)
 800242a:	2200      	movs	r2, #0
 800242c:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <MX_FDCAN1_Init+0x1c0>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <MX_FDCAN1_Init+0x1c0>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <MX_FDCAN1_Init+0x1c0>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8002440:	bf00      	nop
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200000c8 	.word	0x200000c8
 800244c:	40006400 	.word	0x40006400
 8002450:	2000026c 	.word	0x2000026c

08002454 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <MX_SPI1_Init+0x74>)
 800245a:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <MX_SPI1_Init+0x78>)
 800245c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800245e:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <MX_SPI1_Init+0x74>)
 8002460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002464:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <MX_SPI1_Init+0x74>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800246c:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <MX_SPI1_Init+0x74>)
 800246e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002472:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <MX_SPI1_Init+0x74>)
 8002476:	2202      	movs	r2, #2
 8002478:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <MX_SPI1_Init+0x74>)
 800247c:	2201      	movs	r2, #1
 800247e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <MX_SPI1_Init+0x74>)
 8002482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002486:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <MX_SPI1_Init+0x74>)
 800248a:	2238      	movs	r2, #56	; 0x38
 800248c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <MX_SPI1_Init+0x74>)
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <MX_SPI1_Init+0x74>)
 8002496:	2200      	movs	r2, #0
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <MX_SPI1_Init+0x74>)
 800249c:	2200      	movs	r2, #0
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <MX_SPI1_Init+0x74>)
 80024a2:	2207      	movs	r2, #7
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <MX_SPI1_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MX_SPI1_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_SPI1_Init+0x74>)
 80024b4:	f003 f912 	bl	80056dc <HAL_SPI_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024be:	f000 f95d 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000012c 	.word	0x2000012c
 80024cc:	40013000 	.word	0x40013000

080024d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b09c      	sub	sp, #112	; 0x70
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	615a      	str	r2, [r3, #20]
 8002502:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	2234      	movs	r2, #52	; 0x34
 8002508:	2100      	movs	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f005 fee0 	bl	80082d0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002510:	4b45      	ldr	r3, [pc, #276]	; (8002628 <MX_TIM8_Init+0x158>)
 8002512:	4a46      	ldr	r2, [pc, #280]	; (800262c <MX_TIM8_Init+0x15c>)
 8002514:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 8002516:	4b44      	ldr	r3, [pc, #272]	; (8002628 <MX_TIM8_Init+0x158>)
 8002518:	220f      	movs	r2, #15
 800251a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <MX_TIM8_Init+0x158>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 39;
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <MX_TIM8_Init+0x158>)
 8002524:	2227      	movs	r2, #39	; 0x27
 8002526:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002528:	4b3f      	ldr	r3, [pc, #252]	; (8002628 <MX_TIM8_Init+0x158>)
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800252e:	4b3e      	ldr	r3, [pc, #248]	; (8002628 <MX_TIM8_Init+0x158>)
 8002530:	2200      	movs	r2, #0
 8002532:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002534:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <MX_TIM8_Init+0x158>)
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800253a:	483b      	ldr	r0, [pc, #236]	; (8002628 <MX_TIM8_Init+0x158>)
 800253c:	f003 ffe6 	bl	800650c <HAL_TIM_Base_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002546:	f000 f919 	bl	800277c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800254a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002550:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002554:	4619      	mov	r1, r3
 8002556:	4834      	ldr	r0, [pc, #208]	; (8002628 <MX_TIM8_Init+0x158>)
 8002558:	f004 f9a4 	bl	80068a4 <HAL_TIM_ConfigClockSource>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002562:	f000 f90b 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002566:	4830      	ldr	r0, [pc, #192]	; (8002628 <MX_TIM8_Init+0x158>)
 8002568:	f004 f827 	bl	80065ba <HAL_TIM_PWM_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002572:	f000 f903 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002582:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002586:	4619      	mov	r1, r3
 8002588:	4827      	ldr	r0, [pc, #156]	; (8002628 <MX_TIM8_Init+0x158>)
 800258a:	f004 ff5b 	bl	8007444 <HAL_TIMEx_MasterConfigSynchronization>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8002594:	f000 f8f2 	bl	800277c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002598:	2360      	movs	r3, #96	; 0x60
 800259a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 19;
 800259c:	2313      	movs	r3, #19
 800259e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a0:	2300      	movs	r3, #0
 80025a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025a4:	2300      	movs	r3, #0
 80025a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025ac:	2300      	movs	r3, #0
 80025ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025b8:	2208      	movs	r2, #8
 80025ba:	4619      	mov	r1, r3
 80025bc:	481a      	ldr	r0, [pc, #104]	; (8002628 <MX_TIM8_Init+0x158>)
 80025be:	f004 f85d 	bl	800667c <HAL_TIM_PWM_ConfigChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 80025c8:	f000 f8d8 	bl	800277c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80025f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80025fc:	2300      	movs	r3, #0
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	4619      	mov	r1, r3
 8002608:	4807      	ldr	r0, [pc, #28]	; (8002628 <MX_TIM8_Init+0x158>)
 800260a:	f004 ff9d 	bl	8007548 <HAL_TIMEx_ConfigBreakDeadTime>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8002614:	f000 f8b2 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002618:	4803      	ldr	r0, [pc, #12]	; (8002628 <MX_TIM8_Init+0x158>)
 800261a:	f000 fea7 	bl	800336c <HAL_TIM_MspPostInit>

}
 800261e:	bf00      	nop
 8002620:	3770      	adds	r7, #112	; 0x70
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000190 	.word	0x20000190
 800262c:	40013400 	.word	0x40013400

08002630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002636:	4a23      	ldr	r2, [pc, #140]	; (80026c4 <MX_USART2_UART_Init+0x94>)
 8002638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800263a:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800263c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002642:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002648:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002656:	220c      	movs	r2, #12
 8002658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265a:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002662:	2200      	movs	r2, #0
 8002664:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002668:	2200      	movs	r2, #0
 800266a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800266e:	2200      	movs	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002674:	2200      	movs	r2, #0
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002678:	4811      	ldr	r0, [pc, #68]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800267a:	f005 f82a 	bl	80076d2 <HAL_UART_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002684:	f000 f87a 	bl	800277c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002688:	2100      	movs	r1, #0
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800268c:	f005 fd2c 	bl	80080e8 <HAL_UARTEx_SetTxFifoThreshold>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002696:	f000 f871 	bl	800277c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800269a:	2100      	movs	r1, #0
 800269c:	4808      	ldr	r0, [pc, #32]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800269e:	f005 fd61 	bl	8008164 <HAL_UARTEx_SetRxFifoThreshold>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80026a8:	f000 f868 	bl	800277c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80026ac:	4804      	ldr	r0, [pc, #16]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 80026ae:	f005 fce2 	bl	8008076 <HAL_UARTEx_DisableFifoMode>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80026b8:	f000 f860 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200001dc 	.word	0x200001dc
 80026c4:	40004400 	.word	0x40004400

080026c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
 80026dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026de:	4b25      	ldr	r3, [pc, #148]	; (8002774 <MX_GPIO_Init+0xac>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	4a24      	ldr	r2, [pc, #144]	; (8002774 <MX_GPIO_Init+0xac>)
 80026e4:	f043 0320 	orr.w	r3, r3, #32
 80026e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <MX_GPIO_Init+0xac>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <MX_GPIO_Init+0xac>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	4a1e      	ldr	r2, [pc, #120]	; (8002774 <MX_GPIO_Init+0xac>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <MX_GPIO_Init+0xac>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <MX_GPIO_Init+0xac>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	4a18      	ldr	r2, [pc, #96]	; (8002774 <MX_GPIO_Init+0xac>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <MX_GPIO_Init+0xac>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8002726:	2200      	movs	r2, #0
 8002728:	f248 7110 	movw	r1, #34576	; 0x8710
 800272c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002730:	f001 fff4 	bl	800471c <HAL_GPIO_WritePin>
                          |FAN_control_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_Pin Led_debug_Pin PRE_Done_Pin AMS_Ok_Pin
                           FAN_control_Pin */
  GPIO_InitStruct.Pin = CS_Pin|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8002734:	f248 7310 	movw	r3, #34576	; 0x8710
 8002738:	60fb      	str	r3, [r7, #12]
                          |FAN_control_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273a:	2301      	movs	r3, #1
 800273c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002746:	f107 030c 	add.w	r3, r7, #12
 800274a:	4619      	mov	r1, r3
 800274c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002750:	f001 fe4a 	bl	80043e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_PRE_Pin AIR__Pin AIR_B7_Pin */
  GPIO_InitStruct.Pin = AIR_PRE_Pin|AIR__Pin|AIR_B7_Pin;
 8002754:	23d0      	movs	r3, #208	; 0xd0
 8002756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	4619      	mov	r1, r3
 8002766:	4804      	ldr	r0, [pc, #16]	; (8002778 <MX_GPIO_Init+0xb0>)
 8002768:	f001 fe3e 	bl	80043e8 <HAL_GPIO_Init>

}
 800276c:	bf00      	nop
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	48000400 	.word	0x48000400

0800277c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002780:	b672      	cpsid	i
}
 8002782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002784:	e7fe      	b.n	8002784 <Error_Handler+0x8>
	...

08002788 <operation_main>:

int charger_event_flag;
static uint8_t charger_event_counter;

#define MODE_CAN 0
void operation_main(void){
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0

	open_AIR();
 800278e:	f000 f883 	bl	8002898 <open_AIR>
	open_PRE();
 8002792:	f000 f8b7 	bl	8002904 <open_PRE>



	initialize();
 8002796:	f7fe fb92 	bl	8000ebe <initialize>
	//fan_energize();
	init_slave_cfg();
 800279a:	f000 fb69 	bl	8002e70 <init_slave_cfg>
	uint32_t timer = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	603b      	str	r3, [r7, #0]
	for(uint32_t i=0; i<NUMB_REASON_CODES; i++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	e008      	b.n	80027ba <operation_main+0x32>
		{
			status_data.error_counters[i]=0;
 80027a8:	4a37      	ldr	r2, [pc, #220]	; (8002888 <operation_main+0x100>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	331e      	adds	r3, #30
 80027ae:	2100      	movs	r1, #0
 80027b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint32_t i=0; i<NUMB_REASON_CODES; i++)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3301      	adds	r3, #1
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	d9f3      	bls.n	80027a8 <operation_main+0x20>
		}

		status_data.soc = 100;
 80027c0:	4b31      	ldr	r3, [pc, #196]	; (8002888 <operation_main+0x100>)
 80027c2:	4a32      	ldr	r2, [pc, #200]	; (800288c <operation_main+0x104>)
 80027c4:	611a      	str	r2, [r3, #16]
		status_data.pec_error_counter = 0;
 80027c6:	4b30      	ldr	r3, [pc, #192]	; (8002888 <operation_main+0x100>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	66da      	str	r2, [r3, #108]	; 0x6c
		status_data.pec_error_counter_last = 0;
 80027cc:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <operation_main+0x100>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	671a      	str	r2, [r3, #112]	; 0x70

		status_data.limping = 0;
 80027d2:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <operation_main+0x100>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		status_data.recieved_IVT = 0;
 80027da:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <operation_main+0x100>)
 80027dc:	2200      	movs	r2, #0
 80027de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		status_data.opmode = 0;
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <operation_main+0x100>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		status_data.opmode = (1 << 0)|(1 << 4);
 80027ea:	4b27      	ldr	r3, [pc, #156]	; (8002888 <operation_main+0x100>)
 80027ec:	2211      	movs	r2, #17
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		status_data.mode = 0;
 80027f2:	4b25      	ldr	r3, [pc, #148]	; (8002888 <operation_main+0x100>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	711a      	strb	r2, [r3, #4]

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 80027f8:	2201      	movs	r2, #1
 80027fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002802:	f001 ff8b 	bl	800471c <HAL_GPIO_WritePin>
#endif

	while(1){


		switch (status_data.mode){
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <operation_main+0x100>)
 8002808:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d838      	bhi.n	8002882 <operation_main+0xfa>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <operation_main+0x90>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	08002829 	.word	0x08002829
 800281c:	08002841 	.word	0x08002841
 8002820:	08002859 	.word	0x08002859
 8002824:	0800285f 	.word	0x0800285f
			case 0:
				core_routine(RETEST_YES);
 8002828:	2001      	movs	r0, #1
 800282a:	f000 f8c1 	bl	80029b0 <core_routine>
				status_data.uptime++;
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <operation_main+0x100>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <operation_main+0x100>)
 8002836:	6013      	str	r3, [r2, #0]
				//if(status_data.uptime % 10 == 0)
					//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
			    HAL_Delay(100);
 8002838:	2064      	movs	r0, #100	; 0x64
 800283a:	f000 ffb3 	bl	80037a4 <HAL_Delay>

				break;
 800283e:	e021      	b.n	8002884 <operation_main+0xfc>
			case 1:
				read_cell_voltage();
 8002840:	f000 fab6 	bl	8002db0 <read_cell_voltage>
				get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002844:	4a10      	ldr	r2, [pc, #64]	; (8002888 <operation_main+0x100>)
 8002846:	4912      	ldr	r1, [pc, #72]	; (8002890 <operation_main+0x108>)
 8002848:	2008      	movs	r0, #8
 800284a:	f7ff faf1 	bl	8001e30 <get_minmax_voltage>
				//balance_routine();

				HAL_Delay(1000);
 800284e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002852:	f000 ffa7 	bl	80037a4 <HAL_Delay>

				break;
 8002856:	e015      	b.n	8002884 <operation_main+0xfc>
			case 2:

				charge_routine();
 8002858:	f000 f892 	bl	8002980 <charge_routine>
				break;
 800285c:	e012      	b.n	8002884 <operation_main+0xfc>
			case 3:
				//debug_routine();
				read_cell_voltage();
 800285e:	f000 faa7 	bl	8002db0 <read_cell_voltage>
				read_temp_measurement();
 8002862:	f000 fad3 	bl	8002e0c <read_temp_measurement>
				get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <operation_main+0x100>)
 8002868:	490a      	ldr	r1, [pc, #40]	; (8002894 <operation_main+0x10c>)
 800286a:	2008      	movs	r0, #8
 800286c:	f7ff fa50 	bl	8001d10 <get_minmax_temperature>
				get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002870:	4a05      	ldr	r2, [pc, #20]	; (8002888 <operation_main+0x100>)
 8002872:	4907      	ldr	r1, [pc, #28]	; (8002890 <operation_main+0x108>)
 8002874:	2008      	movs	r0, #8
 8002876:	f7ff fadb 	bl	8001e30 <get_minmax_voltage>
				HAL_Delay(100);
 800287a:	2064      	movs	r0, #100	; 0x64
 800287c:	f000 ff92 	bl	80037a4 <HAL_Delay>

				break;
 8002880:	e000      	b.n	8002884 <operation_main+0xfc>
			default:
				break;
 8002882:	bf00      	nop
		switch (status_data.mode){
 8002884:	e7bf      	b.n	8002806 <operation_main+0x7e>
 8002886:	bf00      	nop
 8002888:	20000638 	.word	0x20000638
 800288c:	42c80000 	.word	0x42c80000
 8002890:	200002b8 	.word	0x200002b8
 8002894:	200003d8 	.word	0x200003d8

08002898 <open_AIR>:
		Data is checked against limits and a return value is generated.

	\return status of test_limits function (0: OK, -1 FAIL).
*/

void open_AIR(void){
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800289c:	2200      	movs	r2, #0
 800289e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a6:	f001 ff39 	bl	800471c <HAL_GPIO_WritePin>
	status_data.air_s = false;
 80028aa:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <open_AIR+0x20>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000638 	.word	0x20000638

080028bc <close_AIR>:

void close_AIR(void){
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 80028c0:	2201      	movs	r2, #1
 80028c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ca:	f001 ff27 	bl	800471c <HAL_GPIO_WritePin>
	status_data.air_s = true;
 80028ce:	4b03      	ldr	r3, [pc, #12]	; (80028dc <close_AIR+0x20>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000638 	.word	0x20000638

080028e0 <close_PRE>:

void close_PRE(void){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80028e4:	2201      	movs	r2, #1
 80028e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ee:	f001 ff15 	bl	800471c <HAL_GPIO_WritePin>
	status_data.pre_s = true;
 80028f2:	4b03      	ldr	r3, [pc, #12]	; (8002900 <close_PRE+0x20>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000638 	.word	0x20000638

08002904 <open_PRE>:

void open_PRE(void){
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8002908:	2200      	movs	r2, #0
 800290a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800290e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002912:	f001 ff03 	bl	800471c <HAL_GPIO_WritePin>
	status_data.pre_s = false;
 8002916:	4b03      	ldr	r3, [pc, #12]	; (8002924 <open_PRE+0x20>)
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000638 	.word	0x20000638

08002928 <AMS_OK>:

int AMS_OK(status_data_t *status_data, limit_t *limit){
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
	if(status_data->min_voltage > limit->min_voltage && status_data->max_voltage < limit->max_voltage){
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	885b      	ldrh	r3, [r3, #2]
 800293a:	429a      	cmp	r2, r3
 800293c:	d919      	bls.n	8002972 <AMS_OK+0x4a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d213      	bcs.n	8002972 <AMS_OK+0x4a>
		if(status_data->min_temp > limit->min_temp && status_data->max_temp < limit->max_temp){
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	dd0b      	ble.n	8002972 <AMS_OK+0x4a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002966:	429a      	cmp	r2, r3
 8002968:	da03      	bge.n	8002972 <AMS_OK+0x4a>
			close_AIR();
 800296a:	f7ff ffa7 	bl	80028bc <close_AIR>
			return 0;
 800296e:	2300      	movs	r3, #0
 8002970:	e002      	b.n	8002978 <AMS_OK+0x50>
		}
	}
	open_AIR();
 8002972:	f7ff ff91 	bl	8002898 <open_AIR>
	return 1;
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <charge_routine>:




void charge_routine(void){
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0


	uint8_t flag = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]


	uint8_t RxData2[8];
		while(ReadCANBusMessage(0x96, &RxData2)){
 800298a:	e002      	b.n	8002992 <charge_routine+0x12>
			delay_u(200);
 800298c:	20c8      	movs	r0, #200	; 0xc8
 800298e:	f7ff fb7f 	bl	8002090 <delay_u>
		while(ReadCANBusMessage(0x96, &RxData2)){
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	4619      	mov	r1, r3
 8002996:	2096      	movs	r0, #150	; 0x96
 8002998:	f7ff fafc 	bl	8001f94 <ReadCANBusMessage>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f4      	bne.n	800298c <charge_routine+0xc>
		}

	while(1){
		core_routine(RETEST_YES);
 80029a2:	2001      	movs	r0, #1
 80029a4:	f000 f804 	bl	80029b0 <core_routine>
		HAL_Delay(100);
 80029a8:	2064      	movs	r0, #100	; 0x64
 80029aa:	f000 fefb 	bl	80037a4 <HAL_Delay>
		core_routine(RETEST_YES);
 80029ae:	e7f8      	b.n	80029a2 <charge_routine+0x22>

080029b0 <core_routine>:
}




int8_t core_routine(int32_t retest){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

	status_data.air_m = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80029b8:	2140      	movs	r1, #64	; 0x40
 80029ba:	482f      	ldr	r0, [pc, #188]	; (8002a78 <core_routine+0xc8>)
 80029bc:	f001 fe96 	bl	80046ec <HAL_GPIO_ReadPin>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf14      	ite	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2300      	moveq	r3, #0
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <core_routine+0xcc>)
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	status_data.air_p = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 80029d2:	2180      	movs	r1, #128	; 0x80
 80029d4:	4828      	ldr	r0, [pc, #160]	; (8002a78 <core_routine+0xc8>)
 80029d6:	f001 fe89 	bl	80046ec <HAL_GPIO_ReadPin>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <core_routine+0xcc>)
 80029e8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	status_data.air_pre = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80029ec:	2110      	movs	r1, #16
 80029ee:	4822      	ldr	r0, [pc, #136]	; (8002a78 <core_routine+0xc8>)
 80029f0:	f001 fe7c 	bl	80046ec <HAL_GPIO_ReadPin>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <core_routine+0xcc>)
 8002a02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	empty_disch_cfg();
 8002a06:	f000 f993 	bl	8002d30 <empty_disch_cfg>
	read_cell_voltage();
 8002a0a:	f000 f9d1 	bl	8002db0 <read_cell_voltage>
	read_temp_measurement();
 8002a0e:	f000 f9fd 	bl	8002e0c <read_temp_measurement>
	get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002a12:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <core_routine+0xcc>)
 8002a14:	491a      	ldr	r1, [pc, #104]	; (8002a80 <core_routine+0xd0>)
 8002a16:	2008      	movs	r0, #8
 8002a18:	f7ff fa0a 	bl	8001e30 <get_minmax_voltage>
	get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8002a1c:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <core_routine+0xcc>)
 8002a1e:	4919      	ldr	r1, [pc, #100]	; (8002a84 <core_routine+0xd4>)
 8002a20:	2008      	movs	r0, #8
 8002a22:	f7ff f975 	bl	8001d10 <get_minmax_temperature>
	calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <core_routine+0xcc>)
 8002a28:	4915      	ldr	r1, [pc, #84]	; (8002a80 <core_routine+0xd0>)
 8002a2a:	2008      	movs	r0, #8
 8002a2c:	f7ff f90a 	bl	8001c44 <calc_sum_of_cells>
	AMS_OK(&status_data, &limits);
 8002a30:	4915      	ldr	r1, [pc, #84]	; (8002a88 <core_routine+0xd8>)
 8002a32:	4812      	ldr	r0, [pc, #72]	; (8002a7c <core_routine+0xcc>)
 8002a34:	f7ff ff78 	bl	8002928 <AMS_OK>
	//fan_control(&status_data);
	set_fan_duty_cycle(&status_data);
 8002a38:	4810      	ldr	r0, [pc, #64]	; (8002a7c <core_routine+0xcc>)
 8002a3a:	f000 fb9d 	bl	8003178 <set_fan_duty_cycle>

#if IVT
	read_IVT(&status_data);
 8002a3e:	480f      	ldr	r0, [pc, #60]	; (8002a7c <core_routine+0xcc>)
 8002a40:	f000 f824 	bl	8002a8c <read_IVT>
	calculate_soc(&status_data);
 8002a44:	480d      	ldr	r0, [pc, #52]	; (8002a7c <core_routine+0xcc>)
 8002a46:	f7ff f943 	bl	8001cd0 <calculate_soc>
	precharge_compare();
 8002a4a:	f000 f8cd 	bl	8002be8 <precharge_compare>
	calculate_soc(&status_data);
 8002a4e:	480b      	ldr	r0, [pc, #44]	; (8002a7c <core_routine+0xcc>)
 8002a50:	f7ff f93e 	bl	8001cd0 <calculate_soc>
#if CAN_ENABLED

	//Send_cell_data(cell_data);

	//Send_temp_data(temp_data);
	Send_Soc(&status_data);
 8002a54:	4809      	ldr	r0, [pc, #36]	; (8002a7c <core_routine+0xcc>)
 8002a56:	f7ff fac9 	bl	8001fec <Send_Soc>
#endif

	test_limp(&status_data, &limits);
 8002a5a:	490b      	ldr	r1, [pc, #44]	; (8002a88 <core_routine+0xd8>)
 8002a5c:	4807      	ldr	r0, [pc, #28]	; (8002a7c <core_routine+0xcc>)
 8002a5e:	f000 faa8 	bl	8002fb2 <test_limp>


	return test_limits(&status_data, &limits, retest);
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4908      	ldr	r1, [pc, #32]	; (8002a88 <core_routine+0xd8>)
 8002a66:	4805      	ldr	r0, [pc, #20]	; (8002a7c <core_routine+0xcc>)
 8002a68:	f000 fadd 	bl	8003026 <test_limits>
 8002a6c:	4603      	mov	r3, r0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	48000400 	.word	0x48000400
 8002a7c:	20000638 	.word	0x20000638
 8002a80:	200002b8 	.word	0x200002b8
 8002a84:	200003d8 	.word	0x200003d8
 8002a88:	20000000 	.word	0x20000000

08002a8c <read_IVT>:

void read_IVT(status_data_t *status_data){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

	uint8_t RxData1[8];
	while(ReadCANBusMessage(0x522, &RxData1)){
 8002a94:	e002      	b.n	8002a9c <read_IVT+0x10>
		delay_u(200);
 8002a96:	20c8      	movs	r0, #200	; 0xc8
 8002a98:	f7ff fafa 	bl	8002090 <delay_u>
	while(ReadCANBusMessage(0x522, &RxData1)){
 8002a9c:	f107 0320 	add.w	r3, r7, #32
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f240 5022 	movw	r0, #1314	; 0x522
 8002aa6:	f7ff fa75 	bl	8001f94 <ReadCANBusMessage>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f2      	bne.n	8002a96 <read_IVT+0xa>
	}

	//delay_u(500);

	status_data->IVT_U1 = (uint32_t)(RxData1[5] | (RxData1[4] << 8) | (RxData1[3] << 16) | (RxData1[2] << 24) );
 8002ab0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	431a      	orrs	r2, r3
 8002abe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002aca:	061b      	lsls	r3, r3, #24
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
	status_data->IVT_U1_f = status_data->IVT_U1 / 1000.0f;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ade:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002be4 <read_IVT+0x158>
 8002ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	uint8_t RxData2[8];
	while(ReadCANBusMessage(0x523, &RxData2)){
 8002aec:	e002      	b.n	8002af4 <read_IVT+0x68>
		delay_u(200);
 8002aee:	20c8      	movs	r0, #200	; 0xc8
 8002af0:	f7ff face 	bl	8002090 <delay_u>
	while(ReadCANBusMessage(0x523, &RxData2)){
 8002af4:	f107 0318 	add.w	r3, r7, #24
 8002af8:	4619      	mov	r1, r3
 8002afa:	f240 5023 	movw	r0, #1315	; 0x523
 8002afe:	f7ff fa49 	bl	8001f94 <ReadCANBusMessage>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f2      	bne.n	8002aee <read_IVT+0x62>
	}
	//delay_u(500);
	status_data->IVT_U2 = (uint32_t)(RxData2[5] | (RxData2[4] << 8) | (RxData2[3] << 16) | (RxData2[2] << 24) );
 8002b08:	7f7b      	ldrb	r3, [r7, #29]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	7f3b      	ldrb	r3, [r7, #28]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	431a      	orrs	r2, r3
 8002b12:	7efb      	ldrb	r3, [r7, #27]
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	431a      	orrs	r2, r3
 8002b18:	7ebb      	ldrb	r3, [r7, #26]
 8002b1a:	061b      	lsls	r3, r3, #24
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	64da      	str	r2, [r3, #76]	; 0x4c
	status_data->IVT_U2_f = status_data->IVT_U2 / 1000.0f;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	ee07 3a90 	vmov	s15, r3
 8002b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b2e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002be4 <read_IVT+0x158>
 8002b32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	uint8_t RxData3[8];
	while(ReadCANBusMessage(0x528, &RxData3)){
 8002b3c:	e002      	b.n	8002b44 <read_IVT+0xb8>
		delay_u(200);
 8002b3e:	20c8      	movs	r0, #200	; 0xc8
 8002b40:	f7ff faa6 	bl	8002090 <delay_u>
	while(ReadCANBusMessage(0x528, &RxData3)){
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f44f 60a5 	mov.w	r0, #1320	; 0x528
 8002b4e:	f7ff fa21 	bl	8001f94 <ReadCANBusMessage>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f2      	bne.n	8002b3e <read_IVT+0xb2>
	}
	//delay_u(500);
	status_data->IVT_Wh = (uint32_t)(RxData3[5] | (RxData3[4] << 8) | (RxData3[3] << 16) | (RxData3[2] << 24) );
 8002b58:	7d7b      	ldrb	r3, [r7, #21]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	7d3b      	ldrb	r3, [r7, #20]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	431a      	orrs	r2, r3
 8002b62:	7cfb      	ldrb	r3, [r7, #19]
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	7cbb      	ldrb	r3, [r7, #18]
 8002b6a:	061b      	lsls	r3, r3, #24
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	655a      	str	r2, [r3, #84]	; 0x54
	status_data->IVT_Wh_f = status_data->IVT_Wh / 1000.0f;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b7e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002be4 <read_IVT+0x158>
 8002b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	uint8_t RxData4[8];
		while(ReadCANBusMessage(0x521, &RxData4)){
 8002b8c:	e002      	b.n	8002b94 <read_IVT+0x108>
			delay_u(200);
 8002b8e:	20c8      	movs	r0, #200	; 0xc8
 8002b90:	f7ff fa7e 	bl	8002090 <delay_u>
		while(ReadCANBusMessage(0x521, &RxData4)){
 8002b94:	f107 0308 	add.w	r3, r7, #8
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f240 5021 	movw	r0, #1313	; 0x521
 8002b9e:	f7ff f9f9 	bl	8001f94 <ReadCANBusMessage>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f2      	bne.n	8002b8e <read_IVT+0x102>
		}
	status_data->IVT_I = (uint32_t)(RxData4[5] | (RxData4[4] << 8) | (RxData4[3] << 16) | (RxData4[2] << 24) );
 8002ba8:	7b7b      	ldrb	r3, [r7, #13]
 8002baa:	461a      	mov	r2, r3
 8002bac:	7b3b      	ldrb	r3, [r7, #12]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	7abb      	ldrb	r3, [r7, #10]
 8002bba:	061b      	lsls	r3, r3, #24
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	665a      	str	r2, [r3, #100]	; 0x64
	status_data->IVT_I_f = status_data->IVT_I / 1000.0f;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bce:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002be4 <read_IVT+0x158>
 8002bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68


}
 8002bdc:	bf00      	nop
 8002bde:	3728      	adds	r7, #40	; 0x28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	447a0000 	.word	0x447a0000

08002be8 <precharge_compare>:

void precharge_compare(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0

//TODO

	float percentage;
	float pre = status_data.IVT_U1_f;
 8002bee:	4b2e      	ldr	r3, [pc, #184]	; (8002ca8 <precharge_compare+0xc0>)
 8002bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf2:	60fb      	str	r3, [r7, #12]
	float air_p = status_data.IVT_U2_f;
 8002bf4:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <precharge_compare+0xc0>)
 8002bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf8:	60bb      	str	r3, [r7, #8]
	percentage = (air_p * 100) / pre;
 8002bfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bfe:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002cac <precharge_compare+0xc4>
 8002c02:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c06:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c0e:	edc7 7a01 	vstr	s15, [r7, #4]
	status_data.pre_percentage = percentage;
 8002c12:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <precharge_compare+0xc0>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6613      	str	r3, [r2, #96]	; 0x60
	if (status_data.safe_state_executed == 0) {
 8002c18:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <precharge_compare+0xc0>)
 8002c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c1e:	f083 0301 	eor.w	r3, r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d03b      	beq.n	8002ca0 <precharge_compare+0xb8>
		if ((percentage >= 95) && (check_voltage_match() == true) && status_data.IVT_U1_f > limits.precharge_min_start_voltage) {
 8002c28:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c2c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002cb0 <precharge_compare+0xc8>
 8002c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c38:	db30      	blt.n	8002c9c <precharge_compare+0xb4>
 8002c3a:	f000 f83d 	bl	8002cb8 <check_voltage_match>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d12b      	bne.n	8002c9c <precharge_compare+0xb4>
 8002c44:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <precharge_compare+0xc0>)
 8002c46:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <precharge_compare+0xcc>)
 8002c4c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c58:	dd20      	ble.n	8002c9c <precharge_compare+0xb4>
			if(status_data.pre_s == false)
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <precharge_compare+0xc0>)
 8002c5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c60:	f083 0301 	eor.w	r3, r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d015      	beq.n	8002c96 <precharge_compare+0xae>
			{
				uint32_t starttick = HAL_GetTick();
 8002c6a:	f000 fd8f 	bl	800378c <HAL_GetTick>
 8002c6e:	6038      	str	r0, [r7, #0]
				while ( HAL_GetTick() - starttick < 5000 )
 8002c70:	e008      	b.n	8002c84 <precharge_compare+0x9c>
				{
					calculate_soc(&status_data);
 8002c72:	480d      	ldr	r0, [pc, #52]	; (8002ca8 <precharge_compare+0xc0>)
 8002c74:	f7ff f82c 	bl	8001cd0 <calculate_soc>
					Send_Soc(&status_data);
 8002c78:	480b      	ldr	r0, [pc, #44]	; (8002ca8 <precharge_compare+0xc0>)
 8002c7a:	f7ff f9b7 	bl	8001fec <Send_Soc>
					HAL_Delay(100);
 8002c7e:	2064      	movs	r0, #100	; 0x64
 8002c80:	f000 fd90 	bl	80037a4 <HAL_Delay>
				while ( HAL_GetTick() - starttick < 5000 )
 8002c84:	f000 fd82 	bl	800378c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d9ed      	bls.n	8002c72 <precharge_compare+0x8a>
				}
			}
			close_PRE();
 8002c96:	f7ff fe23 	bl	80028e0 <close_PRE>
			open_PRE(); //it is maybe not a great idea to actively open the precharge without opening all the contactors
		}*/
	} /*else {
		goto_safe_state(IVT_LOST);
	}*/ //this was maybe not working as intended
}
 8002c9a:	e001      	b.n	8002ca0 <precharge_compare+0xb8>
			open_PRE();
 8002c9c:	f7ff fe32 	bl	8002904 <open_PRE>
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000638 	.word	0x20000638
 8002cac:	42c80000 	.word	0x42c80000
 8002cb0:	42be0000 	.word	0x42be0000
 8002cb4:	20000000 	.word	0x20000000

08002cb8 <check_voltage_match>:

int check_voltage_match(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
	float percentage;
	float accu_volt = (float)status_data.sum_of_cells;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <check_voltage_match+0x70>)
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc2:	60fb      	str	r3, [r7, #12]
	float post_volt = (float)status_data.IVT_U2_f;
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <check_voltage_match+0x70>)
 8002cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc8:	60bb      	str	r3, [r7, #8]
	percentage = (post_volt * 100) / accu_volt;
 8002cca:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cce:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d2c <check_voltage_match+0x74>
 8002cd2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002cd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cde:	edc7 7a01 	vstr	s15, [r7, #4]
	percentage = percentage - 100;
 8002ce2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ce6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002d2c <check_voltage_match+0x74>
 8002cea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cee:	edc7 7a01 	vstr	s15, [r7, #4]

	if ((percentage < 10) && (percentage > -10)) {
 8002cf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cf6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d02:	d50a      	bpl.n	8002d1a <check_voltage_match+0x62>
 8002d04:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d08:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8002d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d14:	dd01      	ble.n	8002d1a <check_voltage_match+0x62>
		return 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <check_voltage_match+0x64>
	}
	return 0;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	20000638 	.word	0x20000638
 8002d2c:	42c80000 	.word	0x42c80000

08002d30 <empty_disch_cfg>:

	cfg_slaves();

}

void empty_disch_cfg(void){
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
	WakeUp();
 8002d36:	f7fe f8b7 	bl	8000ea8 <WakeUp>

	for(int i = 0; i < IC_NUM; i++){
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	607b      	str	r3, [r7, #4]
 8002d3e:	e02a      	b.n	8002d96 <empty_disch_cfg+0x66>
		slave_cfg_tx[i][4] = 0x00 ;
 8002d40:	4919      	ldr	r1, [pc, #100]	; (8002da8 <empty_disch_cfg+0x78>)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3304      	adds	r3, #4
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 8002d54:	4914      	ldr	r1, [pc, #80]	; (8002da8 <empty_disch_cfg+0x78>)
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	440b      	add	r3, r1
 8002d62:	3305      	adds	r3, #5
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]

		slave_cfgb_tx[i][4] = 0x00 ;
 8002d68:	4910      	ldr	r1, [pc, #64]	; (8002dac <empty_disch_cfg+0x7c>)
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	440b      	add	r3, r1
 8002d76:	3304      	adds	r3, #4
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
		slave_cfgb_tx[i][5] = 0x00;
 8002d7c:	490b      	ldr	r1, [pc, #44]	; (8002dac <empty_disch_cfg+0x7c>)
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	440b      	add	r3, r1
 8002d8a:	3305      	adds	r3, #5
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < IC_NUM; i++){
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3301      	adds	r3, #1
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b07      	cmp	r3, #7
 8002d9a:	ddd1      	ble.n	8002d40 <empty_disch_cfg+0x10>
	}

	cfg_slaves();
 8002d9c:	f000 f8b8 	bl	8002f10 <cfg_slaves>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000558 	.word	0x20000558
 8002dac:	20000588 	.word	0x20000588

08002db0 <read_cell_voltage>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_cell_voltage(void){
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 8002db6:	f7fe f877 	bl	8000ea8 <WakeUp>
	adcv();
 8002dba:	f7fe fefb 	bl	8001bb4 <adcv>
	adcv_delay();
 8002dbe:	f7fe fe9a 	bl	8001af6 <adcv_delay>

	WakeIdle();
 8002dc2:	f7fe f867 	bl	8000e94 <WakeIdle>

	for(uint8_t reg = 0; reg < 5; reg++){
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	71fb      	strb	r3, [r7, #7]
 8002dca:	e011      	b.n	8002df0 <read_cell_voltage+0x40>
		pec = rdcv(0, IC_NUM, cell_data);
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <read_cell_voltage+0x58>)
 8002dce:	2108      	movs	r1, #8
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7fe fb93 	bl	80014fc <rdcv>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71bb      	strb	r3, [r7, #6]
		if (pec == 0) {
 8002dda:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <read_cell_voltage+0x36>
			return 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e00b      	b.n	8002dfe <read_cell_voltage+0x4e>
		}
		else increase_pec_counter();
 8002de6:	f000 f8b7 	bl	8002f58 <increase_pec_counter>
	for(uint8_t reg = 0; reg < 5; reg++){
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	3301      	adds	r3, #1
 8002dee:	71fb      	strb	r3, [r7, #7]
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d9ea      	bls.n	8002dcc <read_cell_voltage+0x1c>
	}
	goto_safe_state(PEC_ERROR);
 8002df6:	2008      	movs	r0, #8
 8002df8:	f000 f8ce 	bl	8002f98 <goto_safe_state>
	return -1;
 8002dfc:	23ff      	movs	r3, #255	; 0xff

}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200002b8 	.word	0x200002b8

08002e0c <read_temp_measurement>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_temp_measurement(void){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 8002e12:	f7fe f849 	bl	8000ea8 <WakeUp>
	adax();
 8002e16:	f7fe fef1 	bl	8001bfc <adax>
	adax_delay();
 8002e1a:	f7fe fe75 	bl	8001b08 <adax_delay>
	WakeIdle();
 8002e1e:	f7fe f839 	bl	8000e94 <WakeIdle>

	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 8002e22:	2300      	movs	r3, #0
 8002e24:	71fb      	strb	r3, [r7, #7]
 8002e26:	e015      	b.n	8002e54 <read_temp_measurement+0x48>
			 pec = rdaux(0, IC_NUM, temp_data);  // pec = ltc6804_rdaux(0, IC_NUM, temp_data);
 8002e28:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <read_temp_measurement+0x60>)
 8002e2a:	2108      	movs	r1, #8
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fe fd1a 	bl	8001866 <rdaux>
 8002e32:	4603      	mov	r3, r0
 8002e34:	71bb      	strb	r3, [r7, #6]
			 temp_calc(IC_NUM, temp_data); // Moved out of 'if' to execute even on pec error
 8002e36:	490d      	ldr	r1, [pc, #52]	; (8002e6c <read_temp_measurement+0x60>)
 8002e38:	2008      	movs	r0, #8
 8002e3a:	f000 fb65 	bl	8003508 <temp_calc>
			if (pec == 0) {
 8002e3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <read_temp_measurement+0x3e>
				return 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e00b      	b.n	8002e62 <read_temp_measurement+0x56>
			} else {
				increase_pec_counter();
 8002e4a:	f000 f885 	bl	8002f58 <increase_pec_counter>
	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	3301      	adds	r3, #1
 8002e52:	71fb      	strb	r3, [r7, #7]
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d9e6      	bls.n	8002e28 <read_temp_measurement+0x1c>
			}
		}
		goto_safe_state(PEC_ERROR);
 8002e5a:	2008      	movs	r0, #8
 8002e5c:	f000 f89c 	bl	8002f98 <goto_safe_state>
		return -1;
 8002e60:	23ff      	movs	r3, #255	; 0xff

}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200003d8 	.word	0x200003d8

08002e70 <init_slave_cfg>:


void init_slave_cfg(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < IC_NUM; i++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	71fb      	strb	r3, [r7, #7]
 8002e7a:	e03d      	b.n	8002ef8 <init_slave_cfg+0x88>
	{
		slave_cfg_tx[i][0] = 0xfe;
 8002e7c:	79fa      	ldrb	r2, [r7, #7]
 8002e7e:	4923      	ldr	r1, [pc, #140]	; (8002f0c <init_slave_cfg+0x9c>)
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	440b      	add	r3, r1
 8002e8a:	22fe      	movs	r2, #254	; 0xfe
 8002e8c:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][1] = 0x00;
 8002e8e:	79fa      	ldrb	r2, [r7, #7]
 8002e90:	491e      	ldr	r1, [pc, #120]	; (8002f0c <init_slave_cfg+0x9c>)
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][2] = 0x00;
 8002ea2:	79fa      	ldrb	r2, [r7, #7]
 8002ea4:	4919      	ldr	r1, [pc, #100]	; (8002f0c <init_slave_cfg+0x9c>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	440b      	add	r3, r1
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][3] = 0x00;
 8002eb6:	79fa      	ldrb	r2, [r7, #7]
 8002eb8:	4914      	ldr	r1, [pc, #80]	; (8002f0c <init_slave_cfg+0x9c>)
 8002eba:	4613      	mov	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3303      	adds	r3, #3
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][4] = 0x00;
 8002eca:	79fa      	ldrb	r2, [r7, #7]
 8002ecc:	490f      	ldr	r1, [pc, #60]	; (8002f0c <init_slave_cfg+0x9c>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 8002ede:	79fa      	ldrb	r2, [r7, #7]
 8002ee0:	490a      	ldr	r1, [pc, #40]	; (8002f0c <init_slave_cfg+0x9c>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	440b      	add	r3, r1
 8002eec:	3305      	adds	r3, #5
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < IC_NUM; i++)
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	71fb      	strb	r3, [r7, #7]
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	2b07      	cmp	r3, #7
 8002efc:	d9be      	bls.n	8002e7c <init_slave_cfg+0xc>
	}
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	20000558 	.word	0x20000558

08002f10 <cfg_slaves>:

void cfg_slaves(void){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	WakeUp();
 8002f14:	f7fd ffc8 	bl	8000ea8 <WakeUp>
	wrcfg(IC_NUM, slave_cfg_tx);
 8002f18:	490b      	ldr	r1, [pc, #44]	; (8002f48 <cfg_slaves+0x38>)
 8002f1a:	2008      	movs	r0, #8
 8002f1c:	f7fe f874 	bl	8001008 <wrcfg>
	WakeUp();
 8002f20:	f7fd ffc2 	bl	8000ea8 <WakeUp>
	wrcfgb(IC_NUM, slave_cfgb_tx); //TODO
 8002f24:	4909      	ldr	r1, [pc, #36]	; (8002f4c <cfg_slaves+0x3c>)
 8002f26:	2008      	movs	r0, #8
 8002f28:	f7fe f99d 	bl	8001266 <wrcfgb>
	delay_u(500);
 8002f2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f30:	f7ff f8ae 	bl	8002090 <delay_u>
	rdcfg(IC_NUM, slave_cfg_rx);
 8002f34:	4906      	ldr	r1, [pc, #24]	; (8002f50 <cfg_slaves+0x40>)
 8002f36:	2008      	movs	r0, #8
 8002f38:	f7fe f8fc 	bl	8001134 <rdcfg>
	rdcfgb(IC_NUM, slave_cfgb_rx);
 8002f3c:	4905      	ldr	r1, [pc, #20]	; (8002f54 <cfg_slaves+0x44>)
 8002f3e:	2008      	movs	r0, #8
 8002f40:	f7fe fa33 	bl	80013aa <rdcfgb>
}
 8002f44:	bf00      	nop
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000558 	.word	0x20000558
 8002f4c:	20000588 	.word	0x20000588
 8002f50:	200005b8 	.word	0x200005b8
 8002f54:	200005f8 	.word	0x200005f8

08002f58 <increase_pec_counter>:

void increase_pec_counter(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
	status_data.pec_error_counter++;
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <increase_pec_counter+0x3c>)
 8002f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f60:	3301      	adds	r3, #1
 8002f62:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <increase_pec_counter+0x3c>)
 8002f64:	66d3      	str	r3, [r2, #108]	; 0x6c
	status_data.pec_error_average = (float)status_data.pec_error_counter / status_data.uptime;
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <increase_pec_counter+0x3c>)
 8002f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <increase_pec_counter+0x3c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f82:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <increase_pec_counter+0x3c>)
 8002f84:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000638 	.word	0x20000638

08002f98 <goto_safe_state>:

void goto_safe_state(uint8_t reason)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]

	open_AIR();
 8002fa2:	f7ff fc79 	bl	8002898 <open_AIR>
	open_PRE();
 8002fa6:	f7ff fcad 	bl	8002904 <open_PRE>

}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <test_limp>:

int32_t test_limp(status_data_t *status_data, limit_t *limit)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b086      	sub	sp, #24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]

	if(status_data->min_voltage < limit->limp_min_voltage){
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d225      	bcs.n	8003014 <test_limp+0x62>
		status_data->limping = 1;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

		uint8_t data[8];

		data[0]=8;
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	743b      	strb	r3, [r7, #16]
		data[1]=0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	747b      	strb	r3, [r7, #17]
		data[2]=0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	74bb      	strb	r3, [r7, #18]
		data[3]=(uint8_t)status_data->sum_of_cells;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fe6:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fea:	793b      	ldrb	r3, [r7, #4]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	74fb      	strb	r3, [r7, #19]

		data[4]=status_data->limping;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	753b      	strb	r3, [r7, #20]
		data[5]=0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	757b      	strb	r3, [r7, #21]
		data[6]=0xAB;
 8002ffe:	23ab      	movs	r3, #171	; 0xab
 8003000:	75bb      	strb	r3, [r7, #22]
		data[7]=0xCD;
 8003002:	23cd      	movs	r3, #205	; 0xcd
 8003004:	75fb      	strb	r3, [r7, #23]

		CanSend(data, 0x08);
 8003006:	f107 0310 	add.w	r3, r7, #16
 800300a:	2108      	movs	r1, #8
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe ffa7 	bl	8001f60 <CanSend>
 8003012:	e003      	b.n	800301c <test_limp+0x6a>
		}
	else{
		status_data->limping = 0;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		{
			status_data->limping = 0;
		}
	}
#endif*/
}
 800301c:	bf00      	nop
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <test_limits>:
}
*/


int8_t test_limits(status_data_t *status_data, limit_t *limit, int32_t retest)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
		//MAYBE WE DON'T WANT 50% ERRORS TO BE ALLOWED
#if TEST_OVERVOLTAGE
	if (status_data->max_voltage > limit->max_voltage)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d912      	bls.n	8003064 <test_limits+0x3e>
	{
		if(!(status_data->error_counters[OVERVOLTAGE]<=ERROR_COUNT_LIMIT && retest))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003042:	2b02      	cmp	r3, #2
 8003044:	d802      	bhi.n	800304c <test_limits+0x26>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <test_limits+0x32>
		{
			goto_safe_state(OVERVOLTAGE);
 800304c:	2001      	movs	r0, #1
 800304e:	f7ff ffa3 	bl	8002f98 <goto_safe_state>
			return -1;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	e08b      	b.n	8003170 <test_limits+0x14a>
		}
		else
		{
			status_data->error_counters[OVERVOLTAGE]++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	67da      	str	r2, [r3, #124]	; 0x7c
 8003062:	e008      	b.n	8003076 <test_limits+0x50>
		}
	}
	else if (status_data->error_counters[OVERVOLTAGE]>0)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d004      	beq.n	8003076 <test_limits+0x50>
	{
		status_data->error_counters[OVERVOLTAGE]--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003070:	1e5a      	subs	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	67da      	str	r2, [r3, #124]	; 0x7c
	}
#endif

#if TEST_UNDERVOLTAGE
	if (status_data->min_voltage < limit->min_voltage)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	885b      	ldrh	r3, [r3, #2]
 800307e:	429a      	cmp	r2, r3
 8003080:	d215      	bcs.n	80030ae <test_limits+0x88>
	{
		if(!(status_data->error_counters[UNDERVOLTAGE]<=ERROR_COUNT_LIMIT && retest))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003088:	2b02      	cmp	r3, #2
 800308a:	d802      	bhi.n	8003092 <test_limits+0x6c>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <test_limits+0x78>
		{
			goto_safe_state(UNDERVOLTAGE);
 8003092:	2002      	movs	r0, #2
 8003094:	f7ff ff80 	bl	8002f98 <goto_safe_state>
			return -1;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
 800309c:	e068      	b.n	8003170 <test_limits+0x14a>
		}
		else
		{
			status_data->error_counters[UNDERVOLTAGE]++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80030ac:	e00b      	b.n	80030c6 <test_limits+0xa0>
		}
	}
	else if (status_data->error_counters[UNDERVOLTAGE]>0)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d006      	beq.n	80030c6 <test_limits+0xa0>
	{
		status_data->error_counters[UNDERVOLTAGE]--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030be:	1e5a      	subs	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#endif

#if TEST_OVERTEMPERATURE
	if (status_data->max_temp > limit->max_temp)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	dd15      	ble.n	8003102 <test_limits+0xdc>
	{
		if(!(status_data->error_counters[OVERTEMP]<=ERROR_COUNT_LIMIT && retest))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d802      	bhi.n	80030e6 <test_limits+0xc0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <test_limits+0xcc>
		{
			goto_safe_state(OVERTEMP);
 80030e6:	2003      	movs	r0, #3
 80030e8:	f7ff ff56 	bl	8002f98 <goto_safe_state>
			return -1;
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
 80030f0:	e03e      	b.n	8003170 <test_limits+0x14a>
		}
		else
		{
			status_data->error_counters[OVERTEMP]++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003100:	e00b      	b.n	800311a <test_limits+0xf4>
		}
	}
	else if (status_data->error_counters[OVERTEMP]>0)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003108:	2b00      	cmp	r3, #0
 800310a:	d006      	beq.n	800311a <test_limits+0xf4>
	{
		status_data->error_counters[OVERTEMP]--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003112:	1e5a      	subs	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		status_data->error_counters[OVERTEMP_CHARGING]--;
	}
#endif

#if TEST_UNDERTEMPERATURE
	if (status_data->min_temp < limit->min_temp)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003126:	429a      	cmp	r2, r3
 8003128:	da15      	bge.n	8003156 <test_limits+0x130>
	{
		if(!(status_data->error_counters[UNDERTEMP]<=ERROR_COUNT_LIMIT && retest))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	2b02      	cmp	r3, #2
 8003132:	d802      	bhi.n	800313a <test_limits+0x114>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <test_limits+0x120>
		{
			goto_safe_state(UNDERTEMP);
 800313a:	2004      	movs	r0, #4
 800313c:	f7ff ff2c 	bl	8002f98 <goto_safe_state>
			return -1;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
 8003144:	e014      	b.n	8003170 <test_limits+0x14a>
		}
		else
		{
			status_data->error_counters[UNDERTEMP]++;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003154:	e00b      	b.n	800316e <test_limits+0x148>
		}
	}
	else if (status_data->error_counters[UNDERTEMP]>0)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <test_limits+0x148>
	{
		status_data->error_counters[UNDERTEMP]--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	1e5a      	subs	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			status_data->error_counters[IVT_LOST]--;
		}
	}
#endif

	return 0;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <set_fan_duty_cycle>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
}

void set_fan_duty_cycle(status_data_t *status_data){
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

	if(status_data->max_temp > 39){
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003186:	2b27      	cmp	r3, #39	; 0x27
 8003188:	dd04      	ble.n	8003194 <set_fan_duty_cycle+0x1c>
		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_PWM);
 800318a:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <set_fan_duty_cycle+0x30>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2228      	movs	r2, #40	; 0x28
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	else{
		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 18);
	}
}
 8003192:	e003      	b.n	800319c <set_fan_duty_cycle+0x24>
		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 18);
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <set_fan_duty_cycle+0x30>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2212      	movs	r2, #18
 800319a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	20000190 	.word	0x20000190

080031ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_MspInit+0x44>)
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <HAL_MspInit+0x44>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6613      	str	r3, [r2, #96]	; 0x60
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <HAL_MspInit+0x44>)
 80031c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_MspInit+0x44>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	4a08      	ldr	r2, [pc, #32]	; (80031f0 <HAL_MspInit+0x44>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6593      	str	r3, [r2, #88]	; 0x58
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_MspInit+0x44>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000

080031f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b09a      	sub	sp, #104	; 0x68
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800320c:	f107 0310 	add.w	r3, r7, #16
 8003210:	2244      	movs	r2, #68	; 0x44
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f005 f85b 	bl	80082d0 <memset>
  if(hfdcan->Instance==FDCAN1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a20      	ldr	r2, [pc, #128]	; (80032a0 <HAL_FDCAN_MspInit+0xac>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d139      	bne.n	8003298 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003228:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800322a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800322e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003230:	f107 0310 	add.w	r3, r7, #16
 8003234:	4618      	mov	r0, r3
 8003236:	f002 f861 	bl	80052fc <HAL_RCCEx_PeriphCLKConfig>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003240:	f7ff fa9c 	bl	800277c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003244:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <HAL_FDCAN_MspInit+0xb0>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003248:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <HAL_FDCAN_MspInit+0xb0>)
 800324a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800324e:	6593      	str	r3, [r2, #88]	; 0x58
 8003250:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <HAL_FDCAN_MspInit+0xb0>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_FDCAN_MspInit+0xb0>)
 800325e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003260:	4a10      	ldr	r2, [pc, #64]	; (80032a4 <HAL_FDCAN_MspInit+0xb0>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <HAL_FDCAN_MspInit+0xb0>)
 800326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003274:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003278:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003282:	2300      	movs	r3, #0
 8003284:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003286:	2309      	movs	r3, #9
 8003288:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800328e:	4619      	mov	r1, r3
 8003290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003294:	f001 f8a8 	bl	80043e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003298:	bf00      	nop
 800329a:	3768      	adds	r7, #104	; 0x68
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40006400 	.word	0x40006400
 80032a4:	40021000 	.word	0x40021000

080032a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a17      	ldr	r2, [pc, #92]	; (8003324 <HAL_SPI_MspInit+0x7c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d128      	bne.n	800331c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_SPI_MspInit+0x80>)
 80032cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ce:	4a16      	ldr	r2, [pc, #88]	; (8003328 <HAL_SPI_MspInit+0x80>)
 80032d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032d4:	6613      	str	r3, [r2, #96]	; 0x60
 80032d6:	4b14      	ldr	r3, [pc, #80]	; (8003328 <HAL_SPI_MspInit+0x80>)
 80032d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_SPI_MspInit+0x80>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e6:	4a10      	ldr	r2, [pc, #64]	; (8003328 <HAL_SPI_MspInit+0x80>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ee:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_SPI_MspInit+0x80>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80032fa:	23e0      	movs	r3, #224	; 0xe0
 80032fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003306:	2300      	movs	r3, #0
 8003308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800330a:	2305      	movs	r3, #5
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	4619      	mov	r1, r3
 8003314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003318:	f001 f866 	bl	80043e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800331c:	bf00      	nop
 800331e:	3728      	adds	r7, #40	; 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40013000 	.word	0x40013000
 8003328:	40021000 	.word	0x40021000

0800332c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <HAL_TIM_Base_MspInit+0x38>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10b      	bne.n	8003356 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <HAL_TIM_Base_MspInit+0x3c>)
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_TIM_Base_MspInit+0x3c>)
 8003344:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003348:	6613      	str	r3, [r2, #96]	; 0x60
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_TIM_Base_MspInit+0x3c>)
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40013400 	.word	0x40013400
 8003368:	40021000 	.word	0x40021000

0800336c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	f107 030c 	add.w	r3, r7, #12
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <HAL_TIM_MspPostInit+0x64>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d11b      	bne.n	80033c6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_TIM_MspPostInit+0x68>)
 8003390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003392:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <HAL_TIM_MspPostInit+0x68>)
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <HAL_TIM_MspPostInit+0x68>)
 800339c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PB5     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80033a6:	2320      	movs	r3, #32
 80033a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033aa:	2302      	movs	r3, #2
 80033ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80033b6:	2303      	movs	r3, #3
 80033b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	4619      	mov	r1, r3
 80033c0:	4805      	ldr	r0, [pc, #20]	; (80033d8 <HAL_TIM_MspPostInit+0x6c>)
 80033c2:	f001 f811 	bl	80043e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80033c6:	bf00      	nop
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40013400 	.word	0x40013400
 80033d4:	40021000 	.word	0x40021000
 80033d8:	48000400 	.word	0x48000400

080033dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b09a      	sub	sp, #104	; 0x68
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033f4:	f107 0310 	add.w	r3, r7, #16
 80033f8:	2244      	movs	r2, #68	; 0x44
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f004 ff67 	bl	80082d0 <memset>
  if(huart->Instance==USART2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <HAL_UART_MspInit+0xa8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d136      	bne.n	800347a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800340c:	2302      	movs	r3, #2
 800340e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003414:	f107 0310 	add.w	r3, r7, #16
 8003418:	4618      	mov	r0, r3
 800341a:	f001 ff6f 	bl	80052fc <HAL_RCCEx_PeriphCLKConfig>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003424:	f7ff f9aa 	bl	800277c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003428:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_UART_MspInit+0xac>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	4a16      	ldr	r2, [pc, #88]	; (8003488 <HAL_UART_MspInit+0xac>)
 800342e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003432:	6593      	str	r3, [r2, #88]	; 0x58
 8003434:	4b14      	ldr	r3, [pc, #80]	; (8003488 <HAL_UART_MspInit+0xac>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_UART_MspInit+0xac>)
 8003442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003444:	4a10      	ldr	r2, [pc, #64]	; (8003488 <HAL_UART_MspInit+0xac>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_UART_MspInit+0xac>)
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003458:	230c      	movs	r3, #12
 800345a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003468:	2307      	movs	r3, #7
 800346a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003470:	4619      	mov	r1, r3
 8003472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003476:	f000 ffb7 	bl	80043e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800347a:	bf00      	nop
 800347c:	3768      	adds	r7, #104	; 0x68
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40004400 	.word	0x40004400
 8003488:	40021000 	.word	0x40021000

0800348c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003490:	e7fe      	b.n	8003490 <NMI_Handler+0x4>

08003492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003496:	e7fe      	b.n	8003496 <HardFault_Handler+0x4>

08003498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800349c:	e7fe      	b.n	800349c <MemManage_Handler+0x4>

0800349e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034a2:	e7fe      	b.n	80034a2 <BusFault_Handler+0x4>

080034a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034a8:	e7fe      	b.n	80034a8 <UsageFault_Handler+0x4>

080034aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034d8:	f000 f946 	bl	8003768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}

080034e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034e4:	4b06      	ldr	r3, [pc, #24]	; (8003500 <SystemInit+0x20>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	4a05      	ldr	r2, [pc, #20]	; (8003500 <SystemInit+0x20>)
 80034ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000ed00 	.word	0xe000ed00
 8003504:	00000000 	.word	0x00000000

08003508 <temp_calc>:





void temp_calc(uint8_t total_ic,  temp_data_t temp_data[][GPIO_NUM]){ //fix arguments
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	71fb      	strb	r3, [r7, #7]
	float v, r, vv , t;
	for(int i = 0; i < total_ic; i++){
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	e094      	b.n	8003644 <temp_calc+0x13c>
		for(int j = 0; j < GPIO_NUM; j++){
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	e08a      	b.n	8003636 <temp_calc+0x12e>
			//vv =  ic[i].aux.a_codes[j];
			vv = temp_data[i][j].raw;
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	461a      	mov	r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4413      	add	r3, r2
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353e:	edc7 7a05 	vstr	s15, [r7, #20]
			v = vv/10000;
 8003542:	ed97 7a05 	vldr	s14, [r7, #20]
 8003546:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003668 <temp_calc+0x160>
 800354a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800354e:	edc7 7a04 	vstr	s15, [r7, #16]
			r = (v*10000)/(3-v);
 8003552:	edd7 7a04 	vldr	s15, [r7, #16]
 8003556:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003668 <temp_calc+0x160>
 800355a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800355e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003562:	edd7 7a04 	vldr	s15, [r7, #16]
 8003566:	ee37 7a67 	vsub.f32	s14, s14, s15
 800356a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800356e:	edc7 7a03 	vstr	s15, [r7, #12]
			//r = (v*10000)/v;
			t = log(r/10000);
 8003572:	edd7 7a03 	vldr	s15, [r7, #12]
 8003576:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003668 <temp_calc+0x160>
 800357a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800357e:	ee16 0a90 	vmov	r0, s13
 8003582:	f7fc ffad 	bl	80004e0 <__aeabi_f2d>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	ec43 2b10 	vmov	d0, r2, r3
 800358e:	f004 fea7 	bl	80082e0 <log>
 8003592:	ec53 2b10 	vmov	r2, r3, d0
 8003596:	4610      	mov	r0, r2
 8003598:	4619      	mov	r1, r3
 800359a:	f7fd faa9 	bl	8000af0 <__aeabi_d2f>
 800359e:	4603      	mov	r3, r0
 80035a0:	60bb      	str	r3, [r7, #8]
			    t = t / 3660;
 80035a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80035a6:	eddf 6a31 	vldr	s13, [pc, #196]	; 800366c <temp_calc+0x164>
 80035aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035ae:	edc7 7a02 	vstr	s15, [r7, #8]
			    t = t + 1/298.15;
 80035b2:	68b8      	ldr	r0, [r7, #8]
 80035b4:	f7fc ff94 	bl	80004e0 <__aeabi_f2d>
 80035b8:	a327      	add	r3, pc, #156	; (adr r3, 8003658 <temp_calc+0x150>)
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	f7fc fe31 	bl	8000224 <__adddf3>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4610      	mov	r0, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	f7fd fa91 	bl	8000af0 <__aeabi_d2f>
 80035ce:	4603      	mov	r3, r0
 80035d0:	60bb      	str	r3, [r7, #8]
			    t = 1/t;
 80035d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80035da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035de:	edc7 7a02 	vstr	s15, [r7, #8]

			    t -= 273.15;
 80035e2:	68b8      	ldr	r0, [r7, #8]
 80035e4:	f7fc ff7c 	bl	80004e0 <__aeabi_f2d>
 80035e8:	a31d      	add	r3, pc, #116	; (adr r3, 8003660 <temp_calc+0x158>)
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f7fc fe17 	bl	8000220 <__aeabi_dsub>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	f7fd fa79 	bl	8000af0 <__aeabi_d2f>
 80035fe:	4603      	mov	r3, r0
 8003600:	60bb      	str	r3, [r7, #8]
		temp_data[i][j].temp = (int)t-20;
 8003602:	edd7 7a02 	vldr	s15, [r7, #8]
 8003606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800360a:	ee17 3a90 	vmov	r3, s15
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b14      	subs	r3, #20
 8003612:	b299      	uxth	r1, r3
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	461a      	mov	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	441a      	add	r2, r3
 8003624:	b209      	sxth	r1, r1
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	460a      	mov	r2, r1
 800362e:	805a      	strh	r2, [r3, #2]
		for(int j = 0; j < GPIO_NUM; j++){
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	3301      	adds	r3, #1
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b0b      	cmp	r3, #11
 800363a:	f77f af71 	ble.w	8003520 <temp_calc+0x18>
	for(int i = 0; i < total_ic; i++){
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3301      	adds	r3, #1
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	429a      	cmp	r2, r3
 800364a:	f6ff af66 	blt.w	800351a <temp_calc+0x12>
		//	ic[i].aux.s_temp[j] = t;

		}
	}

}
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	3720      	adds	r7, #32
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	dcb5db83 	.word	0xdcb5db83
 800365c:	3f6b79e1 	.word	0x3f6b79e1
 8003660:	66666666 	.word	0x66666666
 8003664:	40711266 	.word	0x40711266
 8003668:	461c4000 	.word	0x461c4000
 800366c:	4564c000 	.word	0x4564c000

08003670 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003670:	480d      	ldr	r0, [pc, #52]	; (80036a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003672:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003674:	480d      	ldr	r0, [pc, #52]	; (80036ac <LoopForever+0x6>)
  ldr r1, =_edata
 8003676:	490e      	ldr	r1, [pc, #56]	; (80036b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003678:	4a0e      	ldr	r2, [pc, #56]	; (80036b4 <LoopForever+0xe>)
  movs r3, #0
 800367a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800367c:	e002      	b.n	8003684 <LoopCopyDataInit>

0800367e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800367e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003682:	3304      	adds	r3, #4

08003684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003688:	d3f9      	bcc.n	800367e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800368a:	4a0b      	ldr	r2, [pc, #44]	; (80036b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800368c:	4c0b      	ldr	r4, [pc, #44]	; (80036bc <LoopForever+0x16>)
  movs r3, #0
 800368e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003690:	e001      	b.n	8003696 <LoopFillZerobss>

08003692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003694:	3204      	adds	r2, #4

08003696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003698:	d3fb      	bcc.n	8003692 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800369a:	f7ff ff21 	bl	80034e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800369e:	f004 fdf3 	bl	8008288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036a2:	f7fe fd99 	bl	80021d8 <main>

080036a6 <LoopForever>:

LoopForever:
    b LoopForever
 80036a6:	e7fe      	b.n	80036a6 <LoopForever>
  ldr   r0, =_estack
 80036a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80036ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036b0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80036b4:	08008b64 	.word	0x08008b64
  ldr r2, =_sbss
 80036b8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80036bc:	20000718 	.word	0x20000718

080036c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036c0:	e7fe      	b.n	80036c0 <ADC1_2_IRQHandler>

080036c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036cc:	2003      	movs	r0, #3
 80036ce:	f000 f93d 	bl	800394c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036d2:	2000      	movs	r0, #0
 80036d4:	f000 f80e 	bl	80036f4 <HAL_InitTick>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	71fb      	strb	r3, [r7, #7]
 80036e2:	e001      	b.n	80036e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036e4:	f7ff fd62 	bl	80031ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036e8:	79fb      	ldrb	r3, [r7, #7]

}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003700:	4b16      	ldr	r3, [pc, #88]	; (800375c <HAL_InitTick+0x68>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d022      	beq.n	800374e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_InitTick+0x6c>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_InitTick+0x68>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003714:	fbb1 f3f3 	udiv	r3, r1, r3
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f93a 	bl	8003996 <HAL_SYSTICK_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10f      	bne.n	8003748 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b0f      	cmp	r3, #15
 800372c:	d809      	bhi.n	8003742 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800372e:	2200      	movs	r2, #0
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	f04f 30ff 	mov.w	r0, #4294967295
 8003736:	f000 f914 	bl	8003962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800373a:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <HAL_InitTick+0x70>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	e007      	b.n	8003752 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e004      	b.n	8003752 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	e001      	b.n	8003752 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000038 	.word	0x20000038
 8003760:	20000030 	.word	0x20000030
 8003764:	20000034 	.word	0x20000034

08003768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_IncTick+0x1c>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_IncTick+0x20>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4413      	add	r3, r2
 8003776:	4a03      	ldr	r2, [pc, #12]	; (8003784 <HAL_IncTick+0x1c>)
 8003778:	6013      	str	r3, [r2, #0]
}
 800377a:	bf00      	nop
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	20000714 	.word	0x20000714
 8003788:	20000038 	.word	0x20000038

0800378c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return uwTick;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_GetTick+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000714 	.word	0x20000714

080037a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037ac:	f7ff ffee 	bl	800378c <HAL_GetTick>
 80037b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d004      	beq.n	80037c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_Delay+0x40>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037c8:	bf00      	nop
 80037ca:	f7ff ffdf 	bl	800378c <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d8f7      	bhi.n	80037ca <HAL_Delay+0x26>
  {
  }
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000038 	.word	0x20000038

080037e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <__NVIC_SetPriorityGrouping+0x44>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003804:	4013      	ands	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381a:	4a04      	ldr	r2, [pc, #16]	; (800382c <__NVIC_SetPriorityGrouping+0x44>)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	60d3      	str	r3, [r2, #12]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <__NVIC_GetPriorityGrouping+0x18>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	f003 0307 	and.w	r3, r3, #7
}
 800383e:	4618      	mov	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	6039      	str	r1, [r7, #0]
 8003856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	2b00      	cmp	r3, #0
 800385e:	db0a      	blt.n	8003876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	490c      	ldr	r1, [pc, #48]	; (8003898 <__NVIC_SetPriority+0x4c>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	440b      	add	r3, r1
 8003870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003874:	e00a      	b.n	800388c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4908      	ldr	r1, [pc, #32]	; (800389c <__NVIC_SetPriority+0x50>)
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	3b04      	subs	r3, #4
 8003884:	0112      	lsls	r2, r2, #4
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	440b      	add	r3, r1
 800388a:	761a      	strb	r2, [r3, #24]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000e100 	.word	0xe000e100
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f1c3 0307 	rsb	r3, r3, #7
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	bf28      	it	cs
 80038be:	2304      	movcs	r3, #4
 80038c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d902      	bls.n	80038d0 <NVIC_EncodePriority+0x30>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3b03      	subs	r3, #3
 80038ce:	e000      	b.n	80038d2 <NVIC_EncodePriority+0x32>
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	401a      	ands	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa01 f303 	lsl.w	r3, r1, r3
 80038f2:	43d9      	mvns	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	4313      	orrs	r3, r2
         );
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3724      	adds	r7, #36	; 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003918:	d301      	bcc.n	800391e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800391a:	2301      	movs	r3, #1
 800391c:	e00f      	b.n	800393e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <SysTick_Config+0x40>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003926:	210f      	movs	r1, #15
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	f7ff ff8e 	bl	800384c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <SysTick_Config+0x40>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003936:	4b04      	ldr	r3, [pc, #16]	; (8003948 <SysTick_Config+0x40>)
 8003938:	2207      	movs	r2, #7
 800393a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000e010 	.word	0xe000e010

0800394c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff47 	bl	80037e8 <__NVIC_SetPriorityGrouping>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	4603      	mov	r3, r0
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003970:	f7ff ff5e 	bl	8003830 <__NVIC_GetPriorityGrouping>
 8003974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff ff90 	bl	80038a0 <NVIC_EncodePriority>
 8003980:	4602      	mov	r2, r0
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff5f 	bl	800384c <__NVIC_SetPriority>
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ffb2 	bl	8003908 <SysTick_Config>
 80039a4:	4603      	mov	r3, r0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e147      	b.n	8003c52 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff fc0c 	bl	80031f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0210 	bic.w	r2, r2, #16
 80039ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ec:	f7ff fece 	bl	800378c <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039f2:	e012      	b.n	8003a1a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80039f4:	f7ff feca 	bl	800378c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b0a      	cmp	r3, #10
 8003a00:	d90b      	bls.n	8003a1a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a06:	f043 0201 	orr.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2203      	movs	r2, #3
 8003a12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e11b      	b.n	8003c52 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d0e5      	beq.n	80039f4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a38:	f7ff fea8 	bl	800378c <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a3e:	e012      	b.n	8003a66 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a40:	f7ff fea4 	bl	800378c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b0a      	cmp	r3, #10
 8003a4c:	d90b      	bls.n	8003a66 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0f5      	b.n	8003c52 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0e5      	beq.n	8003a40 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0202 	orr.w	r2, r2, #2
 8003a82:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a74      	ldr	r2, [pc, #464]	; (8003c5c <HAL_FDCAN_Init+0x2ac>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d103      	bne.n	8003a96 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003a8e:	4a74      	ldr	r2, [pc, #464]	; (8003c60 <HAL_FDCAN_Init+0x2b0>)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	7c1b      	ldrb	r3, [r3, #16]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d108      	bne.n	8003ab0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699a      	ldr	r2, [r3, #24]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aac:	619a      	str	r2, [r3, #24]
 8003aae:	e007      	b.n	8003ac0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003abe:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	7c5b      	ldrb	r3, [r3, #17]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d108      	bne.n	8003ada <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad6:	619a      	str	r2, [r3, #24]
 8003ad8:	e007      	b.n	8003aea <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ae8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	7c9b      	ldrb	r3, [r3, #18]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d108      	bne.n	8003b04 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b00:	619a      	str	r2, [r3, #24]
 8003b02:	e007      	b.n	8003b14 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b12:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003b38:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0210 	bic.w	r2, r2, #16
 8003b48:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d108      	bne.n	8003b64 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0204 	orr.w	r2, r2, #4
 8003b60:	619a      	str	r2, [r3, #24]
 8003b62:	e02c      	b.n	8003bbe <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d028      	beq.n	8003bbe <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d01c      	beq.n	8003bae <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b82:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0210 	orr.w	r2, r2, #16
 8003b92:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d110      	bne.n	8003bbe <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0220 	orr.w	r2, r2, #32
 8003baa:	619a      	str	r2, [r3, #24]
 8003bac:	e007      	b.n	8003bbe <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0220 	orr.w	r2, r2, #32
 8003bbc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bce:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003bd6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003be6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003be8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf2:	d115      	bne.n	8003c20 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c02:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c0c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	3b01      	subs	r3, #1
 8003c16:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c1c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c1e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fb04 	bl	8004244 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40006400 	.word	0x40006400
 8003c60:	40006500 	.word	0x40006500

08003c64 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c74:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d002      	beq.n	8003c82 <HAL_FDCAN_ConfigFilter+0x1e>
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d13d      	bne.n	8003cfe <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d119      	bne.n	8003cbe <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003c96:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003c9e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e01d      	b.n	8003cfa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	075a      	lsls	r2, r3, #29
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	079a      	lsls	r2, r3, #30
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e006      	b.n	8003d0c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d02:	f043 0202 	orr.w	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
  }
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d116      	bne.n	8003d60 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	011a      	lsls	r2, r3, #4
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	431a      	orrs	r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e006      	b.n	8003d6e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d64:	f043 0204 	orr.w	r2, r3, #4
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
  }
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d11f      	bne.n	8003dd2 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d10d      	bne.n	8003db4 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da0:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	025a      	lsls	r2, r3, #9
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003db2:	e00c      	b.n	8003dce <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dbc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	021a      	lsls	r2, r3, #8
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e006      	b.n	8003de0 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd6:	f043 0204 	orr.w	r2, r3, #4
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d110      	bne.n	8003e22 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e006      	b.n	8003e30 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e26:	f043 0204 	orr.w	r2, r3, #4
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d12c      	bne.n	8003eae <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e023      	b.n	8003ebc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fa30 	bl	80042f0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2101      	movs	r1, #1
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e006      	b.n	8003ebc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb2:	f043 0208 	orr.w	r2, r3, #8
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
  }
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b08b      	sub	sp, #44	; 0x2c
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ed8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003eda:	7efb      	ldrb	r3, [r7, #27]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	f040 80bc 	bne.w	800405a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d121      	bne.n	8003f2c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d107      	bne.n	8003f08 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0af      	b.n	8004068 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f10:	0a1b      	lsrs	r3, r3, #8
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	440b      	add	r3, r1
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2a:	e020      	b.n	8003f6e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d107      	bne.n	8003f4c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e08d      	b.n	8004068 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	440b      	add	r3, r1
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d107      	bne.n	8003f92 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	0c9b      	lsrs	r3, r3, #18
 8003f88:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e005      	b.n	8003f9e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	3304      	adds	r3, #4
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	0e1b      	lsrs	r3, r3, #24
 8003ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	0fda      	lsrs	r2, r3, #31
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	3304      	adds	r3, #4
 8004006:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800400c:	2300      	movs	r3, #0
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	e00a      	b.n	8004028 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	441a      	add	r2, r3
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	440b      	add	r3, r1
 800401e:	7812      	ldrb	r2, [r2, #0]
 8004020:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	3301      	adds	r3, #1
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	4a11      	ldr	r2, [pc, #68]	; (8004074 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8004030:	5cd3      	ldrb	r3, [r2, r3]
 8004032:	461a      	mov	r2, r3
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	4293      	cmp	r3, r2
 8004038:	d3eb      	bcc.n	8004012 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d105      	bne.n	800404c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69fa      	ldr	r2, [r7, #28]
 8004046:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800404a:	e004      	b.n	8004056 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	e006      	b.n	8004068 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405e:	f043 0208 	orr.w	r2, r3, #8
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
  }
}
 8004068:	4618      	mov	r0, r3
 800406a:	372c      	adds	r7, #44	; 0x2c
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	08008b18 	.word	0x08008b18

08004078 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800408a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d003      	beq.n	800409a <HAL_FDCAN_ActivateNotification+0x22>
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	2b02      	cmp	r3, #2
 8004096:	f040 80c8 	bne.w	800422a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d03b      	beq.n	800412e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d031      	beq.n	800412e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d027      	beq.n	800412e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d004      	beq.n	80040f2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d01d      	beq.n	800412e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f003 0310 	and.w	r3, r3, #16
 8004102:	2b00      	cmp	r3, #0
 8004104:	d013      	beq.n	800412e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800410c:	2b00      	cmp	r3, #0
 800410e:	d004      	beq.n	800411a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d009      	beq.n	800412e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00c      	beq.n	800413e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d107      	bne.n	800413e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0201 	orr.w	r2, r2, #1
 800413c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	2b00      	cmp	r3, #0
 8004146:	d004      	beq.n	8004152 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d13b      	bne.n	80041ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004158:	2b00      	cmp	r3, #0
 800415a:	d004      	beq.n	8004166 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d131      	bne.n	80041ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d127      	bne.n	80041ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d11d      	bne.n	80041ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d113      	bne.n	80041ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d004      	beq.n	80041b6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00c      	beq.n	80041da <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0202 	orr.w	r2, r2, #2
 80041d8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d009      	beq.n	80041f8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	430a      	orrs	r2, r1
 8004212:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	430a      	orrs	r2, r1
 8004224:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e006      	b.n	8004238 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422e:	f043 0202 	orr.w	r2, r3, #2
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800424c:	4b27      	ldr	r3, [pc, #156]	; (80042ec <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800424e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800425e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	041a      	lsls	r2, r3, #16
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004284:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	061a      	lsls	r2, r3, #24
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e005      	b.n	80042d2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3304      	adds	r3, #4
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d3f3      	bcc.n	80042c6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	4000a400 	.word	0x4000a400

080042f0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b089      	sub	sp, #36	; 0x24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800430e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004316:	4313      	orrs	r3, r2
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	e00a      	b.n	8004332 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004324:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800432a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800432c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004330:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800433c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004342:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004348:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4413      	add	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	440b      	add	r3, r1
 8004362:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	3304      	adds	r3, #4
 800436e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	3304      	adds	r3, #4
 800437a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e020      	b.n	80043c4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	3303      	adds	r3, #3
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3302      	adds	r3, #2
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	440b      	add	r3, r1
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800439a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	3301      	adds	r3, #1
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	440b      	add	r3, r1
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80043a8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	440a      	add	r2, r1
 80043b0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80043b2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	3304      	adds	r3, #4
 80043bc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	3304      	adds	r3, #4
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	0c1b      	lsrs	r3, r3, #16
 80043ca:	4a06      	ldr	r2, [pc, #24]	; (80043e4 <FDCAN_CopyMessageToRAM+0xf4>)
 80043cc:	5cd3      	ldrb	r3, [r2, r3]
 80043ce:	461a      	mov	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d3d5      	bcc.n	8004382 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	3724      	adds	r7, #36	; 0x24
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	08008b18 	.word	0x08008b18

080043e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043f6:	e15a      	b.n	80046ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2101      	movs	r1, #1
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	fa01 f303 	lsl.w	r3, r1, r3
 8004404:	4013      	ands	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 814c 	beq.w	80046a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d005      	beq.n	8004428 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004424:	2b02      	cmp	r3, #2
 8004426:	d130      	bne.n	800448a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	2203      	movs	r2, #3
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800445e:	2201      	movs	r2, #1
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43db      	mvns	r3, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4013      	ands	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	f003 0201 	and.w	r2, r3, #1
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b03      	cmp	r3, #3
 8004494:	d017      	beq.n	80044c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	2203      	movs	r2, #3
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43db      	mvns	r3, r3
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d123      	bne.n	800451a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	08da      	lsrs	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3208      	adds	r2, #8
 80044da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	220f      	movs	r2, #15
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	08da      	lsrs	r2, r3, #3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3208      	adds	r2, #8
 8004514:	6939      	ldr	r1, [r7, #16]
 8004516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	2203      	movs	r2, #3
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 0203 	and.w	r2, r3, #3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80a6 	beq.w	80046a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800455c:	4b5b      	ldr	r3, [pc, #364]	; (80046cc <HAL_GPIO_Init+0x2e4>)
 800455e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004560:	4a5a      	ldr	r2, [pc, #360]	; (80046cc <HAL_GPIO_Init+0x2e4>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6613      	str	r3, [r2, #96]	; 0x60
 8004568:	4b58      	ldr	r3, [pc, #352]	; (80046cc <HAL_GPIO_Init+0x2e4>)
 800456a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004574:	4a56      	ldr	r2, [pc, #344]	; (80046d0 <HAL_GPIO_Init+0x2e8>)
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	089b      	lsrs	r3, r3, #2
 800457a:	3302      	adds	r3, #2
 800457c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	220f      	movs	r2, #15
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800459e:	d01f      	beq.n	80045e0 <HAL_GPIO_Init+0x1f8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a4c      	ldr	r2, [pc, #304]	; (80046d4 <HAL_GPIO_Init+0x2ec>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d019      	beq.n	80045dc <HAL_GPIO_Init+0x1f4>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a4b      	ldr	r2, [pc, #300]	; (80046d8 <HAL_GPIO_Init+0x2f0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d013      	beq.n	80045d8 <HAL_GPIO_Init+0x1f0>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a4a      	ldr	r2, [pc, #296]	; (80046dc <HAL_GPIO_Init+0x2f4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00d      	beq.n	80045d4 <HAL_GPIO_Init+0x1ec>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a49      	ldr	r2, [pc, #292]	; (80046e0 <HAL_GPIO_Init+0x2f8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <HAL_GPIO_Init+0x1e8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a48      	ldr	r2, [pc, #288]	; (80046e4 <HAL_GPIO_Init+0x2fc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d101      	bne.n	80045cc <HAL_GPIO_Init+0x1e4>
 80045c8:	2305      	movs	r3, #5
 80045ca:	e00a      	b.n	80045e2 <HAL_GPIO_Init+0x1fa>
 80045cc:	2306      	movs	r3, #6
 80045ce:	e008      	b.n	80045e2 <HAL_GPIO_Init+0x1fa>
 80045d0:	2304      	movs	r3, #4
 80045d2:	e006      	b.n	80045e2 <HAL_GPIO_Init+0x1fa>
 80045d4:	2303      	movs	r3, #3
 80045d6:	e004      	b.n	80045e2 <HAL_GPIO_Init+0x1fa>
 80045d8:	2302      	movs	r3, #2
 80045da:	e002      	b.n	80045e2 <HAL_GPIO_Init+0x1fa>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <HAL_GPIO_Init+0x1fa>
 80045e0:	2300      	movs	r3, #0
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	f002 0203 	and.w	r2, r2, #3
 80045e8:	0092      	lsls	r2, r2, #2
 80045ea:	4093      	lsls	r3, r2
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045f2:	4937      	ldr	r1, [pc, #220]	; (80046d0 <HAL_GPIO_Init+0x2e8>)
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	089b      	lsrs	r3, r3, #2
 80045f8:	3302      	adds	r3, #2
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004600:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <HAL_GPIO_Init+0x300>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	43db      	mvns	r3, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004624:	4a30      	ldr	r2, [pc, #192]	; (80046e8 <HAL_GPIO_Init+0x300>)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800462a:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <HAL_GPIO_Init+0x300>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	43db      	mvns	r3, r3
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4013      	ands	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800464e:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <HAL_GPIO_Init+0x300>)
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_GPIO_Init+0x300>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	43db      	mvns	r3, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004678:	4a1b      	ldr	r2, [pc, #108]	; (80046e8 <HAL_GPIO_Init+0x300>)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800467e:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <HAL_GPIO_Init+0x300>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	43db      	mvns	r3, r3
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4013      	ands	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046a2:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <HAL_GPIO_Init+0x300>)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	3301      	adds	r3, #1
 80046ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f47f ae9d 	bne.w	80043f8 <HAL_GPIO_Init+0x10>
  }
}
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40010000 	.word	0x40010000
 80046d4:	48000400 	.word	0x48000400
 80046d8:	48000800 	.word	0x48000800
 80046dc:	48000c00 	.word	0x48000c00
 80046e0:	48001000 	.word	0x48001000
 80046e4:	48001400 	.word	0x48001400
 80046e8:	40010400 	.word	0x40010400

080046ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	887b      	ldrh	r3, [r7, #2]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	e001      	b.n	800470e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800470e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	807b      	strh	r3, [r7, #2]
 8004728:	4613      	mov	r3, r2
 800472a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800472c:	787b      	ldrb	r3, [r7, #1]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004738:	e002      	b.n	8004740 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800473a:	887a      	ldrh	r2, [r7, #2]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d141      	bne.n	80047de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800475a:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004766:	d131      	bne.n	80047cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004768:	4b47      	ldr	r3, [pc, #284]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800476e:	4a46      	ldr	r2, [pc, #280]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004774:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004778:	4b43      	ldr	r3, [pc, #268]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004780:	4a41      	ldr	r2, [pc, #260]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004786:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004788:	4b40      	ldr	r3, [pc, #256]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2232      	movs	r2, #50	; 0x32
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	4a3f      	ldr	r2, [pc, #252]	; (8004890 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	0c9b      	lsrs	r3, r3, #18
 800479a:	3301      	adds	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800479e:	e002      	b.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047a6:	4b38      	ldr	r3, [pc, #224]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b2:	d102      	bne.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f2      	bne.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ba:	4b33      	ldr	r3, [pc, #204]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c6:	d158      	bne.n	800487a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e057      	b.n	800487c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047cc:	4b2e      	ldr	r3, [pc, #184]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d2:	4a2d      	ldr	r2, [pc, #180]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047dc:	e04d      	b.n	800487a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e4:	d141      	bne.n	800486a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047e6:	4b28      	ldr	r3, [pc, #160]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f2:	d131      	bne.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047f4:	4b24      	ldr	r3, [pc, #144]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047fa:	4a23      	ldr	r2, [pc, #140]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004800:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004804:	4b20      	ldr	r3, [pc, #128]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800480c:	4a1e      	ldr	r2, [pc, #120]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004812:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004814:	4b1d      	ldr	r3, [pc, #116]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2232      	movs	r2, #50	; 0x32
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	4a1c      	ldr	r2, [pc, #112]	; (8004890 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004820:	fba2 2303 	umull	r2, r3, r2, r3
 8004824:	0c9b      	lsrs	r3, r3, #18
 8004826:	3301      	adds	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800482a:	e002      	b.n	8004832 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3b01      	subs	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483e:	d102      	bne.n	8004846 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f2      	bne.n	800482c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004852:	d112      	bne.n	800487a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e011      	b.n	800487c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800485e:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004864:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004868:	e007      	b.n	800487a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004872:	4a05      	ldr	r2, [pc, #20]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004878:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40007000 	.word	0x40007000
 800488c:	20000030 	.word	0x20000030
 8004890:	431bde83 	.word	0x431bde83

08004894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e306      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d075      	beq.n	800499e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b2:	4b97      	ldr	r3, [pc, #604]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048bc:	4b94      	ldr	r3, [pc, #592]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	d102      	bne.n	80048d2 <HAL_RCC_OscConfig+0x3e>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d002      	beq.n	80048d8 <HAL_RCC_OscConfig+0x44>
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d10b      	bne.n	80048f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d8:	4b8d      	ldr	r3, [pc, #564]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d05b      	beq.n	800499c <HAL_RCC_OscConfig+0x108>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d157      	bne.n	800499c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e2e1      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d106      	bne.n	8004908 <HAL_RCC_OscConfig+0x74>
 80048fa:	4b85      	ldr	r3, [pc, #532]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a84      	ldr	r2, [pc, #528]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e01d      	b.n	8004944 <HAL_RCC_OscConfig+0xb0>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004910:	d10c      	bne.n	800492c <HAL_RCC_OscConfig+0x98>
 8004912:	4b7f      	ldr	r3, [pc, #508]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a7e      	ldr	r2, [pc, #504]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	4b7c      	ldr	r3, [pc, #496]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a7b      	ldr	r2, [pc, #492]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	e00b      	b.n	8004944 <HAL_RCC_OscConfig+0xb0>
 800492c:	4b78      	ldr	r3, [pc, #480]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a77      	ldr	r2, [pc, #476]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	4b75      	ldr	r3, [pc, #468]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a74      	ldr	r2, [pc, #464]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 800493e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d013      	beq.n	8004974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fe ff1e 	bl	800378c <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004954:	f7fe ff1a 	bl	800378c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e2a6      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004966:	4b6a      	ldr	r3, [pc, #424]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0xc0>
 8004972:	e014      	b.n	800499e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fe ff0a 	bl	800378c <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800497c:	f7fe ff06 	bl	800378c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	; 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e292      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800498e:	4b60      	ldr	r3, [pc, #384]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0xe8>
 800499a:	e000      	b.n	800499e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800499c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d075      	beq.n	8004a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049aa:	4b59      	ldr	r3, [pc, #356]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b4:	4b56      	ldr	r3, [pc, #344]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	d102      	bne.n	80049ca <HAL_RCC_OscConfig+0x136>
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d002      	beq.n	80049d0 <HAL_RCC_OscConfig+0x13c>
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d11f      	bne.n	8004a10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049d0:	4b4f      	ldr	r3, [pc, #316]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_OscConfig+0x154>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e265      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e8:	4b49      	ldr	r3, [pc, #292]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	061b      	lsls	r3, r3, #24
 80049f6:	4946      	ldr	r1, [pc, #280]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049fc:	4b45      	ldr	r3, [pc, #276]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fe fe77 	bl	80036f4 <HAL_InitTick>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d043      	beq.n	8004a94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e251      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d023      	beq.n	8004a60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a18:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a3c      	ldr	r2, [pc, #240]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fe feb2 	bl	800378c <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a2c:	f7fe feae 	bl	800378c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e23a      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a3e:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4a:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	492d      	ldr	r1, [pc, #180]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	604b      	str	r3, [r1, #4]
 8004a5e:	e01a      	b.n	8004a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a60:	4b2b      	ldr	r3, [pc, #172]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2a      	ldr	r2, [pc, #168]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fe fe8e 	bl	800378c <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a74:	f7fe fe8a 	bl	800378c <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e216      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a86:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x1e0>
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d041      	beq.n	8004b26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01c      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aaa:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ab0:	4a17      	ldr	r2, [pc, #92]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aba:	f7fe fe67 	bl	800378c <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac2:	f7fe fe63 	bl	800378c <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e1ef      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0ef      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x22e>
 8004ae2:	e020      	b.n	8004b26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aea:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <HAL_RCC_OscConfig+0x27c>)
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fe fe4a 	bl	800378c <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004afa:	e00d      	b.n	8004b18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004afc:	f7fe fe46 	bl	800378c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d906      	bls.n	8004b18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e1d2      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000
 8004b14:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b18:	4b8c      	ldr	r3, [pc, #560]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1ea      	bne.n	8004afc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80a6 	beq.w	8004c80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b34:	2300      	movs	r3, #0
 8004b36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b38:	4b84      	ldr	r3, [pc, #528]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_OscConfig+0x2b4>
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x2b6>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00d      	beq.n	8004b6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4e:	4b7f      	ldr	r3, [pc, #508]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b52:	4a7e      	ldr	r2, [pc, #504]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b58:	6593      	str	r3, [r2, #88]	; 0x58
 8004b5a:	4b7c      	ldr	r3, [pc, #496]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b66:	2301      	movs	r3, #1
 8004b68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b6a:	4b79      	ldr	r3, [pc, #484]	; (8004d50 <HAL_RCC_OscConfig+0x4bc>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d118      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b76:	4b76      	ldr	r3, [pc, #472]	; (8004d50 <HAL_RCC_OscConfig+0x4bc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a75      	ldr	r2, [pc, #468]	; (8004d50 <HAL_RCC_OscConfig+0x4bc>)
 8004b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b82:	f7fe fe03 	bl	800378c <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8a:	f7fe fdff 	bl	800378c <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e18b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b9c:	4b6c      	ldr	r3, [pc, #432]	; (8004d50 <HAL_RCC_OscConfig+0x4bc>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d108      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x32e>
 8004bb0:	4b66      	ldr	r3, [pc, #408]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb6:	4a65      	ldr	r2, [pc, #404]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bc0:	e024      	b.n	8004c0c <HAL_RCC_OscConfig+0x378>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b05      	cmp	r3, #5
 8004bc8:	d110      	bne.n	8004bec <HAL_RCC_OscConfig+0x358>
 8004bca:	4b60      	ldr	r3, [pc, #384]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	4a5e      	ldr	r2, [pc, #376]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004bd2:	f043 0304 	orr.w	r3, r3, #4
 8004bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bda:	4b5c      	ldr	r3, [pc, #368]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	4a5a      	ldr	r2, [pc, #360]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bea:	e00f      	b.n	8004c0c <HAL_RCC_OscConfig+0x378>
 8004bec:	4b57      	ldr	r3, [pc, #348]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	4a56      	ldr	r2, [pc, #344]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bfc:	4b53      	ldr	r3, [pc, #332]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c02:	4a52      	ldr	r2, [pc, #328]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004c04:	f023 0304 	bic.w	r3, r3, #4
 8004c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d016      	beq.n	8004c42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c14:	f7fe fdba 	bl	800378c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1c:	f7fe fdb6 	bl	800378c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e140      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c32:	4b46      	ldr	r3, [pc, #280]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0ed      	beq.n	8004c1c <HAL_RCC_OscConfig+0x388>
 8004c40:	e015      	b.n	8004c6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c42:	f7fe fda3 	bl	800378c <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c48:	e00a      	b.n	8004c60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4a:	f7fe fd9f 	bl	800378c <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e129      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c60:	4b3a      	ldr	r3, [pc, #232]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1ed      	bne.n	8004c4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c6e:	7ffb      	ldrb	r3, [r7, #31]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d105      	bne.n	8004c80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c74:	4b35      	ldr	r3, [pc, #212]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	4a34      	ldr	r2, [pc, #208]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d03c      	beq.n	8004d06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01c      	beq.n	8004cce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c94:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c9a:	4a2c      	ldr	r2, [pc, #176]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca4:	f7fe fd72 	bl	800378c <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cac:	f7fe fd6e 	bl	800378c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0fa      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cbe:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0ef      	beq.n	8004cac <HAL_RCC_OscConfig+0x418>
 8004ccc:	e01b      	b.n	8004d06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cce:	4b1f      	ldr	r3, [pc, #124]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cd4:	4a1d      	ldr	r2, [pc, #116]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004cd6:	f023 0301 	bic.w	r3, r3, #1
 8004cda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cde:	f7fe fd55 	bl	800378c <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ce6:	f7fe fd51 	bl	800378c <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0dd      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cf8:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1ef      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 80d1 	beq.w	8004eb2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d10:	4b0e      	ldr	r3, [pc, #56]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 030c 	and.w	r3, r3, #12
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	f000 808b 	beq.w	8004e34 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d15e      	bne.n	8004de4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a08      	ldr	r2, [pc, #32]	; (8004d4c <HAL_RCC_OscConfig+0x4b8>)
 8004d2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fe fd2b 	bl	800378c <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d38:	e00c      	b.n	8004d54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3a:	f7fe fd27 	bl	800378c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d905      	bls.n	8004d54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e0b3      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d54:	4b59      	ldr	r3, [pc, #356]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1ec      	bne.n	8004d3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d60:	4b56      	ldr	r3, [pc, #344]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	4b56      	ldr	r3, [pc, #344]	; (8004ec0 <HAL_RCC_OscConfig+0x62c>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6a11      	ldr	r1, [r2, #32]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d70:	3a01      	subs	r2, #1
 8004d72:	0112      	lsls	r2, r2, #4
 8004d74:	4311      	orrs	r1, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d7a:	0212      	lsls	r2, r2, #8
 8004d7c:	4311      	orrs	r1, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d82:	0852      	lsrs	r2, r2, #1
 8004d84:	3a01      	subs	r2, #1
 8004d86:	0552      	lsls	r2, r2, #21
 8004d88:	4311      	orrs	r1, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d8e:	0852      	lsrs	r2, r2, #1
 8004d90:	3a01      	subs	r2, #1
 8004d92:	0652      	lsls	r2, r2, #25
 8004d94:	4311      	orrs	r1, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d9a:	06d2      	lsls	r2, r2, #27
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	4947      	ldr	r1, [pc, #284]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004da4:	4b45      	ldr	r3, [pc, #276]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a44      	ldr	r2, [pc, #272]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004db0:	4b42      	ldr	r3, [pc, #264]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4a41      	ldr	r2, [pc, #260]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fe fce6 	bl	800378c <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc4:	f7fe fce2 	bl	800378c <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e06e      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dd6:	4b39      	ldr	r3, [pc, #228]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x530>
 8004de2:	e066      	b.n	8004eb2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de4:	4b35      	ldr	r3, [pc, #212]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a34      	ldr	r2, [pc, #208]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004df0:	4b32      	ldr	r3, [pc, #200]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4a31      	ldr	r2, [pc, #196]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004df6:	f023 0303 	bic.w	r3, r3, #3
 8004dfa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004dfc:	4b2f      	ldr	r3, [pc, #188]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4a2e      	ldr	r2, [pc, #184]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004e02:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fe fcbe 	bl	800378c <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fe fcba 	bl	800378c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e046      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e26:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x580>
 8004e32:	e03e      	b.n	8004eb2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e039      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e40:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <HAL_RCC_OscConfig+0x628>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f003 0203 	and.w	r2, r3, #3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d12c      	bne.n	8004eae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d123      	bne.n	8004eae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d11b      	bne.n	8004eae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d113      	bne.n	8004eae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	3b01      	subs	r3, #1
 8004e94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d109      	bne.n	8004eae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d001      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	019f800c 	.word	0x019f800c

08004ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e11e      	b.n	800511a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004edc:	4b91      	ldr	r3, [pc, #580]	; (8005124 <HAL_RCC_ClockConfig+0x260>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d910      	bls.n	8004f0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b8e      	ldr	r3, [pc, #568]	; (8005124 <HAL_RCC_ClockConfig+0x260>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 020f 	bic.w	r2, r3, #15
 8004ef2:	498c      	ldr	r1, [pc, #560]	; (8005124 <HAL_RCC_ClockConfig+0x260>)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b8a      	ldr	r3, [pc, #552]	; (8005124 <HAL_RCC_ClockConfig+0x260>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e106      	b.n	800511a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d073      	beq.n	8005000 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d129      	bne.n	8004f74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f20:	4b81      	ldr	r3, [pc, #516]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0f4      	b.n	800511a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f30:	f000 f99e 	bl	8005270 <RCC_GetSysClockFreqFromPLLSource>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4a7c      	ldr	r2, [pc, #496]	; (800512c <HAL_RCC_ClockConfig+0x268>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d93f      	bls.n	8004fbe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f3e:	4b7a      	ldr	r3, [pc, #488]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d033      	beq.n	8004fbe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d12f      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f5e:	4b72      	ldr	r3, [pc, #456]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f66:	4a70      	ldr	r2, [pc, #448]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8004f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f6e:	2380      	movs	r3, #128	; 0x80
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	e024      	b.n	8004fbe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d107      	bne.n	8004f8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f7c:	4b6a      	ldr	r3, [pc, #424]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d109      	bne.n	8004f9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0c6      	b.n	800511a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f8c:	4b66      	ldr	r3, [pc, #408]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0be      	b.n	800511a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f9c:	f000 f8ce 	bl	800513c <HAL_RCC_GetSysClockFreq>
 8004fa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4a61      	ldr	r2, [pc, #388]	; (800512c <HAL_RCC_ClockConfig+0x268>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d909      	bls.n	8004fbe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004faa:	4b5f      	ldr	r3, [pc, #380]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fb2:	4a5d      	ldr	r2, [pc, #372]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8004fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fbe:	4b5a      	ldr	r3, [pc, #360]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f023 0203 	bic.w	r2, r3, #3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4957      	ldr	r1, [pc, #348]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd0:	f7fe fbdc 	bl	800378c <HAL_GetTick>
 8004fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd8:	f7fe fbd8 	bl	800378c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e095      	b.n	800511a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fee:	4b4e      	ldr	r3, [pc, #312]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 020c 	and.w	r2, r3, #12
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d1eb      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d023      	beq.n	8005054 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005018:	4b43      	ldr	r3, [pc, #268]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a42      	ldr	r2, [pc, #264]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 800501e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005022:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d007      	beq.n	8005040 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005030:	4b3d      	ldr	r3, [pc, #244]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005038:	4a3b      	ldr	r2, [pc, #236]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 800503a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800503e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005040:	4b39      	ldr	r3, [pc, #228]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4936      	ldr	r1, [pc, #216]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 800504e:	4313      	orrs	r3, r2
 8005050:	608b      	str	r3, [r1, #8]
 8005052:	e008      	b.n	8005066 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b80      	cmp	r3, #128	; 0x80
 8005058:	d105      	bne.n	8005066 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800505a:	4b33      	ldr	r3, [pc, #204]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	4a32      	ldr	r2, [pc, #200]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 8005060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005064:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005066:	4b2f      	ldr	r3, [pc, #188]	; (8005124 <HAL_RCC_ClockConfig+0x260>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d21d      	bcs.n	80050b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005074:	4b2b      	ldr	r3, [pc, #172]	; (8005124 <HAL_RCC_ClockConfig+0x260>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f023 020f 	bic.w	r2, r3, #15
 800507c:	4929      	ldr	r1, [pc, #164]	; (8005124 <HAL_RCC_ClockConfig+0x260>)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	4313      	orrs	r3, r2
 8005082:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005084:	f7fe fb82 	bl	800378c <HAL_GetTick>
 8005088:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508a:	e00a      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508c:	f7fe fb7e 	bl	800378c <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f241 3288 	movw	r2, #5000	; 0x1388
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e03b      	b.n	800511a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a2:	4b20      	ldr	r3, [pc, #128]	; (8005124 <HAL_RCC_ClockConfig+0x260>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d1ed      	bne.n	800508c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050bc:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4917      	ldr	r1, [pc, #92]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050da:	4b13      	ldr	r3, [pc, #76]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	490f      	ldr	r1, [pc, #60]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050ee:	f000 f825 	bl	800513c <HAL_RCC_GetSysClockFreq>
 80050f2:	4602      	mov	r2, r0
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <HAL_RCC_ClockConfig+0x264>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	490c      	ldr	r1, [pc, #48]	; (8005130 <HAL_RCC_ClockConfig+0x26c>)
 8005100:	5ccb      	ldrb	r3, [r1, r3]
 8005102:	f003 031f 	and.w	r3, r3, #31
 8005106:	fa22 f303 	lsr.w	r3, r2, r3
 800510a:	4a0a      	ldr	r2, [pc, #40]	; (8005134 <HAL_RCC_ClockConfig+0x270>)
 800510c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800510e:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <HAL_RCC_ClockConfig+0x274>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7fe faee 	bl	80036f4 <HAL_InitTick>
 8005118:	4603      	mov	r3, r0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40022000 	.word	0x40022000
 8005128:	40021000 	.word	0x40021000
 800512c:	04c4b400 	.word	0x04c4b400
 8005130:	08008b00 	.word	0x08008b00
 8005134:	20000030 	.word	0x20000030
 8005138:	20000034 	.word	0x20000034

0800513c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005142:	4b2c      	ldr	r3, [pc, #176]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b04      	cmp	r3, #4
 800514c:	d102      	bne.n	8005154 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800514e:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	e047      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005154:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 030c 	and.w	r3, r3, #12
 800515c:	2b08      	cmp	r3, #8
 800515e:	d102      	bne.n	8005166 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005160:	4b26      	ldr	r3, [pc, #152]	; (80051fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	e03e      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005166:	4b23      	ldr	r3, [pc, #140]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	2b0c      	cmp	r3, #12
 8005170:	d136      	bne.n	80051e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005172:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800517c:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	3301      	adds	r3, #1
 8005188:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b03      	cmp	r3, #3
 800518e:	d10c      	bne.n	80051aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005190:	4a1a      	ldr	r2, [pc, #104]	; (80051fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800519a:	68d2      	ldr	r2, [r2, #12]
 800519c:	0a12      	lsrs	r2, r2, #8
 800519e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	617b      	str	r3, [r7, #20]
      break;
 80051a8:	e00c      	b.n	80051c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051aa:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	4a10      	ldr	r2, [pc, #64]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051b4:	68d2      	ldr	r2, [r2, #12]
 80051b6:	0a12      	lsrs	r2, r2, #8
 80051b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051bc:	fb02 f303 	mul.w	r3, r2, r3
 80051c0:	617b      	str	r3, [r7, #20]
      break;
 80051c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051c4:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	0e5b      	lsrs	r3, r3, #25
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	3301      	adds	r3, #1
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	e001      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051e4:	693b      	ldr	r3, [r7, #16]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40021000 	.word	0x40021000
 80051f8:	00f42400 	.word	0x00f42400
 80051fc:	007a1200 	.word	0x007a1200

08005200 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005204:	4b03      	ldr	r3, [pc, #12]	; (8005214 <HAL_RCC_GetHCLKFreq+0x14>)
 8005206:	681b      	ldr	r3, [r3, #0]
}
 8005208:	4618      	mov	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000030 	.word	0x20000030

08005218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800521c:	f7ff fff0 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 8005220:	4602      	mov	r2, r0
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	4904      	ldr	r1, [pc, #16]	; (8005240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800522e:	5ccb      	ldrb	r3, [r1, r3]
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000
 8005240:	08008b10 	.word	0x08008b10

08005244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005248:	f7ff ffda 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 800524c:	4602      	mov	r2, r0
 800524e:	4b06      	ldr	r3, [pc, #24]	; (8005268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	0adb      	lsrs	r3, r3, #11
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4904      	ldr	r1, [pc, #16]	; (800526c <HAL_RCC_GetPCLK2Freq+0x28>)
 800525a:	5ccb      	ldrb	r3, [r1, r3]
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40021000 	.word	0x40021000
 800526c:	08008b10 	.word	0x08008b10

08005270 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005276:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	3301      	adds	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b03      	cmp	r3, #3
 8005292:	d10c      	bne.n	80052ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005294:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800529e:	68d2      	ldr	r2, [r2, #12]
 80052a0:	0a12      	lsrs	r2, r2, #8
 80052a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	617b      	str	r3, [r7, #20]
    break;
 80052ac:	e00c      	b.n	80052c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	4a0e      	ldr	r2, [pc, #56]	; (80052f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052b8:	68d2      	ldr	r2, [r2, #12]
 80052ba:	0a12      	lsrs	r2, r2, #8
 80052bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052c0:	fb02 f303 	mul.w	r3, r2, r3
 80052c4:	617b      	str	r3, [r7, #20]
    break;
 80052c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052c8:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	0e5b      	lsrs	r3, r3, #25
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	3301      	adds	r3, #1
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80052e2:	687b      	ldr	r3, [r7, #4]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	40021000 	.word	0x40021000
 80052f4:	007a1200 	.word	0x007a1200
 80052f8:	00f42400 	.word	0x00f42400

080052fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005304:	2300      	movs	r3, #0
 8005306:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005308:	2300      	movs	r3, #0
 800530a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8098 	beq.w	800544a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800531a:	2300      	movs	r3, #0
 800531c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800531e:	4b43      	ldr	r3, [pc, #268]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10d      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800532a:	4b40      	ldr	r3, [pc, #256]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800532c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532e:	4a3f      	ldr	r2, [pc, #252]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005334:	6593      	str	r3, [r2, #88]	; 0x58
 8005336:	4b3d      	ldr	r3, [pc, #244]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005342:	2301      	movs	r3, #1
 8005344:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005346:	4b3a      	ldr	r3, [pc, #232]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a39      	ldr	r2, [pc, #228]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800534c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005350:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005352:	f7fe fa1b 	bl	800378c <HAL_GetTick>
 8005356:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005358:	e009      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800535a:	f7fe fa17 	bl	800378c <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d902      	bls.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	74fb      	strb	r3, [r7, #19]
        break;
 800536c:	e005      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800536e:	4b30      	ldr	r3, [pc, #192]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0ef      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800537a:	7cfb      	ldrb	r3, [r7, #19]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d159      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005380:	4b2a      	ldr	r3, [pc, #168]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01e      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	429a      	cmp	r2, r3
 800539a:	d019      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800539c:	4b23      	ldr	r3, [pc, #140]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053a8:	4b20      	ldr	r3, [pc, #128]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	4a1f      	ldr	r2, [pc, #124]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053b8:	4b1c      	ldr	r3, [pc, #112]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	4a1b      	ldr	r2, [pc, #108]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053c8:	4a18      	ldr	r2, [pc, #96]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d016      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fe f9d7 	bl	800378c <HAL_GetTick>
 80053de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e0:	e00b      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e2:	f7fe f9d3 	bl	800378c <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d902      	bls.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	74fb      	strb	r3, [r7, #19]
            break;
 80053f8:	e006      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053fa:	4b0c      	ldr	r3, [pc, #48]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0ec      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005408:	7cfb      	ldrb	r3, [r7, #19]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10b      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800540e:	4b07      	ldr	r3, [pc, #28]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	4903      	ldr	r1, [pc, #12]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005424:	e008      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005426:	7cfb      	ldrb	r3, [r7, #19]
 8005428:	74bb      	strb	r3, [r7, #18]
 800542a:	e005      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800542c:	40021000 	.word	0x40021000
 8005430:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005434:	7cfb      	ldrb	r3, [r7, #19]
 8005436:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005438:	7c7b      	ldrb	r3, [r7, #17]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d105      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800543e:	4ba6      	ldr	r3, [pc, #664]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005442:	4aa5      	ldr	r2, [pc, #660]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005448:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005456:	4ba0      	ldr	r3, [pc, #640]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f023 0203 	bic.w	r2, r3, #3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	499c      	ldr	r1, [pc, #624]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005478:	4b97      	ldr	r3, [pc, #604]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547e:	f023 020c 	bic.w	r2, r3, #12
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	4994      	ldr	r1, [pc, #592]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800549a:	4b8f      	ldr	r3, [pc, #572]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	498b      	ldr	r1, [pc, #556]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054bc:	4b86      	ldr	r3, [pc, #536]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	4983      	ldr	r1, [pc, #524]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054de:	4b7e      	ldr	r3, [pc, #504]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	497a      	ldr	r1, [pc, #488]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005500:	4b75      	ldr	r3, [pc, #468]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005506:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	4972      	ldr	r1, [pc, #456]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005522:	4b6d      	ldr	r3, [pc, #436]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	4969      	ldr	r1, [pc, #420]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005544:	4b64      	ldr	r3, [pc, #400]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	4961      	ldr	r1, [pc, #388]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005566:	4b5c      	ldr	r3, [pc, #368]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	4958      	ldr	r1, [pc, #352]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005588:	4b53      	ldr	r3, [pc, #332]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005596:	4950      	ldr	r1, [pc, #320]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a6:	d105      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a8:	4b4b      	ldr	r3, [pc, #300]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	4a4a      	ldr	r2, [pc, #296]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d015      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055c0:	4b45      	ldr	r3, [pc, #276]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	4942      	ldr	r1, [pc, #264]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055de:	d105      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055e0:	4b3d      	ldr	r3, [pc, #244]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a3c      	ldr	r2, [pc, #240]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d015      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055f8:	4b37      	ldr	r3, [pc, #220]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005606:	4934      	ldr	r1, [pc, #208]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005616:	d105      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005618:	4b2f      	ldr	r3, [pc, #188]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4a2e      	ldr	r2, [pc, #184]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005622:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d015      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005630:	4b29      	ldr	r3, [pc, #164]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563e:	4926      	ldr	r1, [pc, #152]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800564e:	d105      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005650:	4b21      	ldr	r3, [pc, #132]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4a20      	ldr	r2, [pc, #128]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800565a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d015      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005668:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	4918      	ldr	r1, [pc, #96]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005686:	d105      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005688:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4a12      	ldr	r2, [pc, #72]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005692:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d015      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	490a      	ldr	r1, [pc, #40]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056be:	d105      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	4a04      	ldr	r2, [pc, #16]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40021000 	.word	0x40021000

080056dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e09d      	b.n	800582a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d108      	bne.n	8005708 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056fe:	d009      	beq.n	8005714 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	61da      	str	r2, [r3, #28]
 8005706:	e005      	b.n	8005714 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fd fdba 	bl	80032a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800574a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005754:	d902      	bls.n	800575c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	e002      	b.n	8005762 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800575c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005760:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800576a:	d007      	beq.n	800577c <HAL_SPI_Init+0xa0>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005774:	d002      	beq.n	800577c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057be:	ea42 0103 	orr.w	r1, r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	0c1b      	lsrs	r3, r3, #16
 80057d8:	f003 0204 	and.w	r2, r3, #4
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80057f8:	ea42 0103 	orr.w	r1, r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005818:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b088      	sub	sp, #32
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_SPI_Transmit+0x22>
 8005850:	2302      	movs	r3, #2
 8005852:	e158      	b.n	8005b06 <HAL_SPI_Transmit+0x2d4>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800585c:	f7fd ff96 	bl	800378c <HAL_GetTick>
 8005860:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d002      	beq.n	8005878 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005872:	2302      	movs	r3, #2
 8005874:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005876:	e13d      	b.n	8005af4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <HAL_SPI_Transmit+0x52>
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005888:	e134      	b.n	8005af4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2203      	movs	r2, #3
 800588e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	88fa      	ldrh	r2, [r7, #6]
 80058a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	88fa      	ldrh	r2, [r7, #6]
 80058a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d4:	d10f      	bne.n	80058f6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005900:	2b40      	cmp	r3, #64	; 0x40
 8005902:	d007      	beq.n	8005914 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800591c:	d94b      	bls.n	80059b6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <HAL_SPI_Transmit+0xfa>
 8005926:	8afb      	ldrh	r3, [r7, #22]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d13e      	bne.n	80059aa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	881a      	ldrh	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	1c9a      	adds	r2, r3, #2
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005950:	e02b      	b.n	80059aa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b02      	cmp	r3, #2
 800595e:	d112      	bne.n	8005986 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	881a      	ldrh	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005984:	e011      	b.n	80059aa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005986:	f7fd ff01 	bl	800378c <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d803      	bhi.n	800599e <HAL_SPI_Transmit+0x16c>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d102      	bne.n	80059a4 <HAL_SPI_Transmit+0x172>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059a8:	e0a4      	b.n	8005af4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1ce      	bne.n	8005952 <HAL_SPI_Transmit+0x120>
 80059b4:	e07c      	b.n	8005ab0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <HAL_SPI_Transmit+0x192>
 80059be:	8afb      	ldrh	r3, [r7, #22]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d170      	bne.n	8005aa6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d912      	bls.n	80059f4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	1c9a      	adds	r2, r3, #2
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b02      	subs	r3, #2
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059f2:	e058      	b.n	8005aa6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005a1a:	e044      	b.n	8005aa6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d12b      	bne.n	8005a82 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d912      	bls.n	8005a5a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	881a      	ldrh	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	1c9a      	adds	r2, r3, #2
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	3b02      	subs	r3, #2
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a58:	e025      	b.n	8005aa6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	7812      	ldrb	r2, [r2, #0]
 8005a66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a80:	e011      	b.n	8005aa6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a82:	f7fd fe83 	bl	800378c <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d803      	bhi.n	8005a9a <HAL_SPI_Transmit+0x268>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a98:	d102      	bne.n	8005aa0 <HAL_SPI_Transmit+0x26e>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d102      	bne.n	8005aa6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005aa4:	e026      	b.n	8005af4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1b5      	bne.n	8005a1c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	6839      	ldr	r1, [r7, #0]
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fce3 	bl	8006480 <SPI_EndRxTxTransaction>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e000      	b.n	8005af4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005af2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b04:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b088      	sub	sp, #32
 8005b12:	af02      	add	r7, sp, #8
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b2a:	d112      	bne.n	8005b52 <HAL_SPI_Receive+0x44>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10e      	bne.n	8005b52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2204      	movs	r2, #4
 8005b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b3c:	88fa      	ldrh	r2, [r7, #6]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	4613      	mov	r3, r2
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f910 	bl	8005d6e <HAL_SPI_TransmitReceive>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	e109      	b.n	8005d66 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_SPI_Receive+0x52>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e102      	b.n	8005d66 <HAL_SPI_Receive+0x258>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b68:	f7fd fe10 	bl	800378c <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d002      	beq.n	8005b80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b7e:	e0e9      	b.n	8005d54 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_SPI_Receive+0x7e>
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b90:	e0e0      	b.n	8005d54 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2204      	movs	r2, #4
 8005b96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	88fa      	ldrh	r2, [r7, #6]
 8005bb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bdc:	d908      	bls.n	8005bf0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bec:	605a      	str	r2, [r3, #4]
 8005bee:	e007      	b.n	8005c00 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bfe:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c08:	d10f      	bne.n	8005c2a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b40      	cmp	r3, #64	; 0x40
 8005c36:	d007      	beq.n	8005c48 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c50:	d867      	bhi.n	8005d22 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c52:	e030      	b.n	8005cb6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d117      	bne.n	8005c92 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f103 020c 	add.w	r2, r3, #12
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c90:	e011      	b.n	8005cb6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c92:	f7fd fd7b 	bl	800378c <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d803      	bhi.n	8005caa <HAL_SPI_Receive+0x19c>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca8:	d102      	bne.n	8005cb0 <HAL_SPI_Receive+0x1a2>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d102      	bne.n	8005cb6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005cb4:	e04e      	b.n	8005d54 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1c8      	bne.n	8005c54 <HAL_SPI_Receive+0x146>
 8005cc2:	e034      	b.n	8005d2e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d115      	bne.n	8005cfe <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	b292      	uxth	r2, r2
 8005cde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	1c9a      	adds	r2, r3, #2
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005cfc:	e011      	b.n	8005d22 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cfe:	f7fd fd45 	bl	800378c <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d803      	bhi.n	8005d16 <HAL_SPI_Receive+0x208>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d102      	bne.n	8005d1c <HAL_SPI_Receive+0x20e>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d20:	e018      	b.n	8005d54 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1ca      	bne.n	8005cc4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fb4c 	bl	80063d0 <SPI_EndRxTransaction>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	75fb      	strb	r3, [r7, #23]
 8005d50:	e000      	b.n	8005d54 <HAL_SPI_Receive+0x246>
  }

error :
 8005d52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b08a      	sub	sp, #40	; 0x28
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	607a      	str	r2, [r7, #4]
 8005d7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_SPI_TransmitReceive+0x26>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e1fb      	b.n	800618c <HAL_SPI_TransmitReceive+0x41e>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d9c:	f7fd fcf6 	bl	800378c <HAL_GetTick>
 8005da0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005da8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005db0:	887b      	ldrh	r3, [r7, #2]
 8005db2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005db4:	887b      	ldrh	r3, [r7, #2]
 8005db6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005db8:	7efb      	ldrb	r3, [r7, #27]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d00e      	beq.n	8005ddc <HAL_SPI_TransmitReceive+0x6e>
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dc4:	d106      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x66>
 8005dce:	7efb      	ldrb	r3, [r7, #27]
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d003      	beq.n	8005ddc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005dda:	e1cd      	b.n	8006178 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x80>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x80>
 8005de8:	887b      	ldrh	r3, [r7, #2]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005df4:	e1c0      	b.n	8006178 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d003      	beq.n	8005e0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2205      	movs	r2, #5
 8005e06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	887a      	ldrh	r2, [r7, #2]
 8005e1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	887a      	ldrh	r2, [r7, #2]
 8005e22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	887a      	ldrh	r2, [r7, #2]
 8005e30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	887a      	ldrh	r2, [r7, #2]
 8005e36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e4c:	d802      	bhi.n	8005e54 <HAL_SPI_TransmitReceive+0xe6>
 8005e4e:	8a3b      	ldrh	r3, [r7, #16]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d908      	bls.n	8005e66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e62:	605a      	str	r2, [r3, #4]
 8005e64:	e007      	b.n	8005e76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d007      	beq.n	8005e94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e9c:	d97c      	bls.n	8005f98 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_SPI_TransmitReceive+0x13e>
 8005ea6:	8a7b      	ldrh	r3, [r7, #18]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d169      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	881a      	ldrh	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	1c9a      	adds	r2, r3, #2
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ed0:	e056      	b.n	8005f80 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d11b      	bne.n	8005f18 <HAL_SPI_TransmitReceive+0x1aa>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d016      	beq.n	8005f18 <HAL_SPI_TransmitReceive+0x1aa>
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d113      	bne.n	8005f18 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	881a      	ldrh	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	1c9a      	adds	r2, r3, #2
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d11c      	bne.n	8005f60 <HAL_SPI_TransmitReceive+0x1f2>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d016      	beq.n	8005f60 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	b292      	uxth	r2, r2
 8005f3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	1c9a      	adds	r2, r3, #2
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f60:	f7fd fc14 	bl	800378c <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d807      	bhi.n	8005f80 <HAL_SPI_TransmitReceive+0x212>
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f76:	d003      	beq.n	8005f80 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f7e:	e0fb      	b.n	8006178 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1a3      	bne.n	8005ed2 <HAL_SPI_TransmitReceive+0x164>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d19d      	bne.n	8005ed2 <HAL_SPI_TransmitReceive+0x164>
 8005f96:	e0df      	b.n	8006158 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x23a>
 8005fa0:	8a7b      	ldrh	r3, [r7, #18]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	f040 80cb 	bne.w	800613e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d912      	bls.n	8005fd8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	881a      	ldrh	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	1c9a      	adds	r2, r3, #2
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b02      	subs	r3, #2
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fd6:	e0b2      	b.n	800613e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	7812      	ldrb	r2, [r2, #0]
 8005fe4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ffe:	e09e      	b.n	800613e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b02      	cmp	r3, #2
 800600c:	d134      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x30a>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d02f      	beq.n	8006078 <HAL_SPI_TransmitReceive+0x30a>
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	2b01      	cmp	r3, #1
 800601c:	d12c      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d912      	bls.n	800604e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	881a      	ldrh	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	1c9a      	adds	r2, r3, #2
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b02      	subs	r3, #2
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800604c:	e012      	b.n	8006074 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	330c      	adds	r3, #12
 8006058:	7812      	ldrb	r2, [r2, #0]
 800605a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b01      	cmp	r3, #1
 8006084:	d148      	bne.n	8006118 <HAL_SPI_TransmitReceive+0x3aa>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d042      	beq.n	8006118 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b01      	cmp	r3, #1
 800609c:	d923      	bls.n	80060e6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	b292      	uxth	r2, r2
 80060aa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	1c9a      	adds	r2, r3, #2
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b02      	subs	r3, #2
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d81f      	bhi.n	8006114 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060e2:	605a      	str	r2, [r3, #4]
 80060e4:	e016      	b.n	8006114 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f103 020c 	add.w	r2, r3, #12
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	7812      	ldrb	r2, [r2, #0]
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006114:	2301      	movs	r3, #1
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006118:	f7fd fb38 	bl	800378c <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006124:	429a      	cmp	r2, r3
 8006126:	d803      	bhi.n	8006130 <HAL_SPI_TransmitReceive+0x3c2>
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612e:	d102      	bne.n	8006136 <HAL_SPI_TransmitReceive+0x3c8>
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800613c:	e01c      	b.n	8006178 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	f47f af5b 	bne.w	8006000 <HAL_SPI_TransmitReceive+0x292>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	f47f af54 	bne.w	8006000 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f98f 	bl	8006480 <SPI_EndRxTxTransaction>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d006      	beq.n	8006176 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	661a      	str	r2, [r3, #96]	; 0x60
 8006174:	e000      	b.n	8006178 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006176:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800618c:	4618      	mov	r0, r3
 800618e:	3728      	adds	r7, #40	; 0x28
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	4613      	mov	r3, r2
 80061a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061a4:	f7fd faf2 	bl	800378c <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	4413      	add	r3, r2
 80061b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061b4:	f7fd faea 	bl	800378c <HAL_GetTick>
 80061b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061ba:	4b39      	ldr	r3, [pc, #228]	; (80062a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	015b      	lsls	r3, r3, #5
 80061c0:	0d1b      	lsrs	r3, r3, #20
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	fb02 f303 	mul.w	r3, r2, r3
 80061c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ca:	e054      	b.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d050      	beq.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061d4:	f7fd fada 	bl	800378c <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d902      	bls.n	80061ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d13d      	bne.n	8006266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006202:	d111      	bne.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800620c:	d004      	beq.n	8006218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006216:	d107      	bne.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006230:	d10f      	bne.n	8006252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e017      	b.n	8006296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	3b01      	subs	r3, #1
 8006274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4013      	ands	r3, r2
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	bf0c      	ite	eq
 8006286:	2301      	moveq	r3, #1
 8006288:	2300      	movne	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	429a      	cmp	r2, r3
 8006292:	d19b      	bne.n	80061cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000030 	.word	0x20000030

080062a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08a      	sub	sp, #40	; 0x28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062b6:	f7fd fa69 	bl	800378c <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	4413      	add	r3, r2
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80062c6:	f7fd fa61 	bl	800378c <HAL_GetTick>
 80062ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	330c      	adds	r3, #12
 80062d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062d4:	4b3d      	ldr	r3, [pc, #244]	; (80063cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	00da      	lsls	r2, r3, #3
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	0d1b      	lsrs	r3, r3, #20
 80062e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062ec:	e060      	b.n	80063b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062f4:	d107      	bne.n	8006306 <SPI_WaitFifoStateUntilTimeout+0x62>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006304:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d050      	beq.n	80063b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800630e:	f7fd fa3d 	bl	800378c <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631a:	429a      	cmp	r2, r3
 800631c:	d902      	bls.n	8006324 <SPI_WaitFifoStateUntilTimeout+0x80>
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	d13d      	bne.n	80063a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006332:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800633c:	d111      	bne.n	8006362 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006346:	d004      	beq.n	8006352 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006350:	d107      	bne.n	8006362 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006360:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636a:	d10f      	bne.n	800638c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800638a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e010      	b.n	80063c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	4013      	ands	r3, r2
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d196      	bne.n	80062ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3728      	adds	r7, #40	; 0x28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000030 	.word	0x20000030

080063d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063e4:	d111      	bne.n	800640a <SPI_EndRxTransaction+0x3a>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ee:	d004      	beq.n	80063fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f8:	d107      	bne.n	800640a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006408:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2200      	movs	r2, #0
 8006412:	2180      	movs	r1, #128	; 0x80
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f7ff febd 	bl	8006194 <SPI_WaitFlagStateUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d007      	beq.n	8006430 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006424:	f043 0220 	orr.w	r2, r3, #32
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e023      	b.n	8006478 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006438:	d11d      	bne.n	8006476 <SPI_EndRxTransaction+0xa6>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006442:	d004      	beq.n	800644e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800644c:	d113      	bne.n	8006476 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2200      	movs	r2, #0
 8006456:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7ff ff22 	bl	80062a4 <SPI_WaitFifoStateUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d007      	beq.n	8006476 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800646a:	f043 0220 	orr.w	r2, r3, #32
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e000      	b.n	8006478 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af02      	add	r7, sp, #8
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2200      	movs	r2, #0
 8006494:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f7ff ff03 	bl	80062a4 <SPI_WaitFifoStateUntilTimeout>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d007      	beq.n	80064b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a8:	f043 0220 	orr.w	r2, r3, #32
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e027      	b.n	8006504 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2200      	movs	r2, #0
 80064bc:	2180      	movs	r1, #128	; 0x80
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7ff fe68 	bl	8006194 <SPI_WaitFlagStateUntilTimeout>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ce:	f043 0220 	orr.w	r2, r3, #32
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e014      	b.n	8006504 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f7ff fedc 	bl	80062a4 <SPI_WaitFifoStateUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d007      	beq.n	8006502 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e000      	b.n	8006504 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e049      	b.n	80065b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fc fefa 	bl	800332c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	4619      	mov	r1, r3
 800654a:	4610      	mov	r0, r2
 800654c:	f000 faa4 	bl	8006a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e049      	b.n	8006660 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f841 	bl	8006668 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3304      	adds	r3, #4
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	f000 fa4d 	bl	8006a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006696:	2302      	movs	r3, #2
 8006698:	e0ff      	b.n	800689a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b14      	cmp	r3, #20
 80066a6:	f200 80f0 	bhi.w	800688a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	08006705 	.word	0x08006705
 80066b4:	0800688b 	.word	0x0800688b
 80066b8:	0800688b 	.word	0x0800688b
 80066bc:	0800688b 	.word	0x0800688b
 80066c0:	08006745 	.word	0x08006745
 80066c4:	0800688b 	.word	0x0800688b
 80066c8:	0800688b 	.word	0x0800688b
 80066cc:	0800688b 	.word	0x0800688b
 80066d0:	08006787 	.word	0x08006787
 80066d4:	0800688b 	.word	0x0800688b
 80066d8:	0800688b 	.word	0x0800688b
 80066dc:	0800688b 	.word	0x0800688b
 80066e0:	080067c7 	.word	0x080067c7
 80066e4:	0800688b 	.word	0x0800688b
 80066e8:	0800688b 	.word	0x0800688b
 80066ec:	0800688b 	.word	0x0800688b
 80066f0:	08006809 	.word	0x08006809
 80066f4:	0800688b 	.word	0x0800688b
 80066f8:	0800688b 	.word	0x0800688b
 80066fc:	0800688b 	.word	0x0800688b
 8006700:	08006849 	.word	0x08006849
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fa54 	bl	8006bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0208 	orr.w	r2, r2, #8
 800671e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0204 	bic.w	r2, r2, #4
 800672e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6999      	ldr	r1, [r3, #24]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	619a      	str	r2, [r3, #24]
      break;
 8006742:	e0a5      	b.n	8006890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fac4 	bl	8006cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800675e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800676e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6999      	ldr	r1, [r3, #24]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	021a      	lsls	r2, r3, #8
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	619a      	str	r2, [r3, #24]
      break;
 8006784:	e084      	b.n	8006890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fb2d 	bl	8006dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69da      	ldr	r2, [r3, #28]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0208 	orr.w	r2, r2, #8
 80067a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0204 	bic.w	r2, r2, #4
 80067b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69d9      	ldr	r1, [r3, #28]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	61da      	str	r2, [r3, #28]
      break;
 80067c4:	e064      	b.n	8006890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fb95 	bl	8006efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69da      	ldr	r2, [r3, #28]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69d9      	ldr	r1, [r3, #28]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	021a      	lsls	r2, r3, #8
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	61da      	str	r2, [r3, #28]
      break;
 8006806:	e043      	b.n	8006890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fbfe 	bl	8007010 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0208 	orr.w	r2, r2, #8
 8006822:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0204 	bic.w	r2, r2, #4
 8006832:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	691a      	ldr	r2, [r3, #16]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006846:	e023      	b.n	8006890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fc42 	bl	80070d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006862:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006872:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	021a      	lsls	r2, r3, #8
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006888:	e002      	b.n	8006890 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	75fb      	strb	r3, [r7, #23]
      break;
 800688e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006898:	7dfb      	ldrb	r3, [r7, #23]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop

080068a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_TIM_ConfigClockSource+0x1c>
 80068bc:	2302      	movs	r3, #2
 80068be:	e0de      	b.n	8006a7e <HAL_TIM_ConfigClockSource+0x1da>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80068de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a63      	ldr	r2, [pc, #396]	; (8006a88 <HAL_TIM_ConfigClockSource+0x1e4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	f000 80a9 	beq.w	8006a52 <HAL_TIM_ConfigClockSource+0x1ae>
 8006900:	4a61      	ldr	r2, [pc, #388]	; (8006a88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	f200 80ae 	bhi.w	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 8006908:	4a60      	ldr	r2, [pc, #384]	; (8006a8c <HAL_TIM_ConfigClockSource+0x1e8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	f000 80a1 	beq.w	8006a52 <HAL_TIM_ConfigClockSource+0x1ae>
 8006910:	4a5e      	ldr	r2, [pc, #376]	; (8006a8c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	f200 80a6 	bhi.w	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 8006918:	4a5d      	ldr	r2, [pc, #372]	; (8006a90 <HAL_TIM_ConfigClockSource+0x1ec>)
 800691a:	4293      	cmp	r3, r2
 800691c:	f000 8099 	beq.w	8006a52 <HAL_TIM_ConfigClockSource+0x1ae>
 8006920:	4a5b      	ldr	r2, [pc, #364]	; (8006a90 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006922:	4293      	cmp	r3, r2
 8006924:	f200 809e 	bhi.w	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 8006928:	4a5a      	ldr	r2, [pc, #360]	; (8006a94 <HAL_TIM_ConfigClockSource+0x1f0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	f000 8091 	beq.w	8006a52 <HAL_TIM_ConfigClockSource+0x1ae>
 8006930:	4a58      	ldr	r2, [pc, #352]	; (8006a94 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	f200 8096 	bhi.w	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 8006938:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800693c:	f000 8089 	beq.w	8006a52 <HAL_TIM_ConfigClockSource+0x1ae>
 8006940:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006944:	f200 808e 	bhi.w	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 8006948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800694c:	d03e      	beq.n	80069cc <HAL_TIM_ConfigClockSource+0x128>
 800694e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006952:	f200 8087 	bhi.w	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695a:	f000 8086 	beq.w	8006a6a <HAL_TIM_ConfigClockSource+0x1c6>
 800695e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006962:	d87f      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 8006964:	2b70      	cmp	r3, #112	; 0x70
 8006966:	d01a      	beq.n	800699e <HAL_TIM_ConfigClockSource+0xfa>
 8006968:	2b70      	cmp	r3, #112	; 0x70
 800696a:	d87b      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 800696c:	2b60      	cmp	r3, #96	; 0x60
 800696e:	d050      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0x16e>
 8006970:	2b60      	cmp	r3, #96	; 0x60
 8006972:	d877      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 8006974:	2b50      	cmp	r3, #80	; 0x50
 8006976:	d03c      	beq.n	80069f2 <HAL_TIM_ConfigClockSource+0x14e>
 8006978:	2b50      	cmp	r3, #80	; 0x50
 800697a:	d873      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	d058      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0x18e>
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	d86f      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 8006984:	2b30      	cmp	r3, #48	; 0x30
 8006986:	d064      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x1ae>
 8006988:	2b30      	cmp	r3, #48	; 0x30
 800698a:	d86b      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 800698c:	2b20      	cmp	r3, #32
 800698e:	d060      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x1ae>
 8006990:	2b20      	cmp	r3, #32
 8006992:	d867      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d05c      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x1ae>
 8006998:	2b10      	cmp	r3, #16
 800699a:	d05a      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x1ae>
 800699c:	e062      	b.n	8006a64 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	6899      	ldr	r1, [r3, #8]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f000 fc75 	bl	800729c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	609a      	str	r2, [r3, #8]
      break;
 80069ca:	e04f      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	6899      	ldr	r1, [r3, #8]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f000 fc5e 	bl	800729c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ee:	609a      	str	r2, [r3, #8]
      break;
 80069f0:	e03c      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	6859      	ldr	r1, [r3, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f000 fbd0 	bl	80071a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2150      	movs	r1, #80	; 0x50
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fc29 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 8006a10:	e02c      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6859      	ldr	r1, [r3, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f000 fbef 	bl	8007202 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2160      	movs	r1, #96	; 0x60
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fc19 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 8006a30:	e01c      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6818      	ldr	r0, [r3, #0]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	6859      	ldr	r1, [r3, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f000 fbb0 	bl	80071a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2140      	movs	r1, #64	; 0x40
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fc09 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 8006a50:	e00c      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f000 fc00 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 8006a62:	e003      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
      break;
 8006a68:	e000      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006a6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	00100070 	.word	0x00100070
 8006a8c:	00100040 	.word	0x00100040
 8006a90:	00100030 	.word	0x00100030
 8006a94:	00100020 	.word	0x00100020

08006a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a3c      	ldr	r2, [pc, #240]	; (8006b9c <TIM_Base_SetConfig+0x104>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00f      	beq.n	8006ad0 <TIM_Base_SetConfig+0x38>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab6:	d00b      	beq.n	8006ad0 <TIM_Base_SetConfig+0x38>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a39      	ldr	r2, [pc, #228]	; (8006ba0 <TIM_Base_SetConfig+0x108>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d007      	beq.n	8006ad0 <TIM_Base_SetConfig+0x38>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a38      	ldr	r2, [pc, #224]	; (8006ba4 <TIM_Base_SetConfig+0x10c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_Base_SetConfig+0x38>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a37      	ldr	r2, [pc, #220]	; (8006ba8 <TIM_Base_SetConfig+0x110>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d108      	bne.n	8006ae2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2d      	ldr	r2, [pc, #180]	; (8006b9c <TIM_Base_SetConfig+0x104>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d01b      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af0:	d017      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2a      	ldr	r2, [pc, #168]	; (8006ba0 <TIM_Base_SetConfig+0x108>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d013      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a29      	ldr	r2, [pc, #164]	; (8006ba4 <TIM_Base_SetConfig+0x10c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00f      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a28      	ldr	r2, [pc, #160]	; (8006ba8 <TIM_Base_SetConfig+0x110>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00b      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a27      	ldr	r2, [pc, #156]	; (8006bac <TIM_Base_SetConfig+0x114>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d007      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a26      	ldr	r2, [pc, #152]	; (8006bb0 <TIM_Base_SetConfig+0x118>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d003      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a25      	ldr	r2, [pc, #148]	; (8006bb4 <TIM_Base_SetConfig+0x11c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d108      	bne.n	8006b34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <TIM_Base_SetConfig+0x104>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00f      	beq.n	8006b80 <TIM_Base_SetConfig+0xe8>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a11      	ldr	r2, [pc, #68]	; (8006ba8 <TIM_Base_SetConfig+0x110>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00b      	beq.n	8006b80 <TIM_Base_SetConfig+0xe8>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a10      	ldr	r2, [pc, #64]	; (8006bac <TIM_Base_SetConfig+0x114>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d007      	beq.n	8006b80 <TIM_Base_SetConfig+0xe8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a0f      	ldr	r2, [pc, #60]	; (8006bb0 <TIM_Base_SetConfig+0x118>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_Base_SetConfig+0xe8>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a0e      	ldr	r2, [pc, #56]	; (8006bb4 <TIM_Base_SetConfig+0x11c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d103      	bne.n	8006b88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	615a      	str	r2, [r3, #20]
}
 8006b8e:	bf00      	nop
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40000400 	.word	0x40000400
 8006ba4:	40000800 	.word	0x40000800
 8006ba8:	40013400 	.word	0x40013400
 8006bac:	40014000 	.word	0x40014000
 8006bb0:	40014400 	.word	0x40014400
 8006bb4:	40014800 	.word	0x40014800

08006bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f023 0201 	bic.w	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 0302 	bic.w	r3, r3, #2
 8006c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a2c      	ldr	r2, [pc, #176]	; (8006cc4 <TIM_OC1_SetConfig+0x10c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00f      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <TIM_OC1_SetConfig+0x110>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a2a      	ldr	r2, [pc, #168]	; (8006ccc <TIM_OC1_SetConfig+0x114>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d007      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a29      	ldr	r2, [pc, #164]	; (8006cd0 <TIM_OC1_SetConfig+0x118>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <TIM_OC1_SetConfig+0x11c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d10c      	bne.n	8006c52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0308 	bic.w	r3, r3, #8
 8006c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f023 0304 	bic.w	r3, r3, #4
 8006c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <TIM_OC1_SetConfig+0x10c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00f      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1a      	ldr	r2, [pc, #104]	; (8006cc8 <TIM_OC1_SetConfig+0x110>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00b      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a19      	ldr	r2, [pc, #100]	; (8006ccc <TIM_OC1_SetConfig+0x114>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a18      	ldr	r2, [pc, #96]	; (8006cd0 <TIM_OC1_SetConfig+0x118>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d003      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a17      	ldr	r2, [pc, #92]	; (8006cd4 <TIM_OC1_SetConfig+0x11c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d111      	bne.n	8006c9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	621a      	str	r2, [r3, #32]
}
 8006cb8:	bf00      	nop
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40013400 	.word	0x40013400
 8006ccc:	40014000 	.word	0x40014000
 8006cd0:	40014400 	.word	0x40014400
 8006cd4:	40014800 	.word	0x40014800

08006cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f023 0210 	bic.w	r2, r3, #16
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0320 	bic.w	r3, r3, #32
 8006d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a28      	ldr	r2, [pc, #160]	; (8006dd8 <TIM_OC2_SetConfig+0x100>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC2_SetConfig+0x6c>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <TIM_OC2_SetConfig+0x104>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d10d      	bne.n	8006d60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a1d      	ldr	r2, [pc, #116]	; (8006dd8 <TIM_OC2_SetConfig+0x100>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a1c      	ldr	r2, [pc, #112]	; (8006ddc <TIM_OC2_SetConfig+0x104>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1b      	ldr	r2, [pc, #108]	; (8006de0 <TIM_OC2_SetConfig+0x108>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <TIM_OC2_SetConfig+0x10c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a19      	ldr	r2, [pc, #100]	; (8006de8 <TIM_OC2_SetConfig+0x110>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d113      	bne.n	8006db0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40013400 	.word	0x40013400
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40014400 	.word	0x40014400
 8006de8:	40014800 	.word	0x40014800

08006dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <TIM_OC3_SetConfig+0xfc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d003      	beq.n	8006e56 <TIM_OC3_SetConfig+0x6a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a26      	ldr	r2, [pc, #152]	; (8006eec <TIM_OC3_SetConfig+0x100>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d10d      	bne.n	8006e72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a1c      	ldr	r2, [pc, #112]	; (8006ee8 <TIM_OC3_SetConfig+0xfc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00f      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <TIM_OC3_SetConfig+0x100>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00b      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a1a      	ldr	r2, [pc, #104]	; (8006ef0 <TIM_OC3_SetConfig+0x104>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d007      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a19      	ldr	r2, [pc, #100]	; (8006ef4 <TIM_OC3_SetConfig+0x108>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d003      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a18      	ldr	r2, [pc, #96]	; (8006ef8 <TIM_OC3_SetConfig+0x10c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d113      	bne.n	8006ec2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	621a      	str	r2, [r3, #32]
}
 8006edc:	bf00      	nop
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	40012c00 	.word	0x40012c00
 8006eec:	40013400 	.word	0x40013400
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40014400 	.word	0x40014400
 8006ef8:	40014800 	.word	0x40014800

08006efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	031b      	lsls	r3, r3, #12
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a28      	ldr	r2, [pc, #160]	; (8006ffc <TIM_OC4_SetConfig+0x100>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d003      	beq.n	8006f68 <TIM_OC4_SetConfig+0x6c>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a27      	ldr	r2, [pc, #156]	; (8007000 <TIM_OC4_SetConfig+0x104>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d10d      	bne.n	8006f84 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	031b      	lsls	r3, r3, #12
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a1d      	ldr	r2, [pc, #116]	; (8006ffc <TIM_OC4_SetConfig+0x100>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00f      	beq.n	8006fac <TIM_OC4_SetConfig+0xb0>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a1c      	ldr	r2, [pc, #112]	; (8007000 <TIM_OC4_SetConfig+0x104>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00b      	beq.n	8006fac <TIM_OC4_SetConfig+0xb0>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a1b      	ldr	r2, [pc, #108]	; (8007004 <TIM_OC4_SetConfig+0x108>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d007      	beq.n	8006fac <TIM_OC4_SetConfig+0xb0>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a1a      	ldr	r2, [pc, #104]	; (8007008 <TIM_OC4_SetConfig+0x10c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d003      	beq.n	8006fac <TIM_OC4_SetConfig+0xb0>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a19      	ldr	r2, [pc, #100]	; (800700c <TIM_OC4_SetConfig+0x110>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d113      	bne.n	8006fd4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	019b      	lsls	r3, r3, #6
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	019b      	lsls	r3, r3, #6
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	621a      	str	r2, [r3, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	40012c00 	.word	0x40012c00
 8007000:	40013400 	.word	0x40013400
 8007004:	40014000 	.word	0x40014000
 8007008:	40014400 	.word	0x40014400
 800700c:	40014800 	.word	0x40014800

08007010 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800703e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007054:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	041b      	lsls	r3, r3, #16
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a17      	ldr	r2, [pc, #92]	; (80070c4 <TIM_OC5_SetConfig+0xb4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00f      	beq.n	800708a <TIM_OC5_SetConfig+0x7a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a16      	ldr	r2, [pc, #88]	; (80070c8 <TIM_OC5_SetConfig+0xb8>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00b      	beq.n	800708a <TIM_OC5_SetConfig+0x7a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a15      	ldr	r2, [pc, #84]	; (80070cc <TIM_OC5_SetConfig+0xbc>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d007      	beq.n	800708a <TIM_OC5_SetConfig+0x7a>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a14      	ldr	r2, [pc, #80]	; (80070d0 <TIM_OC5_SetConfig+0xc0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d003      	beq.n	800708a <TIM_OC5_SetConfig+0x7a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a13      	ldr	r2, [pc, #76]	; (80070d4 <TIM_OC5_SetConfig+0xc4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d109      	bne.n	800709e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007090:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	621a      	str	r2, [r3, #32]
}
 80070b8:	bf00      	nop
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	40012c00 	.word	0x40012c00
 80070c8:	40013400 	.word	0x40013400
 80070cc:	40014000 	.word	0x40014000
 80070d0:	40014400 	.word	0x40014400
 80070d4:	40014800 	.word	0x40014800

080070d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800711e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	051b      	lsls	r3, r3, #20
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	4313      	orrs	r3, r2
 800712a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a18      	ldr	r2, [pc, #96]	; (8007190 <TIM_OC6_SetConfig+0xb8>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00f      	beq.n	8007154 <TIM_OC6_SetConfig+0x7c>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a17      	ldr	r2, [pc, #92]	; (8007194 <TIM_OC6_SetConfig+0xbc>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00b      	beq.n	8007154 <TIM_OC6_SetConfig+0x7c>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a16      	ldr	r2, [pc, #88]	; (8007198 <TIM_OC6_SetConfig+0xc0>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d007      	beq.n	8007154 <TIM_OC6_SetConfig+0x7c>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a15      	ldr	r2, [pc, #84]	; (800719c <TIM_OC6_SetConfig+0xc4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_OC6_SetConfig+0x7c>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a14      	ldr	r2, [pc, #80]	; (80071a0 <TIM_OC6_SetConfig+0xc8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d109      	bne.n	8007168 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800715a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	029b      	lsls	r3, r3, #10
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40012c00 	.word	0x40012c00
 8007194:	40013400 	.word	0x40013400
 8007198:	40014000 	.word	0x40014000
 800719c:	40014400 	.word	0x40014400
 80071a0:	40014800 	.word	0x40014800

080071a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	f023 0201 	bic.w	r2, r3, #1
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f023 030a 	bic.w	r3, r3, #10
 80071e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007202:	b480      	push	{r7}
 8007204:	b087      	sub	sp, #28
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f023 0210 	bic.w	r2, r3, #16
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800722c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	031b      	lsls	r3, r3, #12
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800723e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4313      	orrs	r3, r2
 8007248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	621a      	str	r2, [r3, #32]
}
 8007256:	bf00      	nop
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	f043 0307 	orr.w	r3, r3, #7
 8007288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	609a      	str	r2, [r3, #8]
}
 8007290:	bf00      	nop
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	021a      	lsls	r2, r3, #8
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	431a      	orrs	r2, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	609a      	str	r2, [r3, #8]
}
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d109      	bne.n	8007300 <HAL_TIMEx_PWMN_Start+0x24>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	bf14      	ite	ne
 80072f8:	2301      	movne	r3, #1
 80072fa:	2300      	moveq	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	e022      	b.n	8007346 <HAL_TIMEx_PWMN_Start+0x6a>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b04      	cmp	r3, #4
 8007304:	d109      	bne.n	800731a <HAL_TIMEx_PWMN_Start+0x3e>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b01      	cmp	r3, #1
 8007310:	bf14      	ite	ne
 8007312:	2301      	movne	r3, #1
 8007314:	2300      	moveq	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	e015      	b.n	8007346 <HAL_TIMEx_PWMN_Start+0x6a>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b08      	cmp	r3, #8
 800731e:	d109      	bne.n	8007334 <HAL_TIMEx_PWMN_Start+0x58>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b01      	cmp	r3, #1
 800732a:	bf14      	ite	ne
 800732c:	2301      	movne	r3, #1
 800732e:	2300      	moveq	r3, #0
 8007330:	b2db      	uxtb	r3, r3
 8007332:	e008      	b.n	8007346 <HAL_TIMEx_PWMN_Start+0x6a>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b01      	cmp	r3, #1
 800733e:	bf14      	ite	ne
 8007340:	2301      	movne	r3, #1
 8007342:	2300      	moveq	r3, #0
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e069      	b.n	8007422 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d104      	bne.n	800735e <HAL_TIMEx_PWMN_Start+0x82>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800735c:	e013      	b.n	8007386 <HAL_TIMEx_PWMN_Start+0xaa>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b04      	cmp	r3, #4
 8007362:	d104      	bne.n	800736e <HAL_TIMEx_PWMN_Start+0x92>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800736c:	e00b      	b.n	8007386 <HAL_TIMEx_PWMN_Start+0xaa>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b08      	cmp	r3, #8
 8007372:	d104      	bne.n	800737e <HAL_TIMEx_PWMN_Start+0xa2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800737c:	e003      	b.n	8007386 <HAL_TIMEx_PWMN_Start+0xaa>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2202      	movs	r2, #2
 8007382:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2204      	movs	r2, #4
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 f97a 	bl	8007688 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a20      	ldr	r2, [pc, #128]	; (800742c <HAL_TIMEx_PWMN_Start+0x150>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d018      	beq.n	80073e0 <HAL_TIMEx_PWMN_Start+0x104>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b6:	d013      	beq.n	80073e0 <HAL_TIMEx_PWMN_Start+0x104>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a1c      	ldr	r2, [pc, #112]	; (8007430 <HAL_TIMEx_PWMN_Start+0x154>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00e      	beq.n	80073e0 <HAL_TIMEx_PWMN_Start+0x104>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a1b      	ldr	r2, [pc, #108]	; (8007434 <HAL_TIMEx_PWMN_Start+0x158>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d009      	beq.n	80073e0 <HAL_TIMEx_PWMN_Start+0x104>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a19      	ldr	r2, [pc, #100]	; (8007438 <HAL_TIMEx_PWMN_Start+0x15c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d004      	beq.n	80073e0 <HAL_TIMEx_PWMN_Start+0x104>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a18      	ldr	r2, [pc, #96]	; (800743c <HAL_TIMEx_PWMN_Start+0x160>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d115      	bne.n	800740c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	4b16      	ldr	r3, [pc, #88]	; (8007440 <HAL_TIMEx_PWMN_Start+0x164>)
 80073e8:	4013      	ands	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b06      	cmp	r3, #6
 80073f0:	d015      	beq.n	800741e <HAL_TIMEx_PWMN_Start+0x142>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f8:	d011      	beq.n	800741e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 0201 	orr.w	r2, r2, #1
 8007408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740a:	e008      	b.n	800741e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	e000      	b.n	8007420 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	40012c00 	.word	0x40012c00
 8007430:	40000400 	.word	0x40000400
 8007434:	40000800 	.word	0x40000800
 8007438:	40013400 	.word	0x40013400
 800743c:	40014000 	.word	0x40014000
 8007440:	00010007 	.word	0x00010007

08007444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007458:	2302      	movs	r3, #2
 800745a:	e065      	b.n	8007528 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a2c      	ldr	r2, [pc, #176]	; (8007534 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d004      	beq.n	8007490 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a2b      	ldr	r2, [pc, #172]	; (8007538 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d108      	bne.n	80074a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007496:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80074a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1b      	ldr	r2, [pc, #108]	; (8007534 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d018      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d2:	d013      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a18      	ldr	r2, [pc, #96]	; (800753c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00e      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a17      	ldr	r2, [pc, #92]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d009      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a12      	ldr	r2, [pc, #72]	; (8007538 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d004      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a13      	ldr	r2, [pc, #76]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d10c      	bne.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007502:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	4313      	orrs	r3, r2
 800750c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	40012c00 	.word	0x40012c00
 8007538:	40013400 	.word	0x40013400
 800753c:	40000400 	.word	0x40000400
 8007540:	40000800 	.word	0x40000800
 8007544:	40014000 	.word	0x40014000

08007548 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007560:	2302      	movs	r3, #2
 8007562:	e087      	b.n	8007674 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	041b      	lsls	r3, r3, #16
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a27      	ldr	r2, [pc, #156]	; (8007680 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d004      	beq.n	80075f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a25      	ldr	r2, [pc, #148]	; (8007684 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d106      	bne.n	8007600 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a1e      	ldr	r2, [pc, #120]	; (8007680 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d004      	beq.n	8007614 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a1d      	ldr	r2, [pc, #116]	; (8007684 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d126      	bne.n	8007662 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761e:	051b      	lsls	r3, r3, #20
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	4313      	orrs	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a0e      	ldr	r2, [pc, #56]	; (8007680 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d004      	beq.n	8007654 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a0d      	ldr	r2, [pc, #52]	; (8007684 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d106      	bne.n	8007662 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	40012c00 	.word	0x40012c00
 8007684:	40013400 	.word	0x40013400

08007688 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	2204      	movs	r2, #4
 800769c:	fa02 f303 	lsl.w	r3, r2, r3
 80076a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6a1a      	ldr	r2, [r3, #32]
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	43db      	mvns	r3, r3
 80076aa:	401a      	ands	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a1a      	ldr	r2, [r3, #32]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f003 031f 	and.w	r3, r3, #31
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	fa01 f303 	lsl.w	r3, r1, r3
 80076c0:	431a      	orrs	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	621a      	str	r2, [r3, #32]
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e042      	b.n	800776a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7fb fe70 	bl	80033dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2224      	movs	r2, #36	; 0x24
 8007700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 0201 	bic.w	r2, r2, #1
 8007712:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f82d 	bl	8007774 <UART_SetConfig>
 800771a:	4603      	mov	r3, r0
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e022      	b.n	800776a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 faed 	bl	8007d0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007740:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007750:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0201 	orr.w	r2, r2, #1
 8007760:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fb74 	bl	8007e50 <UART_CheckIdleState>
 8007768:	4603      	mov	r3, r0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007778:	b08c      	sub	sp, #48	; 0x30
 800777a:	af00      	add	r7, sp, #0
 800777c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	431a      	orrs	r2, r3
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	431a      	orrs	r2, r3
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	4313      	orrs	r3, r2
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	4bab      	ldr	r3, [pc, #684]	; (8007a50 <UART_SetConfig+0x2dc>)
 80077a4:	4013      	ands	r3, r2
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	6812      	ldr	r2, [r2, #0]
 80077aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077ac:	430b      	orrs	r3, r1
 80077ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4aa0      	ldr	r2, [pc, #640]	; (8007a54 <UART_SetConfig+0x2e0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d004      	beq.n	80077e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077dc:	4313      	orrs	r3, r2
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80077ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	6812      	ldr	r2, [r2, #0]
 80077f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077f4:	430b      	orrs	r3, r1
 80077f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	f023 010f 	bic.w	r1, r3, #15
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a91      	ldr	r2, [pc, #580]	; (8007a58 <UART_SetConfig+0x2e4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d125      	bne.n	8007864 <UART_SetConfig+0xf0>
 8007818:	4b90      	ldr	r3, [pc, #576]	; (8007a5c <UART_SetConfig+0x2e8>)
 800781a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781e:	f003 0303 	and.w	r3, r3, #3
 8007822:	2b03      	cmp	r3, #3
 8007824:	d81a      	bhi.n	800785c <UART_SetConfig+0xe8>
 8007826:	a201      	add	r2, pc, #4	; (adr r2, 800782c <UART_SetConfig+0xb8>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	0800783d 	.word	0x0800783d
 8007830:	0800784d 	.word	0x0800784d
 8007834:	08007845 	.word	0x08007845
 8007838:	08007855 	.word	0x08007855
 800783c:	2301      	movs	r3, #1
 800783e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007842:	e0d6      	b.n	80079f2 <UART_SetConfig+0x27e>
 8007844:	2302      	movs	r3, #2
 8007846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800784a:	e0d2      	b.n	80079f2 <UART_SetConfig+0x27e>
 800784c:	2304      	movs	r3, #4
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007852:	e0ce      	b.n	80079f2 <UART_SetConfig+0x27e>
 8007854:	2308      	movs	r3, #8
 8007856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800785a:	e0ca      	b.n	80079f2 <UART_SetConfig+0x27e>
 800785c:	2310      	movs	r3, #16
 800785e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007862:	e0c6      	b.n	80079f2 <UART_SetConfig+0x27e>
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a7d      	ldr	r2, [pc, #500]	; (8007a60 <UART_SetConfig+0x2ec>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d138      	bne.n	80078e0 <UART_SetConfig+0x16c>
 800786e:	4b7b      	ldr	r3, [pc, #492]	; (8007a5c <UART_SetConfig+0x2e8>)
 8007870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007874:	f003 030c 	and.w	r3, r3, #12
 8007878:	2b0c      	cmp	r3, #12
 800787a:	d82d      	bhi.n	80078d8 <UART_SetConfig+0x164>
 800787c:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <UART_SetConfig+0x110>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	080078b9 	.word	0x080078b9
 8007888:	080078d9 	.word	0x080078d9
 800788c:	080078d9 	.word	0x080078d9
 8007890:	080078d9 	.word	0x080078d9
 8007894:	080078c9 	.word	0x080078c9
 8007898:	080078d9 	.word	0x080078d9
 800789c:	080078d9 	.word	0x080078d9
 80078a0:	080078d9 	.word	0x080078d9
 80078a4:	080078c1 	.word	0x080078c1
 80078a8:	080078d9 	.word	0x080078d9
 80078ac:	080078d9 	.word	0x080078d9
 80078b0:	080078d9 	.word	0x080078d9
 80078b4:	080078d1 	.word	0x080078d1
 80078b8:	2300      	movs	r3, #0
 80078ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078be:	e098      	b.n	80079f2 <UART_SetConfig+0x27e>
 80078c0:	2302      	movs	r3, #2
 80078c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078c6:	e094      	b.n	80079f2 <UART_SetConfig+0x27e>
 80078c8:	2304      	movs	r3, #4
 80078ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078ce:	e090      	b.n	80079f2 <UART_SetConfig+0x27e>
 80078d0:	2308      	movs	r3, #8
 80078d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078d6:	e08c      	b.n	80079f2 <UART_SetConfig+0x27e>
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078de:	e088      	b.n	80079f2 <UART_SetConfig+0x27e>
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a5f      	ldr	r2, [pc, #380]	; (8007a64 <UART_SetConfig+0x2f0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d125      	bne.n	8007936 <UART_SetConfig+0x1c2>
 80078ea:	4b5c      	ldr	r3, [pc, #368]	; (8007a5c <UART_SetConfig+0x2e8>)
 80078ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078f4:	2b30      	cmp	r3, #48	; 0x30
 80078f6:	d016      	beq.n	8007926 <UART_SetConfig+0x1b2>
 80078f8:	2b30      	cmp	r3, #48	; 0x30
 80078fa:	d818      	bhi.n	800792e <UART_SetConfig+0x1ba>
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d00a      	beq.n	8007916 <UART_SetConfig+0x1a2>
 8007900:	2b20      	cmp	r3, #32
 8007902:	d814      	bhi.n	800792e <UART_SetConfig+0x1ba>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <UART_SetConfig+0x19a>
 8007908:	2b10      	cmp	r3, #16
 800790a:	d008      	beq.n	800791e <UART_SetConfig+0x1aa>
 800790c:	e00f      	b.n	800792e <UART_SetConfig+0x1ba>
 800790e:	2300      	movs	r3, #0
 8007910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007914:	e06d      	b.n	80079f2 <UART_SetConfig+0x27e>
 8007916:	2302      	movs	r3, #2
 8007918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800791c:	e069      	b.n	80079f2 <UART_SetConfig+0x27e>
 800791e:	2304      	movs	r3, #4
 8007920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007924:	e065      	b.n	80079f2 <UART_SetConfig+0x27e>
 8007926:	2308      	movs	r3, #8
 8007928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800792c:	e061      	b.n	80079f2 <UART_SetConfig+0x27e>
 800792e:	2310      	movs	r3, #16
 8007930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007934:	e05d      	b.n	80079f2 <UART_SetConfig+0x27e>
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a4b      	ldr	r2, [pc, #300]	; (8007a68 <UART_SetConfig+0x2f4>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d125      	bne.n	800798c <UART_SetConfig+0x218>
 8007940:	4b46      	ldr	r3, [pc, #280]	; (8007a5c <UART_SetConfig+0x2e8>)
 8007942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007946:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800794a:	2bc0      	cmp	r3, #192	; 0xc0
 800794c:	d016      	beq.n	800797c <UART_SetConfig+0x208>
 800794e:	2bc0      	cmp	r3, #192	; 0xc0
 8007950:	d818      	bhi.n	8007984 <UART_SetConfig+0x210>
 8007952:	2b80      	cmp	r3, #128	; 0x80
 8007954:	d00a      	beq.n	800796c <UART_SetConfig+0x1f8>
 8007956:	2b80      	cmp	r3, #128	; 0x80
 8007958:	d814      	bhi.n	8007984 <UART_SetConfig+0x210>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <UART_SetConfig+0x1f0>
 800795e:	2b40      	cmp	r3, #64	; 0x40
 8007960:	d008      	beq.n	8007974 <UART_SetConfig+0x200>
 8007962:	e00f      	b.n	8007984 <UART_SetConfig+0x210>
 8007964:	2300      	movs	r3, #0
 8007966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800796a:	e042      	b.n	80079f2 <UART_SetConfig+0x27e>
 800796c:	2302      	movs	r3, #2
 800796e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007972:	e03e      	b.n	80079f2 <UART_SetConfig+0x27e>
 8007974:	2304      	movs	r3, #4
 8007976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800797a:	e03a      	b.n	80079f2 <UART_SetConfig+0x27e>
 800797c:	2308      	movs	r3, #8
 800797e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007982:	e036      	b.n	80079f2 <UART_SetConfig+0x27e>
 8007984:	2310      	movs	r3, #16
 8007986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800798a:	e032      	b.n	80079f2 <UART_SetConfig+0x27e>
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a30      	ldr	r2, [pc, #192]	; (8007a54 <UART_SetConfig+0x2e0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d12a      	bne.n	80079ec <UART_SetConfig+0x278>
 8007996:	4b31      	ldr	r3, [pc, #196]	; (8007a5c <UART_SetConfig+0x2e8>)
 8007998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079a4:	d01a      	beq.n	80079dc <UART_SetConfig+0x268>
 80079a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079aa:	d81b      	bhi.n	80079e4 <UART_SetConfig+0x270>
 80079ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b0:	d00c      	beq.n	80079cc <UART_SetConfig+0x258>
 80079b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b6:	d815      	bhi.n	80079e4 <UART_SetConfig+0x270>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <UART_SetConfig+0x250>
 80079bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c0:	d008      	beq.n	80079d4 <UART_SetConfig+0x260>
 80079c2:	e00f      	b.n	80079e4 <UART_SetConfig+0x270>
 80079c4:	2300      	movs	r3, #0
 80079c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079ca:	e012      	b.n	80079f2 <UART_SetConfig+0x27e>
 80079cc:	2302      	movs	r3, #2
 80079ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079d2:	e00e      	b.n	80079f2 <UART_SetConfig+0x27e>
 80079d4:	2304      	movs	r3, #4
 80079d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079da:	e00a      	b.n	80079f2 <UART_SetConfig+0x27e>
 80079dc:	2308      	movs	r3, #8
 80079de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079e2:	e006      	b.n	80079f2 <UART_SetConfig+0x27e>
 80079e4:	2310      	movs	r3, #16
 80079e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079ea:	e002      	b.n	80079f2 <UART_SetConfig+0x27e>
 80079ec:	2310      	movs	r3, #16
 80079ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a17      	ldr	r2, [pc, #92]	; (8007a54 <UART_SetConfig+0x2e0>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	f040 80a8 	bne.w	8007b4e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d834      	bhi.n	8007a70 <UART_SetConfig+0x2fc>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <UART_SetConfig+0x298>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a31 	.word	0x08007a31
 8007a10:	08007a71 	.word	0x08007a71
 8007a14:	08007a39 	.word	0x08007a39
 8007a18:	08007a71 	.word	0x08007a71
 8007a1c:	08007a3f 	.word	0x08007a3f
 8007a20:	08007a71 	.word	0x08007a71
 8007a24:	08007a71 	.word	0x08007a71
 8007a28:	08007a71 	.word	0x08007a71
 8007a2c:	08007a47 	.word	0x08007a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a30:	f7fd fbf2 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 8007a34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a36:	e021      	b.n	8007a7c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a38:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <UART_SetConfig+0x2f8>)
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a3c:	e01e      	b.n	8007a7c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a3e:	f7fd fb7d 	bl	800513c <HAL_RCC_GetSysClockFreq>
 8007a42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a44:	e01a      	b.n	8007a7c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a4c:	e016      	b.n	8007a7c <UART_SetConfig+0x308>
 8007a4e:	bf00      	nop
 8007a50:	cfff69f3 	.word	0xcfff69f3
 8007a54:	40008000 	.word	0x40008000
 8007a58:	40013800 	.word	0x40013800
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	40004400 	.word	0x40004400
 8007a64:	40004800 	.word	0x40004800
 8007a68:	40004c00 	.word	0x40004c00
 8007a6c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 812a 	beq.w	8007cd8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	4a9e      	ldr	r2, [pc, #632]	; (8007d04 <UART_SetConfig+0x590>)
 8007a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	4413      	add	r3, r2
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d305      	bcc.n	8007ab4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d903      	bls.n	8007abc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007aba:	e10d      	b.n	8007cd8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	2200      	movs	r2, #0
 8007ac0:	60bb      	str	r3, [r7, #8]
 8007ac2:	60fa      	str	r2, [r7, #12]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	4a8e      	ldr	r2, [pc, #568]	; (8007d04 <UART_SetConfig+0x590>)
 8007aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	607a      	str	r2, [r7, #4]
 8007ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ade:	f7f9 f857 	bl	8000b90 <__aeabi_uldivmod>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f04f 0200 	mov.w	r2, #0
 8007aee:	f04f 0300 	mov.w	r3, #0
 8007af2:	020b      	lsls	r3, r1, #8
 8007af4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007af8:	0202      	lsls	r2, r0, #8
 8007afa:	6979      	ldr	r1, [r7, #20]
 8007afc:	6849      	ldr	r1, [r1, #4]
 8007afe:	0849      	lsrs	r1, r1, #1
 8007b00:	2000      	movs	r0, #0
 8007b02:	460c      	mov	r4, r1
 8007b04:	4605      	mov	r5, r0
 8007b06:	eb12 0804 	adds.w	r8, r2, r4
 8007b0a:	eb43 0905 	adc.w	r9, r3, r5
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	469a      	mov	sl, r3
 8007b16:	4693      	mov	fp, r2
 8007b18:	4652      	mov	r2, sl
 8007b1a:	465b      	mov	r3, fp
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	4649      	mov	r1, r9
 8007b20:	f7f9 f836 	bl	8000b90 <__aeabi_uldivmod>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4613      	mov	r3, r2
 8007b2a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b32:	d308      	bcc.n	8007b46 <UART_SetConfig+0x3d2>
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b3a:	d204      	bcs.n	8007b46 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6a3a      	ldr	r2, [r7, #32]
 8007b42:	60da      	str	r2, [r3, #12]
 8007b44:	e0c8      	b.n	8007cd8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b4c:	e0c4      	b.n	8007cd8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b56:	d167      	bne.n	8007c28 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007b58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d828      	bhi.n	8007bb2 <UART_SetConfig+0x43e>
 8007b60:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <UART_SetConfig+0x3f4>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007b8d 	.word	0x08007b8d
 8007b6c:	08007b95 	.word	0x08007b95
 8007b70:	08007b9d 	.word	0x08007b9d
 8007b74:	08007bb3 	.word	0x08007bb3
 8007b78:	08007ba3 	.word	0x08007ba3
 8007b7c:	08007bb3 	.word	0x08007bb3
 8007b80:	08007bb3 	.word	0x08007bb3
 8007b84:	08007bb3 	.word	0x08007bb3
 8007b88:	08007bab 	.word	0x08007bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b8c:	f7fd fb44 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 8007b90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b92:	e014      	b.n	8007bbe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b94:	f7fd fb56 	bl	8005244 <HAL_RCC_GetPCLK2Freq>
 8007b98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b9a:	e010      	b.n	8007bbe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b9c:	4b5a      	ldr	r3, [pc, #360]	; (8007d08 <UART_SetConfig+0x594>)
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ba0:	e00d      	b.n	8007bbe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ba2:	f7fd facb 	bl	800513c <HAL_RCC_GetSysClockFreq>
 8007ba6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ba8:	e009      	b.n	8007bbe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bb0:	e005      	b.n	8007bbe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007bbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8089 	beq.w	8007cd8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	4a4e      	ldr	r2, [pc, #312]	; (8007d04 <UART_SetConfig+0x590>)
 8007bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bd8:	005a      	lsls	r2, r3, #1
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	085b      	lsrs	r3, r3, #1
 8007be0:	441a      	add	r2, r3
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	2b0f      	cmp	r3, #15
 8007bf0:	d916      	bls.n	8007c20 <UART_SetConfig+0x4ac>
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf8:	d212      	bcs.n	8007c20 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	f023 030f 	bic.w	r3, r3, #15
 8007c02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	085b      	lsrs	r3, r3, #1
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	f003 0307 	and.w	r3, r3, #7
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	8bfb      	ldrh	r3, [r7, #30]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	8bfa      	ldrh	r2, [r7, #30]
 8007c1c:	60da      	str	r2, [r3, #12]
 8007c1e:	e05b      	b.n	8007cd8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c26:	e057      	b.n	8007cd8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d828      	bhi.n	8007c82 <UART_SetConfig+0x50e>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <UART_SetConfig+0x4c4>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c5d 	.word	0x08007c5d
 8007c3c:	08007c65 	.word	0x08007c65
 8007c40:	08007c6d 	.word	0x08007c6d
 8007c44:	08007c83 	.word	0x08007c83
 8007c48:	08007c73 	.word	0x08007c73
 8007c4c:	08007c83 	.word	0x08007c83
 8007c50:	08007c83 	.word	0x08007c83
 8007c54:	08007c83 	.word	0x08007c83
 8007c58:	08007c7b 	.word	0x08007c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c5c:	f7fd fadc 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 8007c60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c62:	e014      	b.n	8007c8e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c64:	f7fd faee 	bl	8005244 <HAL_RCC_GetPCLK2Freq>
 8007c68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c6a:	e010      	b.n	8007c8e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c6c:	4b26      	ldr	r3, [pc, #152]	; (8007d08 <UART_SetConfig+0x594>)
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c70:	e00d      	b.n	8007c8e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c72:	f7fd fa63 	bl	800513c <HAL_RCC_GetSysClockFreq>
 8007c76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c78:	e009      	b.n	8007c8e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c80:	e005      	b.n	8007c8e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007c8c:	bf00      	nop
    }

    if (pclk != 0U)
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d021      	beq.n	8007cd8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	4a1a      	ldr	r2, [pc, #104]	; (8007d04 <UART_SetConfig+0x590>)
 8007c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	441a      	add	r2, r3
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	2b0f      	cmp	r3, #15
 8007cbc:	d909      	bls.n	8007cd2 <UART_SetConfig+0x55e>
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc4:	d205      	bcs.n	8007cd2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60da      	str	r2, [r3, #12]
 8007cd0:	e002      	b.n	8007cd8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2200      	movs	r2, #0
 8007cec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007cf4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3730      	adds	r7, #48	; 0x30
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d02:	bf00      	nop
 8007d04:	08008b28 	.word	0x08008b28
 8007d08:	00f42400 	.word	0x00f42400

08007d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01a      	beq.n	8007e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e0a:	d10a      	bne.n	8007e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	605a      	str	r2, [r3, #4]
  }
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e60:	f7fb fc94 	bl	800378c <HAL_GetTick>
 8007e64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0308 	and.w	r3, r3, #8
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d10e      	bne.n	8007e92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f82f 	bl	8007ee6 <UART_WaitOnFlagUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e025      	b.n	8007ede <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d10e      	bne.n	8007ebe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f819 	bl	8007ee6 <UART_WaitOnFlagUntilTimeout>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e00f      	b.n	8007ede <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b09c      	sub	sp, #112	; 0x70
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	603b      	str	r3, [r7, #0]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef6:	e0a9      	b.n	800804c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efe:	f000 80a5 	beq.w	800804c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f02:	f7fb fc43 	bl	800378c <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d302      	bcc.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d140      	bne.n	8007f9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	663b      	str	r3, [r7, #96]	; 0x60
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e5      	bne.n	8007f4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e069      	b.n	800806e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d051      	beq.n	800804c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fb6:	d149      	bne.n	800804c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fc0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e6      	bne.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	613b      	str	r3, [r7, #16]
   return(result);
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f023 0301 	bic.w	r3, r3, #1
 800800a:	66bb      	str	r3, [r7, #104]	; 0x68
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3308      	adds	r3, #8
 8008012:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008014:	623a      	str	r2, [r7, #32]
 8008016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	69f9      	ldr	r1, [r7, #28]
 800801a:	6a3a      	ldr	r2, [r7, #32]
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	61bb      	str	r3, [r7, #24]
   return(result);
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e5      	bne.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2220      	movs	r2, #32
 800802c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2220      	movs	r2, #32
 8008034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e010      	b.n	800806e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69da      	ldr	r2, [r3, #28]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4013      	ands	r3, r2
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	429a      	cmp	r2, r3
 800805a:	bf0c      	ite	eq
 800805c:	2301      	moveq	r3, #1
 800805e:	2300      	movne	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	429a      	cmp	r2, r3
 8008068:	f43f af46 	beq.w	8007ef8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3770      	adds	r7, #112	; 0x70
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008076:	b480      	push	{r7}
 8008078:	b085      	sub	sp, #20
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_UARTEx_DisableFifoMode+0x16>
 8008088:	2302      	movs	r3, #2
 800808a:	e027      	b.n	80080dc <HAL_UARTEx_DisableFifoMode+0x66>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2224      	movs	r2, #36	; 0x24
 8008098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0201 	bic.w	r2, r2, #1
 80080b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e02d      	b.n	800815c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2224      	movs	r2, #36	; 0x24
 800810c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0201 	bic.w	r2, r2, #1
 8008126:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f84f 	bl	80081e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008178:	2302      	movs	r3, #2
 800817a:	e02d      	b.n	80081d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2224      	movs	r2, #36	; 0x24
 8008188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0201 	bic.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f811 	bl	80081e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2220      	movs	r2, #32
 80081ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d108      	bne.n	8008202 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008200:	e031      	b.n	8008266 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008202:	2308      	movs	r3, #8
 8008204:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008206:	2308      	movs	r3, #8
 8008208:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	0e5b      	lsrs	r3, r3, #25
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 0307 	and.w	r3, r3, #7
 8008218:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	0f5b      	lsrs	r3, r3, #29
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	7b3a      	ldrb	r2, [r7, #12]
 800822e:	4911      	ldr	r1, [pc, #68]	; (8008274 <UARTEx_SetNbDataToProcess+0x94>)
 8008230:	5c8a      	ldrb	r2, [r1, r2]
 8008232:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008236:	7b3a      	ldrb	r2, [r7, #12]
 8008238:	490f      	ldr	r1, [pc, #60]	; (8008278 <UARTEx_SetNbDataToProcess+0x98>)
 800823a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800823c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008240:	b29a      	uxth	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	7b7a      	ldrb	r2, [r7, #13]
 800824c:	4909      	ldr	r1, [pc, #36]	; (8008274 <UARTEx_SetNbDataToProcess+0x94>)
 800824e:	5c8a      	ldrb	r2, [r1, r2]
 8008250:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008254:	7b7a      	ldrb	r2, [r7, #13]
 8008256:	4908      	ldr	r1, [pc, #32]	; (8008278 <UARTEx_SetNbDataToProcess+0x98>)
 8008258:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800825a:	fb93 f3f2 	sdiv	r3, r3, r2
 800825e:	b29a      	uxth	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008266:	bf00      	nop
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	08008b40 	.word	0x08008b40
 8008278:	08008b48 	.word	0x08008b48

0800827c <__errno>:
 800827c:	4b01      	ldr	r3, [pc, #4]	; (8008284 <__errno+0x8>)
 800827e:	6818      	ldr	r0, [r3, #0]
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	2000003c 	.word	0x2000003c

08008288 <__libc_init_array>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	4d0d      	ldr	r5, [pc, #52]	; (80082c0 <__libc_init_array+0x38>)
 800828c:	4c0d      	ldr	r4, [pc, #52]	; (80082c4 <__libc_init_array+0x3c>)
 800828e:	1b64      	subs	r4, r4, r5
 8008290:	10a4      	asrs	r4, r4, #2
 8008292:	2600      	movs	r6, #0
 8008294:	42a6      	cmp	r6, r4
 8008296:	d109      	bne.n	80082ac <__libc_init_array+0x24>
 8008298:	4d0b      	ldr	r5, [pc, #44]	; (80082c8 <__libc_init_array+0x40>)
 800829a:	4c0c      	ldr	r4, [pc, #48]	; (80082cc <__libc_init_array+0x44>)
 800829c:	f000 fa24 	bl	80086e8 <_init>
 80082a0:	1b64      	subs	r4, r4, r5
 80082a2:	10a4      	asrs	r4, r4, #2
 80082a4:	2600      	movs	r6, #0
 80082a6:	42a6      	cmp	r6, r4
 80082a8:	d105      	bne.n	80082b6 <__libc_init_array+0x2e>
 80082aa:	bd70      	pop	{r4, r5, r6, pc}
 80082ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b0:	4798      	blx	r3
 80082b2:	3601      	adds	r6, #1
 80082b4:	e7ee      	b.n	8008294 <__libc_init_array+0xc>
 80082b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ba:	4798      	blx	r3
 80082bc:	3601      	adds	r6, #1
 80082be:	e7f2      	b.n	80082a6 <__libc_init_array+0x1e>
 80082c0:	08008b5c 	.word	0x08008b5c
 80082c4:	08008b5c 	.word	0x08008b5c
 80082c8:	08008b5c 	.word	0x08008b5c
 80082cc:	08008b60 	.word	0x08008b60

080082d0 <memset>:
 80082d0:	4402      	add	r2, r0
 80082d2:	4603      	mov	r3, r0
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d100      	bne.n	80082da <memset+0xa>
 80082d8:	4770      	bx	lr
 80082da:	f803 1b01 	strb.w	r1, [r3], #1
 80082de:	e7f9      	b.n	80082d4 <memset+0x4>

080082e0 <log>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	ed2d 8b02 	vpush	{d8}
 80082e6:	ec55 4b10 	vmov	r4, r5, d0
 80082ea:	f000 f839 	bl	8008360 <__ieee754_log>
 80082ee:	4622      	mov	r2, r4
 80082f0:	462b      	mov	r3, r5
 80082f2:	4620      	mov	r0, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	eeb0 8a40 	vmov.f32	s16, s0
 80082fa:	eef0 8a60 	vmov.f32	s17, s1
 80082fe:	f7f8 fbe1 	bl	8000ac4 <__aeabi_dcmpun>
 8008302:	b998      	cbnz	r0, 800832c <log+0x4c>
 8008304:	2200      	movs	r2, #0
 8008306:	2300      	movs	r3, #0
 8008308:	4620      	mov	r0, r4
 800830a:	4629      	mov	r1, r5
 800830c:	f7f8 fbd0 	bl	8000ab0 <__aeabi_dcmpgt>
 8008310:	b960      	cbnz	r0, 800832c <log+0x4c>
 8008312:	2200      	movs	r2, #0
 8008314:	2300      	movs	r3, #0
 8008316:	4620      	mov	r0, r4
 8008318:	4629      	mov	r1, r5
 800831a:	f7f8 fba1 	bl	8000a60 <__aeabi_dcmpeq>
 800831e:	b160      	cbz	r0, 800833a <log+0x5a>
 8008320:	f7ff ffac 	bl	800827c <__errno>
 8008324:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8008350 <log+0x70>
 8008328:	2322      	movs	r3, #34	; 0x22
 800832a:	6003      	str	r3, [r0, #0]
 800832c:	eeb0 0a48 	vmov.f32	s0, s16
 8008330:	eef0 0a68 	vmov.f32	s1, s17
 8008334:	ecbd 8b02 	vpop	{d8}
 8008338:	bd38      	pop	{r3, r4, r5, pc}
 800833a:	f7ff ff9f 	bl	800827c <__errno>
 800833e:	ecbd 8b02 	vpop	{d8}
 8008342:	2321      	movs	r3, #33	; 0x21
 8008344:	6003      	str	r3, [r0, #0]
 8008346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800834a:	4803      	ldr	r0, [pc, #12]	; (8008358 <log+0x78>)
 800834c:	f000 b9c4 	b.w	80086d8 <nan>
 8008350:	00000000 	.word	0x00000000
 8008354:	fff00000 	.word	0xfff00000
 8008358:	08008b50 	.word	0x08008b50
 800835c:	00000000 	.word	0x00000000

08008360 <__ieee754_log>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	ec51 0b10 	vmov	r0, r1, d0
 8008368:	ed2d 8b04 	vpush	{d8-d9}
 800836c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008370:	b083      	sub	sp, #12
 8008372:	460d      	mov	r5, r1
 8008374:	da29      	bge.n	80083ca <__ieee754_log+0x6a>
 8008376:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800837a:	4303      	orrs	r3, r0
 800837c:	ee10 2a10 	vmov	r2, s0
 8008380:	d10c      	bne.n	800839c <__ieee754_log+0x3c>
 8008382:	49cf      	ldr	r1, [pc, #828]	; (80086c0 <__ieee754_log+0x360>)
 8008384:	2200      	movs	r2, #0
 8008386:	2300      	movs	r3, #0
 8008388:	2000      	movs	r0, #0
 800838a:	f7f8 fa2b 	bl	80007e4 <__aeabi_ddiv>
 800838e:	ec41 0b10 	vmov	d0, r0, r1
 8008392:	b003      	add	sp, #12
 8008394:	ecbd 8b04 	vpop	{d8-d9}
 8008398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839c:	2900      	cmp	r1, #0
 800839e:	da05      	bge.n	80083ac <__ieee754_log+0x4c>
 80083a0:	460b      	mov	r3, r1
 80083a2:	f7f7 ff3d 	bl	8000220 <__aeabi_dsub>
 80083a6:	2200      	movs	r2, #0
 80083a8:	2300      	movs	r3, #0
 80083aa:	e7ee      	b.n	800838a <__ieee754_log+0x2a>
 80083ac:	4bc5      	ldr	r3, [pc, #788]	; (80086c4 <__ieee754_log+0x364>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	f7f8 f8ee 	bl	8000590 <__aeabi_dmul>
 80083b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80083b8:	460d      	mov	r5, r1
 80083ba:	4ac3      	ldr	r2, [pc, #780]	; (80086c8 <__ieee754_log+0x368>)
 80083bc:	4295      	cmp	r5, r2
 80083be:	dd06      	ble.n	80083ce <__ieee754_log+0x6e>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	f7f7 ff2e 	bl	8000224 <__adddf3>
 80083c8:	e7e1      	b.n	800838e <__ieee754_log+0x2e>
 80083ca:	2300      	movs	r3, #0
 80083cc:	e7f5      	b.n	80083ba <__ieee754_log+0x5a>
 80083ce:	152c      	asrs	r4, r5, #20
 80083d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80083d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80083d8:	441c      	add	r4, r3
 80083da:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80083de:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80083e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083e6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80083ea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80083ee:	ea42 0105 	orr.w	r1, r2, r5
 80083f2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80083f6:	2200      	movs	r2, #0
 80083f8:	4bb4      	ldr	r3, [pc, #720]	; (80086cc <__ieee754_log+0x36c>)
 80083fa:	f7f7 ff11 	bl	8000220 <__aeabi_dsub>
 80083fe:	1cab      	adds	r3, r5, #2
 8008400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008404:	2b02      	cmp	r3, #2
 8008406:	4682      	mov	sl, r0
 8008408:	468b      	mov	fp, r1
 800840a:	f04f 0200 	mov.w	r2, #0
 800840e:	dc53      	bgt.n	80084b8 <__ieee754_log+0x158>
 8008410:	2300      	movs	r3, #0
 8008412:	f7f8 fb25 	bl	8000a60 <__aeabi_dcmpeq>
 8008416:	b1d0      	cbz	r0, 800844e <__ieee754_log+0xee>
 8008418:	2c00      	cmp	r4, #0
 800841a:	f000 8122 	beq.w	8008662 <__ieee754_log+0x302>
 800841e:	4620      	mov	r0, r4
 8008420:	f7f8 f84c 	bl	80004bc <__aeabi_i2d>
 8008424:	a390      	add	r3, pc, #576	; (adr r3, 8008668 <__ieee754_log+0x308>)
 8008426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842a:	4606      	mov	r6, r0
 800842c:	460f      	mov	r7, r1
 800842e:	f7f8 f8af 	bl	8000590 <__aeabi_dmul>
 8008432:	a38f      	add	r3, pc, #572	; (adr r3, 8008670 <__ieee754_log+0x310>)
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	4604      	mov	r4, r0
 800843a:	460d      	mov	r5, r1
 800843c:	4630      	mov	r0, r6
 800843e:	4639      	mov	r1, r7
 8008440:	f7f8 f8a6 	bl	8000590 <__aeabi_dmul>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4620      	mov	r0, r4
 800844a:	4629      	mov	r1, r5
 800844c:	e7ba      	b.n	80083c4 <__ieee754_log+0x64>
 800844e:	a38a      	add	r3, pc, #552	; (adr r3, 8008678 <__ieee754_log+0x318>)
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	4650      	mov	r0, sl
 8008456:	4659      	mov	r1, fp
 8008458:	f7f8 f89a 	bl	8000590 <__aeabi_dmul>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	2000      	movs	r0, #0
 8008462:	499b      	ldr	r1, [pc, #620]	; (80086d0 <__ieee754_log+0x370>)
 8008464:	f7f7 fedc 	bl	8000220 <__aeabi_dsub>
 8008468:	4652      	mov	r2, sl
 800846a:	4606      	mov	r6, r0
 800846c:	460f      	mov	r7, r1
 800846e:	465b      	mov	r3, fp
 8008470:	4650      	mov	r0, sl
 8008472:	4659      	mov	r1, fp
 8008474:	f7f8 f88c 	bl	8000590 <__aeabi_dmul>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f8 f886 	bl	8000590 <__aeabi_dmul>
 8008484:	4606      	mov	r6, r0
 8008486:	460f      	mov	r7, r1
 8008488:	b914      	cbnz	r4, 8008490 <__ieee754_log+0x130>
 800848a:	4632      	mov	r2, r6
 800848c:	463b      	mov	r3, r7
 800848e:	e0a2      	b.n	80085d6 <__ieee754_log+0x276>
 8008490:	4620      	mov	r0, r4
 8008492:	f7f8 f813 	bl	80004bc <__aeabi_i2d>
 8008496:	a374      	add	r3, pc, #464	; (adr r3, 8008668 <__ieee754_log+0x308>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	4680      	mov	r8, r0
 800849e:	4689      	mov	r9, r1
 80084a0:	f7f8 f876 	bl	8000590 <__aeabi_dmul>
 80084a4:	a372      	add	r3, pc, #456	; (adr r3, 8008670 <__ieee754_log+0x310>)
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	4604      	mov	r4, r0
 80084ac:	460d      	mov	r5, r1
 80084ae:	4640      	mov	r0, r8
 80084b0:	4649      	mov	r1, r9
 80084b2:	f7f8 f86d 	bl	8000590 <__aeabi_dmul>
 80084b6:	e0a7      	b.n	8008608 <__ieee754_log+0x2a8>
 80084b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084bc:	f7f7 feb2 	bl	8000224 <__adddf3>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4650      	mov	r0, sl
 80084c6:	4659      	mov	r1, fp
 80084c8:	f7f8 f98c 	bl	80007e4 <__aeabi_ddiv>
 80084cc:	ec41 0b18 	vmov	d8, r0, r1
 80084d0:	4620      	mov	r0, r4
 80084d2:	f7f7 fff3 	bl	80004bc <__aeabi_i2d>
 80084d6:	ec53 2b18 	vmov	r2, r3, d8
 80084da:	ec41 0b19 	vmov	d9, r0, r1
 80084de:	ec51 0b18 	vmov	r0, r1, d8
 80084e2:	f7f8 f855 	bl	8000590 <__aeabi_dmul>
 80084e6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80084ea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4680      	mov	r8, r0
 80084f6:	4689      	mov	r9, r1
 80084f8:	f7f8 f84a 	bl	8000590 <__aeabi_dmul>
 80084fc:	a360      	add	r3, pc, #384	; (adr r3, 8008680 <__ieee754_log+0x320>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	4606      	mov	r6, r0
 8008504:	460f      	mov	r7, r1
 8008506:	f7f8 f843 	bl	8000590 <__aeabi_dmul>
 800850a:	a35f      	add	r3, pc, #380	; (adr r3, 8008688 <__ieee754_log+0x328>)
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	f7f7 fe88 	bl	8000224 <__adddf3>
 8008514:	4632      	mov	r2, r6
 8008516:	463b      	mov	r3, r7
 8008518:	f7f8 f83a 	bl	8000590 <__aeabi_dmul>
 800851c:	a35c      	add	r3, pc, #368	; (adr r3, 8008690 <__ieee754_log+0x330>)
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	f7f7 fe7f 	bl	8000224 <__adddf3>
 8008526:	4632      	mov	r2, r6
 8008528:	463b      	mov	r3, r7
 800852a:	f7f8 f831 	bl	8000590 <__aeabi_dmul>
 800852e:	a35a      	add	r3, pc, #360	; (adr r3, 8008698 <__ieee754_log+0x338>)
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f7f7 fe76 	bl	8000224 <__adddf3>
 8008538:	4642      	mov	r2, r8
 800853a:	464b      	mov	r3, r9
 800853c:	f7f8 f828 	bl	8000590 <__aeabi_dmul>
 8008540:	a357      	add	r3, pc, #348	; (adr r3, 80086a0 <__ieee754_log+0x340>)
 8008542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008546:	4680      	mov	r8, r0
 8008548:	4689      	mov	r9, r1
 800854a:	4630      	mov	r0, r6
 800854c:	4639      	mov	r1, r7
 800854e:	f7f8 f81f 	bl	8000590 <__aeabi_dmul>
 8008552:	a355      	add	r3, pc, #340	; (adr r3, 80086a8 <__ieee754_log+0x348>)
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	f7f7 fe64 	bl	8000224 <__adddf3>
 800855c:	4632      	mov	r2, r6
 800855e:	463b      	mov	r3, r7
 8008560:	f7f8 f816 	bl	8000590 <__aeabi_dmul>
 8008564:	a352      	add	r3, pc, #328	; (adr r3, 80086b0 <__ieee754_log+0x350>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f7f7 fe5b 	bl	8000224 <__adddf3>
 800856e:	4632      	mov	r2, r6
 8008570:	463b      	mov	r3, r7
 8008572:	f7f8 f80d 	bl	8000590 <__aeabi_dmul>
 8008576:	460b      	mov	r3, r1
 8008578:	4602      	mov	r2, r0
 800857a:	4649      	mov	r1, r9
 800857c:	4640      	mov	r0, r8
 800857e:	f7f7 fe51 	bl	8000224 <__adddf3>
 8008582:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008586:	9b01      	ldr	r3, [sp, #4]
 8008588:	3551      	adds	r5, #81	; 0x51
 800858a:	431d      	orrs	r5, r3
 800858c:	2d00      	cmp	r5, #0
 800858e:	4680      	mov	r8, r0
 8008590:	4689      	mov	r9, r1
 8008592:	dd48      	ble.n	8008626 <__ieee754_log+0x2c6>
 8008594:	4b4e      	ldr	r3, [pc, #312]	; (80086d0 <__ieee754_log+0x370>)
 8008596:	2200      	movs	r2, #0
 8008598:	4650      	mov	r0, sl
 800859a:	4659      	mov	r1, fp
 800859c:	f7f7 fff8 	bl	8000590 <__aeabi_dmul>
 80085a0:	4652      	mov	r2, sl
 80085a2:	465b      	mov	r3, fp
 80085a4:	f7f7 fff4 	bl	8000590 <__aeabi_dmul>
 80085a8:	4602      	mov	r2, r0
 80085aa:	460b      	mov	r3, r1
 80085ac:	4606      	mov	r6, r0
 80085ae:	460f      	mov	r7, r1
 80085b0:	4640      	mov	r0, r8
 80085b2:	4649      	mov	r1, r9
 80085b4:	f7f7 fe36 	bl	8000224 <__adddf3>
 80085b8:	ec53 2b18 	vmov	r2, r3, d8
 80085bc:	f7f7 ffe8 	bl	8000590 <__aeabi_dmul>
 80085c0:	4680      	mov	r8, r0
 80085c2:	4689      	mov	r9, r1
 80085c4:	b964      	cbnz	r4, 80085e0 <__ieee754_log+0x280>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4630      	mov	r0, r6
 80085cc:	4639      	mov	r1, r7
 80085ce:	f7f7 fe27 	bl	8000220 <__aeabi_dsub>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	4650      	mov	r0, sl
 80085d8:	4659      	mov	r1, fp
 80085da:	f7f7 fe21 	bl	8000220 <__aeabi_dsub>
 80085de:	e6d6      	b.n	800838e <__ieee754_log+0x2e>
 80085e0:	a321      	add	r3, pc, #132	; (adr r3, 8008668 <__ieee754_log+0x308>)
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	ec51 0b19 	vmov	r0, r1, d9
 80085ea:	f7f7 ffd1 	bl	8000590 <__aeabi_dmul>
 80085ee:	a320      	add	r3, pc, #128	; (adr r3, 8008670 <__ieee754_log+0x310>)
 80085f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f4:	4604      	mov	r4, r0
 80085f6:	460d      	mov	r5, r1
 80085f8:	ec51 0b19 	vmov	r0, r1, d9
 80085fc:	f7f7 ffc8 	bl	8000590 <__aeabi_dmul>
 8008600:	4642      	mov	r2, r8
 8008602:	464b      	mov	r3, r9
 8008604:	f7f7 fe0e 	bl	8000224 <__adddf3>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4630      	mov	r0, r6
 800860e:	4639      	mov	r1, r7
 8008610:	f7f7 fe06 	bl	8000220 <__aeabi_dsub>
 8008614:	4652      	mov	r2, sl
 8008616:	465b      	mov	r3, fp
 8008618:	f7f7 fe02 	bl	8000220 <__aeabi_dsub>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4620      	mov	r0, r4
 8008622:	4629      	mov	r1, r5
 8008624:	e7d9      	b.n	80085da <__ieee754_log+0x27a>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4650      	mov	r0, sl
 800862c:	4659      	mov	r1, fp
 800862e:	f7f7 fdf7 	bl	8000220 <__aeabi_dsub>
 8008632:	ec53 2b18 	vmov	r2, r3, d8
 8008636:	f7f7 ffab 	bl	8000590 <__aeabi_dmul>
 800863a:	4606      	mov	r6, r0
 800863c:	460f      	mov	r7, r1
 800863e:	2c00      	cmp	r4, #0
 8008640:	f43f af23 	beq.w	800848a <__ieee754_log+0x12a>
 8008644:	a308      	add	r3, pc, #32	; (adr r3, 8008668 <__ieee754_log+0x308>)
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	ec51 0b19 	vmov	r0, r1, d9
 800864e:	f7f7 ff9f 	bl	8000590 <__aeabi_dmul>
 8008652:	a307      	add	r3, pc, #28	; (adr r3, 8008670 <__ieee754_log+0x310>)
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	4604      	mov	r4, r0
 800865a:	460d      	mov	r5, r1
 800865c:	ec51 0b19 	vmov	r0, r1, d9
 8008660:	e727      	b.n	80084b2 <__ieee754_log+0x152>
 8008662:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80086b8 <__ieee754_log+0x358>
 8008666:	e694      	b.n	8008392 <__ieee754_log+0x32>
 8008668:	fee00000 	.word	0xfee00000
 800866c:	3fe62e42 	.word	0x3fe62e42
 8008670:	35793c76 	.word	0x35793c76
 8008674:	3dea39ef 	.word	0x3dea39ef
 8008678:	55555555 	.word	0x55555555
 800867c:	3fd55555 	.word	0x3fd55555
 8008680:	df3e5244 	.word	0xdf3e5244
 8008684:	3fc2f112 	.word	0x3fc2f112
 8008688:	96cb03de 	.word	0x96cb03de
 800868c:	3fc74664 	.word	0x3fc74664
 8008690:	94229359 	.word	0x94229359
 8008694:	3fd24924 	.word	0x3fd24924
 8008698:	55555593 	.word	0x55555593
 800869c:	3fe55555 	.word	0x3fe55555
 80086a0:	d078c69f 	.word	0xd078c69f
 80086a4:	3fc39a09 	.word	0x3fc39a09
 80086a8:	1d8e78af 	.word	0x1d8e78af
 80086ac:	3fcc71c5 	.word	0x3fcc71c5
 80086b0:	9997fa04 	.word	0x9997fa04
 80086b4:	3fd99999 	.word	0x3fd99999
	...
 80086c0:	c3500000 	.word	0xc3500000
 80086c4:	43500000 	.word	0x43500000
 80086c8:	7fefffff 	.word	0x7fefffff
 80086cc:	3ff00000 	.word	0x3ff00000
 80086d0:	3fe00000 	.word	0x3fe00000
 80086d4:	00000000 	.word	0x00000000

080086d8 <nan>:
 80086d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80086e0 <nan+0x8>
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	00000000 	.word	0x00000000
 80086e4:	7ff80000 	.word	0x7ff80000

080086e8 <_init>:
 80086e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ea:	bf00      	nop
 80086ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ee:	bc08      	pop	{r3}
 80086f0:	469e      	mov	lr, r3
 80086f2:	4770      	bx	lr

080086f4 <_fini>:
 80086f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f6:	bf00      	nop
 80086f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fa:	bc08      	pop	{r3}
 80086fc:	469e      	mov	lr, r3
 80086fe:	4770      	bx	lr
