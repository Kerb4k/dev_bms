
dev_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f48  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08008120  08008120  00018120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008574  08008574  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800857c  0800857c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800857c  0800857c  0001857c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  200000a8  0800862c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  0800862c  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a034  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003090  00000000  00000000  0003a10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0003d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  0003e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207e7  00000000  00000000  0003fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019916  00000000  00000000  0006047f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cee81  00000000  00000000  00079d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148c16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006180  00000000  00000000  00148c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a8 	.word	0x200000a8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008108 	.word	0x08008108

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000ac 	.word	0x200000ac
 8000214:	08008108 	.word	0x08008108

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <WakeIdle>:
#define T_WAKE_MAX		400
#define T_REFUP_MAX		4400
#define T_CYCLE_FAST_MAX	1185	// Measure 12 Cells

void WakeIdle(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000e98:	20ff      	movs	r0, #255	; 0xff
 8000e9a:	f001 f9df 	bl	800225c <spi_write_read_byte>
	delay_u(IC_NUM * T_READY);
 8000e9e:	2050      	movs	r0, #80	; 0x50
 8000ea0:	f001 f9a8 	bl	80021f4 <delay_u>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <WakeUp>:

void WakeUp(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000eac:	20ff      	movs	r0, #255	; 0xff
 8000eae:	f001 f9d5 	bl	800225c <spi_write_read_byte>
	delay_u(IC_NUM * T_WAKE_MAX);
 8000eb2:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 8000eb6:	f001 f99d 	bl	80021f4 <delay_u>

#if ((IC_NUM * T_WAKE_MAX) >= T_IDLE_MIN)
	spi_write_read_byte(0xFF);
	delay_u(IC_NUM * T_READY);
#endif
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <initialize>:
uint8_t ADCV[2]; //!< Cell Voltage conversion command
uint8_t ADAX[2]; //!< GPIO conversion command
uint8_t ADSTAT[2]; //!< STAT conversion command

void initialize(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af02      	add	r7, sp, #8
	init(MD_NORMAL,DCP_DISABLED,CELL_CH_ALL,AUX_CH_ALL,STS_CH_ALL);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f000 f804 	bl	8000edc <init>
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <init>:
				  uint8_t DCP,	//Discharge Permit
				  uint8_t CH,	//Cell Channels to be measured
				  uint8_t CHG,	//GPIO Channels to be measured
				  uint8_t CHST	//Status Channels to be measured
				  )
{
 8000edc:	b490      	push	{r4, r7}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4623      	mov	r3, r4
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71bb      	strb	r3, [r7, #6]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	717b      	strb	r3, [r7, #5]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	713b      	strb	r3, [r7, #4]
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	105b      	asrs	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
	ADCV[0] = md_bits + 0x02;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	3302      	adds	r3, #2
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <init+0xb8>)
 8000f0e:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	01db      	lsls	r3, r3, #7
 8000f14:	73fb      	strb	r3, [r7, #15]
	ADCV[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	797b      	ldrb	r3, [r7, #5]
 8000f24:	4413      	add	r3, r2
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	3360      	adds	r3, #96	; 0x60
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <init+0xb8>)
 8000f2e:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	105b      	asrs	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
	ADAX[0] = md_bits + 0x04;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	3304      	adds	r3, #4
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <init+0xbc>)
 8000f44:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	01db      	lsls	r3, r3, #7
 8000f4a:	73fb      	strb	r3, [r7, #15]
	ADAX[1] = md_bits + 0x60 + CHG;
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3360      	adds	r3, #96	; 0x60
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <init+0xbc>)
 8000f5a:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	105b      	asrs	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
	ADSTAT[0] = md_bits + 0x04;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <init+0xc0>)
 8000f70:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	01db      	lsls	r3, r3, #7
 8000f76:	73fb      	strb	r3, [r7, #15]
	ADSTAT[1] = md_bits + 0x68 + CHST;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	7e3b      	ldrb	r3, [r7, #24]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	3368      	adds	r3, #104	; 0x68
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <init+0xc0>)
 8000f86:	705a      	strb	r2, [r3, #1]
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc90      	pop	{r4, r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200000c4 	.word	0x200000c4
 8000f98:	200000c8 	.word	0x200000c8
 8000f9c:	200000cc 	.word	0x200000cc

08000fa0 <pec15_calc>:

uint16_t pec15_calc(uint8_t len,	//Number of bytes that will be used to calculate a PEC
                    uint8_t *data	//Array of data that will be used to calculate  a PEC
                   )
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder, addr;

  remainder = 16;					//initialize the PEC
 8000fac:	2310      	movs	r3, #16
 8000fae:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	737b      	strb	r3, [r7, #13]
 8000fb4:	e018      	b.n	8000fe8 <pec15_calc+0x48>
  {
    addr = ((remainder>>7)^data[i])&0xff;	//calculate PEC table address
 8000fb6:	89fb      	ldrh	r3, [r7, #14]
 8000fb8:	09db      	lsrs	r3, r3, #7
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	7b7b      	ldrb	r3, [r7, #13]
 8000fbe:	6839      	ldr	r1, [r7, #0]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	817b      	strh	r3, [r7, #10]
    remainder = (remainder<<8)^crc15Table[addr];
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	897b      	ldrh	r3, [r7, #10]
 8000fd6:	490b      	ldr	r1, [pc, #44]	; (8001004 <pec15_calc+0x64>)
 8000fd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	4053      	eors	r3, r2
 8000fe0:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	737b      	strb	r3, [r7, #13]
 8000fe8:	7b7a      	ldrb	r2, [r7, #13]
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d3e2      	bcc.n	8000fb6 <pec15_calc+0x16>
  }
  return(remainder*2);	//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	b29b      	uxth	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	08008120 	.word	0x08008120

08001008 <wrcfg>:

void wrcfg(uint8_t total_ic,
				   uint8_t config[][6]
				  )
{
 8001008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100c:	b089      	sub	sp, #36	; 0x24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	6039      	str	r1, [r7, #0]
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	466b      	mov	r3, sp
 8001018:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 800101a:	2306      	movs	r3, #6
 800101c:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	3304      	adds	r3, #4
 8001026:	76fb      	strb	r3, [r7, #27]

#if DYNAMIC_MEM
	uint8_t *cmd;
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
#else
	uint8_t cmd[CMD_LEN];
 8001028:	7efb      	ldrb	r3, [r7, #27]
 800102a:	3b01      	subs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	7efb      	ldrb	r3, [r7, #27]
 8001030:	2200      	movs	r2, #0
 8001032:	4698      	mov	r8, r3
 8001034:	4691      	mov	r9, r2
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800104a:	7efb      	ldrb	r3, [r7, #27]
 800104c:	2200      	movs	r2, #0
 800104e:	461c      	mov	r4, r3
 8001050:	4615      	mov	r5, r2
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	00eb      	lsls	r3, r5, #3
 800105c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001060:	00e2      	lsls	r2, r4, #3
 8001062:	7efb      	ldrb	r3, [r7, #27]
 8001064:	3307      	adds	r3, #7
 8001066:	08db      	lsrs	r3, r3, #3
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	ebad 0d03 	sub.w	sp, sp, r3
 800106e:	466b      	mov	r3, sp
 8001070:	3300      	adds	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	2201      	movs	r2, #1
 800107e:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x3d;
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	223d      	movs	r2, #61	; 0x3d
 8001084:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6e;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	226e      	movs	r2, #110	; 0x6e
 800108a:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 800108c:	2304      	movs	r3, #4
 800108e:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	77bb      	strb	r3, [r7, #30]
 8001094:	e03c      	b.n	8001110 <wrcfg+0x108>
	{
		/* the last IC on the stack. The first configuration written is */
		/* received by the last IC in the daisy chain */

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 8001096:	2300      	movs	r3, #0
 8001098:	77fb      	strb	r3, [r7, #31]
 800109a:	e012      	b.n	80010c2 <wrcfg+0xba>
		{
			/* current_byte is the byte counter */

			cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 800109c:	7fba      	ldrb	r2, [r7, #30]
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	3b06      	subs	r3, #6
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	18d1      	adds	r1, r2, r3
 80010ac:	7ffa      	ldrb	r2, [r7, #31]
 80010ae:	7f7b      	ldrb	r3, [r7, #29]
 80010b0:	5c89      	ldrb	r1, [r1, r2]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80010b6:	7f7b      	ldrb	r3, [r7, #29]
 80010b8:	3301      	adds	r3, #1
 80010ba:	777b      	strb	r3, [r7, #29]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 80010bc:	7ffb      	ldrb	r3, [r7, #31]
 80010be:	3301      	adds	r3, #1
 80010c0:	77fb      	strb	r3, [r7, #31]
 80010c2:	7ffa      	ldrb	r2, [r7, #31]
 80010c4:	7f3b      	ldrb	r3, [r7, #28]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3e8      	bcc.n	800109c <wrcfg+0x94>
		}
		cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 80010ca:	7fba      	ldrb	r2, [r7, #30]
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	3b06      	subs	r3, #6
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	461a      	mov	r2, r3
 80010dc:	7f3b      	ldrb	r3, [r7, #28]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <pec15_calc>
 80010e6:	4603      	mov	r3, r0
 80010e8:	81fb      	strh	r3, [r7, #14]
		cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	7f7b      	ldrb	r3, [r7, #29]
 80010f2:	b2d1      	uxtb	r1, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	54d1      	strb	r1, [r2, r3]
		cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 80010f8:	7f7b      	ldrb	r3, [r7, #29]
 80010fa:	3301      	adds	r3, #1
 80010fc:	89fa      	ldrh	r2, [r7, #14]
 80010fe:	b2d1      	uxtb	r1, r2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 8001104:	7f7b      	ldrb	r3, [r7, #29]
 8001106:	3302      	adds	r3, #2
 8001108:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 800110a:	7fbb      	ldrb	r3, [r7, #30]
 800110c:	3b01      	subs	r3, #1
 800110e:	77bb      	strb	r3, [r7, #30]
 8001110:	7fbb      	ldrb	r3, [r7, #30]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1bf      	bne.n	8001096 <wrcfg+0x8e>
	}

	uint8_t rx_data;
	WakeIdle();
 8001116:	f7ff febd 	bl	8000e94 <WakeIdle>
	//spi_write_array(CMD_LEN, cmd); //This function causes bad stuff!
	spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 800111a:	7ef8      	ldrb	r0, [r7, #27]
 800111c:	f107 030d 	add.w	r3, r7, #13
 8001120:	2200      	movs	r2, #0
 8001122:	6939      	ldr	r1, [r7, #16]
 8001124:	f001 f8de 	bl	80022e4 <spi_write_then_read_array_ltc>
 8001128:	46b5      	mov	sp, r6

#if DYNAMIC_MEM
	free(cmd);
#endif
}
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001134 <rdcfg>:

int8_t rdcfg(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 8001134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001138:	b089      	sub	sp, #36	; 0x24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	6039      	str	r1, [r7, #0]
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	466b      	mov	r3, sp
 8001144:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 8001146:	2308      	movs	r3, #8
 8001148:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	777b      	strb	r3, [r7, #29]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 800114e:	230c      	movs	r3, #12
 8001150:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 8001152:	7efb      	ldrb	r3, [r7, #27]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	3b01      	subs	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	7efb      	ldrb	r3, [r7, #27]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	461a      	mov	r2, r3
 8001160:	2300      	movs	r3, #0
 8001162:	4690      	mov	r8, r2
 8001164:	4699      	mov	r9, r3
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800117a:	7efb      	ldrb	r3, [r7, #27]
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	461a      	mov	r2, r3
 8001180:	2300      	movs	r3, #0
 8001182:	4614      	mov	r4, r2
 8001184:	461d      	mov	r5, r3
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	00eb      	lsls	r3, r5, #3
 8001190:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001194:	00e2      	lsls	r2, r4, #3
 8001196:	7efb      	ldrb	r3, [r7, #27]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	3307      	adds	r3, #7
 800119c:	08db      	lsrs	r3, r3, #3
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	ebad 0d03 	sub.w	sp, sp, r3
 80011a4:	466b      	mov	r3, sp
 80011a6:	3300      	adds	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 80011aa:	2300      	movs	r3, #0
 80011ac:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x02;
 80011ae:	2302      	movs	r3, #2
 80011b0:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x2b;
 80011b2:	232b      	movs	r3, #43	; 0x2b
 80011b4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = 0x0a;
 80011b6:	230a      	movs	r3, #10
 80011b8:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 80011ba:	f7ff fe6b 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 80011be:	7f3b      	ldrb	r3, [r7, #28]
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	fb03 f202 	mul.w	r2, r3, r2
 80011c6:	f107 0108 	add.w	r1, r7, #8
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	2004      	movs	r0, #4
 80011ce:	f001 f889 	bl	80022e4 <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	77bb      	strb	r3, [r7, #30]
 80011d6:	e03a      	b.n	800124e <rdcfg+0x11a>
	{
		// executes for each LTC6804 in the daisy chain and packs the data
		// into the r_config array as well as check the received Config data
		// for any bit errors

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80011d8:	2300      	movs	r3, #0
 80011da:	77fb      	strb	r3, [r7, #31]
 80011dc:	e010      	b.n	8001200 <rdcfg+0xcc>
		{
			r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 80011de:	7ffa      	ldrb	r2, [r7, #31]
 80011e0:	7fbb      	ldrb	r3, [r7, #30]
 80011e2:	7f39      	ldrb	r1, [r7, #28]
 80011e4:	fb01 f303 	mul.w	r3, r1, r3
 80011e8:	18d1      	adds	r1, r2, r3
 80011ea:	7fbb      	ldrb	r3, [r7, #30]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	441a      	add	r2, r3
 80011f2:	7ffb      	ldrb	r3, [r7, #31]
 80011f4:	6938      	ldr	r0, [r7, #16]
 80011f6:	5c41      	ldrb	r1, [r0, r1]
 80011f8:	54d1      	strb	r1, [r2, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80011fa:	7ffb      	ldrb	r3, [r7, #31]
 80011fc:	3301      	adds	r3, #1
 80011fe:	77fb      	strb	r3, [r7, #31]
 8001200:	7ffa      	ldrb	r2, [r7, #31]
 8001202:	7f3b      	ldrb	r3, [r7, #28]
 8001204:	429a      	cmp	r2, r3
 8001206:	d3ea      	bcc.n	80011de <rdcfg+0xaa>
		}

		received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8001208:	7fbb      	ldrb	r3, [r7, #30]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	799b      	ldrb	r3, [r3, #6]
 8001212:	b29b      	uxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b29a      	uxth	r2, r3
 8001218:	7fbb      	ldrb	r3, [r7, #30]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	440b      	add	r3, r1
 8001220:	79db      	ldrb	r3, [r3, #7]
 8001222:	b29b      	uxth	r3, r3
 8001224:	4413      	add	r3, r2
 8001226:	81fb      	strh	r3, [r7, #14]
		data_pec = pec15_calc(6, &r_config[current_ic][0]);
 8001228:	7fbb      	ldrb	r3, [r7, #30]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4619      	mov	r1, r3
 8001232:	2006      	movs	r0, #6
 8001234:	f7ff feb4 	bl	8000fa0 <pec15_calc>
 8001238:	4603      	mov	r3, r0
 800123a:	81bb      	strh	r3, [r7, #12]
		if (received_pec != data_pec)
 800123c:	89fa      	ldrh	r2, [r7, #14]
 800123e:	89bb      	ldrh	r3, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <rdcfg+0x114>
		{
			pec_error = -1;
 8001244:	23ff      	movs	r3, #255	; 0xff
 8001246:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 8001248:	7fbb      	ldrb	r3, [r7, #30]
 800124a:	3301      	adds	r3, #1
 800124c:	77bb      	strb	r3, [r7, #30]
 800124e:	7fba      	ldrb	r2, [r7, #30]
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	429a      	cmp	r2, r3
 8001254:	d3c0      	bcc.n	80011d8 <rdcfg+0xa4>
	}

#if DYNAMIC_MEM
	free(rx_data);
#endif
	return(pec_error);
 8001256:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800125a:	46b5      	mov	sp, r6
}
 800125c:	4618      	mov	r0, r3
 800125e:	3724      	adds	r7, #36	; 0x24
 8001260:	46bd      	mov	sp, r7
 8001262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001266 <wrcfgb>:

void wrcfgb(uint8_t total_ic,
				   uint8_t config[][6]
				  ){
 8001266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	466b      	mov	r3, sp
 8001276:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 8001278:	2306      	movs	r3, #6
 800127a:	773b      	strb	r3, [r7, #28]
		const uint8_t CMD_LEN = 4 + (8 * total_ic);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3304      	adds	r3, #4
 8001284:	76fb      	strb	r3, [r7, #27]

	#if DYNAMIC_MEM
		uint8_t *cmd;
		cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
	#else
		uint8_t cmd[CMD_LEN];
 8001286:	7efb      	ldrb	r3, [r7, #27]
 8001288:	3b01      	subs	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	7efb      	ldrb	r3, [r7, #27]
 800128e:	2200      	movs	r2, #0
 8001290:	4698      	mov	r8, r3
 8001292:	4691      	mov	r9, r2
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012a8:	7efb      	ldrb	r3, [r7, #27]
 80012aa:	2200      	movs	r2, #0
 80012ac:	461c      	mov	r4, r3
 80012ae:	4615      	mov	r5, r2
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	00eb      	lsls	r3, r5, #3
 80012ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012be:	00e2      	lsls	r2, r4, #3
 80012c0:	7efb      	ldrb	r3, [r7, #27]
 80012c2:	3307      	adds	r3, #7
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	ebad 0d03 	sub.w	sp, sp, r3
 80012cc:	466b      	mov	r3, sp
 80012ce:	3300      	adds	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
	#endif

		cmd[0] = 0x00;
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
		cmd[1] = 0x24;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	705a      	strb	r2, [r3, #1]
		//pec15_calc(2, cmd);
		cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 80012de:	6939      	ldr	r1, [r7, #16]
 80012e0:	2002      	movs	r0, #2
 80012e2:	f7ff fe5d 	bl	8000fa0 <pec15_calc>
 80012e6:	4603      	mov	r3, r0
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	709a      	strb	r2, [r3, #2]
		cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 80012f2:	6939      	ldr	r1, [r7, #16]
 80012f4:	2002      	movs	r0, #2
 80012f6:	f7ff fe53 	bl	8000fa0 <pec15_calc>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	70da      	strb	r2, [r3, #3]

		cmd_index = 4;
 8001302:	2304      	movs	r3, #4
 8001304:	777b      	strb	r3, [r7, #29]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	77bb      	strb	r3, [r7, #30]
 800130a:	e03c      	b.n	8001386 <wrcfgb+0x120>
		{
			/* the last IC on the stack. The first configuration written is */
			/* received by the last IC in the daisy chain */

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
 8001310:	e012      	b.n	8001338 <wrcfgb+0xd2>
			{
				/* current_byte is the byte counter */

				cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 8001312:	7fba      	ldrb	r2, [r7, #30]
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	3b06      	subs	r3, #6
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	18d1      	adds	r1, r2, r3
 8001322:	7ffa      	ldrb	r2, [r7, #31]
 8001324:	7f7b      	ldrb	r3, [r7, #29]
 8001326:	5c89      	ldrb	r1, [r1, r2]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	54d1      	strb	r1, [r2, r3]
				cmd_index = cmd_index + 1;
 800132c:	7f7b      	ldrb	r3, [r7, #29]
 800132e:	3301      	adds	r3, #1
 8001330:	777b      	strb	r3, [r7, #29]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	3301      	adds	r3, #1
 8001336:	77fb      	strb	r3, [r7, #31]
 8001338:	7ffa      	ldrb	r2, [r7, #31]
 800133a:	7f3b      	ldrb	r3, [r7, #28]
 800133c:	429a      	cmp	r2, r3
 800133e:	d3e8      	bcc.n	8001312 <wrcfgb+0xac>
			}
			cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 8001340:	7fba      	ldrb	r2, [r7, #30]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	3b06      	subs	r3, #6
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	4413      	add	r3, r2
 8001350:	461a      	mov	r2, r3
 8001352:	7f3b      	ldrb	r3, [r7, #28]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fe22 	bl	8000fa0 <pec15_calc>
 800135c:	4603      	mov	r3, r0
 800135e:	81fb      	strh	r3, [r7, #14]
			cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8001360:	89fb      	ldrh	r3, [r7, #14]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	b29a      	uxth	r2, r3
 8001366:	7f7b      	ldrb	r3, [r7, #29]
 8001368:	b2d1      	uxtb	r1, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	54d1      	strb	r1, [r2, r3]
			cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 800136e:	7f7b      	ldrb	r3, [r7, #29]
 8001370:	3301      	adds	r3, #1
 8001372:	89fa      	ldrh	r2, [r7, #14]
 8001374:	b2d1      	uxtb	r1, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 2;
 800137a:	7f7b      	ldrb	r3, [r7, #29]
 800137c:	3302      	adds	r3, #2
 800137e:	777b      	strb	r3, [r7, #29]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001380:	7fbb      	ldrb	r3, [r7, #30]
 8001382:	3b01      	subs	r3, #1
 8001384:	77bb      	strb	r3, [r7, #30]
 8001386:	7fbb      	ldrb	r3, [r7, #30]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1bf      	bne.n	800130c <wrcfgb+0xa6>
		}

		uint8_t rx_data;

		WakeIdle();
 800138c:	f7ff fd82 	bl	8000e94 <WakeIdle>
		spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 8001390:	7ef8      	ldrb	r0, [r7, #27]
 8001392:	f107 030d 	add.w	r3, r7, #13
 8001396:	2200      	movs	r2, #0
 8001398:	6939      	ldr	r1, [r7, #16]
 800139a:	f000 ffa3 	bl	80022e4 <spi_write_then_read_array_ltc>
 800139e:	46b5      	mov	sp, r6
#if DYNAMIC_MEM
	free(cmd);
#endif

}
 80013a0:	bf00      	nop
 80013a2:	3724      	adds	r7, #36	; 0x24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080013aa <rdcfgb>:

int8_t rdcfgb(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 80013aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	466b      	mov	r3, sp
 80013ba:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 80013bc:	2308      	movs	r3, #8
 80013be:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	777b      	strb	r3, [r7, #29]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 80013c4:	230c      	movs	r3, #12
 80013c6:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 80013c8:	7efb      	ldrb	r3, [r7, #27]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	3b01      	subs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	461a      	mov	r2, r3
 80013d6:	2300      	movs	r3, #0
 80013d8:	4690      	mov	r8, r2
 80013da:	4699      	mov	r9, r3
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013f0:	7efb      	ldrb	r3, [r7, #27]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	461a      	mov	r2, r3
 80013f6:	2300      	movs	r3, #0
 80013f8:	4614      	mov	r4, r2
 80013fa:	461d      	mov	r5, r3
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	00eb      	lsls	r3, r5, #3
 8001406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800140a:	00e2      	lsls	r2, r4, #3
 800140c:	7efb      	ldrb	r3, [r7, #27]
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	3307      	adds	r3, #7
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	ebad 0d03 	sub.w	sp, sp, r3
 800141a:	466b      	mov	r3, sp
 800141c:	3300      	adds	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 8001420:	2300      	movs	r3, #0
 8001422:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x26;
 8001424:	2326      	movs	r3, #38	; 0x26
 8001426:	727b      	strb	r3, [r7, #9]
	cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	4619      	mov	r1, r3
 800142e:	2002      	movs	r0, #2
 8001430:	f7ff fdb6 	bl	8000fa0 <pec15_calc>
 8001434:	4603      	mov	r3, r0
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	b29b      	uxth	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4619      	mov	r1, r3
 8001444:	2002      	movs	r0, #2
 8001446:	f7ff fdab 	bl	8000fa0 <pec15_calc>
 800144a:	4603      	mov	r3, r0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001450:	f7ff fd20 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 8001454:	7f3b      	ldrb	r3, [r7, #28]
 8001456:	79fa      	ldrb	r2, [r7, #7]
 8001458:	fb03 f202 	mul.w	r2, r3, r2
 800145c:	f107 0108 	add.w	r1, r7, #8
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2004      	movs	r0, #4
 8001464:	f000 ff3e 	bl	80022e4 <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 8001468:	2300      	movs	r3, #0
 800146a:	77bb      	strb	r3, [r7, #30]
 800146c:	e03a      	b.n	80014e4 <rdcfgb+0x13a>
		{
			// executes for each LTC6804 in the daisy chain and packs the data
			// into the r_config array as well as check the received Config data
			// for any bit errors

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800146e:	2300      	movs	r3, #0
 8001470:	77fb      	strb	r3, [r7, #31]
 8001472:	e010      	b.n	8001496 <rdcfgb+0xec>
			{
				r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 8001474:	7ffa      	ldrb	r2, [r7, #31]
 8001476:	7fbb      	ldrb	r3, [r7, #30]
 8001478:	7f39      	ldrb	r1, [r7, #28]
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	18d1      	adds	r1, r2, r3
 8001480:	7fbb      	ldrb	r3, [r7, #30]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	441a      	add	r2, r3
 8001488:	7ffb      	ldrb	r3, [r7, #31]
 800148a:	6938      	ldr	r0, [r7, #16]
 800148c:	5c41      	ldrb	r1, [r0, r1]
 800148e:	54d1      	strb	r1, [r2, r3]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001490:	7ffb      	ldrb	r3, [r7, #31]
 8001492:	3301      	adds	r3, #1
 8001494:	77fb      	strb	r3, [r7, #31]
 8001496:	7ffa      	ldrb	r2, [r7, #31]
 8001498:	7f3b      	ldrb	r3, [r7, #28]
 800149a:	429a      	cmp	r2, r3
 800149c:	d3ea      	bcc.n	8001474 <rdcfgb+0xca>
			}

			received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 800149e:	7fbb      	ldrb	r3, [r7, #30]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	799b      	ldrb	r3, [r3, #6]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	7fbb      	ldrb	r3, [r7, #30]
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	6839      	ldr	r1, [r7, #0]
 80014b4:	440b      	add	r3, r1
 80014b6:	79db      	ldrb	r3, [r3, #7]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	81fb      	strh	r3, [r7, #14]
			data_pec = pec15_calc(6, &r_config[current_ic][0]);
 80014be:	7fbb      	ldrb	r3, [r7, #30]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	2006      	movs	r0, #6
 80014ca:	f7ff fd69 	bl	8000fa0 <pec15_calc>
 80014ce:	4603      	mov	r3, r0
 80014d0:	81bb      	strh	r3, [r7, #12]
			if (received_pec != data_pec)
 80014d2:	89fa      	ldrh	r2, [r7, #14]
 80014d4:	89bb      	ldrh	r3, [r7, #12]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d001      	beq.n	80014de <rdcfgb+0x134>
			{
				pec_error = -1;
 80014da:	23ff      	movs	r3, #255	; 0xff
 80014dc:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80014de:	7fbb      	ldrb	r3, [r7, #30]
 80014e0:	3301      	adds	r3, #1
 80014e2:	77bb      	strb	r3, [r7, #30]
 80014e4:	7fba      	ldrb	r2, [r7, #30]
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d3c0      	bcc.n	800146e <rdcfgb+0xc4>
		}

	#if DYNAMIC_MEM
		free(rx_data);
	#endif
		return(pec_error);
 80014ec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80014f0:	46b5      	mov	sp, r6

}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014fc <rdcv>:

uint8_t rdcv(uint8_t reg,				// Controls which cell voltage register is read back.
                     uint8_t total_ic,			// the number of ICs in the system
                     cell_data_t cell_codes[][18]	// Array of the parsed cell codes
                    )
{
 80014fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001500:	b08b      	sub	sp, #44	; 0x2c
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	603a      	str	r2, [r7, #0]
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	460b      	mov	r3, r1
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	466b      	mov	r3, sp
 8001510:	461e      	mov	r6, r3

	const uint8_t NUM_RX_BYT = 8;
 8001512:	2308      	movs	r3, #8
 8001514:	f887 3020 	strb.w	r3, [r7, #32]
	const uint8_t BYT_IN_REG = 6;
 8001518:	2306      	movs	r3, #6
 800151a:	77fb      	strb	r3, [r7, #31]
	const uint8_t CELL_IN_REG = 3;
 800151c:	2303      	movs	r3, #3
 800151e:	77bb      	strb	r3, [r7, #30]

	uint8_t pec_error = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter=0;	//data counter
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if DYNAMIC_MEM
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 18;
 800152c:	2312      	movs	r3, #18
 800152e:	777b      	strb	r3, [r7, #29]
	uint8_t cell_data[NUM_RX_BYT * max_ic];
 8001530:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001534:	7f7a      	ldrb	r2, [r7, #29]
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001542:	7f7a      	ldrb	r2, [r7, #29]
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	461a      	mov	r2, r3
 800154a:	2300      	movs	r3, #0
 800154c:	4690      	mov	r8, r2
 800154e:	4699      	mov	r9, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800155c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001560:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001564:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001568:	7f7a      	ldrb	r2, [r7, #29]
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	461a      	mov	r2, r3
 8001570:	2300      	movs	r3, #0
 8001572:	4614      	mov	r4, r2
 8001574:	461d      	mov	r5, r3
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	00eb      	lsls	r3, r5, #3
 8001580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001584:	00e2      	lsls	r2, r4, #3
 8001586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800158a:	7f7a      	ldrb	r2, [r7, #29]
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	3307      	adds	r3, #7
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	ebad 0d03 	sub.w	sp, sp, r3
 800159a:	466b      	mov	r3, sp
 800159c:	3300      	adds	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
#endif


	if (reg == 0)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 8088 	bne.w	80016b8 <rdcv+0x1bc>
	{
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 80015a8:	2301      	movs	r3, #1
 80015aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80015ae:	e07d      	b.n	80016ac <rdcv+0x1b0>
		{
			data_counter = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			rdcv_reg(cell_reg, total_ic,cell_data );				 //Reads a single Cell voltage register
 80015b6:	79b9      	ldrb	r1, [r7, #6]
 80015b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f8f6 	bl	80017b0 <rdcv_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80015ca:	e065      	b.n	8001698 <rdcv+0x19c>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015d2:	e02d      	b.n	8001630 <rdcv+0x134>
				{
					// loops once for each of the 3 cell voltage codes in the register

					parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 80015d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015e2:	3301      	adds	r3, #1
 80015e4:	6979      	ldr	r1, [r7, #20]
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	81fb      	strh	r3, [r7, #14]
					// create the parsed cell voltage code
					//cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
					cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)].voltage = parsed_cell;
 80015f2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	461a      	mov	r2, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001608:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800160c:	3a01      	subs	r2, #1
 800160e:	7fb8      	ldrb	r0, [r7, #30]
 8001610:	fb00 f202 	mul.w	r2, r0, r2
 8001614:	440a      	add	r2, r1
 8001616:	89f9      	ldrh	r1, [r7, #14]
 8001618:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 800161c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001620:	3302      	adds	r3, #2
 8001622:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800162a:	3301      	adds	r3, #1
 800162c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001630:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001634:	7fbb      	ldrb	r3, [r7, #30]
 8001636:	429a      	cmp	r2, r3
 8001638:	d3cc      	bcc.n	80015d4 <rdcv+0xd8>
					//must increment by two for each parsed cell code
				}
				received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 800163a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	b29b      	uxth	r3, r3
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b29a      	uxth	r2, r3
 8001648:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800164c:	3301      	adds	r3, #1
 800164e:	6979      	ldr	r1, [r7, #20]
 8001650:	5ccb      	ldrb	r3, [r1, r3]
 8001652:	b29b      	uxth	r3, r3
 8001654:	4413      	add	r3, r2
 8001656:	827b      	strh	r3, [r7, #18]
				//after the 6 cell voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800165c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	441a      	add	r2, r3
 8001668:	7ffb      	ldrb	r3, [r7, #31]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fc97 	bl	8000fa0 <pec15_calc>
 8001672:	4603      	mov	r3, r0
 8001674:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 8001676:	8a7a      	ldrh	r2, [r7, #18]
 8001678:	8a3b      	ldrh	r3, [r7, #16]
 800167a:	429a      	cmp	r2, r3
 800167c:	d002      	beq.n	8001684 <rdcv+0x188>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 800167e:	23ff      	movs	r3, #255	; 0xff
 8001680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					//are detected in the serial data
				}
			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8001684:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001688:	3302      	adds	r3, #2
 800168a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 800168e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001692:	3301      	adds	r3, #1
 8001694:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001698:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800169c:	79bb      	ldrb	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d394      	bcc.n	80015cc <rdcv+0xd0>
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 80016a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016a6:	3301      	adds	r3, #1
 80016a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80016ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016b0:	2b06      	cmp	r3, #6
 80016b2:	f67f af7d 	bls.w	80015b0 <rdcv+0xb4>
 80016b6:	e073      	b.n	80017a0 <rdcv+0x2a4>
		}
	}

	else
	{
		rdcv_reg(reg, total_ic,cell_data);
 80016b8:	79b9      	ldrb	r1, [r7, #6]
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f876 	bl	80017b0 <rdcv_reg>
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80016ca:	e064      	b.n	8001796 <rdcv+0x29a>
		{
			// current_ic is used as the IC counter
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80016d2:	e02c      	b.n	800172e <rdcv+0x232>
			{
				// loops once for each of the 3 cell voltage codes in the register

				parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8); //Each cell code is received as two bytes and is combined to
 80016d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016e2:	3301      	adds	r3, #1
 80016e4:	6979      	ldr	r1, [r7, #20]
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	81fb      	strh	r3, [r7, #14]
				// create the parsed cell voltage code

				//cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
				cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)].voltage = 0x0000FFFF & parsed_cell;
 80016f2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	461a      	mov	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001708:	79fa      	ldrb	r2, [r7, #7]
 800170a:	3a01      	subs	r2, #1
 800170c:	7fb8      	ldrb	r0, [r7, #30]
 800170e:	fb00 f202 	mul.w	r2, r0, r2
 8001712:	440a      	add	r2, r1
 8001714:	89f9      	ldrh	r1, [r7, #14]
 8001716:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter= data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 800171a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800171e:	3302      	adds	r3, #2
 8001720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001724:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001728:	3301      	adds	r3, #1
 800172a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800172e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001732:	7fbb      	ldrb	r3, [r7, #30]
 8001734:	429a      	cmp	r2, r3
 8001736:	d3cd      	bcc.n	80016d4 <rdcv+0x1d8>
				//must increment by two for each parsed cell code
			}
			received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	b29b      	uxth	r3, r3
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b29a      	uxth	r2, r3
 8001746:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800174a:	3301      	adds	r3, #1
 800174c:	6979      	ldr	r1, [r7, #20]
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4413      	add	r3, r2
 8001754:	827b      	strh	r3, [r7, #18]
			//after the 6 cell voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001756:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800175a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	441a      	add	r2, r3
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fc18 	bl	8000fa0 <pec15_calc>
 8001770:	4603      	mov	r3, r0
 8001772:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 8001774:	8a7a      	ldrh	r2, [r7, #18]
 8001776:	8a3b      	ldrh	r3, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d002      	beq.n	8001782 <rdcv+0x286>
			{
				pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 800177c:	23ff      	movs	r3, #255	; 0xff
 800177e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//are detected in the serial data
			}
			data_counter= data_counter + 2;                       //Because the transmitted PEC code is 2 bytes long the data_counter
 8001782:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001786:	3302      	adds	r3, #2
 8001788:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 800178c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001790:	3301      	adds	r3, #1
 8001792:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001796:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800179a:	79bb      	ldrb	r3, [r7, #6]
 800179c:	429a      	cmp	r2, r3
 800179e:	d395      	bcc.n	80016cc <rdcv+0x1d0>
		}
	}
#if DYNAMIC_MEM
	free(cell_data);
#endif
	return(pec_error);
 80017a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a4:	46b5      	mov	sp, r6
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	372c      	adds	r7, #44	; 0x2c
 80017aa:	46bd      	mov	sp, r7
 80017ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080017b0 <rdcv_reg>:
*/
void rdcv_reg(uint8_t reg,			//Determines which cell voltage register is read back
                      uint8_t total_ic,		//the number of ICs in the
                      uint8_t *data			//An array of the unparsed cell codes
                     )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	603a      	str	r2, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	460b      	mov	r3, r1
 80017be:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 80017c0:	2308      	movs	r3, #8
 80017c2:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d104      	bne.n	80017d4 <rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 80017ca:	2304      	movs	r3, #4
 80017cc:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017ce:	2300      	movs	r3, #0
 80017d0:	723b      	strb	r3, [r7, #8]
 80017d2:	e026      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 2)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d104      	bne.n	80017e4 <rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 80017da:	2306      	movs	r3, #6
 80017dc:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	723b      	strb	r3, [r7, #8]
 80017e2:	e01e      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 3)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d104      	bne.n	80017f4 <rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 80017ea:	2308      	movs	r3, #8
 80017ec:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017ee:	2300      	movs	r3, #0
 80017f0:	723b      	strb	r3, [r7, #8]
 80017f2:	e016      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 4)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d104      	bne.n	8001804 <rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 80017fa:	230a      	movs	r3, #10
 80017fc:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017fe:	2300      	movs	r3, #0
 8001800:	723b      	strb	r3, [r7, #8]
 8001802:	e00e      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 5) // LTC6813 - Cell register E
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d104      	bne.n	8001814 <rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 800180a:	2309      	movs	r3, #9
 800180c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800180e:	2300      	movs	r3, #0
 8001810:	723b      	strb	r3, [r7, #8]
 8001812:	e006      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 6) // LTC6813 - Cell register F
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2b06      	cmp	r3, #6
 8001818:	d103      	bne.n	8001822 <rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 800181a:	230b      	movs	r3, #11
 800181c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800181e:	2300      	movs	r3, #0
 8001820:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4619      	mov	r1, r3
 8001828:	2002      	movs	r0, #2
 800182a:	f7ff fbb9 	bl	8000fa0 <pec15_calc>
 800182e:	4603      	mov	r3, r0
 8001830:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001832:	89bb      	ldrh	r3, [r7, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800183c:	89bb      	ldrh	r3, [r7, #12]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001842:	f7ff fb27 	bl	8000e94 <WakeIdle>
	WakeIdle();
 8001846:	f7ff fb25 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	79ba      	ldrb	r2, [r7, #6]
 800184e:	fb03 f202 	mul.w	r2, r3, r2
 8001852:	f107 0108 	add.w	r1, r7, #8
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2004      	movs	r0, #4
 800185a:	f000 fd43 	bl	80022e4 <spi_write_then_read_array_ltc>
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <rdaux>:
*/
int8_t rdaux(uint8_t reg,				//Determines which GPIO voltage register is read back.
                     uint8_t total_ic,			//the number of ICs in the system
                     temp_data_t aux_codes[][GPIO_NUM]	//A two dimensional array of the gpio voltage codes.
                    )
{
 8001866:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800186a:	b08d      	sub	sp, #52	; 0x34
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	603a      	str	r2, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	460b      	mov	r3, r1
 8001876:	71bb      	strb	r3, [r7, #6]
 8001878:	466b      	mov	r3, sp
 800187a:	461e      	mov	r6, r3
	const uint8_t NUM_RX_BYT = 8;
 800187c:	2308      	movs	r3, #8
 800187e:	77fb      	strb	r3, [r7, #31]
	const uint8_t BYT_IN_REG = 6;
 8001880:	2306      	movs	r3, #6
 8001882:	77bb      	strb	r3, [r7, #30]
	const uint8_t GPIO_IN_REG = 3;
 8001884:	2303      	movs	r3, #3
 8001886:	777b      	strb	r3, [r7, #29]

	uint8_t data_counter = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int8_t pec_error = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t data_pec;
#if DYNAMIC_MEM
	uint8_t *data;
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 8001894:	230c      	movs	r3, #12
 8001896:	773b      	strb	r3, [r7, #28]
	uint8_t data[NUM_RX_BYT * max_ic];
 8001898:	7ffb      	ldrb	r3, [r7, #31]
 800189a:	7f3a      	ldrb	r2, [r7, #28]
 800189c:	fb02 f303 	mul.w	r3, r2, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	7ffb      	ldrb	r3, [r7, #31]
 80018a6:	7f3a      	ldrb	r2, [r7, #28]
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	2300      	movs	r3, #0
 80018b0:	4690      	mov	r8, r2
 80018b2:	4699      	mov	r9, r3
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018c8:	7ffb      	ldrb	r3, [r7, #31]
 80018ca:	7f3a      	ldrb	r2, [r7, #28]
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	2300      	movs	r3, #0
 80018d4:	4614      	mov	r4, r2
 80018d6:	461d      	mov	r5, r3
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	00eb      	lsls	r3, r5, #3
 80018e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e6:	00e2      	lsls	r2, r4, #3
 80018e8:	7ffb      	ldrb	r3, [r7, #31]
 80018ea:	7f3a      	ldrb	r2, [r7, #28]
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	3307      	adds	r3, #7
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	ebad 0d03 	sub.w	sp, sp, r3
 80018fa:	466b      	mov	r3, sp
 80018fc:	3300      	adds	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
#endif

	if (reg == 0)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 8087 	bne.w	8001a16 <rdaux+0x1b0>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 8001908:	2301      	movs	r3, #1
 800190a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800190e:	e07c      	b.n	8001a0a <rdaux+0x1a4>
		{
			data_counter = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8001916:	79b9      	ldrb	r1, [r7, #6]
 8001918:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f8fa 	bl	8001b18 <rdaux_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 8001924:	2300      	movs	r3, #0
 8001926:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800192a:	e064      	b.n	80019f6 <rdaux+0x190>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 800192c:	2300      	movs	r3, #0
 800192e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001932:	e02d      	b.n	8001990 <rdaux+0x12a>
				{
					// loops once for each of the 3 gpio voltage codes in the register

					parsed_aux = data[data_counter] + (data[data_counter+1]<<8);              //Each gpio codes is received as two bytes and is combined to
 8001934:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	5cd3      	ldrb	r3, [r2, r3]
 800193c:	b29a      	uxth	r2, r3
 800193e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001942:	3301      	adds	r3, #1
 8001944:	6979      	ldr	r1, [r7, #20]
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	b29b      	uxth	r3, r3
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b29b      	uxth	r3, r3
 800194e:	4413      	add	r3, r2
 8001950:	81fb      	strh	r3, [r7, #14]
					// create the parsed gpio voltage code

					//aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
					aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001952:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	461a      	mov	r2, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4413      	add	r3, r2
 8001964:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8001968:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800196c:	3a01      	subs	r2, #1
 800196e:	7f78      	ldrb	r0, [r7, #29]
 8001970:	fb00 f202 	mul.w	r2, r0, r2
 8001974:	440a      	add	r2, r1
 8001976:	89f9      	ldrh	r1, [r7, #14]
 8001978:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
					data_counter=data_counter+2;                        //Because gpio voltage codes are two bytes the data counter
 800197c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001980:	3302      	adds	r3, #2
 8001982:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 8001986:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800198a:	3301      	adds	r3, #1
 800198c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001990:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001994:	7f7b      	ldrb	r3, [r7, #29]
 8001996:	429a      	cmp	r2, r3
 8001998:	d3cc      	bcc.n	8001934 <rdaux+0xce>
					//must increment by two for each parsed gpio voltage code
				}
				received_pec = (data[data_counter]<<8)+ data[data_counter+1];          //The received PEC for the current_ic is transmitted as the 7th and 8th
 800199a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019ac:	3301      	adds	r3, #1
 80019ae:	6979      	ldr	r1, [r7, #20]
 80019b0:	5ccb      	ldrb	r3, [r1, r3]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	827b      	strh	r3, [r7, #18]
				//after the 6 gpio voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 80019b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019bc:	7ffa      	ldrb	r2, [r7, #31]
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	441a      	add	r2, r3
 80019c6:	7fbb      	ldrb	r3, [r7, #30]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fae8 	bl	8000fa0 <pec15_calc>
 80019d0:	4603      	mov	r3, r0
 80019d2:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 80019d4:	8a7a      	ldrh	r2, [r7, #18]
 80019d6:	8a3b      	ldrh	r3, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d002      	beq.n	80019e2 <rdaux+0x17c>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 80019dc:	23ff      	movs	r3, #255	; 0xff
 80019de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					//are detected in the received serial data
				}

				data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 80019e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019e6:	3302      	adds	r3, #2
 80019e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80019ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019f0:	3301      	adds	r3, #1
 80019f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80019f6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d395      	bcc.n	800192c <rdaux+0xc6>
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 8001a00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a04:	3301      	adds	r3, #1
 8001a06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001a0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	f67f af7e 	bls.w	8001910 <rdaux+0xaa>
 8001a14:	e067      	b.n	8001ae6 <rdaux+0x280>
		}

	}
	else
	{
		rdaux_reg(reg, total_ic, data);
 8001a16:	79b9      	ldrb	r1, [r7, #6]
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f87b 	bl	8001b18 <rdaux_reg>
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	e05a      	b.n	8001ade <rdaux+0x278>
		{
			// current_ic is used as an IC counter

			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	e028      	b.n	8001a80 <rdaux+0x21a>
			{
				// once for each aux voltage in the register

				parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));        //Each gpio codes is received as two bytes and is combined to
 8001a2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	6979      	ldr	r1, [r7, #20]
 8001a40:	5ccb      	ldrb	r3, [r1, r3]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	81fb      	strh	r3, [r7, #14]
				// create the parsed gpio voltage code
				//aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
				aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	461a      	mov	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	79fa      	ldrb	r2, [r7, #7]
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	7f79      	ldrb	r1, [r7, #29]
 8001a62:	fb02 f101 	mul.w	r1, r2, r1
 8001a66:	6a3a      	ldr	r2, [r7, #32]
 8001a68:	440a      	add	r2, r1
 8001a6a:	89f9      	ldrh	r1, [r7, #14]
 8001a6c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
				data_counter=data_counter+2;                      //Because gpio voltage codes are two bytes the data counter
 8001a70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a74:	3302      	adds	r3, #2
 8001a76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	7f7b      	ldrb	r3, [r7, #29]
 8001a82:	6a3a      	ldr	r2, [r7, #32]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbd2      	blt.n	8001a2e <rdaux+0x1c8>
				//must increment by two for each parsed gpio voltage code
			}
			received_pec = (data[data_counter]<<8) + data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001a88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	827b      	strh	r3, [r7, #18]
			//after the 6 gpio voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	fb02 f303 	mul.w	r3, r2, r3
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	441a      	add	r2, r3
 8001ab2:	7fbb      	ldrb	r3, [r7, #30]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fa72 	bl	8000fa0 <pec15_calc>
 8001abc:	4603      	mov	r3, r0
 8001abe:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 8001ac0:	8a7a      	ldrh	r2, [r7, #18]
 8001ac2:	8a3b      	ldrh	r3, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d002      	beq.n	8001ace <rdaux+0x268>
			{
				pec_error = -1;                               //The pec_error variable is simply set negative if any PEC errors
 8001ac8:	23ff      	movs	r3, #255	; 0xff
 8001aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				//are detected in the received serial data
			}

			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8001ace:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	3301      	adds	r3, #1
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	79bb      	ldrb	r3, [r7, #6]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	dba0      	blt.n	8001a28 <rdaux+0x1c2>
	}

#if DYNAMIC_MEM
	free(data);
#endif
	return (pec_error);
 8001ae6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001aea:	46b5      	mov	sp, r6
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3734      	adds	r7, #52	; 0x34
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001af6 <adcv_delay>:

	free(data);
	return (pec_error);
}

adcv_delay(void){
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001afa:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8001afe:	f000 fb79 	bl	80021f4 <delay_u>
}
 8001b02:	bf00      	nop
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <adax_delay>:

void adax_delay(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001b0c:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8001b10:	f000 fb70 	bl	80021f4 <delay_u>

}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <rdaux_reg>:
*/
void rdaux_reg(uint8_t reg,			//Determines which GPIO voltage register is read back
                       uint8_t total_ic,	//The number of ICs in the system
                       uint8_t *data		//Array of the unparsed auxiliary codes
                      )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	603a      	str	r2, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	460b      	mov	r3, r1
 8001b26:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001b28:	2308      	movs	r3, #8
 8001b2a:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d104      	bne.n	8001b3c <rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 8001b32:	230c      	movs	r3, #12
 8001b34:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b36:	2300      	movs	r3, #0
 8001b38:	723b      	strb	r3, [r7, #8]
 8001b3a:	e01b      	b.n	8001b74 <rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d104      	bne.n	8001b4c <rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 8001b42:	230e      	movs	r3, #14
 8001b44:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b46:	2300      	movs	r3, #0
 8001b48:	723b      	strb	r3, [r7, #8]
 8001b4a:	e013      	b.n	8001b74 <rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d104      	bne.n	8001b5c <rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8001b52:	230d      	movs	r3, #13
 8001b54:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b56:	2300      	movs	r3, #0
 8001b58:	723b      	strb	r3, [r7, #8]
 8001b5a:	e00b      	b.n	8001b74 <rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d104      	bne.n	8001b6c <rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8001b62:	230f      	movs	r3, #15
 8001b64:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b66:	2300      	movs	r3, #0
 8001b68:	723b      	strb	r3, [r7, #8]
 8001b6a:	e003      	b.n	8001b74 <rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b70:	2300      	movs	r3, #0
 8001b72:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	4619      	mov	r1, r3
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	f7ff fa10 	bl	8000fa0 <pec15_calc>
 8001b80:	4603      	mov	r3, r0
 8001b82:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001b84:	89bb      	ldrh	r3, [r7, #12]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001b8e:	89bb      	ldrh	r3, [r7, #12]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001b94:	f7ff f97e 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	79ba      	ldrb	r2, [r7, #6]
 8001b9c:	fb03 f202 	mul.w	r2, r3, r2
 8001ba0:	f107 0108 	add.w	r1, r7, #8
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2004      	movs	r0, #4
 8001ba8:	f000 fb9c 	bl	80022e4 <spi_write_then_read_array_ltc>
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <adcv>:

/*!
	\brief Starts cell voltage conversion.
*/
void adcv(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADCV[0];
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <adcv+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <adcv+0x44>)
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADCV);
 8001bc6:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <adcv+0x44>)
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f7ff f9e9 	bl	8000fa0 <pec15_calc>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001be2:	f7ff f957 	bl	8000e94 <WakeIdle>
	spi_write_array(4, cmd);
 8001be6:	463b      	mov	r3, r7
 8001be8:	4619      	mov	r1, r3
 8001bea:	2004      	movs	r0, #4
 8001bec:	f000 fb58 	bl	80022a0 <spi_write_array>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200000c4 	.word	0x200000c4

08001bfc <adax>:

/*!
	\brief Start an GPIO Conversion.
*/
void adax(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADAX[0];
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <adax+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <adax+0x44>)
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADAX);
 8001c0e:	490c      	ldr	r1, [pc, #48]	; (8001c40 <adax+0x44>)
 8001c10:	2002      	movs	r0, #2
 8001c12:	f7ff f9c5 	bl	8000fa0 <pec15_calc>
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001c2a:	f7ff f933 	bl	8000e94 <WakeIdle>
	spi_write_array(4, cmd);
 8001c2e:	463b      	mov	r3, r7
 8001c30:	4619      	mov	r1, r3
 8001c32:	2004      	movs	r0, #4
 8001c34:	f000 fb34 	bl	80022a0 <spi_write_array>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200000c8 	.word	0x200000c8

08001c44 <calc_sum_of_cells>:


}

void calc_sum_of_cells(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	73fb      	strb	r3, [r7, #15]

	uint16_t soc = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	82fb      	strh	r3, [r7, #22]

	for(uint8_t i = 0; i < total_ic; i++){
 8001c56:	2300      	movs	r3, #0
 8001c58:	757b      	strb	r3, [r7, #21]
 8001c5a:	e01e      	b.n	8001c9a <calc_sum_of_cells+0x56>
		for(uint8_t j = 0; j < CELL_NUM; j++){
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	753b      	strb	r3, [r7, #20]
 8001c60:	e015      	b.n	8001c8e <calc_sum_of_cells+0x4a>
			soc += (cell_data[i][j].voltage / 100);
 8001c62:	7d7a      	ldrb	r2, [r7, #21]
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4413      	add	r3, r2
 8001c72:	7d3a      	ldrb	r2, [r7, #20]
 8001c74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <calc_sum_of_cells+0x84>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	8afb      	ldrh	r3, [r7, #22]
 8001c84:	4413      	add	r3, r2
 8001c86:	82fb      	strh	r3, [r7, #22]
		for(uint8_t j = 0; j < CELL_NUM; j++){
 8001c88:	7d3b      	ldrb	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	753b      	strb	r3, [r7, #20]
 8001c8e:	7d3b      	ldrb	r3, [r7, #20]
 8001c90:	2b11      	cmp	r3, #17
 8001c92:	d9e6      	bls.n	8001c62 <calc_sum_of_cells+0x1e>
	for(uint8_t i = 0; i < total_ic; i++){
 8001c94:	7d7b      	ldrb	r3, [r7, #21]
 8001c96:	3301      	adds	r3, #1
 8001c98:	757b      	strb	r3, [r7, #21]
 8001c9a:	7d7a      	ldrb	r2, [r7, #21]
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3dc      	bcc.n	8001c5c <calc_sum_of_cells+0x18>
		}
	}
	status_data->sum_of_cells = (float)soc /100;
 8001ca2:	8afb      	ldrh	r3, [r7, #22]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cac:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001ccc <calc_sum_of_cells+0x88>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001cba:	bf00      	nop
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	51eb851f 	.word	0x51eb851f
 8001ccc:	42c80000 	.word	0x42c80000

08001cd0 <get_minmax_temperature>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][12]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_temperature(uint8_t total_ic, temp_data_t temp_data[][GPIO_NUM], status_data_t *status_data)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	73fb      	strb	r3, [r7, #15]
	int32_t min = temp_data[0][0].temp;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ce4:	61fb      	str	r3, [r7, #28]
	int32_t max = temp_data[0][0].temp;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cec:	61bb      	str	r3, [r7, #24]
	uint8_t min_id = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75fb      	strb	r3, [r7, #23]
	uint8_t max_id = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0; i < total_ic; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	757b      	strb	r3, [r7, #21]
 8001cfa:	e05f      	b.n	8001dbc <get_minmax_temperature+0xec>
	{
		for (uint8_t j = 0; j < GPIO_NUM-7; j++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	753b      	strb	r3, [r7, #20]
 8001d00:	e056      	b.n	8001db0 <get_minmax_temperature+0xe0>
		{

			if (temp_data[i][j].temp > max)
 8001d02:	7d7a      	ldrb	r2, [r7, #21]
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	441a      	add	r2, r3
 8001d12:	7d3b      	ldrb	r3, [r7, #20]
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4293      	cmp	r3, r2
 8001d22:	da18      	bge.n	8001d56 <get_minmax_temperature+0x86>
			{

				max = temp_data[i][j].temp;
 8001d24:	7d7a      	ldrb	r2, [r7, #21]
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	441a      	add	r2, r3
 8001d34:	7d3b      	ldrb	r3, [r7, #20]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d3e:	61bb      	str	r3, [r7, #24]
				max_id = (i << 4) | (j & 0x0f);
 8001d40:	7d7b      	ldrb	r3, [r7, #21]
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	b25a      	sxtb	r2, r3
 8001d46:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	4313      	orrs	r3, r2
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	75bb      	strb	r3, [r7, #22]

			}
			if (temp_data[i][j].temp < min)
 8001d56:	7d7a      	ldrb	r2, [r7, #21]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	441a      	add	r2, r3
 8001d66:	7d3b      	ldrb	r3, [r7, #20]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d70:	461a      	mov	r2, r3
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	4293      	cmp	r3, r2
 8001d76:	dd18      	ble.n	8001daa <get_minmax_temperature+0xda>
			{

				min = temp_data[i][j].temp;
 8001d78:	7d7a      	ldrb	r2, [r7, #21]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	461a      	mov	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	441a      	add	r2, r3
 8001d88:	7d3b      	ldrb	r3, [r7, #20]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d92:	61fb      	str	r3, [r7, #28]
				min_id = (i << 4) | (j & 0x0f);
 8001d94:	7d7b      	ldrb	r3, [r7, #21]
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	b25a      	sxtb	r2, r3
 8001d9a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	4313      	orrs	r3, r2
 8001da6:	b25b      	sxtb	r3, r3
 8001da8:	75fb      	strb	r3, [r7, #23]
		for (uint8_t j = 0; j < GPIO_NUM-7; j++)
 8001daa:	7d3b      	ldrb	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	753b      	strb	r3, [r7, #20]
 8001db0:	7d3b      	ldrb	r3, [r7, #20]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d9a5      	bls.n	8001d02 <get_minmax_temperature+0x32>
	for (uint8_t i = 0; i < total_ic; i++)
 8001db6:	7d7b      	ldrb	r3, [r7, #21]
 8001db8:	3301      	adds	r3, #1
 8001dba:	757b      	strb	r3, [r7, #21]
 8001dbc:	7d7a      	ldrb	r2, [r7, #21]
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d39b      	bcc.n	8001cfc <get_minmax_temperature+0x2c>

			}
		}
	}
	status_data->min_temp = min;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	84da      	strh	r2, [r3, #38]	; 0x26
	status_data->max_temp = max;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	b21a      	sxth	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	851a      	strh	r2, [r3, #40]	; 0x28

	status_data->min_temp_id = min_id;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7dfa      	ldrb	r2, [r7, #23]
 8001dd8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	status_data->max_temp_id = max_id;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7dba      	ldrb	r2, [r7, #22]
 8001de0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8001de4:	bf00      	nop
 8001de6:	3724      	adds	r7, #36	; 0x24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <get_minmax_voltage>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][CELL_NUM]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_voltage(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	73fb      	strb	r3, [r7, #15]
	uint16_t min = cell_data[0][0].voltage;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	82fb      	strh	r3, [r7, #22]
	uint16_t max = cell_data[0][0].voltage;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	82bb      	strh	r3, [r7, #20]
	uint8_t min_id = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	74fb      	strb	r3, [r7, #19]
	uint8_t max_id = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	74bb      	strb	r3, [r7, #18]


	for (uint8_t i = 0; i < total_ic; i++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	747b      	strb	r3, [r7, #17]
 8001e16:	e064      	b.n	8001ee2 <get_minmax_voltage+0xf2>
	{
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	743b      	strb	r3, [r7, #16]
 8001e1c:	e05b      	b.n	8001ed6 <get_minmax_voltage+0xe6>
		{
			if (cell_data[i][j].voltage > max)
 8001e1e:	7c7a      	ldrb	r2, [r7, #17]
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	7c3a      	ldrb	r2, [r7, #16]
 8001e30:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e34:	8aba      	ldrh	r2, [r7, #20]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d216      	bcs.n	8001e68 <get_minmax_voltage+0x78>
			{
				max = cell_data[i][j].voltage;
 8001e3a:	7c7a      	ldrb	r2, [r7, #17]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	461a      	mov	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	4413      	add	r3, r2
 8001e4a:	7c3a      	ldrb	r2, [r7, #16]
 8001e4c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e50:	82bb      	strh	r3, [r7, #20]
				max_id = (i << 4) | (j & 0x0f);
 8001e52:	7c7b      	ldrb	r3, [r7, #17]
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	b25a      	sxtb	r2, r3
 8001e58:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	b25b      	sxtb	r3, r3
 8001e62:	4313      	orrs	r3, r2
 8001e64:	b25b      	sxtb	r3, r3
 8001e66:	74bb      	strb	r3, [r7, #18]
			}
			if (cell_data[i][j].voltage < min && cell_data[i][j].voltage > 5000) //ignore cells under .5V
 8001e68:	7c7a      	ldrb	r2, [r7, #17]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	461a      	mov	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4413      	add	r3, r2
 8001e78:	7c3a      	ldrb	r2, [r7, #16]
 8001e7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e7e:	8afa      	ldrh	r2, [r7, #22]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d925      	bls.n	8001ed0 <get_minmax_voltage+0xe0>
 8001e84:	7c7a      	ldrb	r2, [r7, #17]
 8001e86:	4613      	mov	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	7c3a      	ldrb	r2, [r7, #16]
 8001e96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d916      	bls.n	8001ed0 <get_minmax_voltage+0xe0>
			{
				min = cell_data[i][j].voltage;
 8001ea2:	7c7a      	ldrb	r2, [r7, #17]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	461a      	mov	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	7c3a      	ldrb	r2, [r7, #16]
 8001eb4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001eb8:	82fb      	strh	r3, [r7, #22]
				min_id = (i << 4) | (j & 0x0f);
 8001eba:	7c7b      	ldrb	r3, [r7, #17]
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	b25a      	sxtb	r2, r3
 8001ec0:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	b25b      	sxtb	r3, r3
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	b25b      	sxtb	r3, r3
 8001ece:	74fb      	strb	r3, [r7, #19]
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001ed0:	7c3b      	ldrb	r3, [r7, #16]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	743b      	strb	r3, [r7, #16]
 8001ed6:	7c3b      	ldrb	r3, [r7, #16]
 8001ed8:	2b11      	cmp	r3, #17
 8001eda:	d9a0      	bls.n	8001e1e <get_minmax_voltage+0x2e>
	for (uint8_t i = 0; i < total_ic; i++)
 8001edc:	7c7b      	ldrb	r3, [r7, #17]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	747b      	strb	r3, [r7, #17]
 8001ee2:	7c7a      	ldrb	r2, [r7, #17]
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d396      	bcc.n	8001e18 <get_minmax_voltage+0x28>
			}
		}
	}
	status_data->min_voltage = min;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8afa      	ldrh	r2, [r7, #22]
 8001eee:	859a      	strh	r2, [r3, #44]	; 0x2c
	status_data->max_voltage = max;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	8aba      	ldrh	r2, [r7, #20]
 8001ef4:	85da      	strh	r2, [r3, #46]	; 0x2e
	status_data->delta = max - min;
 8001ef6:	8aba      	ldrh	r2, [r7, #20]
 8001ef8:	8afb      	ldrh	r3, [r7, #22]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	849a      	strh	r2, [r3, #36]	; 0x24
	status_data->min_voltage_id = min_id;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7cfa      	ldrb	r2, [r7, #19]
 8001f08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	status_data->max_voltage_id = max_id;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7cba      	ldrb	r2, [r7, #18]
 8001f10:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001f14:	bf00      	nop
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <build_disch_cfg>:




void build_disch_cfg(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], uint8_t tx_config[][6],\
					 status_data_t *status_data, limit_t *limit){
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]
	uint16_t DCCx = 0x0000;
 8001f30:	2300      	movs	r3, #0
 8001f32:	82fb      	strh	r3, [r7, #22]
	//discharge all cells

	for (uint8_t i = 0; i < total_ic; i++){
 8001f34:	2300      	movs	r3, #0
 8001f36:	757b      	strb	r3, [r7, #21]
 8001f38:	e051      	b.n	8001fde <build_disch_cfg+0xbe>
		for (uint8_t j = 0; j < 12; j++){
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	753b      	strb	r3, [r7, #20]
 8001f3e:	e02d      	b.n	8001f9c <build_disch_cfg+0x7c>
			if (cell_data[i][j].voltage > (status_data->min_voltage + limit->tolerance)){
 8001f40:	7d7a      	ldrb	r2, [r7, #21]
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4413      	add	r3, r2
 8001f50:	7d3a      	ldrb	r2, [r7, #20]
 8001f52:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f56:	461a      	mov	r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	8b9b      	ldrh	r3, [r3, #28]
 8001f62:	440b      	add	r3, r1
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dd0a      	ble.n	8001f7e <build_disch_cfg+0x5e>
				DCCx |= (1<<j);
 8001f68:	7d3b      	ldrb	r3, [r7, #20]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	82fb      	strh	r3, [r7, #22]
 8001f7c:	e00b      	b.n	8001f96 <build_disch_cfg+0x76>
			}
			else{
				DCCx &= ~(1<<j);
 8001f7e:	7d3b      	ldrb	r3, [r7, #20]
 8001f80:	2201      	movs	r2, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	b21a      	sxth	r2, r3
 8001f8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f90:	4013      	ands	r3, r2
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	82fb      	strh	r3, [r7, #22]
		for (uint8_t j = 0; j < 12; j++){
 8001f96:	7d3b      	ldrb	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	753b      	strb	r3, [r7, #20]
 8001f9c:	7d3b      	ldrb	r3, [r7, #20]
 8001f9e:	2b0b      	cmp	r3, #11
 8001fa0:	d9ce      	bls.n	8001f40 <build_disch_cfg+0x20>
			}
		}
		tx_config[i][4] = (DCCx & 0x00ff);
 8001fa2:	7d7a      	ldrb	r2, [r7, #21]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	8afa      	ldrh	r2, [r7, #22]
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	711a      	strb	r2, [r3, #4]
		tx_config[i][5] = ((DCCx >> 8) & 0x0f);
 8001fb8:	8afb      	ldrh	r3, [r7, #22]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	b2d9      	uxtb	r1, r3
 8001fc0:	7d7a      	ldrb	r2, [r7, #21]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	461a      	mov	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f001 020f 	and.w	r2, r1, #15
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < total_ic; i++){
 8001fd8:	7d7b      	ldrb	r3, [r7, #21]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	757b      	strb	r3, [r7, #21]
 8001fde:	7d7a      	ldrb	r2, [r7, #21]
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d3a9      	bcc.n	8001f3a <build_disch_cfg+0x1a>
	tx_config[0][2] = 0;
	tx_config[0][3] = 0;
	tx_config[0][4] = 255;
	tx_config[0][5] =15;*/

}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <build_disch_cfgb>:

void build_disch_cfgb(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], uint8_t tx_config[][6],\
status_data_t *status_data, limit_t *limit)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	4603      	mov	r3, r0
 8002002:	73fb      	strb	r3, [r7, #15]
	uint16_t DCCx = 0x0000;
 8002004:	2300      	movs	r3, #0
 8002006:	82fb      	strh	r3, [r7, #22]
		//discharge all cells

	for (uint8_t i = 0; i < total_ic; i++){
 8002008:	2300      	movs	r3, #0
 800200a:	757b      	strb	r3, [r7, #21]
 800200c:	e051      	b.n	80020b2 <build_disch_cfgb+0xbe>
			for (uint8_t j = 12; j < CELL_NUM; j++){
 800200e:	230c      	movs	r3, #12
 8002010:	753b      	strb	r3, [r7, #20]
 8002012:	e02f      	b.n	8002074 <build_disch_cfgb+0x80>
				if (cell_data[i][j].voltage > (status_data->min_voltage + limit->tolerance)){
 8002014:	7d7a      	ldrb	r2, [r7, #21]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	461a      	mov	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4413      	add	r3, r2
 8002024:	7d3a      	ldrb	r2, [r7, #20]
 8002026:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800202a:	461a      	mov	r2, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002030:	4619      	mov	r1, r3
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	8b9b      	ldrh	r3, [r3, #28]
 8002036:	440b      	add	r3, r1
 8002038:	429a      	cmp	r2, r3
 800203a:	dd0b      	ble.n	8002054 <build_disch_cfgb+0x60>
					DCCx |= (1<<(j - 12));
 800203c:	7d3b      	ldrb	r3, [r7, #20]
 800203e:	3b0c      	subs	r3, #12
 8002040:	2201      	movs	r2, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	b21a      	sxth	r2, r3
 8002048:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800204c:	4313      	orrs	r3, r2
 800204e:	b21b      	sxth	r3, r3
 8002050:	82fb      	strh	r3, [r7, #22]
 8002052:	e00c      	b.n	800206e <build_disch_cfgb+0x7a>
				}
				else{
					DCCx &= ~(1<<(j - 12));
 8002054:	7d3b      	ldrb	r3, [r7, #20]
 8002056:	3b0c      	subs	r3, #12
 8002058:	2201      	movs	r2, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	b21b      	sxth	r3, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	b21a      	sxth	r2, r3
 8002064:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002068:	4013      	ands	r3, r2
 800206a:	b21b      	sxth	r3, r3
 800206c:	82fb      	strh	r3, [r7, #22]
			for (uint8_t j = 12; j < CELL_NUM; j++){
 800206e:	7d3b      	ldrb	r3, [r7, #20]
 8002070:	3301      	adds	r3, #1
 8002072:	753b      	strb	r3, [r7, #20]
 8002074:	7d3b      	ldrb	r3, [r7, #20]
 8002076:	2b11      	cmp	r3, #17
 8002078:	d9cc      	bls.n	8002014 <build_disch_cfgb+0x20>
				}
			}
			tx_config[i][0] = (DCCx & 0x0f) << 4 ;
 800207a:	8afb      	ldrh	r3, [r7, #22]
 800207c:	0119      	lsls	r1, r3, #4
 800207e:	7d7a      	ldrb	r2, [r7, #21]
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	b2ca      	uxtb	r2, r1
 8002090:	701a      	strb	r2, [r3, #0]
			tx_config[i][1] = (DCCx >> 4);
 8002092:	8afb      	ldrh	r3, [r7, #22]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	b299      	uxth	r1, r3
 8002098:	7d7a      	ldrb	r2, [r7, #21]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	b2ca      	uxtb	r2, r1
 80020aa:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < total_ic; i++){
 80020ac:	7d7b      	ldrb	r3, [r7, #21]
 80020ae:	3301      	adds	r3, #1
 80020b0:	757b      	strb	r3, [r7, #21]
 80020b2:	7d7a      	ldrb	r2, [r7, #21]
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d3a9      	bcc.n	800200e <build_disch_cfgb+0x1a>
		}
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <CanSend>:
	}

	return offcan;
}

void CanSend(uint8_t *TxData, uint8_t identifier ){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	70fb      	strb	r3, [r7, #3]

	TxHeader.Identifier = identifier;
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <CanSend+0x30>)
 80020d8:	6013      	str	r3, [r2, #0]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, TxData) != HAL_OK){
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4906      	ldr	r1, [pc, #24]	; (80020f8 <CanSend+0x30>)
 80020de:	4807      	ldr	r0, [pc, #28]	; (80020fc <CanSend+0x34>)
 80020e0:	f001 fd88 	bl	8003bf4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <CanSend+0x26>
	        // Transmission request Error
		Error_Handler();
 80020ea:	f000 fbf1 	bl	80028d0 <Error_Handler>
	}

}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000274 	.word	0x20000274
 80020fc:	200000d0 	.word	0x200000d0

08002100 <Send_cell_data>:
    return 1; // Message Identifier did not match
}



void Send_cell_data(cell_data_t cell_data[][CELL_NUM]){
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

	uint8_t cell_id = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	77fb      	strb	r3, [r7, #31]
	for(int i = 0; i < IC_NUM; i++){
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
 8002110:	e068      	b.n	80021e4 <Send_cell_data+0xe4>
		for(int j = 0; j < CELL_NUM; j += 3){
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
 8002116:	e05f      	b.n	80021d8 <Send_cell_data+0xd8>
			uint16_t buf = cell_data[i][j].voltage;
 8002118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	461a      	mov	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	6a3a      	ldr	r2, [r7, #32]
 800212a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800212e:	83bb      	strh	r3, [r7, #28]
			uint16_t buf2 = cell_data[i][j+1].voltage;
 8002130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	461a      	mov	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4413      	add	r3, r2
 8002140:	6a3a      	ldr	r2, [r7, #32]
 8002142:	3201      	adds	r2, #1
 8002144:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002148:	837b      	strh	r3, [r7, #26]
			uint16_t buf3 = cell_data[i][j+3].voltage;
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	461a      	mov	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	6a3a      	ldr	r2, [r7, #32]
 800215c:	3203      	adds	r2, #3
 800215e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002162:	833b      	strh	r3, [r7, #24]

			uint8_t c1_1 = buf;
 8002164:	8bbb      	ldrh	r3, [r7, #28]
 8002166:	75fb      	strb	r3, [r7, #23]
			uint8_t c2_1 = buf >> 8;
 8002168:	8bbb      	ldrh	r3, [r7, #28]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	b29b      	uxth	r3, r3
 800216e:	75bb      	strb	r3, [r7, #22]

			uint8_t c1_2 = buf2;
 8002170:	8b7b      	ldrh	r3, [r7, #26]
 8002172:	757b      	strb	r3, [r7, #21]
			uint8_t c2_2 = buf2 >> 8;
 8002174:	8b7b      	ldrh	r3, [r7, #26]
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	b29b      	uxth	r3, r3
 800217a:	753b      	strb	r3, [r7, #20]

			uint8_t c1_3 = buf3;
 800217c:	8b3b      	ldrh	r3, [r7, #24]
 800217e:	74fb      	strb	r3, [r7, #19]
			uint8_t c2_3 = buf3 >> 8;
 8002180:	8b3b      	ldrh	r3, [r7, #24]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	b29b      	uxth	r3, r3
 8002186:	74bb      	strb	r3, [r7, #18]



			cell_id = i * 18 + j;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	b2db      	uxtb	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	00d2      	lsls	r2, r2, #3
 8002190:	4413      	add	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	b2da      	uxtb	r2, r3
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4413      	add	r3, r2
 800219c:	77fb      	strb	r3, [r7, #31]
			uint8_t TxData[8] = { c1_1, c2_1, c1_2, c2_2 ,c1_3, c2_3, 0, 0};
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	723b      	strb	r3, [r7, #8]
 80021a2:	7dbb      	ldrb	r3, [r7, #22]
 80021a4:	727b      	strb	r3, [r7, #9]
 80021a6:	7d7b      	ldrb	r3, [r7, #21]
 80021a8:	72bb      	strb	r3, [r7, #10]
 80021aa:	7d3b      	ldrb	r3, [r7, #20]
 80021ac:	72fb      	strb	r3, [r7, #11]
 80021ae:	7cfb      	ldrb	r3, [r7, #19]
 80021b0:	733b      	strb	r3, [r7, #12]
 80021b2:	7cbb      	ldrb	r3, [r7, #18]
 80021b4:	737b      	strb	r3, [r7, #13]
 80021b6:	2300      	movs	r3, #0
 80021b8:	73bb      	strb	r3, [r7, #14]
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]

			CanSend(TxData, cell_id);
 80021be:	7ffa      	ldrb	r2, [r7, #31]
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff7e 	bl	80020c8 <CanSend>
			delay_u(100);
 80021cc:	2064      	movs	r0, #100	; 0x64
 80021ce:	f000 f811 	bl	80021f4 <delay_u>
		for(int j = 0; j < CELL_NUM; j += 3){
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	3303      	adds	r3, #3
 80021d6:	623b      	str	r3, [r7, #32]
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	2b11      	cmp	r3, #17
 80021dc:	dd9c      	ble.n	8002118 <Send_cell_data+0x18>
	for(int i = 0; i < IC_NUM; i++){
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	3301      	adds	r3, #1
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	2b07      	cmp	r3, #7
 80021e8:	dd93      	ble.n	8002112 <Send_cell_data+0x12>
		}
	}
}
 80021ea:	bf00      	nop
 80021ec:	bf00      	nop
 80021ee:	3728      	adds	r7, #40	; 0x28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <delay_u>:
#include "conf.h"

extern SPI_HandleTypeDef hspi1;


void delay_u(uint32_t us){
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <delay_u+0x58>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <delay_u+0x58>)
 8002202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002206:	60d3      	str	r3, [r2, #12]
		    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <delay_u+0x5c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a10      	ldr	r2, [pc, #64]	; (8002250 <delay_u+0x5c>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6013      	str	r3, [r2, #0]
		    // Get the current number of clock cycles
		    uint32_t const startTicks = DWT->CYCCNT;
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <delay_u+0x5c>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
		    // Calculate the number of clock cycles for the desired delay
		    uint32_t const delayTicks = (SystemCoreClock / 1000000) * us;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <delay_u+0x60>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <delay_u+0x64>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	0c9a      	lsrs	r2, r3, #18
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	60bb      	str	r3, [r7, #8]
		    // Wait until the number of clock cycles has elapsed
		    while (DWT->CYCCNT - startTicks < delayTicks);
 800222e:	bf00      	nop
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <delay_u+0x5c>)
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	429a      	cmp	r2, r3
 800223c:	d8f8      	bhi.n	8002230 <delay_u+0x3c>
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000edf0 	.word	0xe000edf0
 8002250:	e0001000 	.word	0xe0001000
 8002254:	20000038 	.word	0x20000038
 8002258:	431bde83 	.word	0x431bde83

0800225c <spi_write_read_byte>:

void delay_m(uint32_t ms){
	HAL_Delay(ms);
}

uint8_t spi_write_read_byte(uint8_t wbyte){
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af02      	add	r7, sp, #8
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]

	uint8_t rxByte;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2110      	movs	r1, #16
 800226a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226e:	f002 f83f 	bl	80042f0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &wbyte, &rxByte, 1, SPI_TIMEOUT);
 8002272:	f107 020f 	add.w	r2, r7, #15
 8002276:	1df9      	adds	r1, r7, #7
 8002278:	f643 2398 	movw	r3, #15000	; 0x3a98
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2301      	movs	r3, #1
 8002280:	4806      	ldr	r0, [pc, #24]	; (800229c <spi_write_read_byte+0x40>)
 8002282:	f003 fb5e 	bl	8005942 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002286:	2201      	movs	r2, #1
 8002288:	2110      	movs	r1, #16
 800228a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800228e:	f002 f82f 	bl	80042f0 <HAL_GPIO_WritePin>

	return rxByte;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000134 	.word	0x20000134

080022a0 <spi_write_array>:

uint32_t spi_write_array(uint8_t len, uint8_t *data){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2110      	movs	r1, #16
 80022b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b4:	f002 f81c 	bl	80042f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, len, SPI_TIMEOUT);
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	f643 2398 	movw	r3, #15000	; 0x3a98
 80022c0:	6839      	ldr	r1, [r7, #0]
 80022c2:	4807      	ldr	r0, [pc, #28]	; (80022e0 <spi_write_array+0x40>)
 80022c4:	f003 f89f 	bl	8005406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022c8:	2201      	movs	r2, #1
 80022ca:	2110      	movs	r1, #16
 80022cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d0:	f002 f80e 	bl	80042f0 <HAL_GPIO_WritePin>

	return 0;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000134 	.word	0x20000134

080022e4 <spi_write_then_read_array_ltc>:

uint32_t spi_write_then_read_array_ltc(uint8_t wlen, uint8_t *wbuffer, uint8_t rlen, uint8_t *rbuffer){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	4603      	mov	r3, r0
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	4613      	mov	r3, r2
 80022f4:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2110      	movs	r1, #16
 80022fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fe:	f001 fff7 	bl	80042f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wbuffer, wlen, SPI_TIMEOUT);
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	b29a      	uxth	r2, r3
 8002306:	f643 2398 	movw	r3, #15000	; 0x3a98
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	480a      	ldr	r0, [pc, #40]	; (8002338 <spi_write_then_read_array_ltc+0x54>)
 800230e:	f003 f87a 	bl	8005406 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rbuffer, rlen, SPI_TIMEOUT);
 8002312:	7bbb      	ldrb	r3, [r7, #14]
 8002314:	b29a      	uxth	r2, r3
 8002316:	f643 2398 	movw	r3, #15000	; 0x3a98
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4806      	ldr	r0, [pc, #24]	; (8002338 <spi_write_then_read_array_ltc+0x54>)
 800231e:	f003 f9e0 	bl	80056e2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002322:	2201      	movs	r2, #1
 8002324:	2110      	movs	r1, #16
 8002326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800232a:	f001 ffe1 	bl	80042f0 <HAL_GPIO_WritePin>

	return 0;
 800232e:	2300      	movs	r3, #0

}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000134 	.word	0x20000134

0800233c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002340:	f001 f89b 	bl	800347a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002344:	f000 f80d 	bl	8002362 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002348:	f000 fa52 	bl	80027f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800234c:	f000 fa04 	bl	8002758 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002350:	f000 f914 	bl	800257c <MX_SPI1_Init>
  MX_TIM8_Init();
 8002354:	f000 f950 	bl	80025f8 <MX_TIM8_Init>
  MX_FDCAN1_Init();
 8002358:	f000 f844 	bl	80023e4 <MX_FDCAN1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      // Here we create a FDCAN message
	  operation_main();
 800235c:	f000 fabe 	bl	80028dc <operation_main>
 8002360:	e7fc      	b.n	800235c <main+0x20>

08002362 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b094      	sub	sp, #80	; 0x50
 8002366:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002368:	f107 0318 	add.w	r3, r7, #24
 800236c:	2238      	movs	r2, #56	; 0x38
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f005 fcbd 	bl	8007cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002384:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002388:	f001 ffca 	bl	8004320 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800238c:	2302      	movs	r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002396:	2340      	movs	r3, #64	; 0x40
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800239a:	2300      	movs	r3, #0
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239e:	f107 0318 	add.w	r3, r7, #24
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 f860 	bl	8004468 <HAL_RCC_OscConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80023ae:	f000 fa8f 	bl	80028d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b2:	230f      	movs	r3, #15
 80023b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023b6:	2301      	movs	r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 fb64 	bl	8004a98 <HAL_RCC_ClockConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0x78>
  {
    Error_Handler();
 80023d6:	f000 fa7b 	bl	80028d0 <Error_Handler>
  }
}
 80023da:	bf00      	nop
 80023dc:	3750      	adds	r7, #80	; 0x50
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan.Instance = FDCAN1;
 80023ea:	4b61      	ldr	r3, [pc, #388]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 80023ec:	4a61      	ldr	r2, [pc, #388]	; (8002574 <MX_FDCAN1_Init+0x190>)
 80023ee:	601a      	str	r2, [r3, #0]
  hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80023f0:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	605a      	str	r2, [r3, #4]
  hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80023f6:	4b5e      	ldr	r3, [pc, #376]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 80023fc:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  hfdcan.Init.AutoRetransmission = ENABLE;
 8002402:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 8002404:	2201      	movs	r2, #1
 8002406:	741a      	strb	r2, [r3, #16]
  hfdcan.Init.TransmitPause = DISABLE;
 8002408:	4b59      	ldr	r3, [pc, #356]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 800240a:	2200      	movs	r2, #0
 800240c:	745a      	strb	r2, [r3, #17]
  hfdcan.Init.ProtocolException = DISABLE;
 800240e:	4b58      	ldr	r3, [pc, #352]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 8002410:	2200      	movs	r2, #0
 8002412:	749a      	strb	r2, [r3, #18]
  hfdcan.Init.NominalPrescaler = 1;
 8002414:	4b56      	ldr	r3, [pc, #344]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 8002416:	2201      	movs	r2, #1
 8002418:	615a      	str	r2, [r3, #20]
  hfdcan.Init.NominalSyncJumpWidth = 1;
 800241a:	4b55      	ldr	r3, [pc, #340]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 800241c:	2201      	movs	r2, #1
 800241e:	619a      	str	r2, [r3, #24]
  hfdcan.Init.NominalTimeSeg1 = 13;
 8002420:	4b53      	ldr	r3, [pc, #332]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 8002422:	220d      	movs	r2, #13
 8002424:	61da      	str	r2, [r3, #28]
  hfdcan.Init.NominalTimeSeg2 = 2;
 8002426:	4b52      	ldr	r3, [pc, #328]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 8002428:	2202      	movs	r2, #2
 800242a:	621a      	str	r2, [r3, #32]
  hfdcan.Init.DataPrescaler = 1;
 800242c:	4b50      	ldr	r3, [pc, #320]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 800242e:	2201      	movs	r2, #1
 8002430:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan.Init.DataSyncJumpWidth = 1;
 8002432:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 8002434:	2201      	movs	r2, #1
 8002436:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan.Init.DataTimeSeg1 = 1;
 8002438:	4b4d      	ldr	r3, [pc, #308]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 800243a:	2201      	movs	r2, #1
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan.Init.DataTimeSeg2 = 1;
 800243e:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 8002440:	2201      	movs	r2, #1
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan.Init.StdFiltersNbr = 28;
 8002444:	4b4a      	ldr	r3, [pc, #296]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 8002446:	221c      	movs	r2, #28
 8002448:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan.Init.ExtFiltersNbr = 0;
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 800244c:	2200      	movs	r2, #0
 800244e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002450:	4b47      	ldr	r3, [pc, #284]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 8002452:	2200      	movs	r2, #0
 8002454:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 8002456:	4846      	ldr	r0, [pc, #280]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 8002458:	f001 f986 	bl	8003768 <HAL_FDCAN_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8002462:	f000 fa35 	bl	80028d0 <Error_Handler>
  }

  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef	sFilterConfig;

  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8002466:	2201      	movs	r2, #1
 8002468:	2140      	movs	r1, #64	; 0x40
 800246a:	4841      	ldr	r0, [pc, #260]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 800246c:	f001 fb61 	bl	8003b32 <HAL_FDCAN_ConfigRxFifoOverwrite>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_FDCAN1_Init+0x96>
  	{
  		Error_Handler();
 8002476:	f000 fa2b 	bl	80028d0 <Error_Handler>
  	}
  	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 800247a:	2201      	movs	r2, #1
 800247c:	2141      	movs	r1, #65	; 0x41
 800247e:	483c      	ldr	r0, [pc, #240]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 8002480:	f001 fb57 	bl	8003b32 <HAL_FDCAN_ConfigRxFifoOverwrite>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_FDCAN1_Init+0xaa>
  	{
  		Error_Handler();
 800248a:	f000 fa21 	bl	80028d0 <Error_Handler>
  	}

    //only accept config/request can messages and sync can messages
  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIndex = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002496:	2302      	movs	r3, #2
 8002498:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800249a:	2301      	movs	r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterID1 = CANID_CONFIG;
 800249e:	f240 6302 	movw	r3, #1538	; 0x602
 80024a2:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterID2 = 0x7FF;
 80024a4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80024a8:	617b      	str	r3, [r7, #20]
  	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 80024aa:	463b      	mov	r3, r7
 80024ac:	4619      	mov	r1, r3
 80024ae:	4830      	ldr	r0, [pc, #192]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 80024b0:	f001 fab4 	bl	8003a1c <HAL_FDCAN_ConfigFilter>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_FDCAN1_Init+0xda>
  	{
  		Error_Handler();
 80024ba:	f000 fa09 	bl	80028d0 <Error_Handler>
  	}

    // Additional filter configuration for 0x52x messages
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80024be:	2300      	movs	r3, #0
 80024c0:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80024c6:	2302      	movs	r3, #2
 80024c8:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80024ca:	2301      	movs	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x520;   // Start of the range
 80024ce:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80024d2:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x700;   // Mask for the filter. This will allow IDs 0x520 - 0x52F
 80024d4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80024d8:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 80024da:	463b      	mov	r3, r7
 80024dc:	4619      	mov	r1, r3
 80024de:	4824      	ldr	r0, [pc, #144]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 80024e0:	f001 fa9c 	bl	8003a1c <HAL_FDCAN_ConfigFilter>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_FDCAN1_Init+0x10a>
    {
        Error_Handler();
 80024ea:	f000 f9f1 	bl	80028d0 <Error_Handler>
    }

  	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 80024ee:	2301      	movs	r3, #1
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2301      	movs	r3, #1
 80024f4:	2202      	movs	r2, #2
 80024f6:	2102      	movs	r1, #2
 80024f8:	481d      	ldr	r0, [pc, #116]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 80024fa:	f001 fae9 	bl	8003ad0 <HAL_FDCAN_ConfigGlobalFilter>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_FDCAN1_Init+0x124>
  	{
  		Error_Handler();
 8002504:	f000 f9e4 	bl	80028d0 <Error_Handler>
  	}

  	if(HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 8002508:	4819      	ldr	r0, [pc, #100]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 800250a:	f001 fb4b 	bl	8003ba4 <HAL_FDCAN_Start>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_FDCAN1_Init+0x134>
  	{
  		Error_Handler();
 8002514:	f000 f9dc 	bl	80028d0 <Error_Handler>
  	}
  	if(HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002518:	2200      	movs	r2, #0
 800251a:	2101      	movs	r1, #1
 800251c:	4814      	ldr	r0, [pc, #80]	; (8002570 <MX_FDCAN1_Init+0x18c>)
 800251e:	f001 fbad 	bl	8003c7c <HAL_FDCAN_ActivateNotification>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_FDCAN1_Init+0x148>
  	{
  		Error_Handler();
 8002528:	f000 f9d2 	bl	80028d0 <Error_Handler>
  	}

  	TxHeader.Identifier = 0x123; // Modify this with your identifier
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <MX_FDCAN1_Init+0x194>)
 800252e:	f240 1223 	movw	r2, #291	; 0x123
 8002532:	601a      	str	r2, [r3, #0]
  	TxHeader.IdType = FDCAN_STANDARD_ID;
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <MX_FDCAN1_Init+0x194>)
 8002536:	2200      	movs	r2, #0
 8002538:	605a      	str	r2, [r3, #4]
  	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <MX_FDCAN1_Init+0x194>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002540:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <MX_FDCAN1_Init+0x194>)
 8002542:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002546:	60da      	str	r2, [r3, #12]
  	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <MX_FDCAN1_Init+0x194>)
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
  	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <MX_FDCAN1_Init+0x194>)
 8002550:	2200      	movs	r2, #0
 8002552:	615a      	str	r2, [r3, #20]
  	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <MX_FDCAN1_Init+0x194>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
  	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <MX_FDCAN1_Init+0x194>)
 800255c:	2200      	movs	r2, #0
 800255e:	61da      	str	r2, [r3, #28]
  	TxHeader.MessageMarker = 0;
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <MX_FDCAN1_Init+0x194>)
 8002562:	2200      	movs	r2, #0
 8002564:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200000d0 	.word	0x200000d0
 8002574:	40006400 	.word	0x40006400
 8002578:	20000274 	.word	0x20000274

0800257c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <MX_SPI1_Init+0x74>)
 8002582:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <MX_SPI1_Init+0x78>)
 8002584:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <MX_SPI1_Init+0x74>)
 8002588:	f44f 7282 	mov.w	r2, #260	; 0x104
 800258c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800258e:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <MX_SPI1_Init+0x74>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002594:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <MX_SPI1_Init+0x74>)
 8002596:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800259a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <MX_SPI1_Init+0x74>)
 800259e:	2202      	movs	r2, #2
 80025a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <MX_SPI1_Init+0x74>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <MX_SPI1_Init+0x74>)
 80025aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <MX_SPI1_Init+0x74>)
 80025b2:	2238      	movs	r2, #56	; 0x38
 80025b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <MX_SPI1_Init+0x74>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <MX_SPI1_Init+0x74>)
 80025be:	2200      	movs	r2, #0
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <MX_SPI1_Init+0x74>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <MX_SPI1_Init+0x74>)
 80025ca:	2207      	movs	r2, #7
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <MX_SPI1_Init+0x74>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <MX_SPI1_Init+0x74>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025da:	4805      	ldr	r0, [pc, #20]	; (80025f0 <MX_SPI1_Init+0x74>)
 80025dc:	f002 fe68 	bl	80052b0 <HAL_SPI_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80025e6:	f000 f973 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000134 	.word	0x20000134
 80025f4:	40013000 	.word	0x40013000

080025f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b09c      	sub	sp, #112	; 0x70
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002618:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
 8002628:	615a      	str	r2, [r3, #20]
 800262a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	2234      	movs	r2, #52	; 0x34
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f005 fb5c 	bl	8007cf0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002638:	4b45      	ldr	r3, [pc, #276]	; (8002750 <MX_TIM8_Init+0x158>)
 800263a:	4a46      	ldr	r2, [pc, #280]	; (8002754 <MX_TIM8_Init+0x15c>)
 800263c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800263e:	4b44      	ldr	r3, [pc, #272]	; (8002750 <MX_TIM8_Init+0x158>)
 8002640:	2200      	movs	r2, #0
 8002642:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002644:	4b42      	ldr	r3, [pc, #264]	; (8002750 <MX_TIM8_Init+0x158>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <MX_TIM8_Init+0x158>)
 800264c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002650:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002652:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <MX_TIM8_Init+0x158>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002658:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <MX_TIM8_Init+0x158>)
 800265a:	2200      	movs	r2, #0
 800265c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <MX_TIM8_Init+0x158>)
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002664:	483a      	ldr	r0, [pc, #232]	; (8002750 <MX_TIM8_Init+0x158>)
 8002666:	f003 fd3b 	bl	80060e0 <HAL_TIM_Base_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002670:	f000 f92e 	bl	80028d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002678:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800267a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800267e:	4619      	mov	r1, r3
 8002680:	4833      	ldr	r0, [pc, #204]	; (8002750 <MX_TIM8_Init+0x158>)
 8002682:	f003 fef9 	bl	8006478 <HAL_TIM_ConfigClockSource>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800268c:	f000 f920 	bl	80028d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002690:	482f      	ldr	r0, [pc, #188]	; (8002750 <MX_TIM8_Init+0x158>)
 8002692:	f003 fd7c 	bl	800618e <HAL_TIM_PWM_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800269c:	f000 f918 	bl	80028d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a0:	2300      	movs	r3, #0
 80026a2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026a4:	2300      	movs	r3, #0
 80026a6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026b0:	4619      	mov	r1, r3
 80026b2:	4827      	ldr	r0, [pc, #156]	; (8002750 <MX_TIM8_Init+0x158>)
 80026b4:	f004 fbfc 	bl	8006eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80026be:	f000 f907 	bl	80028d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c2:	2360      	movs	r3, #96	; 0x60
 80026c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ca:	2300      	movs	r3, #0
 80026cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026ce:	2300      	movs	r3, #0
 80026d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026e2:	2208      	movs	r2, #8
 80026e4:	4619      	mov	r1, r3
 80026e6:	481a      	ldr	r0, [pc, #104]	; (8002750 <MX_TIM8_Init+0x158>)
 80026e8:	f003 fdb2 	bl	8006250 <HAL_TIM_PWM_ConfigChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80026f2:	f000 f8ed 	bl	80028d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800270a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800270e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002714:	2300      	movs	r3, #0
 8002716:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800271c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002726:	2300      	movs	r3, #0
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800272a:	2300      	movs	r3, #0
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	4619      	mov	r1, r3
 8002732:	4807      	ldr	r0, [pc, #28]	; (8002750 <MX_TIM8_Init+0x158>)
 8002734:	f004 fc3e 	bl	8006fb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 800273e:	f000 f8c7 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <MX_TIM8_Init+0x158>)
 8002744:	f000 fcf0 	bl	8003128 <HAL_TIM_MspPostInit>

}
 8002748:	bf00      	nop
 800274a:	3770      	adds	r7, #112	; 0x70
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000198 	.word	0x20000198
 8002754:	40013400 	.word	0x40013400

08002758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800275c:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 800275e:	4a23      	ldr	r2, [pc, #140]	; (80027ec <MX_USART2_UART_Init+0x94>)
 8002760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 8002764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800277c:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 800277e:	220c      	movs	r2, #12
 8002780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002782:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002788:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800278e:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 8002790:	2200      	movs	r2, #0
 8002792:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 8002796:	2200      	movs	r2, #0
 8002798:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 800279c:	2200      	movs	r2, #0
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027a0:	4811      	ldr	r0, [pc, #68]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 80027a2:	f004 fca7 	bl	80070f4 <HAL_UART_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80027ac:	f000 f890 	bl	80028d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b0:	2100      	movs	r1, #0
 80027b2:	480d      	ldr	r0, [pc, #52]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 80027b4:	f005 f9a8 	bl	8007b08 <HAL_UARTEx_SetTxFifoThreshold>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80027be:	f000 f887 	bl	80028d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c2:	2100      	movs	r1, #0
 80027c4:	4808      	ldr	r0, [pc, #32]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 80027c6:	f005 f9dd 	bl	8007b84 <HAL_UARTEx_SetRxFifoThreshold>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80027d0:	f000 f87e 	bl	80028d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027d4:	4804      	ldr	r0, [pc, #16]	; (80027e8 <MX_USART2_UART_Init+0x90>)
 80027d6:	f005 f95e 	bl	8007a96 <HAL_UARTEx_DisableFifoMode>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80027e0:	f000 f876 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200001e4 	.word	0x200001e4
 80027ec:	40004400 	.word	0x40004400

080027f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f6:	f107 030c 	add.w	r3, r7, #12
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002806:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <MX_GPIO_Init+0xd8>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	4a2f      	ldr	r2, [pc, #188]	; (80028c8 <MX_GPIO_Init+0xd8>)
 800280c:	f043 0320 	orr.w	r3, r3, #32
 8002810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <MX_GPIO_Init+0xd8>)
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <MX_GPIO_Init+0xd8>)
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	4a29      	ldr	r2, [pc, #164]	; (80028c8 <MX_GPIO_Init+0xd8>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282a:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <MX_GPIO_Init+0xd8>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <MX_GPIO_Init+0xd8>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <MX_GPIO_Init+0xd8>)
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002842:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <MX_GPIO_Init+0xd8>)
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 800284e:	2200      	movs	r2, #0
 8002850:	f248 7110 	movw	r1, #34576	; 0x8710
 8002854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002858:	f001 fd4a 	bl	80042f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800285c:	2200      	movs	r2, #0
 800285e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002862:	481a      	ldr	r0, [pc, #104]	; (80028cc <MX_GPIO_Init+0xdc>)
 8002864:	f001 fd44 	bl	80042f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 Led_debug_Pin PRE_Done_Pin AMS_Ok_Pin
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8002868:	f248 7310 	movw	r3, #34576	; 0x8710
 800286c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286e:	2301      	movs	r3, #1
 8002870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287a:	f107 030c 	add.w	r3, r7, #12
 800287e:	4619      	mov	r1, r3
 8002880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002884:	f001 fbb2 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_PRE_Pin AIR__Pin AIR_B7_Pin */
  GPIO_InitStruct.Pin = AIR_PRE_Pin|AIR__Pin|AIR_B7_Pin;
 8002888:	23d0      	movs	r3, #208	; 0xd0
 800288a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	4619      	mov	r1, r3
 800289a:	480c      	ldr	r0, [pc, #48]	; (80028cc <MX_GPIO_Init+0xdc>)
 800289c:	f001 fba6 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80028a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a6:	2301      	movs	r3, #1
 80028a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80028b2:	f107 030c 	add.w	r3, r7, #12
 80028b6:	4619      	mov	r1, r3
 80028b8:	4804      	ldr	r0, [pc, #16]	; (80028cc <MX_GPIO_Init+0xdc>)
 80028ba:	f001 fb97 	bl	8003fec <HAL_GPIO_Init>

}
 80028be:	bf00      	nop
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	48000400 	.word	0x48000400

080028d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d4:	b672      	cpsid	i
}
 80028d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <Error_Handler+0x8>
	...

080028dc <operation_main>:
};

int charger_event_flag;
static uint8_t charger_event_counter;

void operation_main(void){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0

	open_AIR();
 80028e2:	f000 f86b 	bl	80029bc <open_AIR>
	open_PRE();
 80028e6:	f000 f87f 	bl	80029e8 <open_PRE>

	CanSend(start_ivt, 0x411);
 80028ea:	f240 4111 	movw	r1, #1041	; 0x411
 80028ee:	482f      	ldr	r0, [pc, #188]	; (80029ac <operation_main+0xd0>)
 80028f0:	f7ff fbea 	bl	80020c8 <CanSend>

	initialize();
 80028f4:	f7fe fae3 	bl	8000ebe <initialize>
	//fan_energize();
	init_slave_cfg();
 80028f8:	f000 f9a4 	bl	8002c44 <init_slave_cfg>

	for(uint32_t i=0; i<NUMB_REASON_CODES; i++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	e009      	b.n	8002916 <operation_main+0x3a>
		{
			status_data.error_counters[i]=0;
 8002902:	4a2b      	ldr	r2, [pc, #172]	; (80029b0 <operation_main+0xd4>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	331c      	adds	r3, #28
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	2200      	movs	r2, #0
 800290e:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<NUMB_REASON_CODES; i++)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3301      	adds	r3, #1
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b0c      	cmp	r3, #12
 800291a:	d9f2      	bls.n	8002902 <operation_main+0x26>
		}

		status_data.soc = 100;
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <operation_main+0xd4>)
 800291e:	4a25      	ldr	r2, [pc, #148]	; (80029b4 <operation_main+0xd8>)
 8002920:	611a      	str	r2, [r3, #16]
		status_data.pec_error_counter = 0;
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <operation_main+0xd4>)
 8002924:	2200      	movs	r2, #0
 8002926:	669a      	str	r2, [r3, #104]	; 0x68
		status_data.pec_error_counter_last = 0;
 8002928:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <operation_main+0xd4>)
 800292a:	2200      	movs	r2, #0
 800292c:	66da      	str	r2, [r3, #108]	; 0x6c

		status_data.limping = 0;
 800292e:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <operation_main+0xd4>)
 8002930:	2200      	movs	r2, #0
 8002932:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		status_data.recieved_IVT = 0;
 8002936:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <operation_main+0xd4>)
 8002938:	2200      	movs	r2, #0
 800293a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

		status_data.opmode = 0;
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <operation_main+0xd4>)
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		status_data.opmode = (1 << 0)|(1 << 4);
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <operation_main+0xd4>)
 8002948:	2211      	movs	r2, #17
 800294a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		status_data.mode = 0;
 800294e:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <operation_main+0xd4>)
 8002950:	2200      	movs	r2, #0
 8002952:	711a      	strb	r2, [r3, #4]

	while(1){


		switch (status_data.mode){
 8002954:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <operation_main+0xd4>)
 8002956:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d823      	bhi.n	80029a6 <operation_main+0xca>
 800295e:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <operation_main+0x88>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002975 	.word	0x08002975
 8002968:	0800298b 	.word	0x0800298b
 800296c:	080029a7 	.word	0x080029a7
 8002970:	080029a7 	.word	0x080029a7
			case 0:
				core_routine(RETEST_YES);
 8002974:	2001      	movs	r0, #1
 8002976:	f000 f86f 	bl	8002a58 <core_routine>
				Send_cell_data(cell_data);
 800297a:	480f      	ldr	r0, [pc, #60]	; (80029b8 <operation_main+0xdc>)
 800297c:	f7ff fbc0 	bl	8002100 <Send_cell_data>
			    HAL_Delay(900);
 8002980:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002984:	f000 fdea 	bl	800355c <HAL_Delay>

				break;
 8002988:	e00e      	b.n	80029a8 <operation_main+0xcc>
			case 1:
				read_cell_voltage();
 800298a:	f000 f8fb 	bl	8002b84 <read_cell_voltage>
				get_minmax_voltage(IC_NUM, cell_data, &status_data);
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <operation_main+0xd4>)
 8002990:	4909      	ldr	r1, [pc, #36]	; (80029b8 <operation_main+0xdc>)
 8002992:	2008      	movs	r0, #8
 8002994:	f7ff fa2c 	bl	8001df0 <get_minmax_voltage>
				balance_routine();
 8002998:	f000 f892 	bl	8002ac0 <balance_routine>
				HAL_Delay(2000);
 800299c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029a0:	f000 fddc 	bl	800355c <HAL_Delay>

				break;
 80029a4:	e000      	b.n	80029a8 <operation_main+0xcc>
				break;
			case 3:
				//debug_routine();
				break;
			default:
				break;
 80029a6:	bf00      	nop
		switch (status_data.mode){
 80029a8:	e7d4      	b.n	8002954 <operation_main+0x78>
 80029aa:	bf00      	nop
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000618 	.word	0x20000618
 80029b4:	42c80000 	.word	0x42c80000
 80029b8:	20000298 	.word	0x20000298

080029bc <open_AIR>:
		Data is checked against limits and a return value is generated.

	\return status of test_limits function (0: OK, -1 FAIL).
*/

void open_AIR(void){
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80029c0:	2200      	movs	r2, #0
 80029c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ca:	f001 fc91 	bl	80042f0 <HAL_GPIO_WritePin>
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <close_AIR>:

void close_AIR(void){
 80029d2:	b580      	push	{r7, lr}
 80029d4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 80029d6:	2201      	movs	r2, #1
 80029d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e0:	f001 fc86 	bl	80042f0 <HAL_GPIO_WritePin>
}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <open_PRE>:
void close_PRE(void){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);

}

void open_PRE(void){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 80029ec:	2200      	movs	r2, #0
 80029ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f6:	f001 fc7b 	bl	80042f0 <HAL_GPIO_WritePin>

}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}

080029fe <AMS_OK>:

int AMS_OK(status_data_t *status_data, limit_t *limit){
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
	if(status_data->min_voltage > limit->min_voltage && status_data->max_voltage < limit->max_voltage){
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	885b      	ldrh	r3, [r3, #2]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d919      	bls.n	8002a48 <AMS_OK+0x4a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d213      	bcs.n	8002a48 <AMS_OK+0x4a>
		if(status_data->min_temp > limit->min_temp && status_data->max_temp < limit->max_temp){
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	dd0b      	ble.n	8002a48 <AMS_OK+0x4a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	da03      	bge.n	8002a48 <AMS_OK+0x4a>
			close_AIR();
 8002a40:	f7ff ffc7 	bl	80029d2 <close_AIR>
			return 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e002      	b.n	8002a4e <AMS_OK+0x50>
		}
	}
	open_AIR();
 8002a48:	f7ff ffb8 	bl	80029bc <open_AIR>
	return 1;
 8002a4c:	2301      	movs	r3, #1
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <core_routine>:

int8_t core_routine(int32_t retest){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	empty_disch_cfg();
 8002a60:	f000 f850 	bl	8002b04 <empty_disch_cfg>
	read_cell_voltage();
 8002a64:	f000 f88e 	bl	8002b84 <read_cell_voltage>
	read_temp_measurement();
 8002a68:	f000 f8ba 	bl	8002be0 <read_temp_measurement>
	get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002a6c:	4a10      	ldr	r2, [pc, #64]	; (8002ab0 <core_routine+0x58>)
 8002a6e:	4911      	ldr	r1, [pc, #68]	; (8002ab4 <core_routine+0x5c>)
 8002a70:	2008      	movs	r0, #8
 8002a72:	f7ff f9bd 	bl	8001df0 <get_minmax_voltage>
	get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8002a76:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <core_routine+0x58>)
 8002a78:	490f      	ldr	r1, [pc, #60]	; (8002ab8 <core_routine+0x60>)
 8002a7a:	2008      	movs	r0, #8
 8002a7c:	f7ff f928 	bl	8001cd0 <get_minmax_temperature>
	calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 8002a80:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <core_routine+0x58>)
 8002a82:	490c      	ldr	r1, [pc, #48]	; (8002ab4 <core_routine+0x5c>)
 8002a84:	2008      	movs	r0, #8
 8002a86:	f7ff f8dd 	bl	8001c44 <calc_sum_of_cells>
	AMS_OK(&status_data, &limits);
 8002a8a:	490c      	ldr	r1, [pc, #48]	; (8002abc <core_routine+0x64>)
 8002a8c:	4808      	ldr	r0, [pc, #32]	; (8002ab0 <core_routine+0x58>)
 8002a8e:	f7ff ffb6 	bl	80029fe <AMS_OK>
	read_IVT(&status_data);
	calculate_soc(&status_data);
	precharge_compare();
#endif

	test_limp(&status_data, &limits);
 8002a92:	490a      	ldr	r1, [pc, #40]	; (8002abc <core_routine+0x64>)
 8002a94:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <core_routine+0x58>)
 8002a96:	f000 f989 	bl	8002dac <test_limp>


	return test_limits(&status_data, &limits, retest);
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4907      	ldr	r1, [pc, #28]	; (8002abc <core_routine+0x64>)
 8002a9e:	4804      	ldr	r0, [pc, #16]	; (8002ab0 <core_routine+0x58>)
 8002aa0:	f000 f9be 	bl	8002e20 <test_limits>
 8002aa4:	4603      	mov	r3, r0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000618 	.word	0x20000618
 8002ab4:	20000298 	.word	0x20000298
 8002ab8:	200003b8 	.word	0x200003b8
 8002abc:	20000008 	.word	0x20000008

08002ac0 <balance_routine>:
	Discharge configuration bytes in slave_cfg_tx array are written, and
	configuration is sent to LTC-6811s. After some delay configuration is
	read back to slave_cfg_rx array.
*/
void balance_routine(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af02      	add	r7, sp, #8
	// TODO build_disch_cfg(IC_NUM, cell_data, slave_cfg_tx, &status_data, &limits);
	build_disch_cfg(IC_NUM, cell_data, slave_cfg_tx, &status_data, &limits);
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <balance_routine+0x30>)
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <balance_routine+0x34>)
 8002acc:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <balance_routine+0x38>)
 8002ace:	490b      	ldr	r1, [pc, #44]	; (8002afc <balance_routine+0x3c>)
 8002ad0:	2008      	movs	r0, #8
 8002ad2:	f7ff fa25 	bl	8001f20 <build_disch_cfg>
	build_disch_cfgb(IC_NUM, cell_data, slave_cfgb_tx, &status_data, &limits);
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <balance_routine+0x30>)
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <balance_routine+0x34>)
 8002adc:	4a08      	ldr	r2, [pc, #32]	; (8002b00 <balance_routine+0x40>)
 8002ade:	4907      	ldr	r1, [pc, #28]	; (8002afc <balance_routine+0x3c>)
 8002ae0:	2008      	movs	r0, #8
 8002ae2:	f7ff fa87 	bl	8001ff4 <build_disch_cfgb>

	cfg_slaves();
 8002ae6:	f000 f8fd 	bl	8002ce4 <cfg_slaves>

}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000008 	.word	0x20000008
 8002af4:	20000618 	.word	0x20000618
 8002af8:	20000538 	.word	0x20000538
 8002afc:	20000298 	.word	0x20000298
 8002b00:	20000568 	.word	0x20000568

08002b04 <empty_disch_cfg>:

void empty_disch_cfg(void){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
	WakeUp();
 8002b0a:	f7fe f9cd 	bl	8000ea8 <WakeUp>

	for(int i = 0; i < IC_NUM; i++){
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	e02a      	b.n	8002b6a <empty_disch_cfg+0x66>
		slave_cfg_tx[i][4] = 0x00 ;
 8002b14:	4919      	ldr	r1, [pc, #100]	; (8002b7c <empty_disch_cfg+0x78>)
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	440b      	add	r3, r1
 8002b22:	3304      	adds	r3, #4
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 8002b28:	4914      	ldr	r1, [pc, #80]	; (8002b7c <empty_disch_cfg+0x78>)
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	440b      	add	r3, r1
 8002b36:	3305      	adds	r3, #5
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]

		slave_cfgb_tx[i][4] = 0x00 ;
 8002b3c:	4910      	ldr	r1, [pc, #64]	; (8002b80 <empty_disch_cfg+0x7c>)
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	440b      	add	r3, r1
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
		slave_cfgb_tx[i][5] = 0x00;
 8002b50:	490b      	ldr	r1, [pc, #44]	; (8002b80 <empty_disch_cfg+0x7c>)
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3305      	adds	r3, #5
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < IC_NUM; i++){
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3301      	adds	r3, #1
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b07      	cmp	r3, #7
 8002b6e:	ddd1      	ble.n	8002b14 <empty_disch_cfg+0x10>
	}

	cfg_slaves();
 8002b70:	f000 f8b8 	bl	8002ce4 <cfg_slaves>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000538 	.word	0x20000538
 8002b80:	20000568 	.word	0x20000568

08002b84 <read_cell_voltage>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_cell_voltage(void){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 8002b8a:	f7fe f98d 	bl	8000ea8 <WakeUp>
	adcv();
 8002b8e:	f7ff f811 	bl	8001bb4 <adcv>
	adcv_delay();
 8002b92:	f7fe ffb0 	bl	8001af6 <adcv_delay>

	WakeIdle();
 8002b96:	f7fe f97d 	bl	8000e94 <WakeIdle>

	for(uint8_t reg = 0; reg < 5; reg++){
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	71fb      	strb	r3, [r7, #7]
 8002b9e:	e011      	b.n	8002bc4 <read_cell_voltage+0x40>
		pec = rdcv(0, IC_NUM, cell_data);
 8002ba0:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <read_cell_voltage+0x58>)
 8002ba2:	2108      	movs	r1, #8
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fe fca9 	bl	80014fc <rdcv>
 8002baa:	4603      	mov	r3, r0
 8002bac:	71bb      	strb	r3, [r7, #6]
		if (pec == 0) {
 8002bae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <read_cell_voltage+0x36>
			return 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e00b      	b.n	8002bd2 <read_cell_voltage+0x4e>
		}
		else increase_pec_counter();
 8002bba:	f000 f8b7 	bl	8002d2c <increase_pec_counter>
	for(uint8_t reg = 0; reg < 5; reg++){
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	71fb      	strb	r3, [r7, #7]
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d9ea      	bls.n	8002ba0 <read_cell_voltage+0x1c>
	}
	goto_safe_state(PEC_ERROR);
 8002bca:	2008      	movs	r0, #8
 8002bcc:	f000 f8ce 	bl	8002d6c <goto_safe_state>
	return -1;
 8002bd0:	23ff      	movs	r3, #255	; 0xff

}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000298 	.word	0x20000298

08002be0 <read_temp_measurement>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_temp_measurement(void){
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 8002be6:	f7fe f95f 	bl	8000ea8 <WakeUp>
	adax();
 8002bea:	f7ff f807 	bl	8001bfc <adax>
	adax_delay();
 8002bee:	f7fe ff8b 	bl	8001b08 <adax_delay>
	WakeIdle();
 8002bf2:	f7fe f94f 	bl	8000e94 <WakeIdle>

	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	71fb      	strb	r3, [r7, #7]
 8002bfa:	e015      	b.n	8002c28 <read_temp_measurement+0x48>
			 pec = rdaux(0, IC_NUM, temp_data);  // pec = ltc6804_rdaux(0, IC_NUM, temp_data);
 8002bfc:	4a10      	ldr	r2, [pc, #64]	; (8002c40 <read_temp_measurement+0x60>)
 8002bfe:	2108      	movs	r1, #8
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7fe fe30 	bl	8001866 <rdaux>
 8002c06:	4603      	mov	r3, r0
 8002c08:	71bb      	strb	r3, [r7, #6]
			 temp_calc(IC_NUM, temp_data); // Moved out of 'if' to execute even on pec error
 8002c0a:	490d      	ldr	r1, [pc, #52]	; (8002c40 <read_temp_measurement+0x60>)
 8002c0c:	2008      	movs	r0, #8
 8002c0e:	f000 fb57 	bl	80032c0 <temp_calc>
			if (pec == 0) {
 8002c12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <read_temp_measurement+0x3e>
				return 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e00b      	b.n	8002c36 <read_temp_measurement+0x56>
			} else {
				increase_pec_counter();
 8002c1e:	f000 f885 	bl	8002d2c <increase_pec_counter>
	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	3301      	adds	r3, #1
 8002c26:	71fb      	strb	r3, [r7, #7]
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d9e6      	bls.n	8002bfc <read_temp_measurement+0x1c>
			}
		}
		goto_safe_state(PEC_ERROR);
 8002c2e:	2008      	movs	r0, #8
 8002c30:	f000 f89c 	bl	8002d6c <goto_safe_state>
		return -1;
 8002c34:	23ff      	movs	r3, #255	; 0xff

}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200003b8 	.word	0x200003b8

08002c44 <init_slave_cfg>:


void init_slave_cfg(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < IC_NUM; i++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	71fb      	strb	r3, [r7, #7]
 8002c4e:	e03d      	b.n	8002ccc <init_slave_cfg+0x88>
	{
		slave_cfg_tx[i][0] = 0xfe;
 8002c50:	79fa      	ldrb	r2, [r7, #7]
 8002c52:	4923      	ldr	r1, [pc, #140]	; (8002ce0 <init_slave_cfg+0x9c>)
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	440b      	add	r3, r1
 8002c5e:	22fe      	movs	r2, #254	; 0xfe
 8002c60:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][1] = 0x00;
 8002c62:	79fa      	ldrb	r2, [r7, #7]
 8002c64:	491e      	ldr	r1, [pc, #120]	; (8002ce0 <init_slave_cfg+0x9c>)
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	440b      	add	r3, r1
 8002c70:	3301      	adds	r3, #1
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][2] = 0x00;
 8002c76:	79fa      	ldrb	r2, [r7, #7]
 8002c78:	4919      	ldr	r1, [pc, #100]	; (8002ce0 <init_slave_cfg+0x9c>)
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	440b      	add	r3, r1
 8002c84:	3302      	adds	r3, #2
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][3] = 0x00;
 8002c8a:	79fa      	ldrb	r2, [r7, #7]
 8002c8c:	4914      	ldr	r1, [pc, #80]	; (8002ce0 <init_slave_cfg+0x9c>)
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	440b      	add	r3, r1
 8002c98:	3303      	adds	r3, #3
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][4] = 0x00;
 8002c9e:	79fa      	ldrb	r2, [r7, #7]
 8002ca0:	490f      	ldr	r1, [pc, #60]	; (8002ce0 <init_slave_cfg+0x9c>)
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	440b      	add	r3, r1
 8002cac:	3304      	adds	r3, #4
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 8002cb2:	79fa      	ldrb	r2, [r7, #7]
 8002cb4:	490a      	ldr	r1, [pc, #40]	; (8002ce0 <init_slave_cfg+0x9c>)
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3305      	adds	r3, #5
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < IC_NUM; i++)
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	71fb      	strb	r3, [r7, #7]
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	2b07      	cmp	r3, #7
 8002cd0:	d9be      	bls.n	8002c50 <init_slave_cfg+0xc>
	}
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	20000538 	.word	0x20000538

08002ce4 <cfg_slaves>:

void cfg_slaves(void){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
	WakeUp();
 8002ce8:	f7fe f8de 	bl	8000ea8 <WakeUp>
	wrcfg(IC_NUM, slave_cfg_tx);
 8002cec:	490b      	ldr	r1, [pc, #44]	; (8002d1c <cfg_slaves+0x38>)
 8002cee:	2008      	movs	r0, #8
 8002cf0:	f7fe f98a 	bl	8001008 <wrcfg>
	WakeUp();
 8002cf4:	f7fe f8d8 	bl	8000ea8 <WakeUp>
	wrcfgb(IC_NUM, slave_cfgb_tx); //TODO
 8002cf8:	4909      	ldr	r1, [pc, #36]	; (8002d20 <cfg_slaves+0x3c>)
 8002cfa:	2008      	movs	r0, #8
 8002cfc:	f7fe fab3 	bl	8001266 <wrcfgb>
	delay_u(500);
 8002d00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d04:	f7ff fa76 	bl	80021f4 <delay_u>
	rdcfg(IC_NUM, slave_cfg_rx);
 8002d08:	4906      	ldr	r1, [pc, #24]	; (8002d24 <cfg_slaves+0x40>)
 8002d0a:	2008      	movs	r0, #8
 8002d0c:	f7fe fa12 	bl	8001134 <rdcfg>
	rdcfgb(IC_NUM, slave_cfgb_rx);
 8002d10:	4905      	ldr	r1, [pc, #20]	; (8002d28 <cfg_slaves+0x44>)
 8002d12:	2008      	movs	r0, #8
 8002d14:	f7fe fb49 	bl	80013aa <rdcfgb>
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000538 	.word	0x20000538
 8002d20:	20000568 	.word	0x20000568
 8002d24:	20000598 	.word	0x20000598
 8002d28:	200005d8 	.word	0x200005d8

08002d2c <increase_pec_counter>:

void increase_pec_counter(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
	status_data.pec_error_counter++;
 8002d30:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <increase_pec_counter+0x3c>)
 8002d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d34:	3301      	adds	r3, #1
 8002d36:	4a0c      	ldr	r2, [pc, #48]	; (8002d68 <increase_pec_counter+0x3c>)
 8002d38:	6693      	str	r3, [r2, #104]	; 0x68
	status_data.pec_error_average = (float)status_data.pec_error_counter / status_data.uptime;
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <increase_pec_counter+0x3c>)
 8002d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <increase_pec_counter+0x3c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d56:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <increase_pec_counter+0x3c>)
 8002d58:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	20000618 	.word	0x20000618

08002d6c <goto_safe_state>:

void goto_safe_state(uint8_t reason)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
	{
		open_AIR();
		open_PRE();
	}
#else
	open_AIR();
 8002d76:	f7ff fe21 	bl	80029bc <open_AIR>
	open_PRE();
 8002d7a:	f7ff fe35 	bl	80029e8 <open_PRE>
#if STOP_CORE_ON_SAFE_STATE
	status_data.opmode &= ~(1 << 0);
#endif

#if START_DEBUG_ON_SAFE_STATE
	status_data.opmode |= (1 << 3);
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <goto_safe_state+0x3c>)
 8002d80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d84:	f043 0308 	orr.w	r3, r3, #8
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <goto_safe_state+0x3c>)
 8002d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
#endif

	status_data.safe_state_executed = true;
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <goto_safe_state+0x3c>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	status_data.reason_code = reason;
 8002d98:	4a03      	ldr	r2, [pc, #12]	; (8002da8 <goto_safe_state+0x3c>)
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000618 	.word	0x20000618

08002dac <test_limp>:

int32_t test_limp(status_data_t *status_data, limit_t *limit)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]

	if(status_data->min_voltage < limit->limp_min_voltage){
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d225      	bcs.n	8002e0e <test_limp+0x62>
		status_data->limping = 1;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		uint8_t data[8];

		data[0]=8;
 8002dca:	2308      	movs	r3, #8
 8002dcc:	743b      	strb	r3, [r7, #16]
		data[1]=0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	747b      	strb	r3, [r7, #17]
		data[2]=0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	74bb      	strb	r3, [r7, #18]
		data[3]=(uint8_t)status_data->sum_of_cells;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002de0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002de4:	793b      	ldrb	r3, [r7, #4]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	74fb      	strb	r3, [r7, #19]

		data[4]=status_data->limping;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	753b      	strb	r3, [r7, #20]
		data[5]=0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	757b      	strb	r3, [r7, #21]
		data[6]=0xAB;
 8002df8:	23ab      	movs	r3, #171	; 0xab
 8002dfa:	75bb      	strb	r3, [r7, #22]
		data[7]=0xCD;
 8002dfc:	23cd      	movs	r3, #205	; 0xcd
 8002dfe:	75fb      	strb	r3, [r7, #23]

		CanSend(data, 0x08);
 8002e00:	f107 0310 	add.w	r3, r7, #16
 8002e04:	2108      	movs	r1, #8
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff f95e 	bl	80020c8 <CanSend>
 8002e0c:	e003      	b.n	8002e16 <test_limp+0x6a>
		}
	else{
		status_data->limping = 0;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		{
			status_data->limping = 0;
		}
	}
#endif*/
}
 8002e16:	bf00      	nop
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <test_limits>:


int8_t test_limits(status_data_t *status_data, limit_t *limit, int32_t retest)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
		//MAYBE WE DON'T WANT 50% ERRORS TO BE ALLOWED
#if TEST_OVERVOLTAGE
	if (status_data->max_voltage > limit->max_voltage)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d912      	bls.n	8002e5e <test_limits+0x3e>
	{
		if(!(status_data->error_counters[OVERVOLTAGE]<=ERROR_COUNT_LIMIT && retest))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d802      	bhi.n	8002e46 <test_limits+0x26>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <test_limits+0x32>
		{
			goto_safe_state(OVERVOLTAGE);
 8002e46:	2001      	movs	r0, #1
 8002e48:	f7ff ff90 	bl	8002d6c <goto_safe_state>
			return -1;
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e50:	e085      	b.n	8002f5e <test_limits+0x13e>
		}
		else
		{
			status_data->error_counters[OVERVOLTAGE]++;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	679a      	str	r2, [r3, #120]	; 0x78
 8002e5c:	e008      	b.n	8002e70 <test_limits+0x50>
		}
	}
	else if (status_data->error_counters[OVERVOLTAGE]>0)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d004      	beq.n	8002e70 <test_limits+0x50>
	{
		status_data->error_counters[OVERVOLTAGE]--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e6a:	1e5a      	subs	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	679a      	str	r2, [r3, #120]	; 0x78
	}
#endif

#if TEST_UNDERVOLTAGE
	if (status_data->min_voltage < limit->min_voltage)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	885b      	ldrh	r3, [r3, #2]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d212      	bcs.n	8002ea2 <test_limits+0x82>
	{
		if(!(status_data->error_counters[UNDERVOLTAGE]<=ERROR_COUNT_LIMIT && retest))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d802      	bhi.n	8002e8a <test_limits+0x6a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d105      	bne.n	8002e96 <test_limits+0x76>
		{
			goto_safe_state(UNDERVOLTAGE);
 8002e8a:	2002      	movs	r0, #2
 8002e8c:	f7ff ff6e 	bl	8002d6c <goto_safe_state>
			return -1;
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	e063      	b.n	8002f5e <test_limits+0x13e>
		}
		else
		{
			status_data->error_counters[UNDERVOLTAGE]++;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ea0:	e008      	b.n	8002eb4 <test_limits+0x94>
		}
	}
	else if (status_data->error_counters[UNDERVOLTAGE]>0)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d004      	beq.n	8002eb4 <test_limits+0x94>
	{
		status_data->error_counters[UNDERVOLTAGE]--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eae:	1e5a      	subs	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	67da      	str	r2, [r3, #124]	; 0x7c
	}
#endif

#if TEST_OVERTEMPERATURE
	if (status_data->max_temp > limit->max_temp)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	dd15      	ble.n	8002ef0 <test_limits+0xd0>
	{
		if(!(status_data->error_counters[OVERTEMP]<=ERROR_COUNT_LIMIT && retest))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d802      	bhi.n	8002ed4 <test_limits+0xb4>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d105      	bne.n	8002ee0 <test_limits+0xc0>
		{
			goto_safe_state(OVERTEMP);
 8002ed4:	2003      	movs	r0, #3
 8002ed6:	f7ff ff49 	bl	8002d6c <goto_safe_state>
			return -1;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
 8002ede:	e03e      	b.n	8002f5e <test_limits+0x13e>
		}
		else
		{
			status_data->error_counters[OVERTEMP]++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002eee:	e00b      	b.n	8002f08 <test_limits+0xe8>
		}
	}
	else if (status_data->error_counters[OVERTEMP]>0)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <test_limits+0xe8>
	{
		status_data->error_counters[OVERTEMP]--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f00:	1e5a      	subs	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		status_data->error_counters[OVERTEMP_CHARGING]--;
	}
#endif

#if TEST_UNDERTEMPERATURE
	if (status_data->min_temp < limit->min_temp)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	da15      	bge.n	8002f44 <test_limits+0x124>
	{
		if(!(status_data->error_counters[UNDERTEMP]<=ERROR_COUNT_LIMIT && retest))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d802      	bhi.n	8002f28 <test_limits+0x108>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <test_limits+0x114>
		{
			goto_safe_state(UNDERTEMP);
 8002f28:	2004      	movs	r0, #4
 8002f2a:	f7ff ff1f 	bl	8002d6c <goto_safe_state>
			return -1;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f32:	e014      	b.n	8002f5e <test_limits+0x13e>
		}
		else
		{
			status_data->error_counters[UNDERTEMP]++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002f42:	e00b      	b.n	8002f5c <test_limits+0x13c>
		}
	}
	else if (status_data->error_counters[UNDERTEMP]>0)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <test_limits+0x13c>
	{
		status_data->error_counters[UNDERTEMP]--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f54:	1e5a      	subs	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			status_data->error_counters[IVT_LOST]--;
		}
	}
#endif

	return 0;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_MspInit>:
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <HAL_MspInit+0x44>)
 8002f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f72:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <HAL_MspInit+0x44>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6613      	str	r3, [r2, #96]	; 0x60
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <HAL_MspInit+0x44>)
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_MspInit+0x44>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	4a08      	ldr	r2, [pc, #32]	; (8002fac <HAL_MspInit+0x44>)
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f90:	6593      	str	r3, [r2, #88]	; 0x58
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_MspInit+0x44>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000

08002fb0 <HAL_FDCAN_MspInit>:
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b09a      	sub	sp, #104	; 0x68
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
 8002fc8:	f107 0310 	add.w	r3, r7, #16
 8002fcc:	2244      	movs	r2, #68	; 0x44
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f004 fe8d 	bl	8007cf0 <memset>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a20      	ldr	r2, [pc, #128]	; (800305c <HAL_FDCAN_MspInit+0xac>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d139      	bne.n	8003054 <HAL_FDCAN_MspInit+0xa4>
 8002fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fea:	643b      	str	r3, [r7, #64]	; 0x40
 8002fec:	f107 0310 	add.w	r3, r7, #16
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f001 ff6d 	bl	8004ed0 <HAL_RCCEx_PeriphCLKConfig>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_FDCAN_MspInit+0x50>
 8002ffc:	f7ff fc68 	bl	80028d0 <Error_Handler>
 8003000:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_FDCAN_MspInit+0xb0>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	4a16      	ldr	r2, [pc, #88]	; (8003060 <HAL_FDCAN_MspInit+0xb0>)
 8003006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800300a:	6593      	str	r3, [r2, #88]	; 0x58
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_FDCAN_MspInit+0xb0>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_FDCAN_MspInit+0xb0>)
 800301a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301c:	4a10      	ldr	r2, [pc, #64]	; (8003060 <HAL_FDCAN_MspInit+0xb0>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_FDCAN_MspInit+0xb0>)
 8003026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003034:	657b      	str	r3, [r7, #84]	; 0x54
 8003036:	2302      	movs	r3, #2
 8003038:	65bb      	str	r3, [r7, #88]	; 0x58
 800303a:	2300      	movs	r3, #0
 800303c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800303e:	2300      	movs	r3, #0
 8003040:	663b      	str	r3, [r7, #96]	; 0x60
 8003042:	2309      	movs	r3, #9
 8003044:	667b      	str	r3, [r7, #100]	; 0x64
 8003046:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800304a:	4619      	mov	r1, r3
 800304c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003050:	f000 ffcc 	bl	8003fec <HAL_GPIO_Init>
 8003054:	bf00      	nop
 8003056:	3768      	adds	r7, #104	; 0x68
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40006400 	.word	0x40006400
 8003060:	40021000 	.word	0x40021000

08003064 <HAL_SPI_MspInit>:
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a17      	ldr	r2, [pc, #92]	; (80030e0 <HAL_SPI_MspInit+0x7c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d128      	bne.n	80030d8 <HAL_SPI_MspInit+0x74>
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_SPI_MspInit+0x80>)
 8003088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308a:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <HAL_SPI_MspInit+0x80>)
 800308c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003090:	6613      	str	r3, [r2, #96]	; 0x60
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_SPI_MspInit+0x80>)
 8003094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_SPI_MspInit+0x80>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a2:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <HAL_SPI_MspInit+0x80>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_SPI_MspInit+0x80>)
 80030ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	23e0      	movs	r3, #224	; 0xe0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	2302      	movs	r3, #2
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
 80030c6:	2305      	movs	r3, #5
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	f107 0314 	add.w	r3, r7, #20
 80030ce:	4619      	mov	r1, r3
 80030d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d4:	f000 ff8a 	bl	8003fec <HAL_GPIO_Init>
 80030d8:	bf00      	nop
 80030da:	3728      	adds	r7, #40	; 0x28
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40013000 	.word	0x40013000
 80030e4:	40021000 	.word	0x40021000

080030e8 <HAL_TIM_Base_MspInit>:
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <HAL_TIM_Base_MspInit+0x38>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10b      	bne.n	8003112 <HAL_TIM_Base_MspInit+0x2a>
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_TIM_Base_MspInit+0x3c>)
 80030fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <HAL_TIM_Base_MspInit+0x3c>)
 8003100:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003104:	6613      	str	r3, [r2, #96]	; 0x60
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <HAL_TIM_Base_MspInit+0x3c>)
 8003108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	bf00      	nop
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40013400 	.word	0x40013400
 8003124:	40021000 	.word	0x40021000

08003128 <HAL_TIM_MspPostInit>:
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	611a      	str	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a11      	ldr	r2, [pc, #68]	; (800318c <HAL_TIM_MspPostInit+0x64>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d11b      	bne.n	8003182 <HAL_TIM_MspPostInit+0x5a>
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <HAL_TIM_MspPostInit+0x68>)
 800314c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314e:	4a10      	ldr	r2, [pc, #64]	; (8003190 <HAL_TIM_MspPostInit+0x68>)
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <HAL_TIM_MspPostInit+0x68>)
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2320      	movs	r3, #32
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	2302      	movs	r3, #2
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	2300      	movs	r3, #0
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	2303      	movs	r3, #3
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	f107 030c 	add.w	r3, r7, #12
 800317a:	4619      	mov	r1, r3
 800317c:	4805      	ldr	r0, [pc, #20]	; (8003194 <HAL_TIM_MspPostInit+0x6c>)
 800317e:	f000 ff35 	bl	8003fec <HAL_GPIO_Init>
 8003182:	bf00      	nop
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40013400 	.word	0x40013400
 8003190:	40021000 	.word	0x40021000
 8003194:	48000400 	.word	0x48000400

08003198 <HAL_UART_MspInit>:
 8003198:	b580      	push	{r7, lr}
 800319a:	b09a      	sub	sp, #104	; 0x68
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	611a      	str	r2, [r3, #16]
 80031b0:	f107 0310 	add.w	r3, r7, #16
 80031b4:	2244      	movs	r2, #68	; 0x44
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f004 fd99 	bl	8007cf0 <memset>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1f      	ldr	r2, [pc, #124]	; (8003240 <HAL_UART_MspInit+0xa8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d136      	bne.n	8003236 <HAL_UART_MspInit+0x9e>
 80031c8:	2302      	movs	r3, #2
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
 80031d0:	f107 0310 	add.w	r3, r7, #16
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 fe7b 	bl	8004ed0 <HAL_RCCEx_PeriphCLKConfig>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_UART_MspInit+0x4c>
 80031e0:	f7ff fb76 	bl	80028d0 <Error_Handler>
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <HAL_UART_MspInit+0xac>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	4a16      	ldr	r2, [pc, #88]	; (8003244 <HAL_UART_MspInit+0xac>)
 80031ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ee:	6593      	str	r3, [r2, #88]	; 0x58
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <HAL_UART_MspInit+0xac>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <HAL_UART_MspInit+0xac>)
 80031fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003200:	4a10      	ldr	r2, [pc, #64]	; (8003244 <HAL_UART_MspInit+0xac>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <HAL_UART_MspInit+0xac>)
 800320a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	230c      	movs	r3, #12
 8003216:	657b      	str	r3, [r7, #84]	; 0x54
 8003218:	2302      	movs	r3, #2
 800321a:	65bb      	str	r3, [r7, #88]	; 0x58
 800321c:	2300      	movs	r3, #0
 800321e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003220:	2300      	movs	r3, #0
 8003222:	663b      	str	r3, [r7, #96]	; 0x60
 8003224:	2307      	movs	r3, #7
 8003226:	667b      	str	r3, [r7, #100]	; 0x64
 8003228:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800322c:	4619      	mov	r1, r3
 800322e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003232:	f000 fedb 	bl	8003fec <HAL_GPIO_Init>
 8003236:	bf00      	nop
 8003238:	3768      	adds	r7, #104	; 0x68
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40004400 	.word	0x40004400
 8003244:	40021000 	.word	0x40021000

08003248 <NMI_Handler>:
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
 800324c:	e7fe      	b.n	800324c <NMI_Handler+0x4>

0800324e <HardFault_Handler>:
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0
 8003252:	e7fe      	b.n	8003252 <HardFault_Handler+0x4>

08003254 <MemManage_Handler>:
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
 8003258:	e7fe      	b.n	8003258 <MemManage_Handler+0x4>

0800325a <BusFault_Handler>:
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0
 800325e:	e7fe      	b.n	800325e <BusFault_Handler+0x4>

08003260 <UsageFault_Handler>:
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
 8003264:	e7fe      	b.n	8003264 <UsageFault_Handler+0x4>

08003266 <SVC_Handler>:
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0
 800326a:	bf00      	nop
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <DebugMon_Handler>:
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <PendSV_Handler>:
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
 8003286:	bf00      	nop
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <SysTick_Handler>:
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
 8003294:	f000 f944 	bl	8003520 <HAL_IncTick>
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}

0800329c <SystemInit>:
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <SystemInit+0x20>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	4a05      	ldr	r2, [pc, #20]	; (80032bc <SystemInit+0x20>)
 80032a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <temp_calc>:





void temp_calc(uint8_t total_ic,  temp_data_t temp_data[][GPIO_NUM]){ //fix arguments
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
	float v, r, vv , t;
	for(int i = 0; i < total_ic; i++){
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	e091      	b.n	80033f6 <temp_calc+0x136>
		for(int j = 0; j < GPIO_NUM; j++){
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	e087      	b.n	80033e8 <temp_calc+0x128>
			//vv =  ic[i].aux.a_codes[j];
			vv = temp_data[i][j].raw;
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	461a      	mov	r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	edc7 7a05 	vstr	s15, [r7, #20]
			v = vv/10000;
 80032fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80032fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003420 <temp_calc+0x160>
 8003302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003306:	edc7 7a04 	vstr	s15, [r7, #16]
			r = (v*10000)/(3-v);
 800330a:	edd7 7a04 	vldr	s15, [r7, #16]
 800330e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003420 <temp_calc+0x160>
 8003312:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003316:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800331a:	edd7 7a04 	vldr	s15, [r7, #16]
 800331e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003326:	edc7 7a03 	vstr	s15, [r7, #12]
			t = log(r/10000);
 800332a:	edd7 7a03 	vldr	s15, [r7, #12]
 800332e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003420 <temp_calc+0x160>
 8003332:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003336:	ee16 0a90 	vmov	r0, s13
 800333a:	f7fd f8d1 	bl	80004e0 <__aeabi_f2d>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	ec43 2b10 	vmov	d0, r2, r3
 8003346:	f004 fcdb 	bl	8007d00 <log>
 800334a:	ec53 2b10 	vmov	r2, r3, d0
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	f7fd fbcd 	bl	8000af0 <__aeabi_d2f>
 8003356:	4603      	mov	r3, r0
 8003358:	60bb      	str	r3, [r7, #8]
			    t = t / 3660;
 800335a:	ed97 7a02 	vldr	s14, [r7, #8]
 800335e:	eddf 6a31 	vldr	s13, [pc, #196]	; 8003424 <temp_calc+0x164>
 8003362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003366:	edc7 7a02 	vstr	s15, [r7, #8]
			    t = t + 1/298.15;
 800336a:	68b8      	ldr	r0, [r7, #8]
 800336c:	f7fd f8b8 	bl	80004e0 <__aeabi_f2d>
 8003370:	a327      	add	r3, pc, #156	; (adr r3, 8003410 <temp_calc+0x150>)
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	f7fc ff55 	bl	8000224 <__adddf3>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
 8003382:	f7fd fbb5 	bl	8000af0 <__aeabi_d2f>
 8003386:	4603      	mov	r3, r0
 8003388:	60bb      	str	r3, [r7, #8]
			    t = 1/t;
 800338a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800338e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003396:	edc7 7a02 	vstr	s15, [r7, #8]

			    t -= 273.15;
 800339a:	68b8      	ldr	r0, [r7, #8]
 800339c:	f7fd f8a0 	bl	80004e0 <__aeabi_f2d>
 80033a0:	a31d      	add	r3, pc, #116	; (adr r3, 8003418 <temp_calc+0x158>)
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	f7fc ff3b 	bl	8000220 <__aeabi_dsub>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	f7fd fb9d 	bl	8000af0 <__aeabi_d2f>
 80033b6:	4603      	mov	r3, r0
 80033b8:	60bb      	str	r3, [r7, #8]
		temp_data[i][j].temp = (int)t;
 80033ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80033be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	461a      	mov	r2, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	441a      	add	r2, r3
 80033d2:	ee17 3a90 	vmov	r3, s15
 80033d6:	b219      	sxth	r1, r3
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	460a      	mov	r2, r1
 80033e0:	805a      	strh	r2, [r3, #2]
		for(int j = 0; j < GPIO_NUM; j++){
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	3301      	adds	r3, #1
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b0b      	cmp	r3, #11
 80033ec:	f77f af74 	ble.w	80032d8 <temp_calc+0x18>
	for(int i = 0; i < total_ic; i++){
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	3301      	adds	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	f6ff af69 	blt.w	80032d2 <temp_calc+0x12>
		//	ic[i].aux.s_temp[j] = t;

		}
	}

}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	f3af 8000 	nop.w
 8003410:	dcb5db83 	.word	0xdcb5db83
 8003414:	3f6b79e1 	.word	0x3f6b79e1
 8003418:	66666666 	.word	0x66666666
 800341c:	40711266 	.word	0x40711266
 8003420:	461c4000 	.word	0x461c4000
 8003424:	4564c000 	.word	0x4564c000

08003428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003428:	480d      	ldr	r0, [pc, #52]	; (8003460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800342a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800342c:	480d      	ldr	r0, [pc, #52]	; (8003464 <LoopForever+0x6>)
  ldr r1, =_edata
 800342e:	490e      	ldr	r1, [pc, #56]	; (8003468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003430:	4a0e      	ldr	r2, [pc, #56]	; (800346c <LoopForever+0xe>)
  movs r3, #0
 8003432:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003434:	e002      	b.n	800343c <LoopCopyDataInit>

08003436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800343a:	3304      	adds	r3, #4

0800343c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800343c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800343e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003440:	d3f9      	bcc.n	8003436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003442:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003444:	4c0b      	ldr	r4, [pc, #44]	; (8003474 <LoopForever+0x16>)
  movs r3, #0
 8003446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003448:	e001      	b.n	800344e <LoopFillZerobss>

0800344a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800344a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800344c:	3204      	adds	r2, #4

0800344e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800344e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003450:	d3fb      	bcc.n	800344a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003452:	f7ff ff23 	bl	800329c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003456:	f004 fc27 	bl	8007ca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800345a:	f7fe ff6f 	bl	800233c <main>

0800345e <LoopForever>:

LoopForever:
    b LoopForever
 800345e:	e7fe      	b.n	800345e <LoopForever>
  ldr   r0, =_estack
 8003460:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003468:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800346c:	08008584 	.word	0x08008584
  ldr r2, =_sbss
 8003470:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003474:	200006f4 	.word	0x200006f4

08003478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003478:	e7fe      	b.n	8003478 <ADC1_2_IRQHandler>

0800347a <HAL_Init>:
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	2300      	movs	r3, #0
 8003482:	71fb      	strb	r3, [r7, #7]
 8003484:	2003      	movs	r0, #3
 8003486:	f000 f93d 	bl	8003704 <HAL_NVIC_SetPriorityGrouping>
 800348a:	2000      	movs	r0, #0
 800348c:	f000 f80e 	bl	80034ac <HAL_InitTick>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_Init+0x22>
 8003496:	2301      	movs	r3, #1
 8003498:	71fb      	strb	r3, [r7, #7]
 800349a:	e001      	b.n	80034a0 <HAL_Init+0x26>
 800349c:	f7ff fd64 	bl	8002f68 <HAL_MspInit>
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <HAL_InitTick>:
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	4b16      	ldr	r3, [pc, #88]	; (8003514 <HAL_InitTick+0x68>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d022      	beq.n	8003506 <HAL_InitTick+0x5a>
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <HAL_InitTick+0x6c>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_InitTick+0x68>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f93a 	bl	800374e <HAL_SYSTICK_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10f      	bne.n	8003500 <HAL_InitTick+0x54>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	d809      	bhi.n	80034fa <HAL_InitTick+0x4e>
 80034e6:	2200      	movs	r2, #0
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	f04f 30ff 	mov.w	r0, #4294967295
 80034ee:	f000 f914 	bl	800371a <HAL_NVIC_SetPriority>
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <HAL_InitTick+0x70>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	e007      	b.n	800350a <HAL_InitTick+0x5e>
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
 80034fe:	e004      	b.n	800350a <HAL_InitTick+0x5e>
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
 8003504:	e001      	b.n	800350a <HAL_InitTick+0x5e>
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000040 	.word	0x20000040
 8003518:	20000038 	.word	0x20000038
 800351c:	2000003c 	.word	0x2000003c

08003520 <HAL_IncTick>:
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_IncTick+0x1c>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_IncTick+0x20>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4413      	add	r3, r2
 800352e:	4a03      	ldr	r2, [pc, #12]	; (800353c <HAL_IncTick+0x1c>)
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	200006f0 	.word	0x200006f0
 8003540:	20000040 	.word	0x20000040

08003544 <HAL_GetTick>:
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <HAL_GetTick+0x14>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	200006f0 	.word	0x200006f0

0800355c <HAL_Delay>:
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	f7ff ffee 	bl	8003544 <HAL_GetTick>
 8003568:	60b8      	str	r0, [r7, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d004      	beq.n	8003580 <HAL_Delay+0x24>
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_Delay+0x40>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	bf00      	nop
 8003582:	f7ff ffdf 	bl	8003544 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	429a      	cmp	r2, r3
 8003590:	d8f7      	bhi.n	8003582 <HAL_Delay+0x26>
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000040 	.word	0x20000040

080035a0 <__NVIC_SetPriorityGrouping>:
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035bc:	4013      	ands	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	021a      	lsls	r2, r3, #8
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	60d3      	str	r3, [r2, #12]
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <__NVIC_GetPriorityGrouping>:
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <__NVIC_GetPriorityGrouping+0x18>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	4618      	mov	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <__NVIC_SetPriority>:
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	71fb      	strb	r3, [r7, #7]
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	2b00      	cmp	r3, #0
 8003616:	db0a      	blt.n	800362e <__NVIC_SetPriority+0x2a>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	b2da      	uxtb	r2, r3
 800361c:	490c      	ldr	r1, [pc, #48]	; (8003650 <__NVIC_SetPriority+0x4c>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	0112      	lsls	r2, r2, #4
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	440b      	add	r3, r1
 8003628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800362c:	e00a      	b.n	8003644 <__NVIC_SetPriority+0x40>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4908      	ldr	r1, [pc, #32]	; (8003654 <__NVIC_SetPriority+0x50>)
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	3b04      	subs	r3, #4
 800363c:	0112      	lsls	r2, r2, #4
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	440b      	add	r3, r1
 8003642:	761a      	strb	r2, [r3, #24]
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000e100 	.word	0xe000e100
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <NVIC_EncodePriority>:
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f1c3 0307 	rsb	r3, r3, #7
 8003672:	2b04      	cmp	r3, #4
 8003674:	bf28      	it	cs
 8003676:	2304      	movcs	r3, #4
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3304      	adds	r3, #4
 800367e:	2b06      	cmp	r3, #6
 8003680:	d902      	bls.n	8003688 <NVIC_EncodePriority+0x30>
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3b03      	subs	r3, #3
 8003686:	e000      	b.n	800368a <NVIC_EncodePriority+0x32>
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	f04f 32ff 	mov.w	r2, #4294967295
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43da      	mvns	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	401a      	ands	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	409a      	lsls	r2, r3
 80036a0:	f04f 31ff 	mov.w	r1, #4294967295
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43d9      	mvns	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	400b      	ands	r3, r1
 80036b0:	4313      	orrs	r3, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	3724      	adds	r7, #36	; 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <SysTick_Config>:
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d0:	d301      	bcc.n	80036d6 <SysTick_Config+0x16>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e00f      	b.n	80036f6 <SysTick_Config+0x36>
 80036d6:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <SysTick_Config+0x40>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	6053      	str	r3, [r2, #4]
 80036de:	210f      	movs	r1, #15
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	f7ff ff8e 	bl	8003604 <__NVIC_SetPriority>
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <SysTick_Config+0x40>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	609a      	str	r2, [r3, #8]
 80036ee:	4b04      	ldr	r3, [pc, #16]	; (8003700 <SysTick_Config+0x40>)
 80036f0:	2207      	movs	r2, #7
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	2300      	movs	r3, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	e000e010 	.word	0xe000e010

08003704 <HAL_NVIC_SetPriorityGrouping>:
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff47 	bl	80035a0 <__NVIC_SetPriorityGrouping>
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_NVIC_SetPriority>:
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af00      	add	r7, sp, #0
 8003720:	4603      	mov	r3, r0
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	73fb      	strb	r3, [r7, #15]
 8003728:	f7ff ff5e 	bl	80035e8 <__NVIC_GetPriorityGrouping>
 800372c:	6178      	str	r0, [r7, #20]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	6978      	ldr	r0, [r7, #20]
 8003734:	f7ff ff90 	bl	8003658 <NVIC_EncodePriority>
 8003738:	4602      	mov	r2, r0
 800373a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff5f 	bl	8003604 <__NVIC_SetPriority>
 8003746:	bf00      	nop
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_SYSTICK_Config>:
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ffb2 	bl	80036c0 <SysTick_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <HAL_FDCAN_Init>:
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_FDCAN_Init+0x12>
 8003776:	2301      	movs	r3, #1
 8003778:	e147      	b.n	8003a0a <HAL_FDCAN_Init+0x2a2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_FDCAN_Init+0x2c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fc0e 	bl	8002fb0 <HAL_FDCAN_MspInit>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0210 	bic.w	r2, r2, #16
 80037a2:	619a      	str	r2, [r3, #24]
 80037a4:	f7ff fece 	bl	8003544 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	e012      	b.n	80037d2 <HAL_FDCAN_Init+0x6a>
 80037ac:	f7ff feca 	bl	8003544 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b0a      	cmp	r3, #10
 80037b8:	d90b      	bls.n	80037d2 <HAL_FDCAN_Init+0x6a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037be:	f043 0201 	orr.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	661a      	str	r2, [r3, #96]	; 0x60
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2203      	movs	r2, #3
 80037ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80037ce:	2301      	movs	r3, #1
 80037d0:	e11b      	b.n	8003a0a <HAL_FDCAN_Init+0x2a2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d0e5      	beq.n	80037ac <HAL_FDCAN_Init+0x44>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	619a      	str	r2, [r3, #24]
 80037f0:	f7ff fea8 	bl	8003544 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	e012      	b.n	800381e <HAL_FDCAN_Init+0xb6>
 80037f8:	f7ff fea4 	bl	8003544 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b0a      	cmp	r3, #10
 8003804:	d90b      	bls.n	800381e <HAL_FDCAN_Init+0xb6>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	661a      	str	r2, [r3, #96]	; 0x60
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2203      	movs	r2, #3
 8003816:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800381a:	2301      	movs	r3, #1
 800381c:	e0f5      	b.n	8003a0a <HAL_FDCAN_Init+0x2a2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0e5      	beq.n	80037f8 <HAL_FDCAN_Init+0x90>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0202 	orr.w	r2, r2, #2
 800383a:	619a      	str	r2, [r3, #24]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a74      	ldr	r2, [pc, #464]	; (8003a14 <HAL_FDCAN_Init+0x2ac>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d103      	bne.n	800384e <HAL_FDCAN_Init+0xe6>
 8003846:	4a74      	ldr	r2, [pc, #464]	; (8003a18 <HAL_FDCAN_Init+0x2b0>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	7c1b      	ldrb	r3, [r3, #16]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d108      	bne.n	8003868 <HAL_FDCAN_Init+0x100>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699a      	ldr	r2, [r3, #24]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003864:	619a      	str	r2, [r3, #24]
 8003866:	e007      	b.n	8003878 <HAL_FDCAN_Init+0x110>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003876:	619a      	str	r2, [r3, #24]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	7c5b      	ldrb	r3, [r3, #17]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d108      	bne.n	8003892 <HAL_FDCAN_Init+0x12a>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800388e:	619a      	str	r2, [r3, #24]
 8003890:	e007      	b.n	80038a2 <HAL_FDCAN_Init+0x13a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038a0:	619a      	str	r2, [r3, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	7c9b      	ldrb	r3, [r3, #18]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d108      	bne.n	80038bc <HAL_FDCAN_Init+0x154>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038b8:	619a      	str	r2, [r3, #24]
 80038ba:	e007      	b.n	80038cc <HAL_FDCAN_Init+0x164>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038ca:	619a      	str	r2, [r3, #24]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	619a      	str	r2, [r3, #24]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699a      	ldr	r2, [r3, #24]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80038f0:	619a      	str	r2, [r3, #24]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0210 	bic.w	r2, r2, #16
 8003900:	611a      	str	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d108      	bne.n	800391c <HAL_FDCAN_Init+0x1b4>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699a      	ldr	r2, [r3, #24]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0204 	orr.w	r2, r2, #4
 8003918:	619a      	str	r2, [r3, #24]
 800391a:	e02c      	b.n	8003976 <HAL_FDCAN_Init+0x20e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d028      	beq.n	8003976 <HAL_FDCAN_Init+0x20e>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d01c      	beq.n	8003966 <HAL_FDCAN_Init+0x1fe>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800393a:	619a      	str	r2, [r3, #24]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0210 	orr.w	r2, r2, #16
 800394a:	611a      	str	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d110      	bne.n	8003976 <HAL_FDCAN_Init+0x20e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0220 	orr.w	r2, r2, #32
 8003962:	619a      	str	r2, [r3, #24]
 8003964:	e007      	b.n	8003976 <HAL_FDCAN_Init+0x20e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0220 	orr.w	r2, r2, #32
 8003974:	619a      	str	r2, [r3, #24]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	3b01      	subs	r3, #1
 800397c:	065a      	lsls	r2, r3, #25
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	3b01      	subs	r3, #1
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	3b01      	subs	r3, #1
 800398e:	ea42 0103 	orr.w	r1, r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	3b01      	subs	r3, #1
 8003998:	041a      	lsls	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	61da      	str	r2, [r3, #28]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039aa:	d115      	bne.n	80039d8 <HAL_FDCAN_Init+0x270>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	1e5a      	subs	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	3b01      	subs	r3, #1
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	3b01      	subs	r3, #1
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	ea42 0103 	orr.w	r1, r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	3b01      	subs	r3, #1
 80039ce:	041a      	lsls	r2, r3, #16
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	60da      	str	r2, [r3, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fa2a 	bl	8003e48 <FDCAN_CalcultateRamBlockAddresses>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	659a      	str	r2, [r3, #88]	; 0x58
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	661a      	str	r2, [r3, #96]	; 0x60
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003a08:	2300      	movs	r3, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40006400 	.word	0x40006400
 8003a18:	40006500 	.word	0x40006500

08003a1c <HAL_FDCAN_ConfigFilter>:
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a2c:	75fb      	strb	r3, [r7, #23]
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d002      	beq.n	8003a3a <HAL_FDCAN_ConfigFilter+0x1e>
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d13d      	bne.n	8003ab6 <HAL_FDCAN_ConfigFilter+0x9a>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d119      	bne.n	8003a76 <HAL_FDCAN_ConfigFilter+0x5a>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	079a      	lsls	r2, r3, #30
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	06db      	lsls	r3, r3, #27
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	431a      	orrs	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e01d      	b.n	8003ab2 <HAL_FDCAN_ConfigFilter+0x96>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	075a      	lsls	r2, r3, #29
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	079a      	lsls	r2, r3, #30
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	60bb      	str	r3, [r7, #8]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e006      	b.n	8003ac4 <HAL_FDCAN_ConfigFilter+0xa8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aba:	f043 0202 	orr.w	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	661a      	str	r2, [r3, #96]	; 0x60
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_FDCAN_ConfigGlobalFilter>:
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d116      	bne.n	8003b18 <HAL_FDCAN_ConfigGlobalFilter+0x48>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	011a      	lsls	r2, r3, #4
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	431a      	orrs	r2, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	431a      	orrs	r2, r3
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003b14:	2300      	movs	r3, #0
 8003b16:	e006      	b.n	8003b26 <HAL_FDCAN_ConfigGlobalFilter+0x56>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1c:	f043 0204 	orr.w	r2, r3, #4
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	661a      	str	r2, [r3, #96]	; 0x60
 8003b24:	2301      	movs	r3, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_FDCAN_ConfigRxFifoOverwrite>:
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d11f      	bne.n	8003b8a <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d10d      	bne.n	8003b6c <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b58:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	025a      	lsls	r2, r3, #9
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003b6a:	e00c      	b.n	8003b86 <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b74:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003b86:	2300      	movs	r3, #0
 8003b88:	e006      	b.n	8003b98 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8e:	f043 0204 	orr.w	r2, r3, #4
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	661a      	str	r2, [r3, #96]	; 0x60
 8003b96:	2301      	movs	r3, #1
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_FDCAN_Start>:
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d110      	bne.n	8003bda <HAL_FDCAN_Start+0x36>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	619a      	str	r2, [r3, #24]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	661a      	str	r2, [r3, #96]	; 0x60
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e006      	b.n	8003be8 <HAL_FDCAN_Start+0x44>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bde:	f043 0204 	orr.w	r2, r3, #4
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	661a      	str	r2, [r3, #96]	; 0x60
 8003be6:	2301      	movs	r3, #1
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_FDCAN_AddMessageToTxFifoQ>:
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d12c      	bne.n	8003c66 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	661a      	str	r2, [r3, #96]	; 0x60
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e023      	b.n	8003c74 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f956 	bl	8003ef4 <FDCAN_CopyMessageToRAM>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	fa01 f202 	lsl.w	r2, r1, r2
 8003c54:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8003c58:	2201      	movs	r2, #1
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	659a      	str	r2, [r3, #88]	; 0x58
 8003c62:	2300      	movs	r3, #0
 8003c64:	e006      	b.n	8003c74 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6a:	f043 0208 	orr.w	r2, r3, #8
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	661a      	str	r2, [r3, #96]	; 0x60
 8003c72:	2301      	movs	r3, #1
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_FDCAN_ActivateNotification>:
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c8e:	75fb      	strb	r3, [r7, #23]
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d003      	beq.n	8003c9e <HAL_FDCAN_ActivateNotification+0x22>
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	f040 80c8 	bne.w	8003e2e <HAL_FDCAN_ActivateNotification+0x1b2>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d004      	beq.n	8003cba <HAL_FDCAN_ActivateNotification+0x3e>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d03b      	beq.n	8003d32 <HAL_FDCAN_ActivateNotification+0xb6>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <HAL_FDCAN_ActivateNotification+0x52>
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d031      	beq.n	8003d32 <HAL_FDCAN_ActivateNotification+0xb6>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d004      	beq.n	8003ce2 <HAL_FDCAN_ActivateNotification+0x66>
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d027      	beq.n	8003d32 <HAL_FDCAN_ActivateNotification+0xb6>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_FDCAN_ActivateNotification+0x7a>
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01d      	beq.n	8003d32 <HAL_FDCAN_ActivateNotification+0xb6>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <HAL_FDCAN_ActivateNotification+0x8e>
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d013      	beq.n	8003d32 <HAL_FDCAN_ActivateNotification+0xb6>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d004      	beq.n	8003d1e <HAL_FDCAN_ActivateNotification+0xa2>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <HAL_FDCAN_ActivateNotification+0xb6>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00c      	beq.n	8003d42 <HAL_FDCAN_ActivateNotification+0xc6>
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d107      	bne.n	8003d42 <HAL_FDCAN_ActivateNotification+0xc6>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <HAL_FDCAN_ActivateNotification+0xda>
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d13b      	bne.n	8003dce <HAL_FDCAN_ActivateNotification+0x152>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <HAL_FDCAN_ActivateNotification+0xee>
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d131      	bne.n	8003dce <HAL_FDCAN_ActivateNotification+0x152>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <HAL_FDCAN_ActivateNotification+0x102>
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d127      	bne.n	8003dce <HAL_FDCAN_ActivateNotification+0x152>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <HAL_FDCAN_ActivateNotification+0x116>
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d11d      	bne.n	8003dce <HAL_FDCAN_ActivateNotification+0x152>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_FDCAN_ActivateNotification+0x12a>
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d113      	bne.n	8003dce <HAL_FDCAN_ActivateNotification+0x152>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <HAL_FDCAN_ActivateNotification+0x13e>
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_FDCAN_ActivateNotification+0x152>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00c      	beq.n	8003dde <HAL_FDCAN_ActivateNotification+0x162>
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_FDCAN_ActivateNotification+0x162>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0202 	orr.w	r2, r2, #2
 8003ddc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <HAL_FDCAN_ActivateNotification+0x180>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_FDCAN_ActivateNotification+0x19e>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e006      	b.n	8003e3c <HAL_FDCAN_ActivateNotification+0x1c0>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e32:	f043 0202 	orr.w	r2, r3, #2
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <FDCAN_CalcultateRamBlockAddresses>:
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e62:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6a:	041a      	lsls	r2, r3, #16
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e88:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	061a      	lsls	r2, r3, #24
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	649a      	str	r2, [r3, #72]	; 0x48
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	64da      	str	r2, [r3, #76]	; 0x4c
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	651a      	str	r2, [r3, #80]	; 0x50
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e005      	b.n	8003ed6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d3f3      	bcc.n	8003eca <FDCAN_CalcultateRamBlockAddresses+0x82>
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	4000a400 	.word	0x4000a400

08003ef4 <FDCAN_CopyMessageToRAM>:
 8003ef4:	b480      	push	{r7}
 8003ef6:	b089      	sub	sp, #36	; 0x24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <FDCAN_CopyMessageToRAM+0x2c>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	049b      	lsls	r3, r3, #18
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	e00a      	b.n	8003f36 <FDCAN_CopyMessageToRAM+0x42>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	061a      	lsls	r2, r3, #24
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	440b      	add	r3, r1
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	3304      	adds	r3, #4
 8003f72:	61bb      	str	r3, [r7, #24]
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e020      	b.n	8003fc8 <FDCAN_CopyMessageToRAM+0xd4>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	3303      	adds	r3, #3
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	061a      	lsls	r2, r3, #24
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	3302      	adds	r3, #2
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	440b      	add	r3, r1
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	440b      	add	r3, r1
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	4313      	orrs	r3, r2
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	7812      	ldrb	r2, [r2, #0]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	4a06      	ldr	r2, [pc, #24]	; (8003fe8 <FDCAN_CopyMessageToRAM+0xf4>)
 8003fd0:	5cd3      	ldrb	r3, [r2, r3]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d3d5      	bcc.n	8003f86 <FDCAN_CopyMessageToRAM+0x92>
 8003fda:	bf00      	nop
 8003fdc:	bf00      	nop
 8003fde:	3724      	adds	r7, #36	; 0x24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	08008538 	.word	0x08008538

08003fec <HAL_GPIO_Init>:
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	e15a      	b.n	80042b2 <HAL_GPIO_Init+0x2c6>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2101      	movs	r1, #1
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 814c 	beq.w	80042ac <HAL_GPIO_Init+0x2c0>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d005      	beq.n	800402c <HAL_GPIO_Init+0x40>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d130      	bne.n	800408e <HAL_GPIO_Init+0xa2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	2203      	movs	r2, #3
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	2201      	movs	r2, #1
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4013      	ands	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	f003 0201 	and.w	r2, r3, #1
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b03      	cmp	r3, #3
 8004098:	d017      	beq.n	80040ca <HAL_GPIO_Init+0xde>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2203      	movs	r2, #3
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d123      	bne.n	800411e <HAL_GPIO_Init+0x132>
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	08da      	lsrs	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3208      	adds	r2, #8
 80040de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	220f      	movs	r2, #15
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	08da      	lsrs	r2, r3, #3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3208      	adds	r2, #8
 8004118:	6939      	ldr	r1, [r7, #16]
 800411a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	2203      	movs	r2, #3
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 0203 	and.w	r2, r3, #3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80a6 	beq.w	80042ac <HAL_GPIO_Init+0x2c0>
 8004160:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <HAL_GPIO_Init+0x2e4>)
 8004162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004164:	4a5a      	ldr	r2, [pc, #360]	; (80042d0 <HAL_GPIO_Init+0x2e4>)
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	6613      	str	r3, [r2, #96]	; 0x60
 800416c:	4b58      	ldr	r3, [pc, #352]	; (80042d0 <HAL_GPIO_Init+0x2e4>)
 800416e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	4a56      	ldr	r2, [pc, #344]	; (80042d4 <HAL_GPIO_Init+0x2e8>)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	3302      	adds	r3, #2
 8004180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	220f      	movs	r2, #15
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4013      	ands	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041a2:	d01f      	beq.n	80041e4 <HAL_GPIO_Init+0x1f8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a4c      	ldr	r2, [pc, #304]	; (80042d8 <HAL_GPIO_Init+0x2ec>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d019      	beq.n	80041e0 <HAL_GPIO_Init+0x1f4>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a4b      	ldr	r2, [pc, #300]	; (80042dc <HAL_GPIO_Init+0x2f0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <HAL_GPIO_Init+0x1f0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a4a      	ldr	r2, [pc, #296]	; (80042e0 <HAL_GPIO_Init+0x2f4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00d      	beq.n	80041d8 <HAL_GPIO_Init+0x1ec>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a49      	ldr	r2, [pc, #292]	; (80042e4 <HAL_GPIO_Init+0x2f8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <HAL_GPIO_Init+0x1e8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a48      	ldr	r2, [pc, #288]	; (80042e8 <HAL_GPIO_Init+0x2fc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d101      	bne.n	80041d0 <HAL_GPIO_Init+0x1e4>
 80041cc:	2305      	movs	r3, #5
 80041ce:	e00a      	b.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041d0:	2306      	movs	r3, #6
 80041d2:	e008      	b.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041d4:	2304      	movs	r3, #4
 80041d6:	e006      	b.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041d8:	2303      	movs	r3, #3
 80041da:	e004      	b.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041dc:	2302      	movs	r3, #2
 80041de:	e002      	b.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041e4:	2300      	movs	r3, #0
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	f002 0203 	and.w	r2, r2, #3
 80041ec:	0092      	lsls	r2, r2, #2
 80041ee:	4093      	lsls	r3, r2
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	4937      	ldr	r1, [pc, #220]	; (80042d4 <HAL_GPIO_Init+0x2e8>)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	089b      	lsrs	r3, r3, #2
 80041fc:	3302      	adds	r3, #2
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004204:	4b39      	ldr	r3, [pc, #228]	; (80042ec <HAL_GPIO_Init+0x300>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	43db      	mvns	r3, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_GPIO_Init+0x23c>
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	4a30      	ldr	r2, [pc, #192]	; (80042ec <HAL_GPIO_Init+0x300>)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6093      	str	r3, [r2, #8]
 800422e:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <HAL_GPIO_Init+0x300>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	43db      	mvns	r3, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_Init+0x266>
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	4a26      	ldr	r2, [pc, #152]	; (80042ec <HAL_GPIO_Init+0x300>)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	60d3      	str	r3, [r2, #12]
 8004258:	4b24      	ldr	r3, [pc, #144]	; (80042ec <HAL_GPIO_Init+0x300>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	43db      	mvns	r3, r3
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4013      	ands	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_GPIO_Init+0x290>
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	4a1b      	ldr	r2, [pc, #108]	; (80042ec <HAL_GPIO_Init+0x300>)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	6053      	str	r3, [r2, #4]
 8004282:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <HAL_GPIO_Init+0x300>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	43db      	mvns	r3, r3
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x2ba>
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	4a11      	ldr	r2, [pc, #68]	; (80042ec <HAL_GPIO_Init+0x300>)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	3301      	adds	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f47f ae9d 	bne.w	8003ffc <HAL_GPIO_Init+0x10>
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40010000 	.word	0x40010000
 80042d8:	48000400 	.word	0x48000400
 80042dc:	48000800 	.word	0x48000800
 80042e0:	48000c00 	.word	0x48000c00
 80042e4:	48001000 	.word	0x48001000
 80042e8:	48001400 	.word	0x48001400
 80042ec:	40010400 	.word	0x40010400

080042f0 <HAL_GPIO_WritePin>:
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	807b      	strh	r3, [r7, #2]
 80042fc:	4613      	mov	r3, r2
 80042fe:	707b      	strb	r3, [r7, #1]
 8004300:	787b      	ldrb	r3, [r7, #1]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_GPIO_WritePin+0x1e>
 8004306:	887a      	ldrh	r2, [r7, #2]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	619a      	str	r2, [r3, #24]
 800430c:	e002      	b.n	8004314 <HAL_GPIO_WritePin+0x24>
 800430e:	887a      	ldrh	r2, [r7, #2]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	629a      	str	r2, [r3, #40]	; 0x28
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_PWREx_ControlVoltageScaling>:
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d141      	bne.n	80043b2 <HAL_PWREx_ControlVoltageScaling+0x92>
 800432e:	4b4b      	ldr	r3, [pc, #300]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433a:	d131      	bne.n	80043a0 <HAL_PWREx_ControlVoltageScaling+0x80>
 800433c:	4b47      	ldr	r3, [pc, #284]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004342:	4a46      	ldr	r2, [pc, #280]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800434c:	4b43      	ldr	r3, [pc, #268]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004354:	4a41      	ldr	r2, [pc, #260]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	4b40      	ldr	r3, [pc, #256]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2232      	movs	r2, #50	; 0x32
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	4a3f      	ldr	r2, [pc, #252]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	0c9b      	lsrs	r3, r3, #18
 800436e:	3301      	adds	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e002      	b.n	800437a <HAL_PWREx_ControlVoltageScaling+0x5a>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3b01      	subs	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	4b38      	ldr	r3, [pc, #224]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004386:	d102      	bne.n	800438e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f2      	bne.n	8004374 <HAL_PWREx_ControlVoltageScaling+0x54>
 800438e:	4b33      	ldr	r3, [pc, #204]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439a:	d158      	bne.n	800444e <HAL_PWREx_ControlVoltageScaling+0x12e>
 800439c:	2303      	movs	r3, #3
 800439e:	e057      	b.n	8004450 <HAL_PWREx_ControlVoltageScaling+0x130>
 80043a0:	4b2e      	ldr	r3, [pc, #184]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a6:	4a2d      	ldr	r2, [pc, #180]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043b0:	e04d      	b.n	800444e <HAL_PWREx_ControlVoltageScaling+0x12e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b8:	d141      	bne.n	800443e <HAL_PWREx_ControlVoltageScaling+0x11e>
 80043ba:	4b28      	ldr	r3, [pc, #160]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c6:	d131      	bne.n	800442c <HAL_PWREx_ControlVoltageScaling+0x10c>
 80043c8:	4b24      	ldr	r3, [pc, #144]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ce:	4a23      	ldr	r2, [pc, #140]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043e0:	4a1e      	ldr	r2, [pc, #120]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2232      	movs	r2, #50	; 0x32
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	0c9b      	lsrs	r3, r3, #18
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	e002      	b.n	8004406 <HAL_PWREx_ControlVoltageScaling+0xe6>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3b01      	subs	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004412:	d102      	bne.n	800441a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f2      	bne.n	8004400 <HAL_PWREx_ControlVoltageScaling+0xe0>
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004426:	d112      	bne.n	800444e <HAL_PWREx_ControlVoltageScaling+0x12e>
 8004428:	2303      	movs	r3, #3
 800442a:	e011      	b.n	8004450 <HAL_PWREx_ControlVoltageScaling+0x130>
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004432:	4a0a      	ldr	r2, [pc, #40]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004438:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800443c:	e007      	b.n	800444e <HAL_PWREx_ControlVoltageScaling+0x12e>
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004446:	4a05      	ldr	r2, [pc, #20]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	2300      	movs	r3, #0
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	40007000 	.word	0x40007000
 8004460:	20000038 	.word	0x20000038
 8004464:	431bde83 	.word	0x431bde83

08004468 <HAL_RCC_OscConfig>:
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_OscConfig+0x12>
 8004476:	2301      	movs	r3, #1
 8004478:	e306      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d075      	beq.n	8004572 <HAL_RCC_OscConfig+0x10a>
 8004486:	4b97      	ldr	r3, [pc, #604]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	4b94      	ldr	r3, [pc, #592]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b0c      	cmp	r3, #12
 800449e:	d102      	bne.n	80044a6 <HAL_RCC_OscConfig+0x3e>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d002      	beq.n	80044ac <HAL_RCC_OscConfig+0x44>
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d10b      	bne.n	80044c4 <HAL_RCC_OscConfig+0x5c>
 80044ac:	4b8d      	ldr	r3, [pc, #564]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d05b      	beq.n	8004570 <HAL_RCC_OscConfig+0x108>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d157      	bne.n	8004570 <HAL_RCC_OscConfig+0x108>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e2e1      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d106      	bne.n	80044dc <HAL_RCC_OscConfig+0x74>
 80044ce:	4b85      	ldr	r3, [pc, #532]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a84      	ldr	r2, [pc, #528]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80044d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e01d      	b.n	8004518 <HAL_RCC_OscConfig+0xb0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0x98>
 80044e6:	4b7f      	ldr	r3, [pc, #508]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a7e      	ldr	r2, [pc, #504]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80044ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b7c      	ldr	r3, [pc, #496]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a7b      	ldr	r2, [pc, #492]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e00b      	b.n	8004518 <HAL_RCC_OscConfig+0xb0>
 8004500:	4b78      	ldr	r3, [pc, #480]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a77      	ldr	r2, [pc, #476]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 8004506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	4b75      	ldr	r3, [pc, #468]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a74      	ldr	r2, [pc, #464]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 8004512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d013      	beq.n	8004548 <HAL_RCC_OscConfig+0xe0>
 8004520:	f7ff f810 	bl	8003544 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0xd2>
 8004528:	f7ff f80c 	bl	8003544 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	; 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0xd2>
 8004536:	2303      	movs	r3, #3
 8004538:	e2a6      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 800453a:	4b6a      	ldr	r3, [pc, #424]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0xc0>
 8004546:	e014      	b.n	8004572 <HAL_RCC_OscConfig+0x10a>
 8004548:	f7fe fffc 	bl	8003544 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xfa>
 8004550:	f7fe fff8 	bl	8003544 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	; 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xfa>
 800455e:	2303      	movs	r3, #3
 8004560:	e292      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 8004562:	4b60      	ldr	r3, [pc, #384]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0xe8>
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x10a>
 8004570:	bf00      	nop
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d075      	beq.n	800466a <HAL_RCC_OscConfig+0x202>
 800457e:	4b59      	ldr	r3, [pc, #356]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	4b56      	ldr	r3, [pc, #344]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b0c      	cmp	r3, #12
 8004596:	d102      	bne.n	800459e <HAL_RCC_OscConfig+0x136>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d002      	beq.n	80045a4 <HAL_RCC_OscConfig+0x13c>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d11f      	bne.n	80045e4 <HAL_RCC_OscConfig+0x17c>
 80045a4:	4b4f      	ldr	r3, [pc, #316]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_OscConfig+0x154>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_OscConfig+0x154>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e265      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 80045bc:	4b49      	ldr	r3, [pc, #292]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	061b      	lsls	r3, r3, #24
 80045ca:	4946      	ldr	r1, [pc, #280]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
 80045d0:	4b45      	ldr	r3, [pc, #276]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe ff69 	bl	80034ac <HAL_InitTick>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d043      	beq.n	8004668 <HAL_RCC_OscConfig+0x200>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e251      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d023      	beq.n	8004634 <HAL_RCC_OscConfig+0x1cc>
 80045ec:	4b3d      	ldr	r3, [pc, #244]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a3c      	ldr	r2, [pc, #240]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80045f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	f7fe ffa4 	bl	8003544 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x1aa>
 8004600:	f7fe ffa0 	bl	8003544 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x1aa>
 800460e:	2303      	movs	r3, #3
 8004610:	e23a      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 8004612:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x198>
 800461e:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	061b      	lsls	r3, r3, #24
 800462c:	492d      	ldr	r1, [pc, #180]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 800462e:	4313      	orrs	r3, r2
 8004630:	604b      	str	r3, [r1, #4]
 8004632:	e01a      	b.n	800466a <HAL_RCC_OscConfig+0x202>
 8004634:	4b2b      	ldr	r3, [pc, #172]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a2a      	ldr	r2, [pc, #168]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 800463a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	f7fe ff80 	bl	8003544 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x1f2>
 8004648:	f7fe ff7c 	bl	8003544 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x1f2>
 8004656:	2303      	movs	r3, #3
 8004658:	e216      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 800465a:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x1e0>
 8004666:	e000      	b.n	800466a <HAL_RCC_OscConfig+0x202>
 8004668:	bf00      	nop
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d041      	beq.n	80046fa <HAL_RCC_OscConfig+0x292>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01c      	beq.n	80046b8 <HAL_RCC_OscConfig+0x250>
 800467e:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 8004680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004684:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800468e:	f7fe ff59 	bl	8003544 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x240>
 8004696:	f7fe ff55 	bl	8003544 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x240>
 80046a4:	2303      	movs	r3, #3
 80046a6:	e1ef      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 80046a8:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80046aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ef      	beq.n	8004696 <HAL_RCC_OscConfig+0x22e>
 80046b6:	e020      	b.n	80046fa <HAL_RCC_OscConfig+0x292>
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046be:	4a09      	ldr	r2, [pc, #36]	; (80046e4 <HAL_RCC_OscConfig+0x27c>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80046c8:	f7fe ff3c 	bl	8003544 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]
 80046ce:	e00d      	b.n	80046ec <HAL_RCC_OscConfig+0x284>
 80046d0:	f7fe ff38 	bl	8003544 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d906      	bls.n	80046ec <HAL_RCC_OscConfig+0x284>
 80046de:	2303      	movs	r3, #3
 80046e0:	e1d2      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 80046e2:	bf00      	nop
 80046e4:	40021000 	.word	0x40021000
 80046e8:	2000003c 	.word	0x2000003c
 80046ec:	4b8c      	ldr	r3, [pc, #560]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80046ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1ea      	bne.n	80046d0 <HAL_RCC_OscConfig+0x268>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 80a6 	beq.w	8004854 <HAL_RCC_OscConfig+0x3ec>
 8004708:	2300      	movs	r3, #0
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	4b84      	ldr	r3, [pc, #528]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 800470e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_RCC_OscConfig+0x2b4>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_RCC_OscConfig+0x2b6>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00d      	beq.n	800473e <HAL_RCC_OscConfig+0x2d6>
 8004722:	4b7f      	ldr	r3, [pc, #508]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	4a7e      	ldr	r2, [pc, #504]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472c:	6593      	str	r3, [r2, #88]	; 0x58
 800472e:	4b7c      	ldr	r3, [pc, #496]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2301      	movs	r3, #1
 800473c:	77fb      	strb	r3, [r7, #31]
 800473e:	4b79      	ldr	r3, [pc, #484]	; (8004924 <HAL_RCC_OscConfig+0x4bc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d118      	bne.n	800477c <HAL_RCC_OscConfig+0x314>
 800474a:	4b76      	ldr	r3, [pc, #472]	; (8004924 <HAL_RCC_OscConfig+0x4bc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a75      	ldr	r2, [pc, #468]	; (8004924 <HAL_RCC_OscConfig+0x4bc>)
 8004750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	f7fe fef5 	bl	8003544 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x308>
 800475e:	f7fe fef1 	bl	8003544 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x308>
 800476c:	2303      	movs	r3, #3
 800476e:	e18b      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 8004770:	4b6c      	ldr	r3, [pc, #432]	; (8004924 <HAL_RCC_OscConfig+0x4bc>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x2f6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d108      	bne.n	8004796 <HAL_RCC_OscConfig+0x32e>
 8004784:	4b66      	ldr	r3, [pc, #408]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	4a65      	ldr	r2, [pc, #404]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004794:	e024      	b.n	80047e0 <HAL_RCC_OscConfig+0x378>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b05      	cmp	r3, #5
 800479c:	d110      	bne.n	80047c0 <HAL_RCC_OscConfig+0x358>
 800479e:	4b60      	ldr	r3, [pc, #384]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	4a5e      	ldr	r2, [pc, #376]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ae:	4b5c      	ldr	r3, [pc, #368]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	4a5a      	ldr	r2, [pc, #360]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047be:	e00f      	b.n	80047e0 <HAL_RCC_OscConfig+0x378>
 80047c0:	4b57      	ldr	r3, [pc, #348]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	4a56      	ldr	r2, [pc, #344]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047d0:	4b53      	ldr	r3, [pc, #332]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	4a52      	ldr	r2, [pc, #328]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d016      	beq.n	8004816 <HAL_RCC_OscConfig+0x3ae>
 80047e8:	f7fe feac 	bl	8003544 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_OscConfig+0x39e>
 80047f0:	f7fe fea8 	bl	8003544 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x39e>
 8004802:	2303      	movs	r3, #3
 8004804:	e140      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 8004806:	4b46      	ldr	r3, [pc, #280]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ed      	beq.n	80047f0 <HAL_RCC_OscConfig+0x388>
 8004814:	e015      	b.n	8004842 <HAL_RCC_OscConfig+0x3da>
 8004816:	f7fe fe95 	bl	8003544 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]
 800481c:	e00a      	b.n	8004834 <HAL_RCC_OscConfig+0x3cc>
 800481e:	f7fe fe91 	bl	8003544 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	f241 3288 	movw	r2, #5000	; 0x1388
 800482c:	4293      	cmp	r3, r2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x3cc>
 8004830:	2303      	movs	r3, #3
 8004832:	e129      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 8004834:	4b3a      	ldr	r3, [pc, #232]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1ed      	bne.n	800481e <HAL_RCC_OscConfig+0x3b6>
 8004842:	7ffb      	ldrb	r3, [r7, #31]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d105      	bne.n	8004854 <HAL_RCC_OscConfig+0x3ec>
 8004848:	4b35      	ldr	r3, [pc, #212]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	4a34      	ldr	r2, [pc, #208]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 800484e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004852:	6593      	str	r3, [r2, #88]	; 0x58
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d03c      	beq.n	80048da <HAL_RCC_OscConfig+0x472>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01c      	beq.n	80048a2 <HAL_RCC_OscConfig+0x43a>
 8004868:	4b2d      	ldr	r3, [pc, #180]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 800486a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800486e:	4a2c      	ldr	r2, [pc, #176]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8004878:	f7fe fe64 	bl	8003544 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x42a>
 8004880:	f7fe fe60 	bl	8003544 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x42a>
 800488e:	2303      	movs	r3, #3
 8004890:	e0fa      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 8004892:	4b23      	ldr	r3, [pc, #140]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 8004894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ef      	beq.n	8004880 <HAL_RCC_OscConfig+0x418>
 80048a0:	e01b      	b.n	80048da <HAL_RCC_OscConfig+0x472>
 80048a2:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80048a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a8:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80048b2:	f7fe fe47 	bl	8003544 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x464>
 80048ba:	f7fe fe43 	bl	8003544 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x464>
 80048c8:	2303      	movs	r3, #3
 80048ca:	e0dd      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 80048cc:	4b14      	ldr	r3, [pc, #80]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80048ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ef      	bne.n	80048ba <HAL_RCC_OscConfig+0x452>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80d1 	beq.w	8004a86 <HAL_RCC_OscConfig+0x61e>
 80048e4:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 030c 	and.w	r3, r3, #12
 80048ec:	2b0c      	cmp	r3, #12
 80048ee:	f000 808b 	beq.w	8004a08 <HAL_RCC_OscConfig+0x5a0>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d15e      	bne.n	80049b8 <HAL_RCC_OscConfig+0x550>
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a08      	ldr	r2, [pc, #32]	; (8004920 <HAL_RCC_OscConfig+0x4b8>)
 8004900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	f7fe fe1d 	bl	8003544 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]
 800490c:	e00c      	b.n	8004928 <HAL_RCC_OscConfig+0x4c0>
 800490e:	f7fe fe19 	bl	8003544 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d905      	bls.n	8004928 <HAL_RCC_OscConfig+0x4c0>
 800491c:	2303      	movs	r3, #3
 800491e:	e0b3      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 8004920:	40021000 	.word	0x40021000
 8004924:	40007000 	.word	0x40007000
 8004928:	4b59      	ldr	r3, [pc, #356]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ec      	bne.n	800490e <HAL_RCC_OscConfig+0x4a6>
 8004934:	4b56      	ldr	r3, [pc, #344]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	4b56      	ldr	r3, [pc, #344]	; (8004a94 <HAL_RCC_OscConfig+0x62c>)
 800493a:	4013      	ands	r3, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6a11      	ldr	r1, [r2, #32]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004944:	3a01      	subs	r2, #1
 8004946:	0112      	lsls	r2, r2, #4
 8004948:	4311      	orrs	r1, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800494e:	0212      	lsls	r2, r2, #8
 8004950:	4311      	orrs	r1, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004956:	0852      	lsrs	r2, r2, #1
 8004958:	3a01      	subs	r2, #1
 800495a:	0552      	lsls	r2, r2, #21
 800495c:	4311      	orrs	r1, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004962:	0852      	lsrs	r2, r2, #1
 8004964:	3a01      	subs	r2, #1
 8004966:	0652      	lsls	r2, r2, #25
 8004968:	4311      	orrs	r1, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800496e:	06d2      	lsls	r2, r2, #27
 8004970:	430a      	orrs	r2, r1
 8004972:	4947      	ldr	r1, [pc, #284]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 8004974:	4313      	orrs	r3, r2
 8004976:	60cb      	str	r3, [r1, #12]
 8004978:	4b45      	ldr	r3, [pc, #276]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a44      	ldr	r2, [pc, #272]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 800497e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	4b42      	ldr	r3, [pc, #264]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4a41      	ldr	r2, [pc, #260]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 800498a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800498e:	60d3      	str	r3, [r2, #12]
 8004990:	f7fe fdd8 	bl	8003544 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x542>
 8004998:	f7fe fdd4 	bl	8003544 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x542>
 80049a6:	2303      	movs	r3, #3
 80049a8:	e06e      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 80049aa:	4b39      	ldr	r3, [pc, #228]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0x530>
 80049b6:	e066      	b.n	8004a86 <HAL_RCC_OscConfig+0x61e>
 80049b8:	4b35      	ldr	r3, [pc, #212]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a34      	ldr	r2, [pc, #208]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 80049be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	4b32      	ldr	r3, [pc, #200]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	4a31      	ldr	r2, [pc, #196]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	60d3      	str	r3, [r2, #12]
 80049d0:	4b2f      	ldr	r3, [pc, #188]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a2e      	ldr	r2, [pc, #184]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 80049d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80049da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049de:	60d3      	str	r3, [r2, #12]
 80049e0:	f7fe fdb0 	bl	8003544 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x592>
 80049e8:	f7fe fdac 	bl	8003544 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x592>
 80049f6:	2303      	movs	r3, #3
 80049f8:	e046      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 80049fa:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x580>
 8004a06:	e03e      	b.n	8004a86 <HAL_RCC_OscConfig+0x61e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_OscConfig+0x5ac>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e039      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 8004a14:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <HAL_RCC_OscConfig+0x628>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 0203 	and.w	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d12c      	bne.n	8004a82 <HAL_RCC_OscConfig+0x61a>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	3b01      	subs	r3, #1
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d123      	bne.n	8004a82 <HAL_RCC_OscConfig+0x61a>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d11b      	bne.n	8004a82 <HAL_RCC_OscConfig+0x61a>
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	06db      	lsls	r3, r3, #27
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d113      	bne.n	8004a82 <HAL_RCC_OscConfig+0x61a>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	3b01      	subs	r3, #1
 8004a68:	055b      	lsls	r3, r3, #21
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d109      	bne.n	8004a82 <HAL_RCC_OscConfig+0x61a>
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a78:	085b      	lsrs	r3, r3, #1
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	065b      	lsls	r3, r3, #25
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d001      	beq.n	8004a86 <HAL_RCC_OscConfig+0x61e>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_RCC_OscConfig+0x620>
 8004a86:	2300      	movs	r3, #0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000
 8004a94:	019f800c 	.word	0x019f800c

08004a98 <HAL_RCC_ClockConfig>:
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x18>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e11e      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
 8004ab0:	4b91      	ldr	r3, [pc, #580]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d910      	bls.n	8004ae0 <HAL_RCC_ClockConfig+0x48>
 8004abe:	4b8e      	ldr	r3, [pc, #568]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f023 020f 	bic.w	r2, r3, #15
 8004ac6:	498c      	ldr	r1, [pc, #560]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	600b      	str	r3, [r1, #0]
 8004ace:	4b8a      	ldr	r3, [pc, #552]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x48>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e106      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d073      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x13c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d129      	bne.n	8004b48 <HAL_RCC_ClockConfig+0xb0>
 8004af4:	4b81      	ldr	r3, [pc, #516]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x6c>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0f4      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
 8004b04:	f000 f99e 	bl	8004e44 <RCC_GetSysClockFreqFromPLLSource>
 8004b08:	6138      	str	r0, [r7, #16]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4a7c      	ldr	r2, [pc, #496]	; (8004d00 <HAL_RCC_ClockConfig+0x268>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d93f      	bls.n	8004b92 <HAL_RCC_ClockConfig+0xfa>
 8004b12:	4b7a      	ldr	r3, [pc, #488]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x9a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d033      	beq.n	8004b92 <HAL_RCC_ClockConfig+0xfa>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d12f      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xfa>
 8004b32:	4b72      	ldr	r3, [pc, #456]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3a:	4a70      	ldr	r2, [pc, #448]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b40:	6093      	str	r3, [r2, #8]
 8004b42:	2380      	movs	r3, #128	; 0x80
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	e024      	b.n	8004b92 <HAL_RCC_ClockConfig+0xfa>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d107      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xc8>
 8004b50:	4b6a      	ldr	r3, [pc, #424]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xd8>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0c6      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
 8004b60:	4b66      	ldr	r3, [pc, #408]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xd8>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0be      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
 8004b70:	f000 f8ce 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8004b74:	6138      	str	r0, [r7, #16]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4a61      	ldr	r2, [pc, #388]	; (8004d00 <HAL_RCC_ClockConfig+0x268>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d909      	bls.n	8004b92 <HAL_RCC_ClockConfig+0xfa>
 8004b7e:	4b5f      	ldr	r3, [pc, #380]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b86:	4a5d      	ldr	r2, [pc, #372]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8c:	6093      	str	r3, [r2, #8]
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	4b5a      	ldr	r3, [pc, #360]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f023 0203 	bic.w	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4957      	ldr	r1, [pc, #348]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	608b      	str	r3, [r1, #8]
 8004ba4:	f7fe fcce 	bl	8003544 <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x12a>
 8004bac:	f7fe fcca 	bl	8003544 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0x12a>
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e095      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
 8004bc2:	4b4e      	ldr	r3, [pc, #312]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 020c 	and.w	r2, r3, #12
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d1eb      	bne.n	8004bac <HAL_RCC_ClockConfig+0x114>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d023      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x190>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x160>
 8004bec:	4b43      	ldr	r3, [pc, #268]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4a42      	ldr	r2, [pc, #264]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bf6:	6093      	str	r3, [r2, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x17c>
 8004c04:	4b3d      	ldr	r3, [pc, #244]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c0c:	4a3b      	ldr	r2, [pc, #236]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c12:	6093      	str	r3, [r2, #8]
 8004c14:	4b39      	ldr	r3, [pc, #228]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4936      	ldr	r1, [pc, #216]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1a2>
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d105      	bne.n	8004c3a <HAL_RCC_ClockConfig+0x1a2>
 8004c2e:	4b33      	ldr	r3, [pc, #204]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	4a32      	ldr	r2, [pc, #200]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c38:	6093      	str	r3, [r2, #8]
 8004c3a:	4b2f      	ldr	r3, [pc, #188]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d21d      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x1ec>
 8004c48:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 020f 	bic.w	r2, r3, #15
 8004c50:	4929      	ldr	r1, [pc, #164]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	600b      	str	r3, [r1, #0]
 8004c58:	f7fe fc74 	bl	8003544 <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1de>
 8004c60:	f7fe fc70 	bl	8003544 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x1de>
 8004c72:	2303      	movs	r3, #3
 8004c74:	e03b      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
 8004c76:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d1ed      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x1c8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x20a>
 8004c90:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4917      	ldr	r1, [pc, #92]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x22a>
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	490f      	ldr	r1, [pc, #60]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
 8004cc2:	f000 f825 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	490c      	ldr	r1, [pc, #48]	; (8004d04 <HAL_RCC_ClockConfig+0x26c>)
 8004cd4:	5ccb      	ldrb	r3, [r1, r3]
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	fa22 f303 	lsr.w	r3, r2, r3
 8004cde:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <HAL_RCC_ClockConfig+0x270>)
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <HAL_RCC_ClockConfig+0x274>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe fbe0 	bl	80034ac <HAL_InitTick>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40022000 	.word	0x40022000
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	04c4b400 	.word	0x04c4b400
 8004d04:	08008520 	.word	0x08008520
 8004d08:	20000038 	.word	0x20000038
 8004d0c:	2000003c 	.word	0x2000003c

08004d10 <HAL_RCC_GetSysClockFreq>:
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4b2c      	ldr	r3, [pc, #176]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 030c 	and.w	r3, r3, #12
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d102      	bne.n	8004d28 <HAL_RCC_GetSysClockFreq+0x18>
 8004d22:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	e047      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0xa8>
 8004d28:	4b27      	ldr	r3, [pc, #156]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d102      	bne.n	8004d3a <HAL_RCC_GetSysClockFreq+0x2a>
 8004d34:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	e03e      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0xa8>
 8004d3a:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d136      	bne.n	8004db4 <HAL_RCC_GetSysClockFreq+0xa4>
 8004d46:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d10c      	bne.n	8004d7e <HAL_RCC_GetSysClockFreq+0x6e>
 8004d64:	4a1a      	ldr	r2, [pc, #104]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d6e:	68d2      	ldr	r2, [r2, #12]
 8004d70:	0a12      	lsrs	r2, r2, #8
 8004d72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	e00c      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0x88>
 8004d7e:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d86:	4a10      	ldr	r2, [pc, #64]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d88:	68d2      	ldr	r2, [r2, #12]
 8004d8a:	0a12      	lsrs	r2, r2, #8
 8004d8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d90:	fb02 f303 	mul.w	r3, r2, r3
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	bf00      	nop
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	0e5b      	lsrs	r3, r3, #25
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	3301      	adds	r3, #1
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	607b      	str	r3, [r7, #4]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	e001      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0xa8>
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	00f42400 	.word	0x00f42400
 8004dd0:	007a1200 	.word	0x007a1200

08004dd4 <HAL_RCC_GetHCLKFreq>:
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20000038 	.word	0x20000038

08004dec <HAL_RCC_GetPCLK1Freq>:
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	f7ff fff0 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4904      	ldr	r1, [pc, #16]	; (8004e14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40021000 	.word	0x40021000
 8004e14:	08008530 	.word	0x08008530

08004e18 <HAL_RCC_GetPCLK2Freq>:
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	f7ff ffda 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e20:	4602      	mov	r2, r0
 8004e22:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	0adb      	lsrs	r3, r3, #11
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	4904      	ldr	r1, [pc, #16]	; (8004e40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e2e:	5ccb      	ldrb	r3, [r1, r3]
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
 8004e38:	4618      	mov	r0, r3
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	08008530 	.word	0x08008530

08004e44 <RCC_GetSysClockFreqFromPLLSource>:
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4b1e      	ldr	r3, [pc, #120]	; (8004ec4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	091b      	lsrs	r3, r3, #4
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	3301      	adds	r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d10c      	bne.n	8004e82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
 8004e68:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	4a14      	ldr	r2, [pc, #80]	; (8004ec4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e72:	68d2      	ldr	r2, [r2, #12]
 8004e74:	0a12      	lsrs	r2, r2, #8
 8004e76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e00c      	b.n	8004e9c <RCC_GetSysClockFreqFromPLLSource+0x58>
 8004e82:	4a12      	ldr	r2, [pc, #72]	; (8004ecc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8a:	4a0e      	ldr	r2, [pc, #56]	; (8004ec4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e8c:	68d2      	ldr	r2, [r2, #12]
 8004e8e:	0a12      	lsrs	r2, r2, #8
 8004e90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	bf00      	nop
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	0e5b      	lsrs	r3, r3, #25
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	607b      	str	r3, [r7, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	007a1200 	.word	0x007a1200
 8004ecc:	00f42400 	.word	0x00f42400

08004ed0 <HAL_RCCEx_PeriphCLKConfig>:
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	74fb      	strb	r3, [r7, #19]
 8004edc:	2300      	movs	r3, #0
 8004ede:	74bb      	strb	r3, [r7, #18]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8098 	beq.w	800501e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	747b      	strb	r3, [r7, #17]
 8004ef2:	4b43      	ldr	r3, [pc, #268]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10d      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004efe:	4b40      	ldr	r3, [pc, #256]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	4a3f      	ldr	r2, [pc, #252]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f08:	6593      	str	r3, [r2, #88]	; 0x58
 8004f0a:	4b3d      	ldr	r3, [pc, #244]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f12:	60bb      	str	r3, [r7, #8]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2301      	movs	r3, #1
 8004f18:	747b      	strb	r3, [r7, #17]
 8004f1a:	4b3a      	ldr	r3, [pc, #232]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a39      	ldr	r2, [pc, #228]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	f7fe fb0d 	bl	8003544 <HAL_GetTick>
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	e009      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004f2e:	f7fe fb09 	bl	8003544 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d902      	bls.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	74fb      	strb	r3, [r7, #19]
 8004f40:	e005      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004f42:	4b30      	ldr	r3, [pc, #192]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0ef      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8004f4e:	7cfb      	ldrb	r3, [r7, #19]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d159      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8004f54:	4b2a      	ldr	r3, [pc, #168]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d01e      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d019      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f70:	4b23      	ldr	r3, [pc, #140]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	4b20      	ldr	r3, [pc, #128]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f82:	4a1f      	ldr	r2, [pc, #124]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f8c:	4b1c      	ldr	r3, [pc, #112]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f92:	4a1b      	ldr	r2, [pc, #108]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f9c:	4a18      	ldr	r2, [pc, #96]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d016      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004fae:	f7fe fac9 	bl	8003544 <HAL_GetTick>
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	e00b      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004fb6:	f7fe fac5 	bl	8003544 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d902      	bls.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004fc8:	2303      	movs	r3, #3
 8004fca:	74fb      	strb	r3, [r7, #19]
 8004fcc:	e006      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004fce:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0ec      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10b      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8004fe2:	4b07      	ldr	r3, [pc, #28]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	4903      	ldr	r1, [pc, #12]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ff8:	e008      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ffa:	7cfb      	ldrb	r3, [r7, #19]
 8004ffc:	74bb      	strb	r3, [r7, #18]
 8004ffe:	e005      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005000:	40021000 	.word	0x40021000
 8005004:	40007000 	.word	0x40007000
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	74bb      	strb	r3, [r7, #18]
 800500c:	7c7b      	ldrb	r3, [r7, #17]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d105      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005012:	4ba6      	ldr	r3, [pc, #664]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005016:	4aa5      	ldr	r2, [pc, #660]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501c:	6593      	str	r3, [r2, #88]	; 0x58
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x170>
 800502a:	4ba0      	ldr	r3, [pc, #640]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800502c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005030:	f023 0203 	bic.w	r2, r3, #3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	499c      	ldr	r1, [pc, #624]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800504c:	4b97      	ldr	r3, [pc, #604]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	f023 020c 	bic.w	r2, r3, #12
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	4994      	ldr	r1, [pc, #592]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800506e:	4b8f      	ldr	r3, [pc, #572]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005074:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	498b      	ldr	r1, [pc, #556]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8005090:	4b86      	ldr	r3, [pc, #536]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	4983      	ldr	r1, [pc, #524]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80050b2:	4b7e      	ldr	r3, [pc, #504]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	497a      	ldr	r1, [pc, #488]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80050d4:	4b75      	ldr	r3, [pc, #468]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	4972      	ldr	r1, [pc, #456]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 80050f6:	4b6d      	ldr	r3, [pc, #436]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	4969      	ldr	r1, [pc, #420]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005118:	4b64      	ldr	r3, [pc, #400]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	4961      	ldr	r1, [pc, #388]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800513a:	4b5c      	ldr	r3, [pc, #368]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	4958      	ldr	r1, [pc, #352]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005158:	2b00      	cmp	r3, #0
 800515a:	d015      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800515c:	4b53      	ldr	r3, [pc, #332]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	4950      	ldr	r1, [pc, #320]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517a:	d105      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800517c:	4b4b      	ldr	r3, [pc, #300]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4a4a      	ldr	r2, [pc, #296]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005186:	60d3      	str	r3, [r2, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005190:	2b00      	cmp	r3, #0
 8005192:	d015      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8005194:	4b45      	ldr	r3, [pc, #276]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	4942      	ldr	r1, [pc, #264]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b2:	d105      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 80051b4:	4b3d      	ldr	r3, [pc, #244]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4a3c      	ldr	r2, [pc, #240]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051be:	60d3      	str	r3, [r2, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d015      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80051cc:	4b37      	ldr	r3, [pc, #220]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	4934      	ldr	r1, [pc, #208]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051ea:	d105      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80051ec:	4b2f      	ldr	r3, [pc, #188]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4a2e      	ldr	r2, [pc, #184]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051f6:	60d3      	str	r3, [r2, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d015      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005204:	4b29      	ldr	r3, [pc, #164]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005212:	4926      	ldr	r1, [pc, #152]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005222:	d105      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005224:	4b21      	ldr	r3, [pc, #132]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a20      	ldr	r2, [pc, #128]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800522a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800522e:	60d3      	str	r3, [r2, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d015      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800523c:	4b1b      	ldr	r3, [pc, #108]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	4918      	ldr	r1, [pc, #96]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800525a:	d105      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800525c:	4b13      	ldr	r3, [pc, #76]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4a12      	ldr	r2, [pc, #72]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005266:	60d3      	str	r3, [r2, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d015      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005274:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	490a      	ldr	r1, [pc, #40]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005292:	d105      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4a04      	ldr	r2, [pc, #16]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800529a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800529e:	60d3      	str	r3, [r2, #12]
 80052a0:	7cbb      	ldrb	r3, [r7, #18]
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000

080052b0 <HAL_SPI_Init>:
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_SPI_Init+0x12>
 80052be:	2301      	movs	r3, #1
 80052c0:	e09d      	b.n	80053fe <HAL_SPI_Init+0x14e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d108      	bne.n	80052dc <HAL_SPI_Init+0x2c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d2:	d009      	beq.n	80052e8 <HAL_SPI_Init+0x38>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	61da      	str	r2, [r3, #28]
 80052da:	e005      	b.n	80052e8 <HAL_SPI_Init+0x38>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	611a      	str	r2, [r3, #16]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	615a      	str	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	629a      	str	r2, [r3, #40]	; 0x28
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_SPI_Init+0x58>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fd feae 	bl	8003064 <HAL_SPI_MspInit>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005328:	d902      	bls.n	8005330 <HAL_SPI_Init+0x80>
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e002      	b.n	8005336 <HAL_SPI_Init+0x86>
 8005330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800533e:	d007      	beq.n	8005350 <HAL_SPI_Init+0xa0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005348:	d002      	beq.n	8005350 <HAL_SPI_Init+0xa0>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	629a      	str	r2, [r3, #40]	; 0x28
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005392:	ea42 0103 	orr.w	r1, r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	0c1b      	lsrs	r3, r3, #16
 80053ac:	f003 0204 	and.w	r2, r3, #4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053cc:	ea42 0103 	orr.w	r1, r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69da      	ldr	r2, [r3, #28]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ec:	61da      	str	r2, [r3, #28]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	661a      	str	r2, [r3, #96]	; 0x60
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80053fc:	2300      	movs	r3, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_SPI_Transmit>:
 8005406:	b580      	push	{r7, lr}
 8005408:	b088      	sub	sp, #32
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
 8005416:	2300      	movs	r3, #0
 8005418:	77fb      	strb	r3, [r7, #31]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_SPI_Transmit+0x22>
 8005424:	2302      	movs	r3, #2
 8005426:	e158      	b.n	80056da <HAL_SPI_Transmit+0x2d4>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005430:	f7fe f888 	bl	8003544 <HAL_GetTick>
 8005434:	61b8      	str	r0, [r7, #24]
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	82fb      	strh	r3, [r7, #22]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b01      	cmp	r3, #1
 8005444:	d002      	beq.n	800544c <HAL_SPI_Transmit+0x46>
 8005446:	2302      	movs	r3, #2
 8005448:	77fb      	strb	r3, [r7, #31]
 800544a:	e13d      	b.n	80056c8 <HAL_SPI_Transmit+0x2c2>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_SPI_Transmit+0x52>
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <HAL_SPI_Transmit+0x58>
 8005458:	2301      	movs	r3, #1
 800545a:	77fb      	strb	r3, [r7, #31]
 800545c:	e134      	b.n	80056c8 <HAL_SPI_Transmit+0x2c2>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2203      	movs	r2, #3
 8005462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	661a      	str	r2, [r3, #96]	; 0x60
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	639a      	str	r2, [r3, #56]	; 0x38
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	88fa      	ldrh	r2, [r7, #6]
 8005476:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	88fa      	ldrh	r2, [r7, #6]
 800547c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	641a      	str	r2, [r3, #64]	; 0x40
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	651a      	str	r2, [r3, #80]	; 0x50
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	64da      	str	r2, [r3, #76]	; 0x4c
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a8:	d10f      	bne.n	80054ca <HAL_SPI_Transmit+0xc4>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d007      	beq.n	80054e8 <HAL_SPI_Transmit+0xe2>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054f0:	d94b      	bls.n	800558a <HAL_SPI_Transmit+0x184>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_SPI_Transmit+0xfa>
 80054fa:	8afb      	ldrh	r3, [r7, #22]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d13e      	bne.n	800557e <HAL_SPI_Transmit+0x178>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	881a      	ldrh	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60da      	str	r2, [r3, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	1c9a      	adds	r2, r3, #2
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005524:	e02b      	b.n	800557e <HAL_SPI_Transmit+0x178>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b02      	cmp	r3, #2
 8005532:	d112      	bne.n	800555a <HAL_SPI_Transmit+0x154>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	881a      	ldrh	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60da      	str	r2, [r3, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	1c9a      	adds	r2, r3, #2
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	639a      	str	r2, [r3, #56]	; 0x38
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005558:	e011      	b.n	800557e <HAL_SPI_Transmit+0x178>
 800555a:	f7fd fff3 	bl	8003544 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d803      	bhi.n	8005572 <HAL_SPI_Transmit+0x16c>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d102      	bne.n	8005578 <HAL_SPI_Transmit+0x172>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d102      	bne.n	800557e <HAL_SPI_Transmit+0x178>
 8005578:	2303      	movs	r3, #3
 800557a:	77fb      	strb	r3, [r7, #31]
 800557c:	e0a4      	b.n	80056c8 <HAL_SPI_Transmit+0x2c2>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1ce      	bne.n	8005526 <HAL_SPI_Transmit+0x120>
 8005588:	e07c      	b.n	8005684 <HAL_SPI_Transmit+0x27e>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_SPI_Transmit+0x192>
 8005592:	8afb      	ldrh	r3, [r7, #22]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d170      	bne.n	800567a <HAL_SPI_Transmit+0x274>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d912      	bls.n	80055c8 <HAL_SPI_Transmit+0x1c2>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60da      	str	r2, [r3, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	1c9a      	adds	r2, r3, #2
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	639a      	str	r2, [r3, #56]	; 0x38
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	3b02      	subs	r3, #2
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055c6:	e058      	b.n	800567a <HAL_SPI_Transmit+0x274>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	7812      	ldrb	r2, [r2, #0]
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055ee:	e044      	b.n	800567a <HAL_SPI_Transmit+0x274>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d12b      	bne.n	8005656 <HAL_SPI_Transmit+0x250>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d912      	bls.n	800562e <HAL_SPI_Transmit+0x228>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	881a      	ldrh	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60da      	str	r2, [r3, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	1c9a      	adds	r2, r3, #2
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	639a      	str	r2, [r3, #56]	; 0x38
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b02      	subs	r3, #2
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800562c:	e025      	b.n	800567a <HAL_SPI_Transmit+0x274>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	7812      	ldrb	r2, [r2, #0]
 800563a:	701a      	strb	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005654:	e011      	b.n	800567a <HAL_SPI_Transmit+0x274>
 8005656:	f7fd ff75 	bl	8003544 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d803      	bhi.n	800566e <HAL_SPI_Transmit+0x268>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d102      	bne.n	8005674 <HAL_SPI_Transmit+0x26e>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <HAL_SPI_Transmit+0x274>
 8005674:	2303      	movs	r3, #3
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e026      	b.n	80056c8 <HAL_SPI_Transmit+0x2c2>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1b5      	bne.n	80055f0 <HAL_SPI_Transmit+0x1ea>
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	6839      	ldr	r1, [r7, #0]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fce3 	bl	8006054 <SPI_EndRxTxTransaction>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_SPI_Transmit+0x294>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	661a      	str	r2, [r3, #96]	; 0x60
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <HAL_SPI_Transmit+0x2b2>
 80056a2:	2300      	movs	r3, #0
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_SPI_Transmit+0x2c0>
 80056c0:	2301      	movs	r3, #1
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e000      	b.n	80056c8 <HAL_SPI_Transmit+0x2c2>
 80056c6:	bf00      	nop
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80056d8:	7ffb      	ldrb	r3, [r7, #31]
 80056da:	4618      	mov	r0, r3
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_SPI_Receive>:
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b088      	sub	sp, #32
 80056e6:	af02      	add	r7, sp, #8
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056fe:	d112      	bne.n	8005726 <HAL_SPI_Receive+0x44>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10e      	bne.n	8005726 <HAL_SPI_Receive+0x44>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2204      	movs	r2, #4
 800570c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005710:	88fa      	ldrh	r2, [r7, #6]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4613      	mov	r3, r2
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f910 	bl	8005942 <HAL_SPI_TransmitReceive>
 8005722:	4603      	mov	r3, r0
 8005724:	e109      	b.n	800593a <HAL_SPI_Receive+0x258>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_SPI_Receive+0x52>
 8005730:	2302      	movs	r3, #2
 8005732:	e102      	b.n	800593a <HAL_SPI_Receive+0x258>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800573c:	f7fd ff02 	bl	8003544 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b01      	cmp	r3, #1
 800574c:	d002      	beq.n	8005754 <HAL_SPI_Receive+0x72>
 800574e:	2302      	movs	r3, #2
 8005750:	75fb      	strb	r3, [r7, #23]
 8005752:	e0e9      	b.n	8005928 <HAL_SPI_Receive+0x246>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_SPI_Receive+0x7e>
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <HAL_SPI_Receive+0x84>
 8005760:	2301      	movs	r3, #1
 8005762:	75fb      	strb	r3, [r7, #23]
 8005764:	e0e0      	b.n	8005928 <HAL_SPI_Receive+0x246>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2204      	movs	r2, #4
 800576a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	661a      	str	r2, [r3, #96]	; 0x60
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	88fa      	ldrh	r2, [r7, #6]
 800577e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	639a      	str	r2, [r3, #56]	; 0x38
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	651a      	str	r2, [r3, #80]	; 0x50
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057b0:	d908      	bls.n	80057c4 <HAL_SPI_Receive+0xe2>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	e007      	b.n	80057d4 <HAL_SPI_Receive+0xf2>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057d2:	605a      	str	r2, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057dc:	d10f      	bne.n	80057fe <HAL_SPI_Receive+0x11c>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d007      	beq.n	800581c <HAL_SPI_Receive+0x13a>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005824:	d867      	bhi.n	80058f6 <HAL_SPI_Receive+0x214>
 8005826:	e030      	b.n	800588a <HAL_SPI_Receive+0x1a8>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d117      	bne.n	8005866 <HAL_SPI_Receive+0x184>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f103 020c 	add.w	r2, r3, #12
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	7812      	ldrb	r2, [r2, #0]
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005864:	e011      	b.n	800588a <HAL_SPI_Receive+0x1a8>
 8005866:	f7fd fe6d 	bl	8003544 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d803      	bhi.n	800587e <HAL_SPI_Receive+0x19c>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d102      	bne.n	8005884 <HAL_SPI_Receive+0x1a2>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <HAL_SPI_Receive+0x1a8>
 8005884:	2303      	movs	r3, #3
 8005886:	75fb      	strb	r3, [r7, #23]
 8005888:	e04e      	b.n	8005928 <HAL_SPI_Receive+0x246>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1c8      	bne.n	8005828 <HAL_SPI_Receive+0x146>
 8005896:	e034      	b.n	8005902 <HAL_SPI_Receive+0x220>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d115      	bne.n	80058d2 <HAL_SPI_Receive+0x1f0>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	b292      	uxth	r2, r2
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	1c9a      	adds	r2, r3, #2
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058d0:	e011      	b.n	80058f6 <HAL_SPI_Receive+0x214>
 80058d2:	f7fd fe37 	bl	8003544 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d803      	bhi.n	80058ea <HAL_SPI_Receive+0x208>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d102      	bne.n	80058f0 <HAL_SPI_Receive+0x20e>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <HAL_SPI_Receive+0x214>
 80058f0:	2303      	movs	r3, #3
 80058f2:	75fb      	strb	r3, [r7, #23]
 80058f4:	e018      	b.n	8005928 <HAL_SPI_Receive+0x246>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1ca      	bne.n	8005898 <HAL_SPI_Receive+0x1b6>
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 fb4c 	bl	8005fa4 <SPI_EndRxTransaction>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_SPI_Receive+0x236>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	661a      	str	r2, [r3, #96]	; 0x60
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_SPI_Receive+0x244>
 8005920:	2301      	movs	r3, #1
 8005922:	75fb      	strb	r3, [r7, #23]
 8005924:	e000      	b.n	8005928 <HAL_SPI_Receive+0x246>
 8005926:	bf00      	nop
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005938:	7dfb      	ldrb	r3, [r7, #23]
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_SPI_TransmitReceive>:
 8005942:	b580      	push	{r7, lr}
 8005944:	b08a      	sub	sp, #40	; 0x28
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
 800594e:	807b      	strh	r3, [r7, #2]
 8005950:	2301      	movs	r3, #1
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
 8005954:	2300      	movs	r3, #0
 8005956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_SPI_TransmitReceive+0x26>
 8005964:	2302      	movs	r3, #2
 8005966:	e1fb      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x41e>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005970:	f7fd fde8 	bl	8003544 <HAL_GetTick>
 8005974:	61f8      	str	r0, [r7, #28]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800597c:	76fb      	strb	r3, [r7, #27]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	887b      	ldrh	r3, [r7, #2]
 8005986:	827b      	strh	r3, [r7, #18]
 8005988:	887b      	ldrh	r3, [r7, #2]
 800598a:	823b      	strh	r3, [r7, #16]
 800598c:	7efb      	ldrb	r3, [r7, #27]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d00e      	beq.n	80059b0 <HAL_SPI_TransmitReceive+0x6e>
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005998:	d106      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x66>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x66>
 80059a2:	7efb      	ldrb	r3, [r7, #27]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d003      	beq.n	80059b0 <HAL_SPI_TransmitReceive+0x6e>
 80059a8:	2302      	movs	r3, #2
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ae:	e1cd      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x40a>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <HAL_SPI_TransmitReceive+0x80>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_SPI_TransmitReceive+0x80>
 80059bc:	887b      	ldrh	r3, [r7, #2]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x88>
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c8:	e1c0      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x40a>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d003      	beq.n	80059de <HAL_SPI_TransmitReceive+0x9c>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2205      	movs	r2, #5
 80059da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	661a      	str	r2, [r3, #96]	; 0x60
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	887a      	ldrh	r2, [r7, #2]
 80059ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	887a      	ldrh	r2, [r7, #2]
 80059f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	887a      	ldrh	r2, [r7, #2]
 8005a04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	887a      	ldrh	r2, [r7, #2]
 8005a0a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	64da      	str	r2, [r3, #76]	; 0x4c
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	651a      	str	r2, [r3, #80]	; 0x50
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a20:	d802      	bhi.n	8005a28 <HAL_SPI_TransmitReceive+0xe6>
 8005a22:	8a3b      	ldrh	r3, [r7, #16]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d908      	bls.n	8005a3a <HAL_SPI_TransmitReceive+0xf8>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a36:	605a      	str	r2, [r3, #4]
 8005a38:	e007      	b.n	8005a4a <HAL_SPI_TransmitReceive+0x108>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a48:	605a      	str	r2, [r3, #4]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	d007      	beq.n	8005a68 <HAL_SPI_TransmitReceive+0x126>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a70:	d97c      	bls.n	8005b6c <HAL_SPI_TransmitReceive+0x22a>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_SPI_TransmitReceive+0x13e>
 8005a7a:	8a7b      	ldrh	r3, [r7, #18]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d169      	bne.n	8005b54 <HAL_SPI_TransmitReceive+0x212>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	881a      	ldrh	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60da      	str	r2, [r3, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	1c9a      	adds	r2, r3, #2
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005aa4:	e056      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x212>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d11b      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x1aa>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d016      	beq.n	8005aec <HAL_SPI_TransmitReceive+0x1aa>
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d113      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x1aa>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	881a      	ldrh	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60da      	str	r2, [r3, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	1c9a      	adds	r2, r3, #2
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ae8:	2300      	movs	r3, #0
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d11c      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x1f2>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <HAL_SPI_TransmitReceive+0x1f2>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	b292      	uxth	r2, r2
 8005b12:	801a      	strh	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	1c9a      	adds	r2, r3, #2
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005b30:	2301      	movs	r3, #1
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
 8005b34:	f7fd fd06 	bl	8003544 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d807      	bhi.n	8005b54 <HAL_SPI_TransmitReceive+0x212>
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d003      	beq.n	8005b54 <HAL_SPI_TransmitReceive+0x212>
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b52:	e0fb      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x40a>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1a3      	bne.n	8005aa6 <HAL_SPI_TransmitReceive+0x164>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d19d      	bne.n	8005aa6 <HAL_SPI_TransmitReceive+0x164>
 8005b6a:	e0df      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x3ea>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_SPI_TransmitReceive+0x23a>
 8005b74:	8a7b      	ldrh	r3, [r7, #18]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	f040 80cb 	bne.w	8005d12 <HAL_SPI_TransmitReceive+0x3d0>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d912      	bls.n	8005bac <HAL_SPI_TransmitReceive+0x26a>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	881a      	ldrh	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60da      	str	r2, [r3, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	1c9a      	adds	r2, r3, #2
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b02      	subs	r3, #2
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005baa:	e0b2      	b.n	8005d12 <HAL_SPI_TransmitReceive+0x3d0>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	330c      	adds	r3, #12
 8005bb6:	7812      	ldrb	r2, [r2, #0]
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bd2:	e09e      	b.n	8005d12 <HAL_SPI_TransmitReceive+0x3d0>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d134      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x30a>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d02f      	beq.n	8005c4c <HAL_SPI_TransmitReceive+0x30a>
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d12c      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x30a>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d912      	bls.n	8005c22 <HAL_SPI_TransmitReceive+0x2e0>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	881a      	ldrh	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60da      	str	r2, [r3, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	1c9a      	adds	r2, r3, #2
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b02      	subs	r3, #2
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c20:	e012      	b.n	8005c48 <HAL_SPI_TransmitReceive+0x306>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c48:	2300      	movs	r3, #0
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d148      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x3aa>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d042      	beq.n	8005cec <HAL_SPI_TransmitReceive+0x3aa>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d923      	bls.n	8005cba <HAL_SPI_TransmitReceive+0x378>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	b292      	uxth	r2, r2
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	1c9a      	adds	r2, r3, #2
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	641a      	str	r2, [r3, #64]	; 0x40
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b02      	subs	r3, #2
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d81f      	bhi.n	8005ce8 <HAL_SPI_TransmitReceive+0x3a6>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cb6:	605a      	str	r2, [r3, #4]
 8005cb8:	e016      	b.n	8005ce8 <HAL_SPI_TransmitReceive+0x3a6>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f103 020c 	add.w	r2, r3, #12
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	7812      	ldrb	r2, [r2, #0]
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ce8:	2301      	movs	r3, #1
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
 8005cec:	f7fd fc2a 	bl	8003544 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d803      	bhi.n	8005d04 <HAL_SPI_TransmitReceive+0x3c2>
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d102      	bne.n	8005d0a <HAL_SPI_TransmitReceive+0x3c8>
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <HAL_SPI_TransmitReceive+0x3d0>
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d10:	e01c      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x40a>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f47f af5b 	bne.w	8005bd4 <HAL_SPI_TransmitReceive+0x292>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f47f af54 	bne.w	8005bd4 <HAL_SPI_TransmitReceive+0x292>
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f98f 	bl	8006054 <SPI_EndRxTxTransaction>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d006      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x408>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	661a      	str	r2, [r3, #96]	; 0x60
 8005d48:	e000      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x40a>
 8005d4a:	bf00      	nop
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d60:	4618      	mov	r0, r3
 8005d62:	3728      	adds	r7, #40	; 0x28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <SPI_WaitFlagStateUntilTimeout>:
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	4613      	mov	r3, r2
 8005d76:	71fb      	strb	r3, [r7, #7]
 8005d78:	f7fd fbe4 	bl	8003544 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	4413      	add	r3, r2
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	f7fd fbdc 	bl	8003544 <HAL_GetTick>
 8005d8c:	61b8      	str	r0, [r7, #24]
 8005d8e:	4b39      	ldr	r3, [pc, #228]	; (8005e74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	015b      	lsls	r3, r3, #5
 8005d94:	0d1b      	lsrs	r3, r3, #20
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	fb02 f303 	mul.w	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	e054      	b.n	8005e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	d050      	beq.n	8005e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005da8:	f7fd fbcc 	bl	8003544 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d902      	bls.n	8005dbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d13d      	bne.n	8005e3a <SPI_WaitFlagStateUntilTimeout+0xd2>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd6:	d111      	bne.n	8005dfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de0:	d004      	beq.n	8005dec <SPI_WaitFlagStateUntilTimeout+0x84>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dea:	d107      	bne.n	8005dfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e04:	d10f      	bne.n	8005e26 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005e36:	2303      	movs	r3, #3
 8005e38:	e017      	b.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0x102>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8005e40:	2300      	movs	r3, #0
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4013      	ands	r3, r2
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	bf0c      	ite	eq
 8005e5a:	2301      	moveq	r3, #1
 8005e5c:	2300      	movne	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d19b      	bne.n	8005da0 <SPI_WaitFlagStateUntilTimeout+0x38>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3720      	adds	r7, #32
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000038 	.word	0x20000038

08005e78 <SPI_WaitFifoStateUntilTimeout>:
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]
 8005e8a:	f7fd fb5b 	bl	8003544 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	1a9b      	subs	r3, r3, r2
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	4413      	add	r3, r2
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9a:	f7fd fb53 	bl	8003544 <HAL_GetTick>
 8005e9e:	6238      	str	r0, [r7, #32]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	330c      	adds	r3, #12
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	4b3d      	ldr	r3, [pc, #244]	; (8005fa0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	00da      	lsls	r2, r3, #3
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	0d1b      	lsrs	r3, r3, #20
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eba:	fb02 f303 	mul.w	r3, r2, r3
 8005ebe:	61bb      	str	r3, [r7, #24]
 8005ec0:	e060      	b.n	8005f84 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ec8:	d107      	bne.n	8005eda <SPI_WaitFifoStateUntilTimeout+0x62>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	75fb      	strb	r3, [r7, #23]
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d050      	beq.n	8005f84 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8005ee2:	f7fd fb2f 	bl	8003544 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d902      	bls.n	8005ef8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d13d      	bne.n	8005f74 <SPI_WaitFifoStateUntilTimeout+0xfc>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f06:	605a      	str	r2, [r3, #4]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f10:	d111      	bne.n	8005f36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f1a:	d004      	beq.n	8005f26 <SPI_WaitFifoStateUntilTimeout+0xae>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f24:	d107      	bne.n	8005f36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f3e:	d10f      	bne.n	8005f60 <SPI_WaitFifoStateUntilTimeout+0xe8>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005f70:	2303      	movs	r3, #3
 8005f72:	e010      	b.n	8005f96 <SPI_WaitFifoStateUntilTimeout+0x11e>
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <SPI_WaitFifoStateUntilTimeout+0x106>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	61bb      	str	r3, [r7, #24]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d196      	bne.n	8005ec2 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8005f94:	2300      	movs	r3, #0
 8005f96:	4618      	mov	r0, r3
 8005f98:	3728      	adds	r7, #40	; 0x28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000038 	.word	0x20000038

08005fa4 <SPI_EndRxTransaction>:
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb8:	d111      	bne.n	8005fde <SPI_EndRxTransaction+0x3a>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc2:	d004      	beq.n	8005fce <SPI_EndRxTransaction+0x2a>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fcc:	d107      	bne.n	8005fde <SPI_EndRxTransaction+0x3a>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2180      	movs	r1, #128	; 0x80
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f7ff febd 	bl	8005d68 <SPI_WaitFlagStateUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d007      	beq.n	8006004 <SPI_EndRxTransaction+0x60>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff8:	f043 0220 	orr.w	r2, r3, #32
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	661a      	str	r2, [r3, #96]	; 0x60
 8006000:	2303      	movs	r3, #3
 8006002:	e023      	b.n	800604c <SPI_EndRxTransaction+0xa8>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800600c:	d11d      	bne.n	800604a <SPI_EndRxTransaction+0xa6>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006016:	d004      	beq.n	8006022 <SPI_EndRxTransaction+0x7e>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006020:	d113      	bne.n	800604a <SPI_EndRxTransaction+0xa6>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2200      	movs	r2, #0
 800602a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f7ff ff22 	bl	8005e78 <SPI_WaitFifoStateUntilTimeout>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <SPI_EndRxTransaction+0xa6>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800603e:	f043 0220 	orr.w	r2, r3, #32
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	661a      	str	r2, [r3, #96]	; 0x60
 8006046:	2303      	movs	r3, #3
 8006048:	e000      	b.n	800604c <SPI_EndRxTransaction+0xa8>
 800604a:	2300      	movs	r3, #0
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <SPI_EndRxTxTransaction>:
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2200      	movs	r2, #0
 8006068:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff ff03 	bl	8005e78 <SPI_WaitFifoStateUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <SPI_EndRxTxTransaction+0x34>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607c:	f043 0220 	orr.w	r2, r3, #32
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	661a      	str	r2, [r3, #96]	; 0x60
 8006084:	2303      	movs	r3, #3
 8006086:	e027      	b.n	80060d8 <SPI_EndRxTxTransaction+0x84>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2200      	movs	r2, #0
 8006090:	2180      	movs	r1, #128	; 0x80
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7ff fe68 	bl	8005d68 <SPI_WaitFlagStateUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <SPI_EndRxTxTransaction+0x5a>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a2:	f043 0220 	orr.w	r2, r3, #32
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	661a      	str	r2, [r3, #96]	; 0x60
 80060aa:	2303      	movs	r3, #3
 80060ac:	e014      	b.n	80060d8 <SPI_EndRxTxTransaction+0x84>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f7ff fedc 	bl	8005e78 <SPI_WaitFifoStateUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <SPI_EndRxTxTransaction+0x82>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ca:	f043 0220 	orr.w	r2, r3, #32
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	661a      	str	r2, [r3, #96]	; 0x60
 80060d2:	2303      	movs	r3, #3
 80060d4:	e000      	b.n	80060d8 <SPI_EndRxTxTransaction+0x84>
 80060d6:	2300      	movs	r3, #0
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_Base_Init>:
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_TIM_Base_Init+0x12>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e049      	b.n	8006186 <HAL_TIM_Base_Init+0xa6>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_TIM_Base_Init+0x2c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fc ffee 	bl	80030e8 <HAL_TIM_Base_MspInit>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3304      	adds	r3, #4
 800611c:	4619      	mov	r1, r3
 800611e:	4610      	mov	r0, r2
 8006120:	f000 faa4 	bl	800666c <TIM_Base_SetConfig>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006184:	2300      	movs	r3, #0
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_TIM_PWM_Init>:
 800618e:	b580      	push	{r7, lr}
 8006190:	b082      	sub	sp, #8
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <HAL_TIM_PWM_Init+0x12>
 800619c:	2301      	movs	r3, #1
 800619e:	e049      	b.n	8006234 <HAL_TIM_PWM_Init+0xa6>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <HAL_TIM_PWM_Init+0x2c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f841 	bl	800623c <HAL_TIM_PWM_MspInit>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2202      	movs	r2, #2
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4619      	mov	r1, r3
 80061cc:	4610      	mov	r0, r2
 80061ce:	f000 fa4d 	bl	800666c <TIM_Base_SetConfig>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006232:	2300      	movs	r3, #0
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_TIM_PWM_MspInit>:
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_TIM_PWM_ConfigChannel>:
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	2300      	movs	r3, #0
 800625e:	75fb      	strb	r3, [r7, #23]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006266:	2b01      	cmp	r3, #1
 8006268:	d101      	bne.n	800626e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800626a:	2302      	movs	r3, #2
 800626c:	e0ff      	b.n	800646e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b14      	cmp	r3, #20
 800627a:	f200 80f0 	bhi.w	800645e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800627e:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	080062d9 	.word	0x080062d9
 8006288:	0800645f 	.word	0x0800645f
 800628c:	0800645f 	.word	0x0800645f
 8006290:	0800645f 	.word	0x0800645f
 8006294:	08006319 	.word	0x08006319
 8006298:	0800645f 	.word	0x0800645f
 800629c:	0800645f 	.word	0x0800645f
 80062a0:	0800645f 	.word	0x0800645f
 80062a4:	0800635b 	.word	0x0800635b
 80062a8:	0800645f 	.word	0x0800645f
 80062ac:	0800645f 	.word	0x0800645f
 80062b0:	0800645f 	.word	0x0800645f
 80062b4:	0800639b 	.word	0x0800639b
 80062b8:	0800645f 	.word	0x0800645f
 80062bc:	0800645f 	.word	0x0800645f
 80062c0:	0800645f 	.word	0x0800645f
 80062c4:	080063dd 	.word	0x080063dd
 80062c8:	0800645f 	.word	0x0800645f
 80062cc:	0800645f 	.word	0x0800645f
 80062d0:	0800645f 	.word	0x0800645f
 80062d4:	0800641d 	.word	0x0800641d
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fa54 	bl	800678c <TIM_OC1_SetConfig>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699a      	ldr	r2, [r3, #24]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0208 	orr.w	r2, r2, #8
 80062f2:	619a      	str	r2, [r3, #24]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0204 	bic.w	r2, r2, #4
 8006302:	619a      	str	r2, [r3, #24]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6999      	ldr	r1, [r3, #24]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	691a      	ldr	r2, [r3, #16]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	619a      	str	r2, [r3, #24]
 8006316:	e0a5      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x214>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fac4 	bl	80068ac <TIM_OC2_SetConfig>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006332:	619a      	str	r2, [r3, #24]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006342:	619a      	str	r2, [r3, #24]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6999      	ldr	r1, [r3, #24]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	021a      	lsls	r2, r3, #8
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	619a      	str	r2, [r3, #24]
 8006358:	e084      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x214>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fb2d 	bl	80069c0 <TIM_OC3_SetConfig>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0208 	orr.w	r2, r2, #8
 8006374:	61da      	str	r2, [r3, #28]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69da      	ldr	r2, [r3, #28]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0204 	bic.w	r2, r2, #4
 8006384:	61da      	str	r2, [r3, #28]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69d9      	ldr	r1, [r3, #28]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	61da      	str	r2, [r3, #28]
 8006398:	e064      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x214>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fb95 	bl	8006ad0 <TIM_OC4_SetConfig>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69da      	ldr	r2, [r3, #28]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063b4:	61da      	str	r2, [r3, #28]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69da      	ldr	r2, [r3, #28]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063c4:	61da      	str	r2, [r3, #28]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69d9      	ldr	r1, [r3, #28]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	021a      	lsls	r2, r3, #8
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	61da      	str	r2, [r3, #28]
 80063da:	e043      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x214>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fbfe 	bl	8006be4 <TIM_OC5_SetConfig>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0208 	orr.w	r2, r2, #8
 80063f6:	651a      	str	r2, [r3, #80]	; 0x50
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0204 	bic.w	r2, r2, #4
 8006406:	651a      	str	r2, [r3, #80]	; 0x50
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	651a      	str	r2, [r3, #80]	; 0x50
 800641a:	e023      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x214>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fc42 	bl	8006cac <TIM_OC6_SetConfig>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006436:	651a      	str	r2, [r3, #80]	; 0x50
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006446:	651a      	str	r2, [r3, #80]	; 0x50
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	021a      	lsls	r2, r3, #8
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	651a      	str	r2, [r3, #80]	; 0x50
 800645c:	e002      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x214>
 800645e:	2301      	movs	r3, #1
 8006460:	75fb      	strb	r3, [r7, #23]
 8006462:	bf00      	nop
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop

08006478 <HAL_TIM_ConfigClockSource>:
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_TIM_ConfigClockSource+0x1c>
 8006490:	2302      	movs	r3, #2
 8006492:	e0de      	b.n	8006652 <HAL_TIM_ConfigClockSource+0x1da>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	60bb      	str	r3, [r7, #8]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80064b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064b6:	60bb      	str	r3, [r7, #8]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064be:	60bb      	str	r3, [r7, #8]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	609a      	str	r2, [r3, #8]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a63      	ldr	r2, [pc, #396]	; (800665c <HAL_TIM_ConfigClockSource+0x1e4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	f000 80a9 	beq.w	8006626 <HAL_TIM_ConfigClockSource+0x1ae>
 80064d4:	4a61      	ldr	r2, [pc, #388]	; (800665c <HAL_TIM_ConfigClockSource+0x1e4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	f200 80ae 	bhi.w	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 80064dc:	4a60      	ldr	r2, [pc, #384]	; (8006660 <HAL_TIM_ConfigClockSource+0x1e8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	f000 80a1 	beq.w	8006626 <HAL_TIM_ConfigClockSource+0x1ae>
 80064e4:	4a5e      	ldr	r2, [pc, #376]	; (8006660 <HAL_TIM_ConfigClockSource+0x1e8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	f200 80a6 	bhi.w	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 80064ec:	4a5d      	ldr	r2, [pc, #372]	; (8006664 <HAL_TIM_ConfigClockSource+0x1ec>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	f000 8099 	beq.w	8006626 <HAL_TIM_ConfigClockSource+0x1ae>
 80064f4:	4a5b      	ldr	r2, [pc, #364]	; (8006664 <HAL_TIM_ConfigClockSource+0x1ec>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	f200 809e 	bhi.w	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 80064fc:	4a5a      	ldr	r2, [pc, #360]	; (8006668 <HAL_TIM_ConfigClockSource+0x1f0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	f000 8091 	beq.w	8006626 <HAL_TIM_ConfigClockSource+0x1ae>
 8006504:	4a58      	ldr	r2, [pc, #352]	; (8006668 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	f200 8096 	bhi.w	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 800650c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006510:	f000 8089 	beq.w	8006626 <HAL_TIM_ConfigClockSource+0x1ae>
 8006514:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006518:	f200 808e 	bhi.w	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 800651c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006520:	d03e      	beq.n	80065a0 <HAL_TIM_ConfigClockSource+0x128>
 8006522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006526:	f200 8087 	bhi.w	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 800652a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652e:	f000 8086 	beq.w	800663e <HAL_TIM_ConfigClockSource+0x1c6>
 8006532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006536:	d87f      	bhi.n	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 8006538:	2b70      	cmp	r3, #112	; 0x70
 800653a:	d01a      	beq.n	8006572 <HAL_TIM_ConfigClockSource+0xfa>
 800653c:	2b70      	cmp	r3, #112	; 0x70
 800653e:	d87b      	bhi.n	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 8006540:	2b60      	cmp	r3, #96	; 0x60
 8006542:	d050      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0x16e>
 8006544:	2b60      	cmp	r3, #96	; 0x60
 8006546:	d877      	bhi.n	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 8006548:	2b50      	cmp	r3, #80	; 0x50
 800654a:	d03c      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x14e>
 800654c:	2b50      	cmp	r3, #80	; 0x50
 800654e:	d873      	bhi.n	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 8006550:	2b40      	cmp	r3, #64	; 0x40
 8006552:	d058      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0x18e>
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d86f      	bhi.n	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 8006558:	2b30      	cmp	r3, #48	; 0x30
 800655a:	d064      	beq.n	8006626 <HAL_TIM_ConfigClockSource+0x1ae>
 800655c:	2b30      	cmp	r3, #48	; 0x30
 800655e:	d86b      	bhi.n	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 8006560:	2b20      	cmp	r3, #32
 8006562:	d060      	beq.n	8006626 <HAL_TIM_ConfigClockSource+0x1ae>
 8006564:	2b20      	cmp	r3, #32
 8006566:	d867      	bhi.n	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 8006568:	2b00      	cmp	r3, #0
 800656a:	d05c      	beq.n	8006626 <HAL_TIM_ConfigClockSource+0x1ae>
 800656c:	2b10      	cmp	r3, #16
 800656e:	d05a      	beq.n	8006626 <HAL_TIM_ConfigClockSource+0x1ae>
 8006570:	e062      	b.n	8006638 <HAL_TIM_ConfigClockSource+0x1c0>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	6899      	ldr	r1, [r3, #8]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f000 fc75 	bl	8006e70 <TIM_ETR_SetConfig>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	60bb      	str	r3, [r7, #8]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	609a      	str	r2, [r3, #8]
 800659e:	e04f      	b.n	8006640 <HAL_TIM_ConfigClockSource+0x1c8>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	6899      	ldr	r1, [r3, #8]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f000 fc5e 	bl	8006e70 <TIM_ETR_SetConfig>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065c2:	609a      	str	r2, [r3, #8]
 80065c4:	e03c      	b.n	8006640 <HAL_TIM_ConfigClockSource+0x1c8>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	6859      	ldr	r1, [r3, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	461a      	mov	r2, r3
 80065d4:	f000 fbd0 	bl	8006d78 <TIM_TI1_ConfigInputStage>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2150      	movs	r1, #80	; 0x50
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fc29 	bl	8006e36 <TIM_ITRx_SetConfig>
 80065e4:	e02c      	b.n	8006640 <HAL_TIM_ConfigClockSource+0x1c8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6859      	ldr	r1, [r3, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	461a      	mov	r2, r3
 80065f4:	f000 fbef 	bl	8006dd6 <TIM_TI2_ConfigInputStage>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2160      	movs	r1, #96	; 0x60
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fc19 	bl	8006e36 <TIM_ITRx_SetConfig>
 8006604:	e01c      	b.n	8006640 <HAL_TIM_ConfigClockSource+0x1c8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6859      	ldr	r1, [r3, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	461a      	mov	r2, r3
 8006614:	f000 fbb0 	bl	8006d78 <TIM_TI1_ConfigInputStage>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2140      	movs	r1, #64	; 0x40
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fc09 	bl	8006e36 <TIM_ITRx_SetConfig>
 8006624:	e00c      	b.n	8006640 <HAL_TIM_ConfigClockSource+0x1c8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4619      	mov	r1, r3
 8006630:	4610      	mov	r0, r2
 8006632:	f000 fc00 	bl	8006e36 <TIM_ITRx_SetConfig>
 8006636:	e003      	b.n	8006640 <HAL_TIM_ConfigClockSource+0x1c8>
 8006638:	2301      	movs	r3, #1
 800663a:	73fb      	strb	r3, [r7, #15]
 800663c:	e000      	b.n	8006640 <HAL_TIM_ConfigClockSource+0x1c8>
 800663e:	bf00      	nop
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	00100070 	.word	0x00100070
 8006660:	00100040 	.word	0x00100040
 8006664:	00100030 	.word	0x00100030
 8006668:	00100020 	.word	0x00100020

0800666c <TIM_Base_SetConfig>:
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a3c      	ldr	r2, [pc, #240]	; (8006770 <TIM_Base_SetConfig+0x104>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00f      	beq.n	80066a4 <TIM_Base_SetConfig+0x38>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668a:	d00b      	beq.n	80066a4 <TIM_Base_SetConfig+0x38>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a39      	ldr	r2, [pc, #228]	; (8006774 <TIM_Base_SetConfig+0x108>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d007      	beq.n	80066a4 <TIM_Base_SetConfig+0x38>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a38      	ldr	r2, [pc, #224]	; (8006778 <TIM_Base_SetConfig+0x10c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_Base_SetConfig+0x38>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a37      	ldr	r2, [pc, #220]	; (800677c <TIM_Base_SetConfig+0x110>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d108      	bne.n	80066b6 <TIM_Base_SetConfig+0x4a>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a2d      	ldr	r2, [pc, #180]	; (8006770 <TIM_Base_SetConfig+0x104>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d01b      	beq.n	80066f6 <TIM_Base_SetConfig+0x8a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c4:	d017      	beq.n	80066f6 <TIM_Base_SetConfig+0x8a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a2a      	ldr	r2, [pc, #168]	; (8006774 <TIM_Base_SetConfig+0x108>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d013      	beq.n	80066f6 <TIM_Base_SetConfig+0x8a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a29      	ldr	r2, [pc, #164]	; (8006778 <TIM_Base_SetConfig+0x10c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d00f      	beq.n	80066f6 <TIM_Base_SetConfig+0x8a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a28      	ldr	r2, [pc, #160]	; (800677c <TIM_Base_SetConfig+0x110>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00b      	beq.n	80066f6 <TIM_Base_SetConfig+0x8a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a27      	ldr	r2, [pc, #156]	; (8006780 <TIM_Base_SetConfig+0x114>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d007      	beq.n	80066f6 <TIM_Base_SetConfig+0x8a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a26      	ldr	r2, [pc, #152]	; (8006784 <TIM_Base_SetConfig+0x118>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d003      	beq.n	80066f6 <TIM_Base_SetConfig+0x8a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a25      	ldr	r2, [pc, #148]	; (8006788 <TIM_Base_SetConfig+0x11c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d108      	bne.n	8006708 <TIM_Base_SetConfig+0x9c>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	62da      	str	r2, [r3, #44]	; 0x2c
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	629a      	str	r2, [r3, #40]	; 0x28
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a10      	ldr	r2, [pc, #64]	; (8006770 <TIM_Base_SetConfig+0x104>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d00f      	beq.n	8006754 <TIM_Base_SetConfig+0xe8>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a11      	ldr	r2, [pc, #68]	; (800677c <TIM_Base_SetConfig+0x110>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00b      	beq.n	8006754 <TIM_Base_SetConfig+0xe8>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a10      	ldr	r2, [pc, #64]	; (8006780 <TIM_Base_SetConfig+0x114>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d007      	beq.n	8006754 <TIM_Base_SetConfig+0xe8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a0f      	ldr	r2, [pc, #60]	; (8006784 <TIM_Base_SetConfig+0x118>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <TIM_Base_SetConfig+0xe8>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a0e      	ldr	r2, [pc, #56]	; (8006788 <TIM_Base_SetConfig+0x11c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d103      	bne.n	800675c <TIM_Base_SetConfig+0xf0>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	631a      	str	r2, [r3, #48]	; 0x30
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	615a      	str	r2, [r3, #20]
 8006762:	bf00      	nop
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	40012c00 	.word	0x40012c00
 8006774:	40000400 	.word	0x40000400
 8006778:	40000800 	.word	0x40000800
 800677c:	40013400 	.word	0x40013400
 8006780:	40014000 	.word	0x40014000
 8006784:	40014400 	.word	0x40014400
 8006788:	40014800 	.word	0x40014800

0800678c <TIM_OC1_SetConfig>:
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f023 0201 	bic.w	r2, r3, #1
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	621a      	str	r2, [r3, #32]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f023 0302 	bic.w	r3, r3, #2
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a2c      	ldr	r2, [pc, #176]	; (8006898 <TIM_OC1_SetConfig+0x10c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00f      	beq.n	800680c <TIM_OC1_SetConfig+0x80>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a2b      	ldr	r2, [pc, #172]	; (800689c <TIM_OC1_SetConfig+0x110>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00b      	beq.n	800680c <TIM_OC1_SetConfig+0x80>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a2a      	ldr	r2, [pc, #168]	; (80068a0 <TIM_OC1_SetConfig+0x114>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d007      	beq.n	800680c <TIM_OC1_SetConfig+0x80>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a29      	ldr	r2, [pc, #164]	; (80068a4 <TIM_OC1_SetConfig+0x118>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d003      	beq.n	800680c <TIM_OC1_SetConfig+0x80>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a28      	ldr	r2, [pc, #160]	; (80068a8 <TIM_OC1_SetConfig+0x11c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d10c      	bne.n	8006826 <TIM_OC1_SetConfig+0x9a>
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f023 0308 	bic.w	r3, r3, #8
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f023 0304 	bic.w	r3, r3, #4
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a1b      	ldr	r2, [pc, #108]	; (8006898 <TIM_OC1_SetConfig+0x10c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00f      	beq.n	800684e <TIM_OC1_SetConfig+0xc2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a1a      	ldr	r2, [pc, #104]	; (800689c <TIM_OC1_SetConfig+0x110>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00b      	beq.n	800684e <TIM_OC1_SetConfig+0xc2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a19      	ldr	r2, [pc, #100]	; (80068a0 <TIM_OC1_SetConfig+0x114>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d007      	beq.n	800684e <TIM_OC1_SetConfig+0xc2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a18      	ldr	r2, [pc, #96]	; (80068a4 <TIM_OC1_SetConfig+0x118>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d003      	beq.n	800684e <TIM_OC1_SetConfig+0xc2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <TIM_OC1_SetConfig+0x11c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d111      	bne.n	8006872 <TIM_OC1_SetConfig+0xe6>
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	4313      	orrs	r3, r2
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	605a      	str	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	619a      	str	r2, [r3, #24]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	635a      	str	r2, [r3, #52]	; 0x34
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	621a      	str	r2, [r3, #32]
 800688c:	bf00      	nop
 800688e:	371c      	adds	r7, #28
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	40012c00 	.word	0x40012c00
 800689c:	40013400 	.word	0x40013400
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40014400 	.word	0x40014400
 80068a8:	40014800 	.word	0x40014800

080068ac <TIM_OC2_SetConfig>:
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f023 0210 	bic.w	r2, r3, #16
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	621a      	str	r2, [r3, #32]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f023 0320 	bic.w	r3, r3, #32
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a28      	ldr	r2, [pc, #160]	; (80069ac <TIM_OC2_SetConfig+0x100>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_OC2_SetConfig+0x6c>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a27      	ldr	r2, [pc, #156]	; (80069b0 <TIM_OC2_SetConfig+0x104>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d10d      	bne.n	8006934 <TIM_OC2_SetConfig+0x88>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a1d      	ldr	r2, [pc, #116]	; (80069ac <TIM_OC2_SetConfig+0x100>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00f      	beq.n	800695c <TIM_OC2_SetConfig+0xb0>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a1c      	ldr	r2, [pc, #112]	; (80069b0 <TIM_OC2_SetConfig+0x104>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00b      	beq.n	800695c <TIM_OC2_SetConfig+0xb0>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a1b      	ldr	r2, [pc, #108]	; (80069b4 <TIM_OC2_SetConfig+0x108>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d007      	beq.n	800695c <TIM_OC2_SetConfig+0xb0>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a1a      	ldr	r2, [pc, #104]	; (80069b8 <TIM_OC2_SetConfig+0x10c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_OC2_SetConfig+0xb0>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a19      	ldr	r2, [pc, #100]	; (80069bc <TIM_OC2_SetConfig+0x110>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d113      	bne.n	8006984 <TIM_OC2_SetConfig+0xd8>
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800696a:	613b      	str	r3, [r7, #16]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	619a      	str	r2, [r3, #24]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	639a      	str	r2, [r3, #56]	; 0x38
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	621a      	str	r2, [r3, #32]
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40013400 	.word	0x40013400
 80069b4:	40014000 	.word	0x40014000
 80069b8:	40014400 	.word	0x40014400
 80069bc:	40014800 	.word	0x40014800

080069c0 <TIM_OC3_SetConfig>:
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	621a      	str	r2, [r3, #32]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0303 	bic.w	r3, r3, #3
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	021b      	lsls	r3, r3, #8
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a27      	ldr	r2, [pc, #156]	; (8006abc <TIM_OC3_SetConfig+0xfc>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d003      	beq.n	8006a2a <TIM_OC3_SetConfig+0x6a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a26      	ldr	r2, [pc, #152]	; (8006ac0 <TIM_OC3_SetConfig+0x100>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d10d      	bne.n	8006a46 <TIM_OC3_SetConfig+0x86>
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	021b      	lsls	r3, r3, #8
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a1c      	ldr	r2, [pc, #112]	; (8006abc <TIM_OC3_SetConfig+0xfc>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00f      	beq.n	8006a6e <TIM_OC3_SetConfig+0xae>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a1b      	ldr	r2, [pc, #108]	; (8006ac0 <TIM_OC3_SetConfig+0x100>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00b      	beq.n	8006a6e <TIM_OC3_SetConfig+0xae>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a1a      	ldr	r2, [pc, #104]	; (8006ac4 <TIM_OC3_SetConfig+0x104>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d007      	beq.n	8006a6e <TIM_OC3_SetConfig+0xae>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a19      	ldr	r2, [pc, #100]	; (8006ac8 <TIM_OC3_SetConfig+0x108>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d003      	beq.n	8006a6e <TIM_OC3_SetConfig+0xae>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a18      	ldr	r2, [pc, #96]	; (8006acc <TIM_OC3_SetConfig+0x10c>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d113      	bne.n	8006a96 <TIM_OC3_SetConfig+0xd6>
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a74:	613b      	str	r3, [r7, #16]
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a7c:	613b      	str	r3, [r7, #16]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	605a      	str	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	61da      	str	r2, [r3, #28]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	63da      	str	r2, [r3, #60]	; 0x3c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	621a      	str	r2, [r3, #32]
 8006ab0:	bf00      	nop
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	40012c00 	.word	0x40012c00
 8006ac0:	40013400 	.word	0x40013400
 8006ac4:	40014000 	.word	0x40014000
 8006ac8:	40014400 	.word	0x40014400
 8006acc:	40014800 	.word	0x40014800

08006ad0 <TIM_OC4_SetConfig>:
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	621a      	str	r2, [r3, #32]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	021b      	lsls	r3, r3, #8
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	031b      	lsls	r3, r3, #12
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a28      	ldr	r2, [pc, #160]	; (8006bd0 <TIM_OC4_SetConfig+0x100>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_OC4_SetConfig+0x6c>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a27      	ldr	r2, [pc, #156]	; (8006bd4 <TIM_OC4_SetConfig+0x104>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d10d      	bne.n	8006b58 <TIM_OC4_SetConfig+0x88>
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	031b      	lsls	r3, r3, #12
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a1d      	ldr	r2, [pc, #116]	; (8006bd0 <TIM_OC4_SetConfig+0x100>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00f      	beq.n	8006b80 <TIM_OC4_SetConfig+0xb0>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a1c      	ldr	r2, [pc, #112]	; (8006bd4 <TIM_OC4_SetConfig+0x104>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00b      	beq.n	8006b80 <TIM_OC4_SetConfig+0xb0>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a1b      	ldr	r2, [pc, #108]	; (8006bd8 <TIM_OC4_SetConfig+0x108>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d007      	beq.n	8006b80 <TIM_OC4_SetConfig+0xb0>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a1a      	ldr	r2, [pc, #104]	; (8006bdc <TIM_OC4_SetConfig+0x10c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_OC4_SetConfig+0xb0>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <TIM_OC4_SetConfig+0x110>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d113      	bne.n	8006ba8 <TIM_OC4_SetConfig+0xd8>
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	019b      	lsls	r3, r3, #6
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	019b      	lsls	r3, r3, #6
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	605a      	str	r2, [r3, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	61da      	str	r2, [r3, #28]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40012c00 	.word	0x40012c00
 8006bd4:	40013400 	.word	0x40013400
 8006bd8:	40014000 	.word	0x40014000
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800

08006be4 <TIM_OC5_SetConfig>:
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	621a      	str	r2, [r3, #32]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	041b      	lsls	r3, r3, #16
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a17      	ldr	r2, [pc, #92]	; (8006c98 <TIM_OC5_SetConfig+0xb4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00f      	beq.n	8006c5e <TIM_OC5_SetConfig+0x7a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a16      	ldr	r2, [pc, #88]	; (8006c9c <TIM_OC5_SetConfig+0xb8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00b      	beq.n	8006c5e <TIM_OC5_SetConfig+0x7a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a15      	ldr	r2, [pc, #84]	; (8006ca0 <TIM_OC5_SetConfig+0xbc>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_OC5_SetConfig+0x7a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a14      	ldr	r2, [pc, #80]	; (8006ca4 <TIM_OC5_SetConfig+0xc0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_OC5_SetConfig+0x7a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a13      	ldr	r2, [pc, #76]	; (8006ca8 <TIM_OC5_SetConfig+0xc4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d109      	bne.n	8006c72 <TIM_OC5_SetConfig+0x8e>
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	605a      	str	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	651a      	str	r2, [r3, #80]	; 0x50
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	649a      	str	r2, [r3, #72]	; 0x48
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	621a      	str	r2, [r3, #32]
 8006c8c:	bf00      	nop
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	40012c00 	.word	0x40012c00
 8006c9c:	40013400 	.word	0x40013400
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	40014400 	.word	0x40014400
 8006ca8:	40014800 	.word	0x40014800

08006cac <TIM_OC6_SetConfig>:
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	621a      	str	r2, [r3, #32]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	051b      	lsls	r3, r3, #20
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a18      	ldr	r2, [pc, #96]	; (8006d64 <TIM_OC6_SetConfig+0xb8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00f      	beq.n	8006d28 <TIM_OC6_SetConfig+0x7c>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a17      	ldr	r2, [pc, #92]	; (8006d68 <TIM_OC6_SetConfig+0xbc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00b      	beq.n	8006d28 <TIM_OC6_SetConfig+0x7c>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a16      	ldr	r2, [pc, #88]	; (8006d6c <TIM_OC6_SetConfig+0xc0>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d007      	beq.n	8006d28 <TIM_OC6_SetConfig+0x7c>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a15      	ldr	r2, [pc, #84]	; (8006d70 <TIM_OC6_SetConfig+0xc4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d003      	beq.n	8006d28 <TIM_OC6_SetConfig+0x7c>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a14      	ldr	r2, [pc, #80]	; (8006d74 <TIM_OC6_SetConfig+0xc8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d109      	bne.n	8006d3c <TIM_OC6_SetConfig+0x90>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	029b      	lsls	r3, r3, #10
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	651a      	str	r2, [r3, #80]	; 0x50
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	621a      	str	r2, [r3, #32]
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40013400 	.word	0x40013400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800

08006d78 <TIM_TI1_ConfigInputStage>:
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	f023 0201 	bic.w	r2, r3, #1
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	621a      	str	r2, [r3, #32]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	011b      	lsls	r3, r3, #4
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f023 030a 	bic.w	r3, r3, #10
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	619a      	str	r2, [r3, #24]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	621a      	str	r2, [r3, #32]
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <TIM_TI2_ConfigInputStage>:
 8006dd6:	b480      	push	{r7}
 8006dd8:	b087      	sub	sp, #28
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	f023 0210 	bic.w	r2, r3, #16
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	621a      	str	r2, [r3, #32]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	031b      	lsls	r3, r3, #12
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	619a      	str	r2, [r3, #24]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	621a      	str	r2, [r3, #32]
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <TIM_ITRx_SetConfig>:
 8006e36:	b480      	push	{r7}
 8006e38:	b085      	sub	sp, #20
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	f043 0307 	orr.w	r3, r3, #7
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	609a      	str	r2, [r3, #8]
 8006e64:	bf00      	nop
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <TIM_ETR_SetConfig>:
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	603b      	str	r3, [r7, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	021a      	lsls	r2, r3, #8
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	431a      	orrs	r2, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	609a      	str	r2, [r3, #8]
 8006ea4:	bf00      	nop
 8006ea6:	371c      	adds	r7, #28
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_TIMEx_MasterConfigSynchronization>:
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e065      	b.n	8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	60bb      	str	r3, [r7, #8]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2c      	ldr	r2, [pc, #176]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d004      	beq.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a2b      	ldr	r2, [pc, #172]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d108      	bne.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	605a      	str	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1b      	ldr	r2, [pc, #108]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d018      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3e:	d013      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a18      	ldr	r2, [pc, #96]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00e      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a17      	ldr	r2, [pc, #92]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d009      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a12      	ldr	r2, [pc, #72]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d004      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d10c      	bne.n	8006f82 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f6e:	60bb      	str	r3, [r7, #8]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60bb      	str	r3, [r7, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	609a      	str	r2, [r3, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f92:	2300      	movs	r3, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	40012c00 	.word	0x40012c00
 8006fa4:	40013400 	.word	0x40013400
 8006fa8:	40000400 	.word	0x40000400
 8006fac:	40000800 	.word	0x40000800
 8006fb0:	40014000 	.word	0x40014000

08006fb4 <HAL_TIMEx_ConfigBreakDeadTime>:
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e087      	b.n	80070e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	041b      	lsls	r3, r3, #16
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a27      	ldr	r2, [pc, #156]	; (80070ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d004      	beq.n	800705e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a25      	ldr	r2, [pc, #148]	; (80070f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d106      	bne.n	800706c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	4313      	orrs	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1e      	ldr	r2, [pc, #120]	; (80070ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d004      	beq.n	8007080 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1d      	ldr	r2, [pc, #116]	; (80070f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d126      	bne.n	80070ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	051b      	lsls	r3, r3, #20
 800708c:	4313      	orrs	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a0e      	ldr	r2, [pc, #56]	; (80070ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d004      	beq.n	80070c0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a0d      	ldr	r2, [pc, #52]	; (80070f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d106      	bne.n	80070ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	645a      	str	r2, [r3, #68]	; 0x44
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80070de:	2300      	movs	r3, #0
 80070e0:	4618      	mov	r0, r3
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	40012c00 	.word	0x40012c00
 80070f0:	40013400 	.word	0x40013400

080070f4 <HAL_UART_Init>:
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_UART_Init+0x12>
 8007102:	2301      	movs	r3, #1
 8007104:	e042      	b.n	800718c <HAL_UART_Init+0x98>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800710c:	2b00      	cmp	r3, #0
 800710e:	d106      	bne.n	800711e <HAL_UART_Init+0x2a>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7fc f83d 	bl	8003198 <HAL_UART_MspInit>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2224      	movs	r2, #36	; 0x24
 8007122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 0201 	bic.w	r2, r2, #1
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f82c 	bl	8007194 <UART_SetConfig>
 800713c:	4603      	mov	r3, r0
 800713e:	2b01      	cmp	r3, #1
 8007140:	d101      	bne.n	8007146 <HAL_UART_Init+0x52>
 8007142:	2301      	movs	r3, #1
 8007144:	e022      	b.n	800718c <HAL_UART_Init+0x98>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <HAL_UART_Init+0x60>
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 faec 	bl	800772c <UART_AdvFeatureConfig>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007162:	605a      	str	r2, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689a      	ldr	r2, [r3, #8]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007172:	609a      	str	r2, [r3, #8]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0201 	orr.w	r2, r2, #1
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fb73 	bl	8007870 <UART_CheckIdleState>
 800718a:	4603      	mov	r3, r0
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <UART_SetConfig>:
 8007194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007198:	b08c      	sub	sp, #48	; 0x30
 800719a:	af00      	add	r7, sp, #0
 800719c:	6178      	str	r0, [r7, #20]
 800719e:	2300      	movs	r3, #0
 80071a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	431a      	orrs	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	431a      	orrs	r2, r3
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4bab      	ldr	r3, [pc, #684]	; (8007470 <UART_SetConfig+0x2dc>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071cc:	430b      	orrs	r3, r1
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4aa0      	ldr	r2, [pc, #640]	; (8007474 <UART_SetConfig+0x2e0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d004      	beq.n	8007200 <UART_SetConfig+0x6c>
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071fc:	4313      	orrs	r3, r2
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800720a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	6812      	ldr	r2, [r2, #0]
 8007212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007214:	430b      	orrs	r3, r1
 8007216:	6093      	str	r3, [r2, #8]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	f023 010f 	bic.w	r1, r3, #15
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	62da      	str	r2, [r3, #44]	; 0x2c
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a91      	ldr	r2, [pc, #580]	; (8007478 <UART_SetConfig+0x2e4>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d125      	bne.n	8007284 <UART_SetConfig+0xf0>
 8007238:	4b90      	ldr	r3, [pc, #576]	; (800747c <UART_SetConfig+0x2e8>)
 800723a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	2b03      	cmp	r3, #3
 8007244:	d81a      	bhi.n	800727c <UART_SetConfig+0xe8>
 8007246:	a201      	add	r2, pc, #4	; (adr r2, 800724c <UART_SetConfig+0xb8>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	0800725d 	.word	0x0800725d
 8007250:	0800726d 	.word	0x0800726d
 8007254:	08007265 	.word	0x08007265
 8007258:	08007275 	.word	0x08007275
 800725c:	2301      	movs	r3, #1
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007262:	e0d6      	b.n	8007412 <UART_SetConfig+0x27e>
 8007264:	2302      	movs	r3, #2
 8007266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726a:	e0d2      	b.n	8007412 <UART_SetConfig+0x27e>
 800726c:	2304      	movs	r3, #4
 800726e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007272:	e0ce      	b.n	8007412 <UART_SetConfig+0x27e>
 8007274:	2308      	movs	r3, #8
 8007276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727a:	e0ca      	b.n	8007412 <UART_SetConfig+0x27e>
 800727c:	2310      	movs	r3, #16
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007282:	e0c6      	b.n	8007412 <UART_SetConfig+0x27e>
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a7d      	ldr	r2, [pc, #500]	; (8007480 <UART_SetConfig+0x2ec>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d138      	bne.n	8007300 <UART_SetConfig+0x16c>
 800728e:	4b7b      	ldr	r3, [pc, #492]	; (800747c <UART_SetConfig+0x2e8>)
 8007290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007294:	f003 030c 	and.w	r3, r3, #12
 8007298:	2b0c      	cmp	r3, #12
 800729a:	d82d      	bhi.n	80072f8 <UART_SetConfig+0x164>
 800729c:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <UART_SetConfig+0x110>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	080072d9 	.word	0x080072d9
 80072a8:	080072f9 	.word	0x080072f9
 80072ac:	080072f9 	.word	0x080072f9
 80072b0:	080072f9 	.word	0x080072f9
 80072b4:	080072e9 	.word	0x080072e9
 80072b8:	080072f9 	.word	0x080072f9
 80072bc:	080072f9 	.word	0x080072f9
 80072c0:	080072f9 	.word	0x080072f9
 80072c4:	080072e1 	.word	0x080072e1
 80072c8:	080072f9 	.word	0x080072f9
 80072cc:	080072f9 	.word	0x080072f9
 80072d0:	080072f9 	.word	0x080072f9
 80072d4:	080072f1 	.word	0x080072f1
 80072d8:	2300      	movs	r3, #0
 80072da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072de:	e098      	b.n	8007412 <UART_SetConfig+0x27e>
 80072e0:	2302      	movs	r3, #2
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e6:	e094      	b.n	8007412 <UART_SetConfig+0x27e>
 80072e8:	2304      	movs	r3, #4
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ee:	e090      	b.n	8007412 <UART_SetConfig+0x27e>
 80072f0:	2308      	movs	r3, #8
 80072f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f6:	e08c      	b.n	8007412 <UART_SetConfig+0x27e>
 80072f8:	2310      	movs	r3, #16
 80072fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072fe:	e088      	b.n	8007412 <UART_SetConfig+0x27e>
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a5f      	ldr	r2, [pc, #380]	; (8007484 <UART_SetConfig+0x2f0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d125      	bne.n	8007356 <UART_SetConfig+0x1c2>
 800730a:	4b5c      	ldr	r3, [pc, #368]	; (800747c <UART_SetConfig+0x2e8>)
 800730c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007310:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007314:	2b30      	cmp	r3, #48	; 0x30
 8007316:	d016      	beq.n	8007346 <UART_SetConfig+0x1b2>
 8007318:	2b30      	cmp	r3, #48	; 0x30
 800731a:	d818      	bhi.n	800734e <UART_SetConfig+0x1ba>
 800731c:	2b20      	cmp	r3, #32
 800731e:	d00a      	beq.n	8007336 <UART_SetConfig+0x1a2>
 8007320:	2b20      	cmp	r3, #32
 8007322:	d814      	bhi.n	800734e <UART_SetConfig+0x1ba>
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <UART_SetConfig+0x19a>
 8007328:	2b10      	cmp	r3, #16
 800732a:	d008      	beq.n	800733e <UART_SetConfig+0x1aa>
 800732c:	e00f      	b.n	800734e <UART_SetConfig+0x1ba>
 800732e:	2300      	movs	r3, #0
 8007330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007334:	e06d      	b.n	8007412 <UART_SetConfig+0x27e>
 8007336:	2302      	movs	r3, #2
 8007338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733c:	e069      	b.n	8007412 <UART_SetConfig+0x27e>
 800733e:	2304      	movs	r3, #4
 8007340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007344:	e065      	b.n	8007412 <UART_SetConfig+0x27e>
 8007346:	2308      	movs	r3, #8
 8007348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800734c:	e061      	b.n	8007412 <UART_SetConfig+0x27e>
 800734e:	2310      	movs	r3, #16
 8007350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007354:	e05d      	b.n	8007412 <UART_SetConfig+0x27e>
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a4b      	ldr	r2, [pc, #300]	; (8007488 <UART_SetConfig+0x2f4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d125      	bne.n	80073ac <UART_SetConfig+0x218>
 8007360:	4b46      	ldr	r3, [pc, #280]	; (800747c <UART_SetConfig+0x2e8>)
 8007362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007366:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800736a:	2bc0      	cmp	r3, #192	; 0xc0
 800736c:	d016      	beq.n	800739c <UART_SetConfig+0x208>
 800736e:	2bc0      	cmp	r3, #192	; 0xc0
 8007370:	d818      	bhi.n	80073a4 <UART_SetConfig+0x210>
 8007372:	2b80      	cmp	r3, #128	; 0x80
 8007374:	d00a      	beq.n	800738c <UART_SetConfig+0x1f8>
 8007376:	2b80      	cmp	r3, #128	; 0x80
 8007378:	d814      	bhi.n	80073a4 <UART_SetConfig+0x210>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <UART_SetConfig+0x1f0>
 800737e:	2b40      	cmp	r3, #64	; 0x40
 8007380:	d008      	beq.n	8007394 <UART_SetConfig+0x200>
 8007382:	e00f      	b.n	80073a4 <UART_SetConfig+0x210>
 8007384:	2300      	movs	r3, #0
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800738a:	e042      	b.n	8007412 <UART_SetConfig+0x27e>
 800738c:	2302      	movs	r3, #2
 800738e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007392:	e03e      	b.n	8007412 <UART_SetConfig+0x27e>
 8007394:	2304      	movs	r3, #4
 8007396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739a:	e03a      	b.n	8007412 <UART_SetConfig+0x27e>
 800739c:	2308      	movs	r3, #8
 800739e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a2:	e036      	b.n	8007412 <UART_SetConfig+0x27e>
 80073a4:	2310      	movs	r3, #16
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073aa:	e032      	b.n	8007412 <UART_SetConfig+0x27e>
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a30      	ldr	r2, [pc, #192]	; (8007474 <UART_SetConfig+0x2e0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d12a      	bne.n	800740c <UART_SetConfig+0x278>
 80073b6:	4b31      	ldr	r3, [pc, #196]	; (800747c <UART_SetConfig+0x2e8>)
 80073b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073c4:	d01a      	beq.n	80073fc <UART_SetConfig+0x268>
 80073c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073ca:	d81b      	bhi.n	8007404 <UART_SetConfig+0x270>
 80073cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073d0:	d00c      	beq.n	80073ec <UART_SetConfig+0x258>
 80073d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073d6:	d815      	bhi.n	8007404 <UART_SetConfig+0x270>
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <UART_SetConfig+0x250>
 80073dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e0:	d008      	beq.n	80073f4 <UART_SetConfig+0x260>
 80073e2:	e00f      	b.n	8007404 <UART_SetConfig+0x270>
 80073e4:	2300      	movs	r3, #0
 80073e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ea:	e012      	b.n	8007412 <UART_SetConfig+0x27e>
 80073ec:	2302      	movs	r3, #2
 80073ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f2:	e00e      	b.n	8007412 <UART_SetConfig+0x27e>
 80073f4:	2304      	movs	r3, #4
 80073f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073fa:	e00a      	b.n	8007412 <UART_SetConfig+0x27e>
 80073fc:	2308      	movs	r3, #8
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007402:	e006      	b.n	8007412 <UART_SetConfig+0x27e>
 8007404:	2310      	movs	r3, #16
 8007406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740a:	e002      	b.n	8007412 <UART_SetConfig+0x27e>
 800740c:	2310      	movs	r3, #16
 800740e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a17      	ldr	r2, [pc, #92]	; (8007474 <UART_SetConfig+0x2e0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	f040 80a8 	bne.w	800756e <UART_SetConfig+0x3da>
 800741e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007422:	2b08      	cmp	r3, #8
 8007424:	d834      	bhi.n	8007490 <UART_SetConfig+0x2fc>
 8007426:	a201      	add	r2, pc, #4	; (adr r2, 800742c <UART_SetConfig+0x298>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007451 	.word	0x08007451
 8007430:	08007491 	.word	0x08007491
 8007434:	08007459 	.word	0x08007459
 8007438:	08007491 	.word	0x08007491
 800743c:	0800745f 	.word	0x0800745f
 8007440:	08007491 	.word	0x08007491
 8007444:	08007491 	.word	0x08007491
 8007448:	08007491 	.word	0x08007491
 800744c:	08007467 	.word	0x08007467
 8007450:	f7fd fccc 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 8007454:	6278      	str	r0, [r7, #36]	; 0x24
 8007456:	e021      	b.n	800749c <UART_SetConfig+0x308>
 8007458:	4b0c      	ldr	r3, [pc, #48]	; (800748c <UART_SetConfig+0x2f8>)
 800745a:	627b      	str	r3, [r7, #36]	; 0x24
 800745c:	e01e      	b.n	800749c <UART_SetConfig+0x308>
 800745e:	f7fd fc57 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8007462:	6278      	str	r0, [r7, #36]	; 0x24
 8007464:	e01a      	b.n	800749c <UART_SetConfig+0x308>
 8007466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800746a:	627b      	str	r3, [r7, #36]	; 0x24
 800746c:	e016      	b.n	800749c <UART_SetConfig+0x308>
 800746e:	bf00      	nop
 8007470:	cfff69f3 	.word	0xcfff69f3
 8007474:	40008000 	.word	0x40008000
 8007478:	40013800 	.word	0x40013800
 800747c:	40021000 	.word	0x40021000
 8007480:	40004400 	.word	0x40004400
 8007484:	40004800 	.word	0x40004800
 8007488:	40004c00 	.word	0x40004c00
 800748c:	00f42400 	.word	0x00f42400
 8007490:	2300      	movs	r3, #0
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
 8007494:	2301      	movs	r3, #1
 8007496:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800749a:	bf00      	nop
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 812a 	beq.w	80076f8 <UART_SetConfig+0x564>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a8:	4a9e      	ldr	r2, [pc, #632]	; (8007724 <UART_SetConfig+0x590>)
 80074aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ae:	461a      	mov	r2, r3
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b6:	61bb      	str	r3, [r7, #24]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	4413      	add	r3, r2
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d305      	bcc.n	80074d4 <UART_SetConfig+0x340>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	031b      	lsls	r3, r3, #12
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d903      	bls.n	80074dc <UART_SetConfig+0x348>
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074da:	e10d      	b.n	80076f8 <UART_SetConfig+0x564>
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	2200      	movs	r2, #0
 80074e0:	60bb      	str	r3, [r7, #8]
 80074e2:	60fa      	str	r2, [r7, #12]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	4a8e      	ldr	r2, [pc, #568]	; (8007724 <UART_SetConfig+0x590>)
 80074ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2200      	movs	r2, #0
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	607a      	str	r2, [r7, #4]
 80074f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074fe:	f7f9 fb47 	bl	8000b90 <__aeabi_uldivmod>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	4610      	mov	r0, r2
 8007508:	4619      	mov	r1, r3
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	020b      	lsls	r3, r1, #8
 8007514:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007518:	0202      	lsls	r2, r0, #8
 800751a:	6979      	ldr	r1, [r7, #20]
 800751c:	6849      	ldr	r1, [r1, #4]
 800751e:	0849      	lsrs	r1, r1, #1
 8007520:	2000      	movs	r0, #0
 8007522:	460c      	mov	r4, r1
 8007524:	4605      	mov	r5, r0
 8007526:	eb12 0804 	adds.w	r8, r2, r4
 800752a:	eb43 0905 	adc.w	r9, r3, r5
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	469a      	mov	sl, r3
 8007536:	4693      	mov	fp, r2
 8007538:	4652      	mov	r2, sl
 800753a:	465b      	mov	r3, fp
 800753c:	4640      	mov	r0, r8
 800753e:	4649      	mov	r1, r9
 8007540:	f7f9 fb26 	bl	8000b90 <__aeabi_uldivmod>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4613      	mov	r3, r2
 800754a:	623b      	str	r3, [r7, #32]
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007552:	d308      	bcc.n	8007566 <UART_SetConfig+0x3d2>
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800755a:	d204      	bcs.n	8007566 <UART_SetConfig+0x3d2>
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6a3a      	ldr	r2, [r7, #32]
 8007562:	60da      	str	r2, [r3, #12]
 8007564:	e0c8      	b.n	80076f8 <UART_SetConfig+0x564>
 8007566:	2301      	movs	r3, #1
 8007568:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800756c:	e0c4      	b.n	80076f8 <UART_SetConfig+0x564>
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007576:	d167      	bne.n	8007648 <UART_SetConfig+0x4b4>
 8007578:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800757c:	2b08      	cmp	r3, #8
 800757e:	d828      	bhi.n	80075d2 <UART_SetConfig+0x43e>
 8007580:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <UART_SetConfig+0x3f4>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	080075ad 	.word	0x080075ad
 800758c:	080075b5 	.word	0x080075b5
 8007590:	080075bd 	.word	0x080075bd
 8007594:	080075d3 	.word	0x080075d3
 8007598:	080075c3 	.word	0x080075c3
 800759c:	080075d3 	.word	0x080075d3
 80075a0:	080075d3 	.word	0x080075d3
 80075a4:	080075d3 	.word	0x080075d3
 80075a8:	080075cb 	.word	0x080075cb
 80075ac:	f7fd fc1e 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 80075b0:	6278      	str	r0, [r7, #36]	; 0x24
 80075b2:	e014      	b.n	80075de <UART_SetConfig+0x44a>
 80075b4:	f7fd fc30 	bl	8004e18 <HAL_RCC_GetPCLK2Freq>
 80075b8:	6278      	str	r0, [r7, #36]	; 0x24
 80075ba:	e010      	b.n	80075de <UART_SetConfig+0x44a>
 80075bc:	4b5a      	ldr	r3, [pc, #360]	; (8007728 <UART_SetConfig+0x594>)
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
 80075c0:	e00d      	b.n	80075de <UART_SetConfig+0x44a>
 80075c2:	f7fd fba5 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 80075c6:	6278      	str	r0, [r7, #36]	; 0x24
 80075c8:	e009      	b.n	80075de <UART_SetConfig+0x44a>
 80075ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
 80075d0:	e005      	b.n	80075de <UART_SetConfig+0x44a>
 80075d2:	2300      	movs	r3, #0
 80075d4:	627b      	str	r3, [r7, #36]	; 0x24
 80075d6:	2301      	movs	r3, #1
 80075d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075dc:	bf00      	nop
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 8089 	beq.w	80076f8 <UART_SetConfig+0x564>
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	4a4e      	ldr	r2, [pc, #312]	; (8007724 <UART_SetConfig+0x590>)
 80075ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f0:	461a      	mov	r2, r3
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80075f8:	005a      	lsls	r2, r3, #1
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	085b      	lsrs	r3, r3, #1
 8007600:	441a      	add	r2, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	fbb2 f3f3 	udiv	r3, r2, r3
 800760a:	623b      	str	r3, [r7, #32]
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	2b0f      	cmp	r3, #15
 8007610:	d916      	bls.n	8007640 <UART_SetConfig+0x4ac>
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007618:	d212      	bcs.n	8007640 <UART_SetConfig+0x4ac>
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	b29b      	uxth	r3, r3
 800761e:	f023 030f 	bic.w	r3, r3, #15
 8007622:	83fb      	strh	r3, [r7, #30]
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	085b      	lsrs	r3, r3, #1
 8007628:	b29b      	uxth	r3, r3
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	b29a      	uxth	r2, r3
 8007630:	8bfb      	ldrh	r3, [r7, #30]
 8007632:	4313      	orrs	r3, r2
 8007634:	83fb      	strh	r3, [r7, #30]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	8bfa      	ldrh	r2, [r7, #30]
 800763c:	60da      	str	r2, [r3, #12]
 800763e:	e05b      	b.n	80076f8 <UART_SetConfig+0x564>
 8007640:	2301      	movs	r3, #1
 8007642:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007646:	e057      	b.n	80076f8 <UART_SetConfig+0x564>
 8007648:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800764c:	2b08      	cmp	r3, #8
 800764e:	d828      	bhi.n	80076a2 <UART_SetConfig+0x50e>
 8007650:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <UART_SetConfig+0x4c4>)
 8007652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007656:	bf00      	nop
 8007658:	0800767d 	.word	0x0800767d
 800765c:	08007685 	.word	0x08007685
 8007660:	0800768d 	.word	0x0800768d
 8007664:	080076a3 	.word	0x080076a3
 8007668:	08007693 	.word	0x08007693
 800766c:	080076a3 	.word	0x080076a3
 8007670:	080076a3 	.word	0x080076a3
 8007674:	080076a3 	.word	0x080076a3
 8007678:	0800769b 	.word	0x0800769b
 800767c:	f7fd fbb6 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 8007680:	6278      	str	r0, [r7, #36]	; 0x24
 8007682:	e014      	b.n	80076ae <UART_SetConfig+0x51a>
 8007684:	f7fd fbc8 	bl	8004e18 <HAL_RCC_GetPCLK2Freq>
 8007688:	6278      	str	r0, [r7, #36]	; 0x24
 800768a:	e010      	b.n	80076ae <UART_SetConfig+0x51a>
 800768c:	4b26      	ldr	r3, [pc, #152]	; (8007728 <UART_SetConfig+0x594>)
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
 8007690:	e00d      	b.n	80076ae <UART_SetConfig+0x51a>
 8007692:	f7fd fb3d 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8007696:	6278      	str	r0, [r7, #36]	; 0x24
 8007698:	e009      	b.n	80076ae <UART_SetConfig+0x51a>
 800769a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
 80076a0:	e005      	b.n	80076ae <UART_SetConfig+0x51a>
 80076a2:	2300      	movs	r3, #0
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
 80076a6:	2301      	movs	r3, #1
 80076a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076ac:	bf00      	nop
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d021      	beq.n	80076f8 <UART_SetConfig+0x564>
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	4a1a      	ldr	r2, [pc, #104]	; (8007724 <UART_SetConfig+0x590>)
 80076ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076be:	461a      	mov	r2, r3
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	085b      	lsrs	r3, r3, #1
 80076cc:	441a      	add	r2, r3
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d6:	623b      	str	r3, [r7, #32]
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	2b0f      	cmp	r3, #15
 80076dc:	d909      	bls.n	80076f2 <UART_SetConfig+0x55e>
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e4:	d205      	bcs.n	80076f2 <UART_SetConfig+0x55e>
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60da      	str	r2, [r3, #12]
 80076f0:	e002      	b.n	80076f8 <UART_SetConfig+0x564>
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2201      	movs	r2, #1
 8007704:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2200      	movs	r2, #0
 800770c:	671a      	str	r2, [r3, #112]	; 0x70
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2200      	movs	r2, #0
 8007712:	675a      	str	r2, [r3, #116]	; 0x74
 8007714:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007718:	4618      	mov	r0, r3
 800771a:	3730      	adds	r7, #48	; 0x30
 800771c:	46bd      	mov	sp, r7
 800771e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007722:	bf00      	nop
 8007724:	08008548 	.word	0x08008548
 8007728:	00f42400 	.word	0x00f42400

0800772c <UART_AdvFeatureConfig>:
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <UART_AdvFeatureConfig+0x2a>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	605a      	str	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <UART_AdvFeatureConfig+0x4c>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	605a      	str	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <UART_AdvFeatureConfig+0x6e>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <UART_AdvFeatureConfig+0x90>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	605a      	str	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00a      	beq.n	80077de <UART_AdvFeatureConfig+0xb2>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	609a      	str	r2, [r3, #8]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <UART_AdvFeatureConfig+0xd4>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	609a      	str	r2, [r3, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01a      	beq.n	8007842 <UART_AdvFeatureConfig+0x116>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	605a      	str	r2, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800782a:	d10a      	bne.n	8007842 <UART_AdvFeatureConfig+0x116>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	605a      	str	r2, [r3, #4]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <UART_AdvFeatureConfig+0x138>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	605a      	str	r2, [r3, #4]
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <UART_CheckIdleState>:
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af02      	add	r7, sp, #8
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007880:	f7fb fe60 	bl	8003544 <HAL_GetTick>
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b08      	cmp	r3, #8
 8007892:	d10e      	bne.n	80078b2 <UART_CheckIdleState+0x42>
 8007894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f82f 	bl	8007906 <UART_WaitOnFlagUntilTimeout>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <UART_CheckIdleState+0x42>
 80078ae:	2303      	movs	r3, #3
 80078b0:	e025      	b.n	80078fe <UART_CheckIdleState+0x8e>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d10e      	bne.n	80078de <UART_CheckIdleState+0x6e>
 80078c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f819 	bl	8007906 <UART_WaitOnFlagUntilTimeout>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <UART_CheckIdleState+0x6e>
 80078da:	2303      	movs	r3, #3
 80078dc:	e00f      	b.n	80078fe <UART_CheckIdleState+0x8e>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80078fc:	2300      	movs	r3, #0
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <UART_WaitOnFlagUntilTimeout>:
 8007906:	b580      	push	{r7, lr}
 8007908:	b09c      	sub	sp, #112	; 0x70
 800790a:	af00      	add	r7, sp, #0
 800790c:	60f8      	str	r0, [r7, #12]
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	603b      	str	r3, [r7, #0]
 8007912:	4613      	mov	r3, r2
 8007914:	71fb      	strb	r3, [r7, #7]
 8007916:	e0a9      	b.n	8007a6c <UART_WaitOnFlagUntilTimeout+0x166>
 8007918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791e:	f000 80a5 	beq.w	8007a6c <UART_WaitOnFlagUntilTimeout+0x166>
 8007922:	f7fb fe0f 	bl	8003544 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800792e:	429a      	cmp	r2, r3
 8007930:	d302      	bcc.n	8007938 <UART_WaitOnFlagUntilTimeout+0x32>
 8007932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007934:	2b00      	cmp	r3, #0
 8007936:	d140      	bne.n	80079ba <UART_WaitOnFlagUntilTimeout+0xb4>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	653b      	str	r3, [r7, #80]	; 0x50
 800793e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007948:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800794c:	667b      	str	r3, [r7, #100]	; 0x64
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007958:	65ba      	str	r2, [r7, #88]	; 0x58
 800795a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800795c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	657b      	str	r3, [r7, #84]	; 0x54
 8007964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e6      	bne.n	8007938 <UART_WaitOnFlagUntilTimeout+0x32>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	63bb      	str	r3, [r7, #56]	; 0x38
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	663b      	str	r3, [r7, #96]	; 0x60
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3308      	adds	r3, #8
 8007988:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800798a:	64ba      	str	r2, [r7, #72]	; 0x48
 800798c:	647b      	str	r3, [r7, #68]	; 0x44
 800798e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	643b      	str	r3, [r7, #64]	; 0x40
 8007998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e5      	bne.n	800796a <UART_WaitOnFlagUntilTimeout+0x64>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80079b6:	2303      	movs	r3, #3
 80079b8:	e069      	b.n	8007a8e <UART_WaitOnFlagUntilTimeout+0x188>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d051      	beq.n	8007a6c <UART_WaitOnFlagUntilTimeout+0x166>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079d6:	d149      	bne.n	8007a6c <UART_WaitOnFlagUntilTimeout+0x166>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079e0:	621a      	str	r2, [r3, #32]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34
 8007a02:	633a      	str	r2, [r7, #48]	; 0x30
 8007a04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e6      	bne.n	80079e2 <UART_WaitOnFlagUntilTimeout+0xdc>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3308      	adds	r3, #8
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	613b      	str	r3, [r7, #16]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	f023 0301 	bic.w	r3, r3, #1
 8007a2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3308      	adds	r3, #8
 8007a32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a34:	623a      	str	r2, [r7, #32]
 8007a36:	61fb      	str	r3, [r7, #28]
 8007a38:	69f9      	ldr	r1, [r7, #28]
 8007a3a:	6a3a      	ldr	r2, [r7, #32]
 8007a3c:	e841 2300 	strex	r3, r2, [r1]
 8007a40:	61bb      	str	r3, [r7, #24]
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1e5      	bne.n	8007a14 <UART_WaitOnFlagUntilTimeout+0x10e>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e010      	b.n	8007a8e <UART_WaitOnFlagUntilTimeout+0x188>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69da      	ldr	r2, [r3, #28]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	4013      	ands	r3, r2
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	bf0c      	ite	eq
 8007a7c:	2301      	moveq	r3, #1
 8007a7e:	2300      	movne	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	461a      	mov	r2, r3
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	f43f af46 	beq.w	8007918 <UART_WaitOnFlagUntilTimeout+0x12>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3770      	adds	r7, #112	; 0x70
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <HAL_UARTEx_DisableFifoMode>:
 8007a96:	b480      	push	{r7}
 8007a98:	b085      	sub	sp, #20
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_UARTEx_DisableFifoMode+0x16>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e027      	b.n	8007afc <HAL_UARTEx_DisableFifoMode+0x66>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2224      	movs	r2, #36	; 0x24
 8007ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0201 	bic.w	r2, r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	665a      	str	r2, [r3, #100]	; 0x64
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007afa:	2300      	movs	r3, #0
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_UARTEx_SetTxFifoThreshold>:
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d101      	bne.n	8007b20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e02d      	b.n	8007b7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2224      	movs	r2, #36	; 0x24
 8007b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0201 	bic.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	609a      	str	r2, [r3, #8]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f84f 	bl	8007c00 <UARTEx_SetNbDataToProcess>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_UARTEx_SetRxFifoThreshold>:
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e02d      	b.n	8007bf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2224      	movs	r2, #36	; 0x24
 8007ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0201 	bic.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	609a      	str	r2, [r3, #8]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f811 	bl	8007c00 <UARTEx_SetNbDataToProcess>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <UARTEx_SetNbDataToProcess>:
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d108      	bne.n	8007c22 <UARTEx_SetNbDataToProcess+0x22>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8007c20:	e031      	b.n	8007c86 <UARTEx_SetNbDataToProcess+0x86>
 8007c22:	2308      	movs	r3, #8
 8007c24:	73fb      	strb	r3, [r7, #15]
 8007c26:	2308      	movs	r3, #8
 8007c28:	73bb      	strb	r3, [r7, #14]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	0e5b      	lsrs	r3, r3, #25
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f003 0307 	and.w	r3, r3, #7
 8007c38:	737b      	strb	r3, [r7, #13]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	0f5b      	lsrs	r3, r3, #29
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	733b      	strb	r3, [r7, #12]
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	7b3a      	ldrb	r2, [r7, #12]
 8007c4e:	4911      	ldr	r1, [pc, #68]	; (8007c94 <UARTEx_SetNbDataToProcess+0x94>)
 8007c50:	5c8a      	ldrb	r2, [r1, r2]
 8007c52:	fb02 f303 	mul.w	r3, r2, r3
 8007c56:	7b3a      	ldrb	r2, [r7, #12]
 8007c58:	490f      	ldr	r1, [pc, #60]	; (8007c98 <UARTEx_SetNbDataToProcess+0x98>)
 8007c5a:	5c8a      	ldrb	r2, [r1, r2]
 8007c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	7b7a      	ldrb	r2, [r7, #13]
 8007c6c:	4909      	ldr	r1, [pc, #36]	; (8007c94 <UARTEx_SetNbDataToProcess+0x94>)
 8007c6e:	5c8a      	ldrb	r2, [r1, r2]
 8007c70:	fb02 f303 	mul.w	r3, r2, r3
 8007c74:	7b7a      	ldrb	r2, [r7, #13]
 8007c76:	4908      	ldr	r1, [pc, #32]	; (8007c98 <UARTEx_SetNbDataToProcess+0x98>)
 8007c78:	5c8a      	ldrb	r2, [r1, r2]
 8007c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	08008560 	.word	0x08008560
 8007c98:	08008568 	.word	0x08008568

08007c9c <__errno>:
 8007c9c:	4b01      	ldr	r3, [pc, #4]	; (8007ca4 <__errno+0x8>)
 8007c9e:	6818      	ldr	r0, [r3, #0]
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	20000044 	.word	0x20000044

08007ca8 <__libc_init_array>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	4d0d      	ldr	r5, [pc, #52]	; (8007ce0 <__libc_init_array+0x38>)
 8007cac:	4c0d      	ldr	r4, [pc, #52]	; (8007ce4 <__libc_init_array+0x3c>)
 8007cae:	1b64      	subs	r4, r4, r5
 8007cb0:	10a4      	asrs	r4, r4, #2
 8007cb2:	2600      	movs	r6, #0
 8007cb4:	42a6      	cmp	r6, r4
 8007cb6:	d109      	bne.n	8007ccc <__libc_init_array+0x24>
 8007cb8:	4d0b      	ldr	r5, [pc, #44]	; (8007ce8 <__libc_init_array+0x40>)
 8007cba:	4c0c      	ldr	r4, [pc, #48]	; (8007cec <__libc_init_array+0x44>)
 8007cbc:	f000 fa24 	bl	8008108 <_init>
 8007cc0:	1b64      	subs	r4, r4, r5
 8007cc2:	10a4      	asrs	r4, r4, #2
 8007cc4:	2600      	movs	r6, #0
 8007cc6:	42a6      	cmp	r6, r4
 8007cc8:	d105      	bne.n	8007cd6 <__libc_init_array+0x2e>
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd0:	4798      	blx	r3
 8007cd2:	3601      	adds	r6, #1
 8007cd4:	e7ee      	b.n	8007cb4 <__libc_init_array+0xc>
 8007cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cda:	4798      	blx	r3
 8007cdc:	3601      	adds	r6, #1
 8007cde:	e7f2      	b.n	8007cc6 <__libc_init_array+0x1e>
 8007ce0:	0800857c 	.word	0x0800857c
 8007ce4:	0800857c 	.word	0x0800857c
 8007ce8:	0800857c 	.word	0x0800857c
 8007cec:	08008580 	.word	0x08008580

08007cf0 <memset>:
 8007cf0:	4402      	add	r2, r0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d100      	bne.n	8007cfa <memset+0xa>
 8007cf8:	4770      	bx	lr
 8007cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cfe:	e7f9      	b.n	8007cf4 <memset+0x4>

08007d00 <log>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	ed2d 8b02 	vpush	{d8}
 8007d06:	ec55 4b10 	vmov	r4, r5, d0
 8007d0a:	f000 f839 	bl	8007d80 <__ieee754_log>
 8007d0e:	4622      	mov	r2, r4
 8007d10:	462b      	mov	r3, r5
 8007d12:	4620      	mov	r0, r4
 8007d14:	4629      	mov	r1, r5
 8007d16:	eeb0 8a40 	vmov.f32	s16, s0
 8007d1a:	eef0 8a60 	vmov.f32	s17, s1
 8007d1e:	f7f8 fed1 	bl	8000ac4 <__aeabi_dcmpun>
 8007d22:	b998      	cbnz	r0, 8007d4c <log+0x4c>
 8007d24:	2200      	movs	r2, #0
 8007d26:	2300      	movs	r3, #0
 8007d28:	4620      	mov	r0, r4
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	f7f8 fec0 	bl	8000ab0 <__aeabi_dcmpgt>
 8007d30:	b960      	cbnz	r0, 8007d4c <log+0x4c>
 8007d32:	2200      	movs	r2, #0
 8007d34:	2300      	movs	r3, #0
 8007d36:	4620      	mov	r0, r4
 8007d38:	4629      	mov	r1, r5
 8007d3a:	f7f8 fe91 	bl	8000a60 <__aeabi_dcmpeq>
 8007d3e:	b160      	cbz	r0, 8007d5a <log+0x5a>
 8007d40:	f7ff ffac 	bl	8007c9c <__errno>
 8007d44:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007d70 <log+0x70>
 8007d48:	2322      	movs	r3, #34	; 0x22
 8007d4a:	6003      	str	r3, [r0, #0]
 8007d4c:	eeb0 0a48 	vmov.f32	s0, s16
 8007d50:	eef0 0a68 	vmov.f32	s1, s17
 8007d54:	ecbd 8b02 	vpop	{d8}
 8007d58:	bd38      	pop	{r3, r4, r5, pc}
 8007d5a:	f7ff ff9f 	bl	8007c9c <__errno>
 8007d5e:	ecbd 8b02 	vpop	{d8}
 8007d62:	2321      	movs	r3, #33	; 0x21
 8007d64:	6003      	str	r3, [r0, #0]
 8007d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d6a:	4803      	ldr	r0, [pc, #12]	; (8007d78 <log+0x78>)
 8007d6c:	f000 b9c4 	b.w	80080f8 <nan>
 8007d70:	00000000 	.word	0x00000000
 8007d74:	fff00000 	.word	0xfff00000
 8007d78:	08008570 	.word	0x08008570
 8007d7c:	00000000 	.word	0x00000000

08007d80 <__ieee754_log>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	ec51 0b10 	vmov	r0, r1, d0
 8007d88:	ed2d 8b04 	vpush	{d8-d9}
 8007d8c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007d90:	b083      	sub	sp, #12
 8007d92:	460d      	mov	r5, r1
 8007d94:	da29      	bge.n	8007dea <__ieee754_log+0x6a>
 8007d96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d9a:	4303      	orrs	r3, r0
 8007d9c:	ee10 2a10 	vmov	r2, s0
 8007da0:	d10c      	bne.n	8007dbc <__ieee754_log+0x3c>
 8007da2:	49cf      	ldr	r1, [pc, #828]	; (80080e0 <__ieee754_log+0x360>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	2300      	movs	r3, #0
 8007da8:	2000      	movs	r0, #0
 8007daa:	f7f8 fd1b 	bl	80007e4 <__aeabi_ddiv>
 8007dae:	ec41 0b10 	vmov	d0, r0, r1
 8007db2:	b003      	add	sp, #12
 8007db4:	ecbd 8b04 	vpop	{d8-d9}
 8007db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	da05      	bge.n	8007dcc <__ieee754_log+0x4c>
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	f7f8 fa2d 	bl	8000220 <__aeabi_dsub>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e7ee      	b.n	8007daa <__ieee754_log+0x2a>
 8007dcc:	4bc5      	ldr	r3, [pc, #788]	; (80080e4 <__ieee754_log+0x364>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f7f8 fbde 	bl	8000590 <__aeabi_dmul>
 8007dd4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007dd8:	460d      	mov	r5, r1
 8007dda:	4ac3      	ldr	r2, [pc, #780]	; (80080e8 <__ieee754_log+0x368>)
 8007ddc:	4295      	cmp	r5, r2
 8007dde:	dd06      	ble.n	8007dee <__ieee754_log+0x6e>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	f7f8 fa1e 	bl	8000224 <__adddf3>
 8007de8:	e7e1      	b.n	8007dae <__ieee754_log+0x2e>
 8007dea:	2300      	movs	r3, #0
 8007dec:	e7f5      	b.n	8007dda <__ieee754_log+0x5a>
 8007dee:	152c      	asrs	r4, r5, #20
 8007df0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007df4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007df8:	441c      	add	r4, r3
 8007dfa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8007dfe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e06:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8007e0a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8007e0e:	ea42 0105 	orr.w	r1, r2, r5
 8007e12:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007e16:	2200      	movs	r2, #0
 8007e18:	4bb4      	ldr	r3, [pc, #720]	; (80080ec <__ieee754_log+0x36c>)
 8007e1a:	f7f8 fa01 	bl	8000220 <__aeabi_dsub>
 8007e1e:	1cab      	adds	r3, r5, #2
 8007e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	4682      	mov	sl, r0
 8007e28:	468b      	mov	fp, r1
 8007e2a:	f04f 0200 	mov.w	r2, #0
 8007e2e:	dc53      	bgt.n	8007ed8 <__ieee754_log+0x158>
 8007e30:	2300      	movs	r3, #0
 8007e32:	f7f8 fe15 	bl	8000a60 <__aeabi_dcmpeq>
 8007e36:	b1d0      	cbz	r0, 8007e6e <__ieee754_log+0xee>
 8007e38:	2c00      	cmp	r4, #0
 8007e3a:	f000 8122 	beq.w	8008082 <__ieee754_log+0x302>
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f7f8 fb3c 	bl	80004bc <__aeabi_i2d>
 8007e44:	a390      	add	r3, pc, #576	; (adr r3, 8008088 <__ieee754_log+0x308>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460f      	mov	r7, r1
 8007e4e:	f7f8 fb9f 	bl	8000590 <__aeabi_dmul>
 8007e52:	a38f      	add	r3, pc, #572	; (adr r3, 8008090 <__ieee754_log+0x310>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	4604      	mov	r4, r0
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	4639      	mov	r1, r7
 8007e60:	f7f8 fb96 	bl	8000590 <__aeabi_dmul>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4620      	mov	r0, r4
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	e7ba      	b.n	8007de4 <__ieee754_log+0x64>
 8007e6e:	a38a      	add	r3, pc, #552	; (adr r3, 8008098 <__ieee754_log+0x318>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	4650      	mov	r0, sl
 8007e76:	4659      	mov	r1, fp
 8007e78:	f7f8 fb8a 	bl	8000590 <__aeabi_dmul>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	2000      	movs	r0, #0
 8007e82:	499b      	ldr	r1, [pc, #620]	; (80080f0 <__ieee754_log+0x370>)
 8007e84:	f7f8 f9cc 	bl	8000220 <__aeabi_dsub>
 8007e88:	4652      	mov	r2, sl
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	460f      	mov	r7, r1
 8007e8e:	465b      	mov	r3, fp
 8007e90:	4650      	mov	r0, sl
 8007e92:	4659      	mov	r1, fp
 8007e94:	f7f8 fb7c 	bl	8000590 <__aeabi_dmul>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	f7f8 fb76 	bl	8000590 <__aeabi_dmul>
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	460f      	mov	r7, r1
 8007ea8:	b914      	cbnz	r4, 8007eb0 <__ieee754_log+0x130>
 8007eaa:	4632      	mov	r2, r6
 8007eac:	463b      	mov	r3, r7
 8007eae:	e0a2      	b.n	8007ff6 <__ieee754_log+0x276>
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f7f8 fb03 	bl	80004bc <__aeabi_i2d>
 8007eb6:	a374      	add	r3, pc, #464	; (adr r3, 8008088 <__ieee754_log+0x308>)
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	4689      	mov	r9, r1
 8007ec0:	f7f8 fb66 	bl	8000590 <__aeabi_dmul>
 8007ec4:	a372      	add	r3, pc, #456	; (adr r3, 8008090 <__ieee754_log+0x310>)
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	4604      	mov	r4, r0
 8007ecc:	460d      	mov	r5, r1
 8007ece:	4640      	mov	r0, r8
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	f7f8 fb5d 	bl	8000590 <__aeabi_dmul>
 8007ed6:	e0a7      	b.n	8008028 <__ieee754_log+0x2a8>
 8007ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007edc:	f7f8 f9a2 	bl	8000224 <__adddf3>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4650      	mov	r0, sl
 8007ee6:	4659      	mov	r1, fp
 8007ee8:	f7f8 fc7c 	bl	80007e4 <__aeabi_ddiv>
 8007eec:	ec41 0b18 	vmov	d8, r0, r1
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f7f8 fae3 	bl	80004bc <__aeabi_i2d>
 8007ef6:	ec53 2b18 	vmov	r2, r3, d8
 8007efa:	ec41 0b19 	vmov	d9, r0, r1
 8007efe:	ec51 0b18 	vmov	r0, r1, d8
 8007f02:	f7f8 fb45 	bl	8000590 <__aeabi_dmul>
 8007f06:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8007f0a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4680      	mov	r8, r0
 8007f16:	4689      	mov	r9, r1
 8007f18:	f7f8 fb3a 	bl	8000590 <__aeabi_dmul>
 8007f1c:	a360      	add	r3, pc, #384	; (adr r3, 80080a0 <__ieee754_log+0x320>)
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	4606      	mov	r6, r0
 8007f24:	460f      	mov	r7, r1
 8007f26:	f7f8 fb33 	bl	8000590 <__aeabi_dmul>
 8007f2a:	a35f      	add	r3, pc, #380	; (adr r3, 80080a8 <__ieee754_log+0x328>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f7f8 f978 	bl	8000224 <__adddf3>
 8007f34:	4632      	mov	r2, r6
 8007f36:	463b      	mov	r3, r7
 8007f38:	f7f8 fb2a 	bl	8000590 <__aeabi_dmul>
 8007f3c:	a35c      	add	r3, pc, #368	; (adr r3, 80080b0 <__ieee754_log+0x330>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	f7f8 f96f 	bl	8000224 <__adddf3>
 8007f46:	4632      	mov	r2, r6
 8007f48:	463b      	mov	r3, r7
 8007f4a:	f7f8 fb21 	bl	8000590 <__aeabi_dmul>
 8007f4e:	a35a      	add	r3, pc, #360	; (adr r3, 80080b8 <__ieee754_log+0x338>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f7f8 f966 	bl	8000224 <__adddf3>
 8007f58:	4642      	mov	r2, r8
 8007f5a:	464b      	mov	r3, r9
 8007f5c:	f7f8 fb18 	bl	8000590 <__aeabi_dmul>
 8007f60:	a357      	add	r3, pc, #348	; (adr r3, 80080c0 <__ieee754_log+0x340>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	4680      	mov	r8, r0
 8007f68:	4689      	mov	r9, r1
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	f7f8 fb0f 	bl	8000590 <__aeabi_dmul>
 8007f72:	a355      	add	r3, pc, #340	; (adr r3, 80080c8 <__ieee754_log+0x348>)
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	f7f8 f954 	bl	8000224 <__adddf3>
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	463b      	mov	r3, r7
 8007f80:	f7f8 fb06 	bl	8000590 <__aeabi_dmul>
 8007f84:	a352      	add	r3, pc, #328	; (adr r3, 80080d0 <__ieee754_log+0x350>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 f94b 	bl	8000224 <__adddf3>
 8007f8e:	4632      	mov	r2, r6
 8007f90:	463b      	mov	r3, r7
 8007f92:	f7f8 fafd 	bl	8000590 <__aeabi_dmul>
 8007f96:	460b      	mov	r3, r1
 8007f98:	4602      	mov	r2, r0
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	f7f8 f941 	bl	8000224 <__adddf3>
 8007fa2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007fa6:	9b01      	ldr	r3, [sp, #4]
 8007fa8:	3551      	adds	r5, #81	; 0x51
 8007faa:	431d      	orrs	r5, r3
 8007fac:	2d00      	cmp	r5, #0
 8007fae:	4680      	mov	r8, r0
 8007fb0:	4689      	mov	r9, r1
 8007fb2:	dd48      	ble.n	8008046 <__ieee754_log+0x2c6>
 8007fb4:	4b4e      	ldr	r3, [pc, #312]	; (80080f0 <__ieee754_log+0x370>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	4650      	mov	r0, sl
 8007fba:	4659      	mov	r1, fp
 8007fbc:	f7f8 fae8 	bl	8000590 <__aeabi_dmul>
 8007fc0:	4652      	mov	r2, sl
 8007fc2:	465b      	mov	r3, fp
 8007fc4:	f7f8 fae4 	bl	8000590 <__aeabi_dmul>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4606      	mov	r6, r0
 8007fce:	460f      	mov	r7, r1
 8007fd0:	4640      	mov	r0, r8
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	f7f8 f926 	bl	8000224 <__adddf3>
 8007fd8:	ec53 2b18 	vmov	r2, r3, d8
 8007fdc:	f7f8 fad8 	bl	8000590 <__aeabi_dmul>
 8007fe0:	4680      	mov	r8, r0
 8007fe2:	4689      	mov	r9, r1
 8007fe4:	b964      	cbnz	r4, 8008000 <__ieee754_log+0x280>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4630      	mov	r0, r6
 8007fec:	4639      	mov	r1, r7
 8007fee:	f7f8 f917 	bl	8000220 <__aeabi_dsub>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4650      	mov	r0, sl
 8007ff8:	4659      	mov	r1, fp
 8007ffa:	f7f8 f911 	bl	8000220 <__aeabi_dsub>
 8007ffe:	e6d6      	b.n	8007dae <__ieee754_log+0x2e>
 8008000:	a321      	add	r3, pc, #132	; (adr r3, 8008088 <__ieee754_log+0x308>)
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	ec51 0b19 	vmov	r0, r1, d9
 800800a:	f7f8 fac1 	bl	8000590 <__aeabi_dmul>
 800800e:	a320      	add	r3, pc, #128	; (adr r3, 8008090 <__ieee754_log+0x310>)
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	4604      	mov	r4, r0
 8008016:	460d      	mov	r5, r1
 8008018:	ec51 0b19 	vmov	r0, r1, d9
 800801c:	f7f8 fab8 	bl	8000590 <__aeabi_dmul>
 8008020:	4642      	mov	r2, r8
 8008022:	464b      	mov	r3, r9
 8008024:	f7f8 f8fe 	bl	8000224 <__adddf3>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4630      	mov	r0, r6
 800802e:	4639      	mov	r1, r7
 8008030:	f7f8 f8f6 	bl	8000220 <__aeabi_dsub>
 8008034:	4652      	mov	r2, sl
 8008036:	465b      	mov	r3, fp
 8008038:	f7f8 f8f2 	bl	8000220 <__aeabi_dsub>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4620      	mov	r0, r4
 8008042:	4629      	mov	r1, r5
 8008044:	e7d9      	b.n	8007ffa <__ieee754_log+0x27a>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4650      	mov	r0, sl
 800804c:	4659      	mov	r1, fp
 800804e:	f7f8 f8e7 	bl	8000220 <__aeabi_dsub>
 8008052:	ec53 2b18 	vmov	r2, r3, d8
 8008056:	f7f8 fa9b 	bl	8000590 <__aeabi_dmul>
 800805a:	4606      	mov	r6, r0
 800805c:	460f      	mov	r7, r1
 800805e:	2c00      	cmp	r4, #0
 8008060:	f43f af23 	beq.w	8007eaa <__ieee754_log+0x12a>
 8008064:	a308      	add	r3, pc, #32	; (adr r3, 8008088 <__ieee754_log+0x308>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	ec51 0b19 	vmov	r0, r1, d9
 800806e:	f7f8 fa8f 	bl	8000590 <__aeabi_dmul>
 8008072:	a307      	add	r3, pc, #28	; (adr r3, 8008090 <__ieee754_log+0x310>)
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	4604      	mov	r4, r0
 800807a:	460d      	mov	r5, r1
 800807c:	ec51 0b19 	vmov	r0, r1, d9
 8008080:	e727      	b.n	8007ed2 <__ieee754_log+0x152>
 8008082:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80080d8 <__ieee754_log+0x358>
 8008086:	e694      	b.n	8007db2 <__ieee754_log+0x32>
 8008088:	fee00000 	.word	0xfee00000
 800808c:	3fe62e42 	.word	0x3fe62e42
 8008090:	35793c76 	.word	0x35793c76
 8008094:	3dea39ef 	.word	0x3dea39ef
 8008098:	55555555 	.word	0x55555555
 800809c:	3fd55555 	.word	0x3fd55555
 80080a0:	df3e5244 	.word	0xdf3e5244
 80080a4:	3fc2f112 	.word	0x3fc2f112
 80080a8:	96cb03de 	.word	0x96cb03de
 80080ac:	3fc74664 	.word	0x3fc74664
 80080b0:	94229359 	.word	0x94229359
 80080b4:	3fd24924 	.word	0x3fd24924
 80080b8:	55555593 	.word	0x55555593
 80080bc:	3fe55555 	.word	0x3fe55555
 80080c0:	d078c69f 	.word	0xd078c69f
 80080c4:	3fc39a09 	.word	0x3fc39a09
 80080c8:	1d8e78af 	.word	0x1d8e78af
 80080cc:	3fcc71c5 	.word	0x3fcc71c5
 80080d0:	9997fa04 	.word	0x9997fa04
 80080d4:	3fd99999 	.word	0x3fd99999
	...
 80080e0:	c3500000 	.word	0xc3500000
 80080e4:	43500000 	.word	0x43500000
 80080e8:	7fefffff 	.word	0x7fefffff
 80080ec:	3ff00000 	.word	0x3ff00000
 80080f0:	3fe00000 	.word	0x3fe00000
 80080f4:	00000000 	.word	0x00000000

080080f8 <nan>:
 80080f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008100 <nan+0x8>
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	00000000 	.word	0x00000000
 8008104:	7ff80000 	.word	0x7ff80000

08008108 <_init>:
 8008108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810a:	bf00      	nop
 800810c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800810e:	bc08      	pop	{r3}
 8008110:	469e      	mov	lr, r3
 8008112:	4770      	bx	lr

08008114 <_fini>:
 8008114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008116:	bf00      	nop
 8008118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800811a:	bc08      	pop	{r3}
 800811c:	469e      	mov	lr, r3
 800811e:	4770      	bx	lr
