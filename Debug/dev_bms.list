
dev_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005238  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005654  08005654  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800565c  0800565c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  080056d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080056d4  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001088c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c0  00000000  00000000  0003092c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00032cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00033948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e239  00000000  00000000  000344b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcf6  00000000  00000000  000526f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9f67  00000000  00000000  000623e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c34e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000367c  00000000  00000000  0011c3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080053f8 	.word	0x080053f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	080053f8 	.word	0x080053f8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	737b      	strb	r3, [r7, #13]
 8000ea8:	e019      	b.n	8000ede <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8000eaa:	89fb      	ldrh	r3, [r7, #14]
 8000eac:	09db      	lsrs	r3, r3, #7
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	7b7b      	ldrb	r3, [r7, #13]
 8000eb2:	6839      	ldr	r1, [r7, #0]
 8000eb4:	440b      	add	r3, r1
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	4053      	eors	r3, r2
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	817b      	strh	r3, [r7, #10]

		remainder = (remainder<<8)^crc15Table[addr];
 8000ec2:	89fb      	ldrh	r3, [r7, #14]
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	897b      	ldrh	r3, [r7, #10]
 8000eca:	490b      	ldr	r1, [pc, #44]	; (8000ef8 <pec15_calc+0x64>)
 8000ecc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4053      	eors	r3, r2
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000ed8:	7b7b      	ldrb	r3, [r7, #13]
 8000eda:	3301      	adds	r3, #1
 8000edc:	737b      	strb	r3, [r7, #13]
 8000ede:	7b7a      	ldrb	r2, [r7, #13]
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d3e1      	bcc.n	8000eaa <pec15_calc+0x16>

	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b29b      	uxth	r3, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	08005410 	.word	0x08005410

08000efc <check_pec>:

/* Helper function that increments PEC counters */
void check_pec(uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 8000efc:	b480      	push	{r7}
 8000efe:	b08b      	sub	sp, #44	; 0x2c
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
	switch (reg)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	f200 81ce 	bhi.w	80012ac <check_pec+0x3b0>
 8000f10:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <check_pec+0x1c>)
 8000f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f16:	bf00      	nop
 8000f18:	08000f2d 	.word	0x08000f2d
 8000f1c:	08001055 	.word	0x08001055
 8000f20:	0800111d 	.word	0x0800111d
 8000f24:	080011e5 	.word	0x080011e5
 8000f28:	08000fc1 	.word	0x08000fc1
	{
		case CFGR:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f30:	e042      	b.n	8000fb8 <check_pec+0xbc>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 8000f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	019b      	lsls	r3, r3, #6
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	4413      	add	r3, r2
 8000f42:	f8b3 011a 	ldrh.w	r0, [r3, #282]	; 0x11a
 8000f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	019b      	lsls	r3, r3, #6
 8000f50:	461a      	mov	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	7b9b      	ldrb	r3, [r3, #14]
 8000f58:	b299      	uxth	r1, r3
 8000f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	019b      	lsls	r3, r3, #6
 8000f64:	461a      	mov	r2, r3
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	1842      	adds	r2, r0, r1
 8000f6c:	b292      	uxth	r2, r2
 8000f6e:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 8000f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	019b      	lsls	r3, r3, #6
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	f8b3 011c 	ldrh.w	r0, [r3, #284]	; 0x11c
 8000f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	019b      	lsls	r3, r3, #6
 8000f90:	461a      	mov	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	7b9b      	ldrb	r3, [r3, #14]
 8000f98:	b299      	uxth	r1, r3
 8000f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	019b      	lsls	r3, r3, #6
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	4413      	add	r3, r2
 8000faa:	1842      	adds	r2, r0, r1
 8000fac:	b292      	uxth	r2, r2
 8000fae:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	ddb9      	ble.n	8000f32 <check_pec+0x36>
		  }
		break;
 8000fbe:	e176      	b.n	80012ae <check_pec+0x3b2>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
 8000fc4:	e042      	b.n	800104c <check_pec+0x150>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8000fc6:	6a3a      	ldr	r2, [r7, #32]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	019b      	lsls	r3, r3, #6
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	f8b3 011a 	ldrh.w	r0, [r3, #282]	; 0x11a
 8000fda:	6a3a      	ldr	r2, [r7, #32]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	019b      	lsls	r3, r3, #6
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	7f5b      	ldrb	r3, [r3, #29]
 8000fec:	b299      	uxth	r1, r3
 8000fee:	6a3a      	ldr	r2, [r7, #32]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	019b      	lsls	r3, r3, #6
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	1842      	adds	r2, r0, r1
 8001000:	b292      	uxth	r2, r2
 8001002:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8001006:	6a3a      	ldr	r2, [r7, #32]
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	019b      	lsls	r3, r3, #6
 8001010:	461a      	mov	r2, r3
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	4413      	add	r3, r2
 8001016:	f8b3 011c 	ldrh.w	r0, [r3, #284]	; 0x11c
 800101a:	6a3a      	ldr	r2, [r7, #32]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	019b      	lsls	r3, r3, #6
 8001024:	461a      	mov	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	7f5b      	ldrb	r3, [r3, #29]
 800102c:	b299      	uxth	r1, r3
 800102e:	6a3a      	ldr	r2, [r7, #32]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	019b      	lsls	r3, r3, #6
 8001038:	461a      	mov	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	1842      	adds	r2, r0, r1
 8001040:	b292      	uxth	r2, r2
 8001042:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	3301      	adds	r3, #1
 800104a:	623b      	str	r3, [r7, #32]
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	2b00      	cmp	r3, #0
 8001050:	ddb9      	ble.n	8000fc6 <check_pec+0xca>
		  }
		break;
 8001052:	e12c      	b.n	80012ae <check_pec+0x3b2>
		case CELL:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e05c      	b.n	8001114 <check_pec+0x218>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	e04f      	b.n	8001100 <check_pec+0x204>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	019b      	lsls	r3, r3, #6
 800106a:	461a      	mov	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	4413      	add	r3, r2
 8001070:	f8b3 011a 	ldrh.w	r0, [r3, #282]	; 0x11a
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	019b      	lsls	r3, r3, #6
 800107e:	461a      	mov	r2, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	441a      	add	r2, r3
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	4413      	add	r3, r2
 8001088:	3342      	adds	r3, #66	; 0x42
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b299      	uxth	r1, r3
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	019b      	lsls	r3, r3, #6
 8001098:	461a      	mov	r2, r3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	4413      	add	r3, r2
 800109e:	1842      	adds	r2, r0, r1
 80010a0:	b292      	uxth	r2, r2
 80010a2:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	019b      	lsls	r3, r3, #6
 80010b0:	461a      	mov	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	441a      	add	r2, r3
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	338c      	adds	r3, #140	; 0x8c
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	88d8      	ldrh	r0, [r3, #6]
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	019b      	lsls	r3, r3, #6
 80010ca:	461a      	mov	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	441a      	add	r2, r3
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	4413      	add	r3, r2
 80010d4:	3342      	adds	r3, #66	; 0x42
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b299      	uxth	r1, r3
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	019b      	lsls	r3, r3, #6
 80010e4:	461a      	mov	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	441a      	add	r2, r3
 80010ea:	1843      	adds	r3, r0, r1
 80010ec:	b299      	uxth	r1, r3
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	338c      	adds	r3, #140	; 0x8c
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	460a      	mov	r2, r1
 80010f8:	80da      	strh	r2, [r3, #6]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8001106:	461a      	mov	r2, r3
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	4293      	cmp	r3, r2
 800110c:	dba8      	blt.n	8001060 <check_pec+0x164>
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3301      	adds	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	2b00      	cmp	r3, #0
 8001118:	dd9f      	ble.n	800105a <check_pec+0x15e>
			}
		  }
		break;
 800111a:	e0c8      	b.n	80012ae <check_pec+0x3b2>
		case AUX:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e05c      	b.n	80011dc <check_pec+0x2e0>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	e04f      	b.n	80011c8 <check_pec+0x2cc>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	019b      	lsls	r3, r3, #6
 8001132:	461a      	mov	r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	f8b3 011a 	ldrh.w	r0, [r3, #282]	; 0x11a
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	019b      	lsls	r3, r3, #6
 8001146:	461a      	mov	r2, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	441a      	add	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4413      	add	r3, r2
 8001150:	3360      	adds	r3, #96	; 0x60
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b299      	uxth	r1, r3
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	019b      	lsls	r3, r3, #6
 8001160:	461a      	mov	r2, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	4413      	add	r3, r2
 8001166:	1842      	adds	r2, r0, r1
 8001168:	b292      	uxth	r2, r2
 800116a:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	019b      	lsls	r3, r3, #6
 8001178:	461a      	mov	r2, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	441a      	add	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	3394      	adds	r3, #148	; 0x94
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	8858      	ldrh	r0, [r3, #2]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	019b      	lsls	r3, r3, #6
 8001192:	461a      	mov	r2, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	441a      	add	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4413      	add	r3, r2
 800119c:	3360      	adds	r3, #96	; 0x60
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b299      	uxth	r1, r3
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	019b      	lsls	r3, r3, #6
 80011ac:	461a      	mov	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	441a      	add	r2, r3
 80011b2:	1843      	adds	r3, r0, r1
 80011b4:	b299      	uxth	r1, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	3394      	adds	r3, #148	; 0x94
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	460a      	mov	r2, r1
 80011c0:	805a      	strh	r2, [r3, #2]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	3301      	adds	r3, #1
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80011ce:	461a      	mov	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4293      	cmp	r3, r2
 80011d4:	dba8      	blt.n	8001128 <check_pec+0x22c>
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dd9f      	ble.n	8001122 <check_pec+0x226>
			}
		  }

		break;
 80011e2:	e064      	b.n	80012ae <check_pec+0x3b2>
		case STAT:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e05c      	b.n	80012a4 <check_pec+0x3a8>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	e04f      	b.n	8001290 <check_pec+0x394>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	019b      	lsls	r3, r3, #6
 80011fa:	461a      	mov	r2, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	f8b3 011a 	ldrh.w	r0, [r3, #282]	; 0x11a
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	019b      	lsls	r3, r3, #6
 800120e:	461a      	mov	r2, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	441a      	add	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4413      	add	r3, r2
 8001218:	33c5      	adds	r3, #197	; 0xc5
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b299      	uxth	r1, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	019b      	lsls	r3, r3, #6
 8001228:	461a      	mov	r2, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	4413      	add	r3, r2
 800122e:	1842      	adds	r2, r0, r1
 8001230:	b292      	uxth	r2, r2
 8001232:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	019b      	lsls	r3, r3, #6
 8001240:	461a      	mov	r2, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	441a      	add	r2, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	3398      	adds	r3, #152	; 0x98
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	8858      	ldrh	r0, [r3, #2]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	019b      	lsls	r3, r3, #6
 800125a:	461a      	mov	r2, r3
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	441a      	add	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4413      	add	r3, r2
 8001264:	33c5      	adds	r3, #197	; 0xc5
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b299      	uxth	r1, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	461a      	mov	r2, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	441a      	add	r2, r3
 800127a:	1843      	adds	r3, r0, r1
 800127c:	b299      	uxth	r1, r3
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3398      	adds	r3, #152	; 0x98
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	460a      	mov	r2, r1
 8001288:	805a      	strh	r2, [r3, #2]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	3301      	adds	r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8001296:	3b01      	subs	r3, #1
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	429a      	cmp	r2, r3
 800129c:	dba8      	blt.n	80011f0 <check_pec+0x2f4>
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dd9f      	ble.n	80011ea <check_pec+0x2ee>
			}
		  }
		break;
 80012aa:	e000      	b.n	80012ae <check_pec+0x3b2>
		default:
		break;
 80012ac:	bf00      	nop
	}
}
 80012ae:	bf00      	nop
 80012b0:	372c      	adds	r7, #44	; 0x2c
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop

080012bc <cmd_68>:


/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2], SPI_HandleTypeDef *hspi) //The command to be transmitted
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	//uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	785b      	ldrb	r3, [r3, #1]
 80012d0:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	4619      	mov	r1, r3
 80012d8:	2002      	movs	r0, #2
 80012da:	f7ff fddb 	bl	8000e94 <pec15_calc>
 80012de:	4603      	mov	r3, r0
 80012e0:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80012e2:	89fb      	ldrh	r3, [r7, #14]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80012ec:	89fb      	ldrh	r3, [r7, #14]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	72fb      	strb	r3, [r7, #11]


	wakeup_idle(hspi);
 80012f2:	6838      	ldr	r0, [r7, #0]
 80012f4:	f000 f80b 	bl	800130e <wakeup_idle>
	spi_write_array(4,cmd,hspi);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	2004      	movs	r0, #4
 8001302:	f000 f9fc 	bl	80016fe <spi_write_array>

}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <wakeup_idle>:


/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(SPI_HandleTypeDef *hspi) //Number of ICs in the system
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
	for (int i =0; i<ic_number; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e006      	b.n	800132a <wakeup_idle+0x1c>
		{
		  spi_read_byte(0xff, hspi);
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	20ff      	movs	r0, #255	; 0xff
 8001320:	f000 fa36 	bl	8001790 <spi_read_byte>
	for (int i =0; i<ic_number; i++)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3301      	adds	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	ddf5      	ble.n	800131c <wakeup_idle+0xe>
		}
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <wakeup_sleep>:

/*!
 Wake the LTC681x from the sleep state
 @return void
 */
void wakeup_sleep(){
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
	for (int i =0; i<ic_number; i++)
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	e00f      	b.n	8001366 <wakeup_sleep+0x2c>
			{
			   cs_low(CS_PIN);
 8001346:	200a      	movs	r0, #10
 8001348:	f000 f984 	bl	8001654 <cs_low>
			   delay_u(400); // Guarantees the LTC681x will be in standby ///if it doesnt work use delay_u(300)
 800134c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001350:	f000 f994 	bl	800167c <delay_u>
			   cs_high(CS_PIN);
 8001354:	200a      	movs	r0, #10
 8001356:	f000 f987 	bl	8001668 <cs_high>
			   delay_u(10); ///if it doesnt work use delay_u(10)
 800135a:	200a      	movs	r0, #10
 800135c:	f000 f98e 	bl	800167c <delay_u>
	for (int i =0; i<ic_number; i++)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3301      	adds	r3, #1
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	ddec      	ble.n	8001346 <wakeup_sleep+0xc>
			}
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <parse_cells>:
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					//SPI_HandleTypeDef *hspi
					)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b088      	sub	sp, #32
 800137a:	af00      	add	r7, sp, #0
 800137c:	60ba      	str	r2, [r7, #8]
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	460b      	mov	r3, r1
 8001386:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 8001388:	2306      	movs	r3, #6
 800138a:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 800138c:	2303      	movs	r3, #3
 800138e:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 800139a:	2300      	movs	r3, #0
 800139c:	777b      	strb	r3, [r7, #29]
 800139e:	e020      	b.n	80013e2 <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 80013a0:	7fbb      	ldrb	r3, [r7, #30]
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	7fbb      	ldrb	r3, [r7, #30]
 80013ac:	3301      	adds	r3, #1
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	440b      	add	r3, r1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80013be:	7f7a      	ldrb	r2, [r7, #29]
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	7ef9      	ldrb	r1, [r7, #27]
 80013c6:	fb01 f303 	mul.w	r3, r1, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	8aba      	ldrh	r2, [r7, #20]
 80013d4:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 80013d6:	7fbb      	ldrb	r3, [r7, #30]
 80013d8:	3302      	adds	r3, #2
 80013da:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80013dc:	7f7b      	ldrb	r3, [r7, #29]
 80013de:	3301      	adds	r3, #1
 80013e0:	777b      	strb	r3, [r7, #29]
 80013e2:	7f7a      	ldrb	r2, [r7, #29]
 80013e4:	7efb      	ldrb	r3, [r7, #27]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d3da      	bcc.n	80013a0 <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 80013ea:	7fbb      	ldrb	r3, [r7, #30]
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	4413      	add	r3, r2
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	7fbb      	ldrb	r3, [r7, #30]
 80013f8:	3301      	adds	r3, #1
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	440b      	add	r3, r1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b21b      	sxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b21b      	sxth	r3, r3
 8001406:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	461a      	mov	r2, r3
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	441a      	add	r2, r3
 8001412:	7f3b      	ldrb	r3, [r7, #28]
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fd3c 	bl	8000e94 <pec15_calc>
 800141c:	4603      	mov	r3, r0
 800141e:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 8001420:	8b3a      	ldrh	r2, [r7, #24]
 8001422:	8afb      	ldrh	r3, [r7, #22]
 8001424:	429a      	cmp	r2, r3
 8001426:	d008      	beq.n	800143a <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8001428:	2301      	movs	r3, #1
 800142a:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 800142c:	7bbb      	ldrb	r3, [r7, #14]
 800142e:	3b01      	subs	r3, #1
 8001430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001432:	4413      	add	r3, r2
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	e005      	b.n	8001446 <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	3b01      	subs	r3, #1
 800143e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001440:	4413      	add	r3, r2
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8001446:	7fbb      	ldrb	r3, [r7, #30]
 8001448:	3302      	adds	r3, #2
 800144a:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 800144c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <rdaux_reg>:


void rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t *data, //Array of the unparsed auxiliary codes
					   SPI_HandleTypeDef *hspi
                      ){
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af02      	add	r7, sp, #8
 800145e:	4603      	mov	r3, r0
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	73fb      	strb	r3, [r7, #15]

	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 8001466:	2308      	movs	r3, #8
 8001468:	75fb      	strb	r3, [r7, #23]
		uint8_t cmd[4];
		uint16_t cmd_pec;

		if (reg == 1)     //Read back auxiliary group A
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d104      	bne.n	800147a <rdaux_reg+0x22>
		{
			cmd[1] = 0x0C;
 8001470:	230c      	movs	r3, #12
 8001472:	747b      	strb	r3, [r7, #17]
			cmd[0] = 0x00;
 8001474:	2300      	movs	r3, #0
 8001476:	743b      	strb	r3, [r7, #16]
 8001478:	e01b      	b.n	80014b2 <rdaux_reg+0x5a>
		}
		else if (reg == 2)  //Read back auxiliary group B
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d104      	bne.n	800148a <rdaux_reg+0x32>
		{
			cmd[1] = 0x0E;
 8001480:	230e      	movs	r3, #14
 8001482:	747b      	strb	r3, [r7, #17]
			cmd[0] = 0x00;
 8001484:	2300      	movs	r3, #0
 8001486:	743b      	strb	r3, [r7, #16]
 8001488:	e013      	b.n	80014b2 <rdaux_reg+0x5a>
		}
		else if (reg == 3)  //Read back auxiliary group C
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d104      	bne.n	800149a <rdaux_reg+0x42>
		{
			cmd[1] = 0x0D;
 8001490:	230d      	movs	r3, #13
 8001492:	747b      	strb	r3, [r7, #17]
			cmd[0] = 0x00;
 8001494:	2300      	movs	r3, #0
 8001496:	743b      	strb	r3, [r7, #16]
 8001498:	e00b      	b.n	80014b2 <rdaux_reg+0x5a>
		}
		else if (reg == 4)  //Read back auxiliary group D
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	2b04      	cmp	r3, #4
 800149e:	d104      	bne.n	80014aa <rdaux_reg+0x52>
		{
			cmd[1] = 0x0F;
 80014a0:	230f      	movs	r3, #15
 80014a2:	747b      	strb	r3, [r7, #17]
			cmd[0] = 0x00;
 80014a4:	2300      	movs	r3, #0
 80014a6:	743b      	strb	r3, [r7, #16]
 80014a8:	e003      	b.n	80014b2 <rdaux_reg+0x5a>
		}
		else          //Read back auxiliary group A
		{
			cmd[1] = 0x0C;
 80014aa:	230c      	movs	r3, #12
 80014ac:	747b      	strb	r3, [r7, #17]
			cmd[0] = 0x00;
 80014ae:	2300      	movs	r3, #0
 80014b0:	743b      	strb	r3, [r7, #16]
		}

		cmd_pec = pec15_calc(2, cmd);
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	4619      	mov	r1, r3
 80014b8:	2002      	movs	r0, #2
 80014ba:	f7ff fceb 	bl	8000e94 <pec15_calc>
 80014be:	4603      	mov	r3, r0
 80014c0:	82bb      	strh	r3, [r7, #20]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 80014c2:	8abb      	ldrh	r3, [r7, #20]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	74bb      	strb	r3, [r7, #18]
		cmd[3] = (uint8_t)(cmd_pec);
 80014cc:	8abb      	ldrh	r3, [r7, #20]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	74fb      	strb	r3, [r7, #19]

		wakeup_idle(hspi);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff1b 	bl	800130e <wakeup_idle>
		spi_write_read(cmd,4,data,(REG_LEN*ic_number),hspi);
 80014d8:	7dfa      	ldrb	r2, [r7, #23]
 80014da:	f107 0010 	add.w	r0, r7, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4613      	mov	r3, r2
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	2104      	movs	r1, #4
 80014e8:	f000 f928 	bl	800173c <spi_write_read>

}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <rdaux>:

uint8_t rdaux(cell_asic *ic,//!<  Array of the parsed aux codes
		 SPI_HandleTypeDef *hspi){
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b08b      	sub	sp, #44	; 0x2c
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	uint8_t data[NUM_RX_BYT * ic_number];
	    int8_t pec_error = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
	    uint8_t c_ic = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	77fb      	strb	r3, [r7, #31]

	    for (uint8_t gpio_reg = 1; gpio_reg < ic[0].ic_reg.num_gpio_reg + 1; gpio_reg++) {
 8001506:	2301      	movs	r3, #1
 8001508:	77bb      	strb	r3, [r7, #30]
 800150a:	e03f      	b.n	800158c <rdaux+0x98>

	    	rdaux_reg(gpio_reg, data, hspi);
 800150c:	f107 010c 	add.w	r1, r7, #12
 8001510:	7fbb      	ldrb	r3, [r7, #30]
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff9f 	bl	8001458 <rdaux_reg>

	    	for (int current_ic = 0; current_ic<ic_number; current_ic++)
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	e02f      	b.n	8001580 <rdaux+0x8c>
	    				{
	    					if (ic->isospi_reverse == false)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001526:	f083 0301 	eor.w	r3, r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <rdaux+0x42>
	    					{
	    					  c_ic = current_ic;
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	77fb      	strb	r3, [r7, #31]
 8001534:	e003      	b.n	800153e <rdaux+0x4a>
	    					}
	    					else
	    					{
	    					  c_ic = ic_number - current_ic - 1;
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	425b      	negs	r3, r3
 800153c:	77fb      	strb	r3, [r7, #31]
	    					}
	    					pec_error = parse_cells(current_ic,gpio_reg, data,
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	b2d8      	uxtb	r0, r3
	    											&ic[c_ic].aux.a_codes[0],
 8001542:	7ffa      	ldrb	r2, [r7, #31]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	019b      	lsls	r3, r3, #6
 800154c:	461a      	mov	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
	    					pec_error = parse_cells(current_ic,gpio_reg, data,
 8001552:	f103 0448 	add.w	r4, r3, #72	; 0x48
	    											&ic[c_ic].aux.pec_match[0]);
 8001556:	7ffa      	ldrb	r2, [r7, #31]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	019b      	lsls	r3, r3, #6
 8001560:	461a      	mov	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
	    					pec_error = parse_cells(current_ic,gpio_reg, data,
 8001566:	3360      	adds	r3, #96	; 0x60
 8001568:	f107 020c 	add.w	r2, r7, #12
 800156c:	7fb9      	ldrb	r1, [r7, #30]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4623      	mov	r3, r4
 8001572:	f7ff ff00 	bl	8001376 <parse_cells>
 8001576:	4603      	mov	r3, r0
 8001578:	75fb      	strb	r3, [r7, #23]
	    	for (int current_ic = 0; current_ic<ic_number; current_ic++)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	3301      	adds	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	ddcc      	ble.n	8001520 <rdaux+0x2c>
	    for (uint8_t gpio_reg = 1; gpio_reg < ic[0].ic_reg.num_gpio_reg + 1; gpio_reg++) {
 8001586:	7fbb      	ldrb	r3, [r7, #30]
 8001588:	3301      	adds	r3, #1
 800158a:	77bb      	strb	r3, [r7, #30]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001592:	7fba      	ldrb	r2, [r7, #30]
 8001594:	429a      	cmp	r2, r3
 8001596:	d9b9      	bls.n	800150c <rdaux+0x18>
	    				}

	    }

	    check_pec(AUX, ic);
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	2002      	movs	r0, #2
 800159c:	f7ff fcae 	bl	8000efc <check_pec>
}
 80015a0:	bf00      	nop
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	; 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}

080015aa <adax>:

void adax( uint8_t MD, //!< ADC Conversion Mode
				  uint8_t CHG, //!< Sets which GPIO channels are converted
				  SPI_HandleTypeDef *hspi
				){
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	603a      	str	r2, [r7, #0]
 80015b4:	71fb      	strb	r3, [r7, #7]
 80015b6:	460b      	mov	r3, r1
 80015b8:	71bb      	strb	r3, [r7, #6]
		uint8_t cmd[4];
		uint8_t md_bits;

		md_bits = (MD & 0x02) >> 1;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	105b      	asrs	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
		cmd[0] = md_bits + 0x04;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	3304      	adds	r3, #4
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	723b      	strb	r3, [r7, #8]
		md_bits = (MD & 0x01) << 7;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	01db      	lsls	r3, r3, #7
 80015d2:	73fb      	strb	r3, [r7, #15]
		cmd[1] = md_bits + 0x60 + CHG ;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	4413      	add	r3, r2
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	3360      	adds	r3, #96	; 0x60
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	727b      	strb	r3, [r7, #9]

		cmd_68(cmd,hspi);
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fe67 	bl	80012bc <cmd_68>
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <clraux>:

void clraux(SPI_HandleTypeDef *hspi)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
	uint8_t cmd[2]= {0x07 , 0x12};
 80015fe:	f241 2307 	movw	r3, #4615	; 0x1207
 8001602:	81bb      	strh	r3, [r7, #12]
	cmd_68(cmd,hspi);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fe56 	bl	80012bc <cmd_68>
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <stack_temp>:
	rdcv(ic, hspi);
	clrcell(hspi);

}

void stack_temp(cell_asic *ic ,SPI_HandleTypeDef *hspi){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
		wakeup_sleep();
 8001622:	f7ff fe8a 	bl	800133a <wakeup_sleep>

		adax(1, 0, hspi);
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	2100      	movs	r1, #0
 800162a:	2001      	movs	r0, #1
 800162c:	f7ff ffbd 	bl	80015aa <adax>
		delay_m(15);
 8001630:	200f      	movs	r0, #15
 8001632:	f000 f857 	bl	80016e4 <delay_m>
		rdaux(ic, hspi);
 8001636:	6839      	ldr	r1, [r7, #0]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff5b 	bl	80014f4 <rdaux>
		clraux(hspi);
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	f7ff ffd9 	bl	80015f6 <clraux>

		temp_calc(ic_number, ic);
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	2001      	movs	r0, #1
 8001648:	f000 fb42 	bl	8001cd0 <temp_calc>

}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <cs_low>:
#define gpio_pin GPIO_PIN_4
#define gpio_type GPIOA



void cs_low(){
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(gpio_type, gpio_pin, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2110      	movs	r1, #16
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f000 ff0c 	bl	800247c <HAL_GPIO_WritePin>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <cs_high>:

void cs_high(){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(gpio_type, gpio_pin, 1);
 800166c:	2201      	movs	r2, #1
 800166e:	2110      	movs	r1, #16
 8001670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001674:	f000 ff02 	bl	800247c <HAL_GPIO_WritePin>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <delay_u>:


///////////////////////////////////
// library https://github.com/keatis/dwt_delay/
void delay_u(uint32_t microseconds)// microseconds
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	 CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <delay_u+0x58>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <delay_u+0x58>)
 800168a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800168e:	60d3      	str	r3, [r2, #12]
	    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <delay_u+0x5c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <delay_u+0x5c>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6013      	str	r3, [r2, #0]
	    // Get the current number of clock cycles
	    uint32_t const startTicks = DWT->CYCCNT;
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <delay_u+0x5c>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	60fb      	str	r3, [r7, #12]
	    // Calculate the number of clock cycles for the desired delay
	    uint32_t const delayTicks = (SystemCoreClock / 1000000) * microseconds;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <delay_u+0x60>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <delay_u+0x64>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	0c9a      	lsrs	r2, r3, #18
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	60bb      	str	r3, [r7, #8]
	    // Wait until the number of clock cycles has elapsed
	    while (DWT->CYCCNT - startTicks < delayTicks);
 80016b6:	bf00      	nop
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <delay_u+0x5c>)
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d8f8      	bhi.n	80016b8 <delay_u+0x3c>
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000edf0 	.word	0xe000edf0
 80016d8:	e0001000 	.word	0xe0001000
 80016dc:	20000000 	.word	0x20000000
 80016e0:	431bde83 	.word	0x431bde83

080016e4 <delay_m>:
//////////////////////////////////

void delay_m(uint16_t milli)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(milli);
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fc3b 	bl	8001f6c <HAL_Delay>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <spi_write_array>:
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[], //Array of bytes to be written on the SPI port
					SPI_HandleTypeDef *hspi
					)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(gpio_type, gpio_pin, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2110      	movs	r1, #16
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f000 feb2 	bl	800247c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, data,len,1000); // might be changed in future
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	b29a      	uxth	r2, r3
 800171c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f001 ff35 	bl	8003592 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(gpio_type, gpio_pin, 1);
 8001728:	2201      	movs	r2, #1
 800172a:	2110      	movs	r1, #16
 800172c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001730:	f000 fea4 	bl	800247c <HAL_GPIO_WritePin>

}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
        uint8_t tx_len, //length of the tx data arry
        uint8_t *rx_data,//Input: array that will store the data read by the SPI port
        uint8_t rx_len ,//Option: number of bytes to be read from the SPI port
		SPI_HandleTypeDef * hspi //spi reference
       ){
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	461a      	mov	r2, r3
 8001748:	460b      	mov	r3, r1
 800174a:	72fb      	strb	r3, [r7, #11]
 800174c:	4613      	mov	r3, r2
 800174e:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(gpio_type, gpio_pin, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2110      	movs	r1, #16
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f000 fe90 	bl	800247c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(hspi, tx_Data, tx_len, 1000);
 800175c:	7afb      	ldrb	r3, [r7, #11]
 800175e:	b29a      	uxth	r2, r3
 8001760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001764:	68f9      	ldr	r1, [r7, #12]
 8001766:	69b8      	ldr	r0, [r7, #24]
 8001768:	f001 ff13 	bl	8003592 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, rx_data, rx_len, 1000);
 800176c:	7abb      	ldrb	r3, [r7, #10]
 800176e:	b29a      	uxth	r2, r3
 8001770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	69b8      	ldr	r0, [r7, #24]
 8001778:	f002 f879 	bl	800386e <HAL_SPI_Receive>

	HAL_GPIO_WritePin(gpio_type, gpio_pin, 1);
 800177c:	2201      	movs	r2, #1
 800177e:	2110      	movs	r1, #16
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f000 fe7a 	bl	800247c <HAL_GPIO_WritePin>

}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <spi_read_byte>:


uint8_t spi_read_byte(uint8_t tx_dat,SPI_HandleTypeDef * hspi)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	HAL_GPIO_WritePin(gpio_type, gpio_pin, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2110      	movs	r1, #16
 80017a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a4:	f000 fe6a 	bl	800247c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(hspi, &data, 1, 500);
 80017a8:	f107 010f 	add.w	r1, r7, #15
 80017ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017b0:	2201      	movs	r2, #1
 80017b2:	6838      	ldr	r0, [r7, #0]
 80017b4:	f002 f85b 	bl	800386e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(gpio_type, gpio_pin, 1);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2110      	movs	r1, #16
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c0:	f000 fe5c 	bl	800247c <HAL_GPIO_WritePin>

	return data;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d6:	f000 fb58 	bl	8001e8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017da:	f000 f815 	bl	8001808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017de:	f000 f8e9 	bl	80019b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017e2:	f000 f89b 	bl	800191c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80017e6:	f000 f85b 	bl	80018a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  cell_asic *c_a = (cell_asic *)malloc(ic_number);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f003 fb3c 	bl	8004e68 <malloc>
 80017f0:	4603      	mov	r3, r0
 80017f2:	607b      	str	r3, [r7, #4]

    /* USER CODE BEGIN 3 */

	  //cell_voltage(c_a, &hspi1);

	  stack_temp(c_a, &hspi1);
 80017f4:	4903      	ldr	r1, [pc, #12]	; (8001804 <main+0x34>)
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ff0e 	bl	8001618 <stack_temp>
	 // cell_asic c1 = c_a[0], c2 = c_a[1];




	  HAL_Delay(200);
 80017fc:	20c8      	movs	r0, #200	; 0xc8
 80017fe:	f000 fbb5 	bl	8001f6c <HAL_Delay>
	  stack_temp(c_a, &hspi1);
 8001802:	e7f7      	b.n	80017f4 <main+0x24>
 8001804:	2000008c 	.word	0x2000008c

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	; 0x50
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	2238      	movs	r2, #56	; 0x38
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f003 fb2e 	bl	8004e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800182a:	2000      	movs	r0, #0
 800182c:	f000 fe3e 	bl	80024ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001830:	2302      	movs	r3, #2
 8001832:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183a:	2340      	movs	r3, #64	; 0x40
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183e:	2302      	movs	r3, #2
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001842:	2302      	movs	r3, #2
 8001844:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001846:	2304      	movs	r3, #4
 8001848:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800184a:	2355      	movs	r3, #85	; 0x55
 800184c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800184e:	2302      	movs	r3, #2
 8001850:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001852:	2302      	movs	r3, #2
 8001854:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001856:	2302      	movs	r3, #2
 8001858:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185a:	f107 0318 	add.w	r3, r7, #24
 800185e:	4618      	mov	r0, r3
 8001860:	f000 fec8 	bl	80025f4 <HAL_RCC_OscConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800186a:	f000 f8f9 	bl	8001a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186e:	230f      	movs	r3, #15
 8001870:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001872:	2303      	movs	r3, #3
 8001874:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2104      	movs	r1, #4
 8001886:	4618      	mov	r0, r3
 8001888:	f001 f9cc 	bl	8002c24 <HAL_RCC_ClockConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001892:	f000 f8e5 	bl	8001a60 <Error_Handler>
  }
}
 8001896:	bf00      	nop
 8001898:	3750      	adds	r7, #80	; 0x50
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_SPI1_Init+0x74>)
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <MX_SPI1_Init+0x78>)
 80018a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_SPI1_Init+0x74>)
 80018ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_SPI1_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <MX_SPI1_Init+0x74>)
 80018ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MX_SPI1_Init+0x74>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <MX_SPI1_Init+0x74>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_SPI1_Init+0x74>)
 80018ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <MX_SPI1_Init+0x74>)
 80018d6:	2238      	movs	r2, #56	; 0x38
 80018d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_SPI1_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_SPI1_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <MX_SPI1_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_SPI1_Init+0x74>)
 80018ee:	2207      	movs	r2, #7
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <MX_SPI1_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_SPI1_Init+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_SPI1_Init+0x74>)
 8001900:	f001 fd9c 	bl	800343c <HAL_SPI_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800190a:	f000 f8a9 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000008c 	.word	0x2000008c
 8001918:	40013000 	.word	0x40013000

0800191c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <MX_USART2_UART_Init+0x90>)
 8001922:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <MX_USART2_UART_Init+0x94>)
 8001924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <MX_USART2_UART_Init+0x90>)
 8001928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800192c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <MX_USART2_UART_Init+0x90>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <MX_USART2_UART_Init+0x90>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <MX_USART2_UART_Init+0x90>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <MX_USART2_UART_Init+0x90>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <MX_USART2_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <MX_USART2_UART_Init+0x90>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <MX_USART2_UART_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <MX_USART2_UART_Init+0x90>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <MX_USART2_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001964:	4811      	ldr	r0, [pc, #68]	; (80019ac <MX_USART2_UART_Init+0x90>)
 8001966:	f002 fc81 	bl	800426c <HAL_UART_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001970:	f000 f876 	bl	8001a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001974:	2100      	movs	r1, #0
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <MX_USART2_UART_Init+0x90>)
 8001978:	f003 f982 	bl	8004c80 <HAL_UARTEx_SetTxFifoThreshold>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001982:	f000 f86d 	bl	8001a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001986:	2100      	movs	r1, #0
 8001988:	4808      	ldr	r0, [pc, #32]	; (80019ac <MX_USART2_UART_Init+0x90>)
 800198a:	f003 f9b7 	bl	8004cfc <HAL_UARTEx_SetRxFifoThreshold>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001994:	f000 f864 	bl	8001a60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_USART2_UART_Init+0x90>)
 800199a:	f003 f938 	bl	8004c0e <HAL_UARTEx_DisableFifoMode>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80019a4:	f000 f85c 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200000f0 	.word	0x200000f0
 80019b0:	40004400 	.word	0x40004400

080019b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2110      	movs	r1, #16
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a02:	f000 fd3b 	bl	800247c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0c:	4813      	ldr	r0, [pc, #76]	; (8001a5c <MX_GPIO_Init+0xa8>)
 8001a0e:	f000 fd35 	bl	800247c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a12:	2310      	movs	r3, #16
 8001a14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	4619      	mov	r1, r3
 8001a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2c:	f000 fba4 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4619      	mov	r1, r3
 8001a48:	4804      	ldr	r0, [pc, #16]	; (8001a5c <MX_GPIO_Init+0xa8>)
 8001a4a:	f000 fb95 	bl	8002178 <HAL_GPIO_Init>

}
 8001a4e:	bf00      	nop
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000400 	.word	0x48000400

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <Error_Handler+0x8>
	...

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6593      	str	r3, [r2, #88]	; 0x58
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <HAL_SPI_MspInit+0x7c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d128      	bne.n	8001b28 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_SPI_MspInit+0x80>)
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ada:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <HAL_SPI_MspInit+0x80>)
 8001adc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_SPI_MspInit+0x80>)
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_SPI_MspInit+0x80>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <HAL_SPI_MspInit+0x80>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_SPI_MspInit+0x80>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b06:	23e0      	movs	r3, #224	; 0xe0
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b16:	2305      	movs	r3, #5
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f000 fb28 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40013000 	.word	0x40013000
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b09a      	sub	sp, #104	; 0x68
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	2244      	movs	r2, #68	; 0x44
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 f98d 	bl	8004e78 <memset>
  if(huart->Instance==USART2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <HAL_UART_MspInit+0xa8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d136      	bne.n	8001bd6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 fa71 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b80:	f7ff ff6e 	bl	8001a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b84:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_UART_MspInit+0xac>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <HAL_UART_MspInit+0xac>)
 8001b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_UART_MspInit+0xac>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_UART_MspInit+0xac>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_UART_MspInit+0xac>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_UART_MspInit+0xac>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc4:	2307      	movs	r3, #7
 8001bc6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd2:	f000 fad1 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3768      	adds	r7, #104	; 0x68
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40021000 	.word	0x40021000

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <NMI_Handler+0x4>

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 f97c 	bl	8001f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <_sbrk+0x5c>)
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <_sbrk+0x60>)
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <_sbrk+0x64>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <_sbrk+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d207      	bcs.n	8001c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c6c:	f003 f8d2 	bl	8004e14 <__errno>
 8001c70:	4603      	mov	r3, r0
 8001c72:	220c      	movs	r2, #12
 8001c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e009      	b.n	8001c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <_sbrk+0x64>)
 8001c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20008000 	.word	0x20008000
 8001c9c:	00000400 	.word	0x00000400
 8001ca0:	20000180 	.word	0x20000180
 8001ca4:	20000198 	.word	0x20000198

08001ca8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <SystemInit+0x20>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb2:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <SystemInit+0x20>)
 8001cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00
 8001ccc:	00000000 	.word	0x00000000

08001cd0 <temp_calc>:
#ifndef done

#include "temp_calc.h"
#include "math.h"

void temp_calc(uint8_t total_ic, cell_asic *ic){
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
	float v, r, vv , t;
	for(int i = 0; i < total_ic; i++){
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	e091      	b.n	8001e06 <temp_calc+0x136>
		for(int j = 0; j < 10; j++){
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	e087      	b.n	8001df8 <temp_calc+0x128>
			vv =  ic[i].aux.a_codes[j];
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	019b      	lsls	r3, r3, #6
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	3224      	adds	r2, #36	; 0x24
 8001cfc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d08:	edc7 7a05 	vstr	s15, [r7, #20]
			v = vv/10000;
 8001d0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d10:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001e30 <temp_calc+0x160>
 8001d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d18:	edc7 7a04 	vstr	s15, [r7, #16]
			r = (v*10000)/(3-v);
 8001d1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d20:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001e30 <temp_calc+0x160>
 8001d24:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001d28:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001d2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d38:	edc7 7a03 	vstr	s15, [r7, #12]
			t = log(r/10000);
 8001d3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d40:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001e30 <temp_calc+0x160>
 8001d44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d48:	ee16 0a90 	vmov	r0, s13
 8001d4c:	f7fe fbc8 	bl	80004e0 <__aeabi_f2d>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	ec43 2b10 	vmov	d0, r2, r3
 8001d58:	f003 f94a 	bl	8004ff0 <log>
 8001d5c:	ec53 2b10 	vmov	r2, r3, d0
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe fec4 	bl	8000af0 <__aeabi_d2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60bb      	str	r3, [r7, #8]
			    t = t / 3660;
 8001d6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d70:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001e34 <temp_calc+0x164>
 8001d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d78:	edc7 7a02 	vstr	s15, [r7, #8]
			    t = t + 1/298.15;
 8001d7c:	68b8      	ldr	r0, [r7, #8]
 8001d7e:	f7fe fbaf 	bl	80004e0 <__aeabi_f2d>
 8001d82:	a327      	add	r3, pc, #156	; (adr r3, 8001e20 <temp_calc+0x150>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fa4c 	bl	8000224 <__adddf3>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe feac 	bl	8000af0 <__aeabi_d2f>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60bb      	str	r3, [r7, #8]
			    t = 1/t;
 8001d9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001da0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da8:	edc7 7a02 	vstr	s15, [r7, #8]

			    t -= 273.15;
 8001dac:	68b8      	ldr	r0, [r7, #8]
 8001dae:	f7fe fb97 	bl	80004e0 <__aeabi_f2d>
 8001db2:	a31d      	add	r3, pc, #116	; (adr r3, 8001e28 <temp_calc+0x158>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	f7fe fa32 	bl	8000220 <__aeabi_dsub>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7fe fe94 	bl	8000af0 <__aeabi_d2f>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60bb      	str	r3, [r7, #8]

			ic[i].aux.s_temp[j] = t;
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	019b      	lsls	r3, r3, #6
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	189c      	adds	r4, r3, r2
 8001ddc:	68b8      	ldr	r0, [r7, #8]
 8001dde:	f7fe fb7f 	bl	80004e0 <__aeabi_f2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	69b9      	ldr	r1, [r7, #24]
 8001de8:	310d      	adds	r1, #13
 8001dea:	00c9      	lsls	r1, r1, #3
 8001dec:	4421      	add	r1, r4
 8001dee:	e9c1 2300 	strd	r2, r3, [r1]
		for(int j = 0; j < 10; j++){
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b09      	cmp	r3, #9
 8001dfc:	f77f af74 	ble.w	8001ce8 <temp_calc+0x18>
	for(int i = 0; i < total_ic; i++){
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	3301      	adds	r3, #1
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	f6ff af69 	blt.w	8001ce2 <temp_calc+0x12>

		}
	}

}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	f3af 8000 	nop.w
 8001e20:	dcb5db83 	.word	0xdcb5db83
 8001e24:	3f6b79e1 	.word	0x3f6b79e1
 8001e28:	66666666 	.word	0x66666666
 8001e2c:	40711266 	.word	0x40711266
 8001e30:	461c4000 	.word	0x461c4000
 8001e34:	4564c000 	.word	0x4564c000

08001e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e38:	480d      	ldr	r0, [pc, #52]	; (8001e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e3e:	490e      	ldr	r1, [pc, #56]	; (8001e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e40:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <LoopForever+0xe>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e54:	4c0b      	ldr	r4, [pc, #44]	; (8001e84 <LoopForever+0x16>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e62:	f7ff ff21 	bl	8001ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e66:	f002 ffdb 	bl	8004e20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e6a:	f7ff fcb1 	bl	80017d0 <main>

08001e6e <LoopForever>:

LoopForever:
    b LoopForever
 8001e6e:	e7fe      	b.n	8001e6e <LoopForever>
  ldr   r0, =_estack
 8001e70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e7c:	08005664 	.word	0x08005664
  ldr r2, =_sbss
 8001e80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e84:	20000198 	.word	0x20000198

08001e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC1_2_IRQHandler>

08001e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e94:	2003      	movs	r0, #3
 8001e96:	f000 f93d 	bl	8002114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f000 f80e 	bl	8001ebc <HAL_InitTick>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	71fb      	strb	r3, [r7, #7]
 8001eaa:	e001      	b.n	8001eb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eac:	f7ff fdde 	bl	8001a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eb0:	79fb      	ldrb	r3, [r7, #7]

}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <HAL_InitTick+0x68>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d022      	beq.n	8001f16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_InitTick+0x6c>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <HAL_InitTick+0x68>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 f93a 	bl	800215e <HAL_SYSTICK_Config>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10f      	bne.n	8001f10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b0f      	cmp	r3, #15
 8001ef4:	d809      	bhi.n	8001f0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	f04f 30ff 	mov.w	r0, #4294967295
 8001efe:	f000 f914 	bl	800212a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <HAL_InitTick+0x70>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	e007      	b.n	8001f1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	e004      	b.n	8001f1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e001      	b.n	8001f1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000008 	.word	0x20000008
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_IncTick+0x1c>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_IncTick+0x20>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a03      	ldr	r2, [pc, #12]	; (8001f4c <HAL_IncTick+0x1c>)
 8001f40:	6013      	str	r3, [r2, #0]
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	20000184 	.word	0x20000184
 8001f50:	20000008 	.word	0x20000008

08001f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return uwTick;
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <HAL_GetTick+0x14>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000184 	.word	0x20000184

08001f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff ffee 	bl	8001f54 <HAL_GetTick>
 8001f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d004      	beq.n	8001f90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_Delay+0x40>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f90:	bf00      	nop
 8001f92:	f7ff ffdf 	bl	8001f54 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d8f7      	bhi.n	8001f92 <HAL_Delay+0x26>
  {
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000008 	.word	0x20000008

08001fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe2:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	60d3      	str	r3, [r2, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <__NVIC_GetPriorityGrouping+0x18>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0307 	and.w	r3, r3, #7
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	db0a      	blt.n	800203e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	490c      	ldr	r1, [pc, #48]	; (8002060 <__NVIC_SetPriority+0x4c>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	0112      	lsls	r2, r2, #4
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	440b      	add	r3, r1
 8002038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800203c:	e00a      	b.n	8002054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4908      	ldr	r1, [pc, #32]	; (8002064 <__NVIC_SetPriority+0x50>)
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	3b04      	subs	r3, #4
 800204c:	0112      	lsls	r2, r2, #4
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	440b      	add	r3, r1
 8002052:	761a      	strb	r2, [r3, #24]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000e100 	.word	0xe000e100
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f1c3 0307 	rsb	r3, r3, #7
 8002082:	2b04      	cmp	r3, #4
 8002084:	bf28      	it	cs
 8002086:	2304      	movcs	r3, #4
 8002088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3304      	adds	r3, #4
 800208e:	2b06      	cmp	r3, #6
 8002090:	d902      	bls.n	8002098 <NVIC_EncodePriority+0x30>
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3b03      	subs	r3, #3
 8002096:	e000      	b.n	800209a <NVIC_EncodePriority+0x32>
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	43d9      	mvns	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	4313      	orrs	r3, r2
         );
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	; 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e0:	d301      	bcc.n	80020e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00f      	b.n	8002106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <SysTick_Config+0x40>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ee:	210f      	movs	r1, #15
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f7ff ff8e 	bl	8002014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <SysTick_Config+0x40>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fe:	4b04      	ldr	r3, [pc, #16]	; (8002110 <SysTick_Config+0x40>)
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	e000e010 	.word	0xe000e010

08002114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff47 	bl	8001fb0 <__NVIC_SetPriorityGrouping>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002138:	f7ff ff5e 	bl	8001ff8 <__NVIC_GetPriorityGrouping>
 800213c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	6978      	ldr	r0, [r7, #20]
 8002144:	f7ff ff90 	bl	8002068 <NVIC_EncodePriority>
 8002148:	4602      	mov	r2, r0
 800214a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff5f 	bl	8002014 <__NVIC_SetPriority>
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffb2 	bl	80020d0 <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002186:	e15a      	b.n	800243e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 814c 	beq.w	8002438 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d005      	beq.n	80021b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d130      	bne.n	800221a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ee:	2201      	movs	r2, #1
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	f003 0201 	and.w	r2, r3, #1
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b03      	cmp	r3, #3
 8002224:	d017      	beq.n	8002256 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d123      	bne.n	80022aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	6939      	ldr	r1, [r7, #16]
 80022a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0203 	and.w	r2, r3, #3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80a6 	beq.w	8002438 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ec:	4b5b      	ldr	r3, [pc, #364]	; (800245c <HAL_GPIO_Init+0x2e4>)
 80022ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f0:	4a5a      	ldr	r2, [pc, #360]	; (800245c <HAL_GPIO_Init+0x2e4>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6613      	str	r3, [r2, #96]	; 0x60
 80022f8:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_GPIO_Init+0x2e4>)
 80022fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002304:	4a56      	ldr	r2, [pc, #344]	; (8002460 <HAL_GPIO_Init+0x2e8>)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	089b      	lsrs	r3, r3, #2
 800230a:	3302      	adds	r3, #2
 800230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800232e:	d01f      	beq.n	8002370 <HAL_GPIO_Init+0x1f8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <HAL_GPIO_Init+0x2ec>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d019      	beq.n	800236c <HAL_GPIO_Init+0x1f4>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a4b      	ldr	r2, [pc, #300]	; (8002468 <HAL_GPIO_Init+0x2f0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_GPIO_Init+0x1f0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a4a      	ldr	r2, [pc, #296]	; (800246c <HAL_GPIO_Init+0x2f4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00d      	beq.n	8002364 <HAL_GPIO_Init+0x1ec>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a49      	ldr	r2, [pc, #292]	; (8002470 <HAL_GPIO_Init+0x2f8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <HAL_GPIO_Init+0x1e8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a48      	ldr	r2, [pc, #288]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_GPIO_Init+0x1e4>
 8002358:	2305      	movs	r3, #5
 800235a:	e00a      	b.n	8002372 <HAL_GPIO_Init+0x1fa>
 800235c:	2306      	movs	r3, #6
 800235e:	e008      	b.n	8002372 <HAL_GPIO_Init+0x1fa>
 8002360:	2304      	movs	r3, #4
 8002362:	e006      	b.n	8002372 <HAL_GPIO_Init+0x1fa>
 8002364:	2303      	movs	r3, #3
 8002366:	e004      	b.n	8002372 <HAL_GPIO_Init+0x1fa>
 8002368:	2302      	movs	r3, #2
 800236a:	e002      	b.n	8002372 <HAL_GPIO_Init+0x1fa>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_GPIO_Init+0x1fa>
 8002370:	2300      	movs	r3, #0
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	f002 0203 	and.w	r2, r2, #3
 8002378:	0092      	lsls	r2, r2, #2
 800237a:	4093      	lsls	r3, r2
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002382:	4937      	ldr	r1, [pc, #220]	; (8002460 <HAL_GPIO_Init+0x2e8>)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002390:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_GPIO_Init+0x300>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023b4:	4a30      	ldr	r2, [pc, #192]	; (8002478 <HAL_GPIO_Init+0x300>)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_GPIO_Init+0x300>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023de:	4a26      	ldr	r2, [pc, #152]	; (8002478 <HAL_GPIO_Init+0x300>)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80023e4:	4b24      	ldr	r3, [pc, #144]	; (8002478 <HAL_GPIO_Init+0x300>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002408:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <HAL_GPIO_Init+0x300>)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_GPIO_Init+0x300>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002432:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_GPIO_Init+0x300>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	f47f ae9d 	bne.w	8002188 <HAL_GPIO_Init+0x10>
  }
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40021000 	.word	0x40021000
 8002460:	40010000 	.word	0x40010000
 8002464:	48000400 	.word	0x48000400
 8002468:	48000800 	.word	0x48000800
 800246c:	48000c00 	.word	0x48000c00
 8002470:	48001000 	.word	0x48001000
 8002474:	48001400 	.word	0x48001400
 8002478:	40010400 	.word	0x40010400

0800247c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
 8002488:	4613      	mov	r3, r2
 800248a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800248c:	787b      	ldrb	r3, [r7, #1]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d141      	bne.n	800253e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ba:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d131      	bne.n	800252c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024c8:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024ce:	4a46      	ldr	r2, [pc, #280]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024d8:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024e0:	4a41      	ldr	r2, [pc, #260]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024e8:	4b40      	ldr	r3, [pc, #256]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2232      	movs	r2, #50	; 0x32
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	4a3f      	ldr	r2, [pc, #252]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	0c9b      	lsrs	r3, r3, #18
 80024fa:	3301      	adds	r3, #1
 80024fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024fe:	e002      	b.n	8002506 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3b01      	subs	r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002512:	d102      	bne.n	800251a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f2      	bne.n	8002500 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800251a:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002526:	d158      	bne.n	80025da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e057      	b.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800252c:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002532:	4a2d      	ldr	r2, [pc, #180]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002538:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800253c:	e04d      	b.n	80025da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002544:	d141      	bne.n	80025ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002546:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800254e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002552:	d131      	bne.n	80025b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002554:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800255a:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002560:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002564:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800256c:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800256e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002572:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2232      	movs	r2, #50	; 0x32
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	0c9b      	lsrs	r3, r3, #18
 8002586:	3301      	adds	r3, #1
 8002588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800258a:	e002      	b.n	8002592 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3b01      	subs	r3, #1
 8002590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259e:	d102      	bne.n	80025a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f2      	bne.n	800258c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b2:	d112      	bne.n	80025da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e011      	b.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025c8:	e007      	b.n	80025da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40007000 	.word	0x40007000
 80025ec:	20000000 	.word	0x20000000
 80025f0:	431bde83 	.word	0x431bde83

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e306      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d075      	beq.n	80026fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002612:	4b97      	ldr	r3, [pc, #604]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800261c:	4b94      	ldr	r3, [pc, #592]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d102      	bne.n	8002632 <HAL_RCC_OscConfig+0x3e>
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d002      	beq.n	8002638 <HAL_RCC_OscConfig+0x44>
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d10b      	bne.n	8002650 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	4b8d      	ldr	r3, [pc, #564]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d05b      	beq.n	80026fc <HAL_RCC_OscConfig+0x108>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d157      	bne.n	80026fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e2e1      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d106      	bne.n	8002668 <HAL_RCC_OscConfig+0x74>
 800265a:	4b85      	ldr	r3, [pc, #532]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a84      	ldr	r2, [pc, #528]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e01d      	b.n	80026a4 <HAL_RCC_OscConfig+0xb0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x98>
 8002672:	4b7f      	ldr	r3, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7e      	ldr	r2, [pc, #504]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b7c      	ldr	r3, [pc, #496]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a7b      	ldr	r2, [pc, #492]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0xb0>
 800268c:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a77      	ldr	r2, [pc, #476]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b75      	ldr	r3, [pc, #468]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a74      	ldr	r2, [pc, #464]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800269e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7ff fc52 	bl	8001f54 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff fc4e 	bl	8001f54 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e2a6      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c6:	4b6a      	ldr	r3, [pc, #424]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0xc0>
 80026d2:	e014      	b.n	80026fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7ff fc3e 	bl	8001f54 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026dc:	f7ff fc3a 	bl	8001f54 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e292      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ee:	4b60      	ldr	r3, [pc, #384]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0xe8>
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d075      	beq.n	80027f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270a:	4b59      	ldr	r3, [pc, #356]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002714:	4b56      	ldr	r3, [pc, #344]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d102      	bne.n	800272a <HAL_RCC_OscConfig+0x136>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d002      	beq.n	8002730 <HAL_RCC_OscConfig+0x13c>
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b04      	cmp	r3, #4
 800272e:	d11f      	bne.n	8002770 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002730:	4b4f      	ldr	r3, [pc, #316]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_OscConfig+0x154>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e265      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002748:	4b49      	ldr	r3, [pc, #292]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	4946      	ldr	r1, [pc, #280]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800275c:	4b45      	ldr	r3, [pc, #276]	; (8002874 <HAL_RCC_OscConfig+0x280>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fbab 	bl	8001ebc <HAL_InitTick>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d043      	beq.n	80027f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e251      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002778:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3c      	ldr	r2, [pc, #240]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800277e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7ff fbe6 	bl	8001f54 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7ff fbe2 	bl	8001f54 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e23a      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279e:	4b34      	ldr	r3, [pc, #208]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	492d      	ldr	r1, [pc, #180]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
 80027be:	e01a      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7ff fbc2 	bl	8001f54 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d4:	f7ff fbbe 	bl	8001f54 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e216      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x1e0>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d041      	beq.n	8002886 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01c      	beq.n	8002844 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800280c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002810:	4a17      	ldr	r2, [pc, #92]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7ff fb9b 	bl	8001f54 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002822:	f7ff fb97 	bl	8001f54 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1ef      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ef      	beq.n	8002822 <HAL_RCC_OscConfig+0x22e>
 8002842:	e020      	b.n	8002886 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7ff fb7e 	bl	8001f54 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800285a:	e00d      	b.n	8002878 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7ff fb7a 	bl	8001f54 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d906      	bls.n	8002878 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1d2      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002878:	4b8c      	ldr	r3, [pc, #560]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800287a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ea      	bne.n	800285c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80a6 	beq.w	80029e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002898:	4b84      	ldr	r3, [pc, #528]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2b4>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x2b6>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	4b7f      	ldr	r3, [pc, #508]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	4a7e      	ldr	r2, [pc, #504]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6593      	str	r3, [r2, #88]	; 0x58
 80028ba:	4b7c      	ldr	r3, [pc, #496]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028c6:	2301      	movs	r3, #1
 80028c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ca:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <HAL_RCC_OscConfig+0x4bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d118      	bne.n	8002908 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d6:	4b76      	ldr	r3, [pc, #472]	; (8002ab0 <HAL_RCC_OscConfig+0x4bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a75      	ldr	r2, [pc, #468]	; (8002ab0 <HAL_RCC_OscConfig+0x4bc>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e2:	f7ff fb37 	bl	8001f54 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ea:	f7ff fb33 	bl	8001f54 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e18b      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fc:	4b6c      	ldr	r3, [pc, #432]	; (8002ab0 <HAL_RCC_OscConfig+0x4bc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d108      	bne.n	8002922 <HAL_RCC_OscConfig+0x32e>
 8002910:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	4a65      	ldr	r2, [pc, #404]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002920:	e024      	b.n	800296c <HAL_RCC_OscConfig+0x378>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b05      	cmp	r3, #5
 8002928:	d110      	bne.n	800294c <HAL_RCC_OscConfig+0x358>
 800292a:	4b60      	ldr	r3, [pc, #384]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	4a5e      	ldr	r2, [pc, #376]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800293a:	4b5c      	ldr	r3, [pc, #368]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	4a5a      	ldr	r2, [pc, #360]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800294a:	e00f      	b.n	800296c <HAL_RCC_OscConfig+0x378>
 800294c:	4b57      	ldr	r3, [pc, #348]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	4a56      	ldr	r2, [pc, #344]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800295c:	4b53      	ldr	r3, [pc, #332]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	4a52      	ldr	r2, [pc, #328]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d016      	beq.n	80029a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7ff faee 	bl	8001f54 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7ff faea 	bl	8001f54 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e140      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002992:	4b46      	ldr	r3, [pc, #280]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ed      	beq.n	800297c <HAL_RCC_OscConfig+0x388>
 80029a0:	e015      	b.n	80029ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7ff fad7 	bl	8001f54 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7ff fad3 	bl	8001f54 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e129      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c0:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1ed      	bne.n	80029aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ce:	7ffb      	ldrb	r3, [r7, #31]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d4:	4b35      	ldr	r3, [pc, #212]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	4a34      	ldr	r2, [pc, #208]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d03c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029fa:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7ff faa6 	bl	8001f54 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a0c:	f7ff faa2 	bl	8001f54 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0fa      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ef      	beq.n	8002a0c <HAL_RCC_OscConfig+0x418>
 8002a2c:	e01b      	b.n	8002a66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a2e:	4b1f      	ldr	r3, [pc, #124]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7ff fa89 	bl	8001f54 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a46:	f7ff fa85 	bl	8001f54 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0dd      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ef      	bne.n	8002a46 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80d1 	beq.w	8002c12 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	f000 808b 	beq.w	8002b94 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d15e      	bne.n	8002b44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a08      	ldr	r2, [pc, #32]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7ff fa5f 	bl	8001f54 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a98:	e00c      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7ff fa5b 	bl	8001f54 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d905      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0b3      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab4:	4b59      	ldr	r3, [pc, #356]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ec      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac0:	4b56      	ldr	r3, [pc, #344]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	4b56      	ldr	r3, [pc, #344]	; (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6a11      	ldr	r1, [r2, #32]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	4311      	orrs	r1, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002ada:	0212      	lsls	r2, r2, #8
 8002adc:	4311      	orrs	r1, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ae2:	0852      	lsrs	r2, r2, #1
 8002ae4:	3a01      	subs	r2, #1
 8002ae6:	0552      	lsls	r2, r2, #21
 8002ae8:	4311      	orrs	r1, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002aee:	0852      	lsrs	r2, r2, #1
 8002af0:	3a01      	subs	r2, #1
 8002af2:	0652      	lsls	r2, r2, #25
 8002af4:	4311      	orrs	r1, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002afa:	06d2      	lsls	r2, r2, #27
 8002afc:	430a      	orrs	r2, r1
 8002afe:	4947      	ldr	r1, [pc, #284]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b04:	4b45      	ldr	r3, [pc, #276]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a44      	ldr	r2, [pc, #272]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b10:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a41      	ldr	r2, [pc, #260]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7ff fa1a 	bl	8001f54 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7ff fa16 	bl	8001f54 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e06e      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b36:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x530>
 8002b42:	e066      	b.n	8002c12 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a34      	ldr	r2, [pc, #208]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b50:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a31      	ldr	r2, [pc, #196]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b56:	f023 0303 	bic.w	r3, r3, #3
 8002b5a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002b5c:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a2e      	ldr	r2, [pc, #184]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b62:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7ff f9f2 	bl	8001f54 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7ff f9ee 	bl	8001f54 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e046      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b86:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x580>
 8002b92:	e03e      	b.n	8002c12 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e039      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0203 	and.w	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d12c      	bne.n	8002c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d123      	bne.n	8002c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d11b      	bne.n	8002c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d113      	bne.n	8002c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d109      	bne.n	8002c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	3b01      	subs	r3, #1
 8002c08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	019f800c 	.word	0x019f800c

08002c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e11e      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b91      	ldr	r3, [pc, #580]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d910      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b8e      	ldr	r3, [pc, #568]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 020f 	bic.w	r2, r3, #15
 8002c52:	498c      	ldr	r1, [pc, #560]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b8a      	ldr	r3, [pc, #552]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e106      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d073      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d129      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c80:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0f4      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002c90:	f000 f99e 	bl	8002fd0 <RCC_GetSysClockFreqFromPLLSource>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4a7c      	ldr	r2, [pc, #496]	; (8002e8c <HAL_RCC_ClockConfig+0x268>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d93f      	bls.n	8002d1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c9e:	4b7a      	ldr	r3, [pc, #488]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d033      	beq.n	8002d1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d12f      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cbe:	4b72      	ldr	r3, [pc, #456]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cc6:	4a70      	ldr	r2, [pc, #448]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ccc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e024      	b.n	8002d1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cdc:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0c6      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cec:	4b66      	ldr	r3, [pc, #408]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0be      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002cfc:	f000 f8ce 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4a61      	ldr	r2, [pc, #388]	; (8002e8c <HAL_RCC_ClockConfig+0x268>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d909      	bls.n	8002d1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d0a:	4b5f      	ldr	r3, [pc, #380]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d12:	4a5d      	ldr	r2, [pc, #372]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d1e:	4b5a      	ldr	r3, [pc, #360]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f023 0203 	bic.w	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4957      	ldr	r1, [pc, #348]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d30:	f7ff f910 	bl	8001f54 <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d38:	f7ff f90c 	bl	8001f54 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e095      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	4b4e      	ldr	r3, [pc, #312]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 020c 	and.w	r2, r3, #12
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1eb      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d023      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d78:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4a42      	ldr	r2, [pc, #264]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002d90:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d98:	4a3b      	ldr	r2, [pc, #236]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da0:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4936      	ldr	r1, [pc, #216]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dba:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4a32      	ldr	r2, [pc, #200]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002dc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc6:	4b2f      	ldr	r3, [pc, #188]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d21d      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 020f 	bic.w	r2, r3, #15
 8002ddc:	4929      	ldr	r1, [pc, #164]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002de4:	f7ff f8b6 	bl	8001f54 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7ff f8b2 	bl	8001f54 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e03b      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1ed      	bne.n	8002dec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4917      	ldr	r1, [pc, #92]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	490f      	ldr	r1, [pc, #60]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e4e:	f000 f825 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	490c      	ldr	r1, [pc, #48]	; (8002e90 <HAL_RCC_ClockConfig+0x26c>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <HAL_RCC_ClockConfig+0x270>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_RCC_ClockConfig+0x274>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f822 	bl	8001ebc <HAL_InitTick>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40022000 	.word	0x40022000
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	04c4b400 	.word	0x04c4b400
 8002e90:	08005610 	.word	0x08005610
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000004 	.word	0x20000004

08002e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ea2:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d102      	bne.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eae:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	e047      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d102      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ec0:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	e03e      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d136      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d10c      	bne.n	8002f0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ef0:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	4a16      	ldr	r2, [pc, #88]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002efa:	68d2      	ldr	r2, [r2, #12]
 8002efc:	0a12      	lsrs	r2, r2, #8
 8002efe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
      break;
 8002f08:	e00c      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f0a:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	4a10      	ldr	r2, [pc, #64]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f14:	68d2      	ldr	r2, [r2, #12]
 8002f16:	0a12      	lsrs	r2, r2, #8
 8002f18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f1c:	fb02 f303 	mul.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]
      break;
 8002f22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	0e5b      	lsrs	r3, r3, #25
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	e001      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f44:	693b      	ldr	r3, [r7, #16]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	00f42400 	.word	0x00f42400
 8002f5c:	007a1200 	.word	0x007a1200

08002f60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000000 	.word	0x20000000

08002f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f7c:	f7ff fff0 	bl	8002f60 <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4904      	ldr	r1, [pc, #16]	; (8002fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	08005620 	.word	0x08005620

08002fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fa8:	f7ff ffda 	bl	8002f60 <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0adb      	lsrs	r3, r3, #11
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4904      	ldr	r1, [pc, #16]	; (8002fcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08005620 	.word	0x08005620

08002fd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	3301      	adds	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d10c      	bne.n	800300e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ff4:	4a17      	ldr	r2, [pc, #92]	; (8003054 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ffe:	68d2      	ldr	r2, [r2, #12]
 8003000:	0a12      	lsrs	r2, r2, #8
 8003002:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	617b      	str	r3, [r7, #20]
    break;
 800300c:	e00c      	b.n	8003028 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800300e:	4a12      	ldr	r2, [pc, #72]	; (8003058 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	fbb2 f3f3 	udiv	r3, r2, r3
 8003016:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003018:	68d2      	ldr	r2, [r2, #12]
 800301a:	0a12      	lsrs	r2, r2, #8
 800301c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]
    break;
 8003026:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	0e5b      	lsrs	r3, r3, #25
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	3301      	adds	r3, #1
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003042:	687b      	ldr	r3, [r7, #4]
}
 8003044:	4618      	mov	r0, r3
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40021000 	.word	0x40021000
 8003054:	007a1200 	.word	0x007a1200
 8003058:	00f42400 	.word	0x00f42400

0800305c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003064:	2300      	movs	r3, #0
 8003066:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003068:	2300      	movs	r3, #0
 800306a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8098 	beq.w	80031aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307e:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10d      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4b40      	ldr	r3, [pc, #256]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	4a3f      	ldr	r2, [pc, #252]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003094:	6593      	str	r3, [r2, #88]	; 0x58
 8003096:	4b3d      	ldr	r3, [pc, #244]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a6:	4b3a      	ldr	r3, [pc, #232]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a39      	ldr	r2, [pc, #228]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b2:	f7fe ff4f 	bl	8001f54 <HAL_GetTick>
 80030b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b8:	e009      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ba:	f7fe ff4b 	bl	8001f54 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d902      	bls.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	74fb      	strb	r3, [r7, #19]
        break;
 80030cc:	e005      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ce:	4b30      	ldr	r3, [pc, #192]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ef      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d159      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030e0:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01e      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d019      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030fc:	4b23      	ldr	r3, [pc, #140]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003108:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	4a1f      	ldr	r2, [pc, #124]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003118:	4b1c      	ldr	r3, [pc, #112]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe ff0b 	bl	8001f54 <HAL_GetTick>
 800313e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003140:	e00b      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe ff07 	bl	8001f54 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d902      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	74fb      	strb	r3, [r7, #19]
            break;
 8003158:	e006      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ec      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10b      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	4903      	ldr	r1, [pc, #12]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003184:	e008      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003186:	7cfb      	ldrb	r3, [r7, #19]
 8003188:	74bb      	strb	r3, [r7, #18]
 800318a:	e005      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003198:	7c7b      	ldrb	r3, [r7, #17]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4ba6      	ldr	r3, [pc, #664]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	4aa5      	ldr	r2, [pc, #660]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b6:	4ba0      	ldr	r3, [pc, #640]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f023 0203 	bic.w	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	499c      	ldr	r1, [pc, #624]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031d8:	4b97      	ldr	r3, [pc, #604]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f023 020c 	bic.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	4994      	ldr	r1, [pc, #592]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031fa:	4b8f      	ldr	r3, [pc, #572]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	498b      	ldr	r1, [pc, #556]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800321c:	4b86      	ldr	r3, [pc, #536]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	4983      	ldr	r1, [pc, #524]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800323e:	4b7e      	ldr	r3, [pc, #504]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	497a      	ldr	r1, [pc, #488]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003260:	4b75      	ldr	r3, [pc, #468]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	4972      	ldr	r1, [pc, #456]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003282:	4b6d      	ldr	r3, [pc, #436]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	4969      	ldr	r1, [pc, #420]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032a4:	4b64      	ldr	r3, [pc, #400]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	4961      	ldr	r1, [pc, #388]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032c6:	4b5c      	ldr	r3, [pc, #368]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	4958      	ldr	r1, [pc, #352]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d015      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032e8:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	4950      	ldr	r1, [pc, #320]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003306:	d105      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003308:	4b4b      	ldr	r3, [pc, #300]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a4a      	ldr	r2, [pc, #296]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800330e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003312:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003320:	4b45      	ldr	r3, [pc, #276]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	4942      	ldr	r1, [pc, #264]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800333e:	d105      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003340:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a3c      	ldr	r2, [pc, #240]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d015      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003358:	4b37      	ldr	r3, [pc, #220]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4934      	ldr	r1, [pc, #208]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003376:	d105      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003378:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a2e      	ldr	r2, [pc, #184]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003382:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d015      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003390:	4b29      	ldr	r3, [pc, #164]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	4926      	ldr	r1, [pc, #152]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ae:	d105      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b0:	4b21      	ldr	r3, [pc, #132]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a20      	ldr	r2, [pc, #128]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	4918      	ldr	r1, [pc, #96]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033e6:	d105      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e8:	4b13      	ldr	r3, [pc, #76]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a12      	ldr	r2, [pc, #72]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003400:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	490a      	ldr	r1, [pc, #40]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800341e:	d105      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800342c:	7cbb      	ldrb	r3, [r7, #18]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e09d      	b.n	800358a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800345e:	d009      	beq.n	8003474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	61da      	str	r2, [r3, #28]
 8003466:	e005      	b.n	8003474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe fb10 	bl	8001ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034b4:	d902      	bls.n	80034bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	e002      	b.n	80034c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034ca:	d007      	beq.n	80034dc <HAL_SPI_Init+0xa0>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034d4:	d002      	beq.n	80034dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	ea42 0103 	orr.w	r1, r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	f003 0204 	and.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003558:	ea42 0103 	orr.w	r1, r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003578:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b088      	sub	sp, #32
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	4613      	mov	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_SPI_Transmit+0x22>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e158      	b.n	8003866 <HAL_SPI_Transmit+0x2d4>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035bc:	f7fe fcca 	bl	8001f54 <HAL_GetTick>
 80035c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d002      	beq.n	80035d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035d6:	e13d      	b.n	8003854 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_SPI_Transmit+0x52>
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035e8:	e134      	b.n	8003854 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2203      	movs	r2, #3
 80035ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003634:	d10f      	bne.n	8003656 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003644:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003654:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d007      	beq.n	8003674 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800367c:	d94b      	bls.n	8003716 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_SPI_Transmit+0xfa>
 8003686:	8afb      	ldrh	r3, [r7, #22]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d13e      	bne.n	800370a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	881a      	ldrh	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	1c9a      	adds	r2, r3, #2
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036b0:	e02b      	b.n	800370a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d112      	bne.n	80036e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	881a      	ldrh	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	1c9a      	adds	r2, r3, #2
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036e4:	e011      	b.n	800370a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e6:	f7fe fc35 	bl	8001f54 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d803      	bhi.n	80036fe <HAL_SPI_Transmit+0x16c>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d102      	bne.n	8003704 <HAL_SPI_Transmit+0x172>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003708:	e0a4      	b.n	8003854 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1ce      	bne.n	80036b2 <HAL_SPI_Transmit+0x120>
 8003714:	e07c      	b.n	8003810 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_SPI_Transmit+0x192>
 800371e:	8afb      	ldrh	r3, [r7, #22]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d170      	bne.n	8003806 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d912      	bls.n	8003754 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	881a      	ldrh	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	1c9a      	adds	r2, r3, #2
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b02      	subs	r3, #2
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003752:	e058      	b.n	8003806 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	7812      	ldrb	r2, [r2, #0]
 8003760:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800377a:	e044      	b.n	8003806 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b02      	cmp	r3, #2
 8003788:	d12b      	bne.n	80037e2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d912      	bls.n	80037ba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	881a      	ldrh	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	1c9a      	adds	r2, r3, #2
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b02      	subs	r3, #2
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037b8:	e025      	b.n	8003806 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	330c      	adds	r3, #12
 80037c4:	7812      	ldrb	r2, [r2, #0]
 80037c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037e0:	e011      	b.n	8003806 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e2:	f7fe fbb7 	bl	8001f54 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d803      	bhi.n	80037fa <HAL_SPI_Transmit+0x268>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d102      	bne.n	8003800 <HAL_SPI_Transmit+0x26e>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003804:	e026      	b.n	8003854 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1b5      	bne.n	800377c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	6839      	ldr	r1, [r7, #0]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fce3 	bl	80041e0 <SPI_EndRxTxTransaction>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e000      	b.n	8003854 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003852:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003864:	7ffb      	ldrb	r3, [r7, #31]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b088      	sub	sp, #32
 8003872:	af02      	add	r7, sp, #8
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800388a:	d112      	bne.n	80038b2 <HAL_SPI_Receive+0x44>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10e      	bne.n	80038b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2204      	movs	r2, #4
 8003898:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800389c:	88fa      	ldrh	r2, [r7, #6]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	4613      	mov	r3, r2
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f910 	bl	8003ace <HAL_SPI_TransmitReceive>
 80038ae:	4603      	mov	r3, r0
 80038b0:	e109      	b.n	8003ac6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_SPI_Receive+0x52>
 80038bc:	2302      	movs	r3, #2
 80038be:	e102      	b.n	8003ac6 <HAL_SPI_Receive+0x258>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c8:	f7fe fb44 	bl	8001f54 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d002      	beq.n	80038e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80038da:	2302      	movs	r3, #2
 80038dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038de:	e0e9      	b.n	8003ab4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_SPI_Receive+0x7e>
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d102      	bne.n	80038f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038f0:	e0e0      	b.n	8003ab4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2204      	movs	r2, #4
 80038f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	88fa      	ldrh	r2, [r7, #6]
 8003912:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800393c:	d908      	bls.n	8003950 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	e007      	b.n	8003960 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800395e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003968:	d10f      	bne.n	800398a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003978:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003988:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	d007      	beq.n	80039a8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039b0:	d867      	bhi.n	8003a82 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039b2:	e030      	b.n	8003a16 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d117      	bne.n	80039f2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f103 020c 	add.w	r2, r3, #12
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	7812      	ldrb	r2, [r2, #0]
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80039f0:	e011      	b.n	8003a16 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039f2:	f7fe faaf 	bl	8001f54 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d803      	bhi.n	8003a0a <HAL_SPI_Receive+0x19c>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d102      	bne.n	8003a10 <HAL_SPI_Receive+0x1a2>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a14:	e04e      	b.n	8003ab4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1c8      	bne.n	80039b4 <HAL_SPI_Receive+0x146>
 8003a22:	e034      	b.n	8003a8e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d115      	bne.n	8003a5e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	b292      	uxth	r2, r2
 8003a3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	1c9a      	adds	r2, r3, #2
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003a5c:	e011      	b.n	8003a82 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a5e:	f7fe fa79 	bl	8001f54 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d803      	bhi.n	8003a76 <HAL_SPI_Receive+0x208>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d102      	bne.n	8003a7c <HAL_SPI_Receive+0x20e>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a80:	e018      	b.n	8003ab4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ca      	bne.n	8003a24 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fb4c 	bl	8004130 <SPI_EndRxTransaction>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	75fb      	strb	r3, [r7, #23]
 8003ab0:	e000      	b.n	8003ab4 <HAL_SPI_Receive+0x246>
  }

error :
 8003ab2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b08a      	sub	sp, #40	; 0x28
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003adc:	2301      	movs	r3, #1
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_SPI_TransmitReceive+0x26>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e1fb      	b.n	8003eec <HAL_SPI_TransmitReceive+0x41e>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003afc:	f7fe fa2a 	bl	8001f54 <HAL_GetTick>
 8003b00:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b08:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b10:	887b      	ldrh	r3, [r7, #2]
 8003b12:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b14:	887b      	ldrh	r3, [r7, #2]
 8003b16:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b18:	7efb      	ldrb	r3, [r7, #27]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d00e      	beq.n	8003b3c <HAL_SPI_TransmitReceive+0x6e>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b24:	d106      	bne.n	8003b34 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <HAL_SPI_TransmitReceive+0x66>
 8003b2e:	7efb      	ldrb	r3, [r7, #27]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d003      	beq.n	8003b3c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b3a:	e1cd      	b.n	8003ed8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_SPI_TransmitReceive+0x80>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_SPI_TransmitReceive+0x80>
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d103      	bne.n	8003b56 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b54:	e1c0      	b.n	8003ed8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d003      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2205      	movs	r2, #5
 8003b66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	887a      	ldrh	r2, [r7, #2]
 8003b7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	887a      	ldrh	r2, [r7, #2]
 8003b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	887a      	ldrh	r2, [r7, #2]
 8003b96:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bac:	d802      	bhi.n	8003bb4 <HAL_SPI_TransmitReceive+0xe6>
 8003bae:	8a3b      	ldrh	r3, [r7, #16]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d908      	bls.n	8003bc6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bc2:	605a      	str	r2, [r3, #4]
 8003bc4:	e007      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bd4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d007      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bfc:	d97c      	bls.n	8003cf8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x13e>
 8003c06:	8a7b      	ldrh	r3, [r7, #18]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d169      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	881a      	ldrh	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	1c9a      	adds	r2, r3, #2
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c30:	e056      	b.n	8003ce0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d11b      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x1aa>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d016      	beq.n	8003c78 <HAL_SPI_TransmitReceive+0x1aa>
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d113      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	881a      	ldrh	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	1c9a      	adds	r2, r3, #2
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d11c      	bne.n	8003cc0 <HAL_SPI_TransmitReceive+0x1f2>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d016      	beq.n	8003cc0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	b292      	uxth	r2, r2
 8003c9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	1c9a      	adds	r2, r3, #2
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cc0:	f7fe f948 	bl	8001f54 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d807      	bhi.n	8003ce0 <HAL_SPI_TransmitReceive+0x212>
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d003      	beq.n	8003ce0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003cde:	e0fb      	b.n	8003ed8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1a3      	bne.n	8003c32 <HAL_SPI_TransmitReceive+0x164>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d19d      	bne.n	8003c32 <HAL_SPI_TransmitReceive+0x164>
 8003cf6:	e0df      	b.n	8003eb8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x23a>
 8003d00:	8a7b      	ldrh	r3, [r7, #18]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	f040 80cb 	bne.w	8003e9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d912      	bls.n	8003d38 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	1c9a      	adds	r2, r3, #2
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b02      	subs	r3, #2
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d36:	e0b2      	b.n	8003e9e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	330c      	adds	r3, #12
 8003d42:	7812      	ldrb	r2, [r2, #0]
 8003d44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d5e:	e09e      	b.n	8003e9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d134      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x30a>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02f      	beq.n	8003dd8 <HAL_SPI_TransmitReceive+0x30a>
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d12c      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d912      	bls.n	8003dae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	881a      	ldrh	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	1c9a      	adds	r2, r3, #2
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b02      	subs	r3, #2
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dac:	e012      	b.n	8003dd4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d148      	bne.n	8003e78 <HAL_SPI_TransmitReceive+0x3aa>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d042      	beq.n	8003e78 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d923      	bls.n	8003e46 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	1c9a      	adds	r2, r3, #2
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b02      	subs	r3, #2
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d81f      	bhi.n	8003e74 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	e016      	b.n	8003e74 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f103 020c 	add.w	r2, r3, #12
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	7812      	ldrb	r2, [r2, #0]
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e74:	2301      	movs	r3, #1
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e78:	f7fe f86c 	bl	8001f54 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d803      	bhi.n	8003e90 <HAL_SPI_TransmitReceive+0x3c2>
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8e:	d102      	bne.n	8003e96 <HAL_SPI_TransmitReceive+0x3c8>
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d103      	bne.n	8003e9e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e9c:	e01c      	b.n	8003ed8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f47f af5b 	bne.w	8003d60 <HAL_SPI_TransmitReceive+0x292>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f47f af54 	bne.w	8003d60 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f98f 	bl	80041e0 <SPI_EndRxTxTransaction>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d006      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	661a      	str	r2, [r3, #96]	; 0x60
 8003ed4:	e000      	b.n	8003ed8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003ed6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3728      	adds	r7, #40	; 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f04:	f7fe f826 	bl	8001f54 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	4413      	add	r3, r2
 8003f12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f14:	f7fe f81e 	bl	8001f54 <HAL_GetTick>
 8003f18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f1a:	4b39      	ldr	r3, [pc, #228]	; (8004000 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	015b      	lsls	r3, r3, #5
 8003f20:	0d1b      	lsrs	r3, r3, #20
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f2a:	e054      	b.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d050      	beq.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f34:	f7fe f80e 	bl	8001f54 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d902      	bls.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d13d      	bne.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f62:	d111      	bne.n	8003f88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6c:	d004      	beq.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f76:	d107      	bne.n	8003f88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f90:	d10f      	bne.n	8003fb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e017      	b.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	bf0c      	ite	eq
 8003fe6:	2301      	moveq	r3, #1
 8003fe8:	2300      	movne	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d19b      	bne.n	8003f2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000000 	.word	0x20000000

08004004 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004016:	f7fd ff9d 	bl	8001f54 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	4413      	add	r3, r2
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004026:	f7fd ff95 	bl	8001f54 <HAL_GetTick>
 800402a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004034:	4b3d      	ldr	r3, [pc, #244]	; (800412c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	00da      	lsls	r2, r3, #3
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	0d1b      	lsrs	r3, r3, #20
 8004044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004046:	fb02 f303 	mul.w	r3, r2, r3
 800404a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800404c:	e060      	b.n	8004110 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004054:	d107      	bne.n	8004066 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004064:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d050      	beq.n	8004110 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800406e:	f7fd ff71 	bl	8001f54 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407a:	429a      	cmp	r2, r3
 800407c:	d902      	bls.n	8004084 <SPI_WaitFifoStateUntilTimeout+0x80>
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	d13d      	bne.n	8004100 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004092:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409c:	d111      	bne.n	80040c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a6:	d004      	beq.n	80040b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b0:	d107      	bne.n	80040c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ca:	d10f      	bne.n	80040ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e010      	b.n	8004122 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	3b01      	subs	r3, #1
 800410e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	d196      	bne.n	800404e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3728      	adds	r7, #40	; 0x28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000000 	.word	0x20000000

08004130 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004144:	d111      	bne.n	800416a <SPI_EndRxTransaction+0x3a>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414e:	d004      	beq.n	800415a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004158:	d107      	bne.n	800416a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004168:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2200      	movs	r2, #0
 8004172:	2180      	movs	r1, #128	; 0x80
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff febd 	bl	8003ef4 <SPI_WaitFlagStateUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e023      	b.n	80041d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004198:	d11d      	bne.n	80041d6 <SPI_EndRxTransaction+0xa6>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a2:	d004      	beq.n	80041ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ac:	d113      	bne.n	80041d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7ff ff22 	bl	8004004 <SPI_WaitFifoStateUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e000      	b.n	80041d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff ff03 	bl	8004004 <SPI_WaitFifoStateUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e027      	b.n	8004264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2200      	movs	r2, #0
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff fe68 	bl	8003ef4 <SPI_WaitFlagStateUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422e:	f043 0220 	orr.w	r2, r3, #32
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e014      	b.n	8004264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7ff fedc 	bl	8004004 <SPI_WaitFifoStateUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e000      	b.n	8004264 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e042      	b.n	8004304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004284:	2b00      	cmp	r3, #0
 8004286:	d106      	bne.n	8004296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7fd fc51 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2224      	movs	r2, #36	; 0x24
 800429a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0201 	bic.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f82c 	bl	800430c <UART_SetConfig>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e022      	b.n	8004304 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 faec 	bl	80048a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fb73 	bl	80049e8 <UART_CheckIdleState>
 8004302:	4603      	mov	r3, r0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800430c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004310:	b08c      	sub	sp, #48	; 0x30
 8004312:	af00      	add	r7, sp, #0
 8004314:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	431a      	orrs	r2, r3
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	431a      	orrs	r2, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4313      	orrs	r3, r2
 8004332:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4bab      	ldr	r3, [pc, #684]	; (80045e8 <UART_SetConfig+0x2dc>)
 800433c:	4013      	ands	r3, r2
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004344:	430b      	orrs	r3, r1
 8004346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4aa0      	ldr	r2, [pc, #640]	; (80045ec <UART_SetConfig+0x2e0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004374:	4313      	orrs	r3, r2
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004382:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800438c:	430b      	orrs	r3, r1
 800438e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	f023 010f 	bic.w	r1, r3, #15
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a91      	ldr	r2, [pc, #580]	; (80045f0 <UART_SetConfig+0x2e4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d125      	bne.n	80043fc <UART_SetConfig+0xf0>
 80043b0:	4b90      	ldr	r3, [pc, #576]	; (80045f4 <UART_SetConfig+0x2e8>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d81a      	bhi.n	80043f4 <UART_SetConfig+0xe8>
 80043be:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <UART_SetConfig+0xb8>)
 80043c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043e5 	.word	0x080043e5
 80043cc:	080043dd 	.word	0x080043dd
 80043d0:	080043ed 	.word	0x080043ed
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043da:	e0d6      	b.n	800458a <UART_SetConfig+0x27e>
 80043dc:	2302      	movs	r3, #2
 80043de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e2:	e0d2      	b.n	800458a <UART_SetConfig+0x27e>
 80043e4:	2304      	movs	r3, #4
 80043e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ea:	e0ce      	b.n	800458a <UART_SetConfig+0x27e>
 80043ec:	2308      	movs	r3, #8
 80043ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043f2:	e0ca      	b.n	800458a <UART_SetConfig+0x27e>
 80043f4:	2310      	movs	r3, #16
 80043f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043fa:	e0c6      	b.n	800458a <UART_SetConfig+0x27e>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a7d      	ldr	r2, [pc, #500]	; (80045f8 <UART_SetConfig+0x2ec>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d138      	bne.n	8004478 <UART_SetConfig+0x16c>
 8004406:	4b7b      	ldr	r3, [pc, #492]	; (80045f4 <UART_SetConfig+0x2e8>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b0c      	cmp	r3, #12
 8004412:	d82d      	bhi.n	8004470 <UART_SetConfig+0x164>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <UART_SetConfig+0x110>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004451 	.word	0x08004451
 8004420:	08004471 	.word	0x08004471
 8004424:	08004471 	.word	0x08004471
 8004428:	08004471 	.word	0x08004471
 800442c:	08004461 	.word	0x08004461
 8004430:	08004471 	.word	0x08004471
 8004434:	08004471 	.word	0x08004471
 8004438:	08004471 	.word	0x08004471
 800443c:	08004459 	.word	0x08004459
 8004440:	08004471 	.word	0x08004471
 8004444:	08004471 	.word	0x08004471
 8004448:	08004471 	.word	0x08004471
 800444c:	08004469 	.word	0x08004469
 8004450:	2300      	movs	r3, #0
 8004452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004456:	e098      	b.n	800458a <UART_SetConfig+0x27e>
 8004458:	2302      	movs	r3, #2
 800445a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445e:	e094      	b.n	800458a <UART_SetConfig+0x27e>
 8004460:	2304      	movs	r3, #4
 8004462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004466:	e090      	b.n	800458a <UART_SetConfig+0x27e>
 8004468:	2308      	movs	r3, #8
 800446a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800446e:	e08c      	b.n	800458a <UART_SetConfig+0x27e>
 8004470:	2310      	movs	r3, #16
 8004472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004476:	e088      	b.n	800458a <UART_SetConfig+0x27e>
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a5f      	ldr	r2, [pc, #380]	; (80045fc <UART_SetConfig+0x2f0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d125      	bne.n	80044ce <UART_SetConfig+0x1c2>
 8004482:	4b5c      	ldr	r3, [pc, #368]	; (80045f4 <UART_SetConfig+0x2e8>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800448c:	2b30      	cmp	r3, #48	; 0x30
 800448e:	d016      	beq.n	80044be <UART_SetConfig+0x1b2>
 8004490:	2b30      	cmp	r3, #48	; 0x30
 8004492:	d818      	bhi.n	80044c6 <UART_SetConfig+0x1ba>
 8004494:	2b20      	cmp	r3, #32
 8004496:	d00a      	beq.n	80044ae <UART_SetConfig+0x1a2>
 8004498:	2b20      	cmp	r3, #32
 800449a:	d814      	bhi.n	80044c6 <UART_SetConfig+0x1ba>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <UART_SetConfig+0x19a>
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d008      	beq.n	80044b6 <UART_SetConfig+0x1aa>
 80044a4:	e00f      	b.n	80044c6 <UART_SetConfig+0x1ba>
 80044a6:	2300      	movs	r3, #0
 80044a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ac:	e06d      	b.n	800458a <UART_SetConfig+0x27e>
 80044ae:	2302      	movs	r3, #2
 80044b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b4:	e069      	b.n	800458a <UART_SetConfig+0x27e>
 80044b6:	2304      	movs	r3, #4
 80044b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044bc:	e065      	b.n	800458a <UART_SetConfig+0x27e>
 80044be:	2308      	movs	r3, #8
 80044c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044c4:	e061      	b.n	800458a <UART_SetConfig+0x27e>
 80044c6:	2310      	movs	r3, #16
 80044c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044cc:	e05d      	b.n	800458a <UART_SetConfig+0x27e>
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a4b      	ldr	r2, [pc, #300]	; (8004600 <UART_SetConfig+0x2f4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d125      	bne.n	8004524 <UART_SetConfig+0x218>
 80044d8:	4b46      	ldr	r3, [pc, #280]	; (80045f4 <UART_SetConfig+0x2e8>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044e2:	2bc0      	cmp	r3, #192	; 0xc0
 80044e4:	d016      	beq.n	8004514 <UART_SetConfig+0x208>
 80044e6:	2bc0      	cmp	r3, #192	; 0xc0
 80044e8:	d818      	bhi.n	800451c <UART_SetConfig+0x210>
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d00a      	beq.n	8004504 <UART_SetConfig+0x1f8>
 80044ee:	2b80      	cmp	r3, #128	; 0x80
 80044f0:	d814      	bhi.n	800451c <UART_SetConfig+0x210>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <UART_SetConfig+0x1f0>
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d008      	beq.n	800450c <UART_SetConfig+0x200>
 80044fa:	e00f      	b.n	800451c <UART_SetConfig+0x210>
 80044fc:	2300      	movs	r3, #0
 80044fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004502:	e042      	b.n	800458a <UART_SetConfig+0x27e>
 8004504:	2302      	movs	r3, #2
 8004506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800450a:	e03e      	b.n	800458a <UART_SetConfig+0x27e>
 800450c:	2304      	movs	r3, #4
 800450e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004512:	e03a      	b.n	800458a <UART_SetConfig+0x27e>
 8004514:	2308      	movs	r3, #8
 8004516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800451a:	e036      	b.n	800458a <UART_SetConfig+0x27e>
 800451c:	2310      	movs	r3, #16
 800451e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004522:	e032      	b.n	800458a <UART_SetConfig+0x27e>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a30      	ldr	r2, [pc, #192]	; (80045ec <UART_SetConfig+0x2e0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d12a      	bne.n	8004584 <UART_SetConfig+0x278>
 800452e:	4b31      	ldr	r3, [pc, #196]	; (80045f4 <UART_SetConfig+0x2e8>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004538:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800453c:	d01a      	beq.n	8004574 <UART_SetConfig+0x268>
 800453e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004542:	d81b      	bhi.n	800457c <UART_SetConfig+0x270>
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004548:	d00c      	beq.n	8004564 <UART_SetConfig+0x258>
 800454a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454e:	d815      	bhi.n	800457c <UART_SetConfig+0x270>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <UART_SetConfig+0x250>
 8004554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004558:	d008      	beq.n	800456c <UART_SetConfig+0x260>
 800455a:	e00f      	b.n	800457c <UART_SetConfig+0x270>
 800455c:	2300      	movs	r3, #0
 800455e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004562:	e012      	b.n	800458a <UART_SetConfig+0x27e>
 8004564:	2302      	movs	r3, #2
 8004566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800456a:	e00e      	b.n	800458a <UART_SetConfig+0x27e>
 800456c:	2304      	movs	r3, #4
 800456e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004572:	e00a      	b.n	800458a <UART_SetConfig+0x27e>
 8004574:	2308      	movs	r3, #8
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457a:	e006      	b.n	800458a <UART_SetConfig+0x27e>
 800457c:	2310      	movs	r3, #16
 800457e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004582:	e002      	b.n	800458a <UART_SetConfig+0x27e>
 8004584:	2310      	movs	r3, #16
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a17      	ldr	r2, [pc, #92]	; (80045ec <UART_SetConfig+0x2e0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	f040 80a8 	bne.w	80046e6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004596:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800459a:	2b08      	cmp	r3, #8
 800459c:	d834      	bhi.n	8004608 <UART_SetConfig+0x2fc>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <UART_SetConfig+0x298>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	08004609 	.word	0x08004609
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	08004609 	.word	0x08004609
 80045b4:	080045d7 	.word	0x080045d7
 80045b8:	08004609 	.word	0x08004609
 80045bc:	08004609 	.word	0x08004609
 80045c0:	08004609 	.word	0x08004609
 80045c4:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c8:	f7fe fcd6 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 80045cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045ce:	e021      	b.n	8004614 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <UART_SetConfig+0x2f8>)
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045d4:	e01e      	b.n	8004614 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7fe fc61 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 80045da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045dc:	e01a      	b.n	8004614 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045e4:	e016      	b.n	8004614 <UART_SetConfig+0x308>
 80045e6:	bf00      	nop
 80045e8:	cfff69f3 	.word	0xcfff69f3
 80045ec:	40008000 	.word	0x40008000
 80045f0:	40013800 	.word	0x40013800
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40004400 	.word	0x40004400
 80045fc:	40004800 	.word	0x40004800
 8004600:	40004c00 	.word	0x40004c00
 8004604:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004612:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 812a 	beq.w	8004870 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	4a9e      	ldr	r2, [pc, #632]	; (800489c <UART_SetConfig+0x590>)
 8004622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004626:	461a      	mov	r2, r3
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	fbb3 f3f2 	udiv	r3, r3, r2
 800462e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4413      	add	r3, r2
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	429a      	cmp	r2, r3
 800463e:	d305      	bcc.n	800464c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	429a      	cmp	r2, r3
 800464a:	d903      	bls.n	8004654 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004652:	e10d      	b.n	8004870 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	2200      	movs	r2, #0
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	60fa      	str	r2, [r7, #12]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	4a8e      	ldr	r2, [pc, #568]	; (800489c <UART_SetConfig+0x590>)
 8004662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004666:	b29b      	uxth	r3, r3
 8004668:	2200      	movs	r2, #0
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004676:	f7fc fa8b 	bl	8000b90 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	020b      	lsls	r3, r1, #8
 800468c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004690:	0202      	lsls	r2, r0, #8
 8004692:	6979      	ldr	r1, [r7, #20]
 8004694:	6849      	ldr	r1, [r1, #4]
 8004696:	0849      	lsrs	r1, r1, #1
 8004698:	2000      	movs	r0, #0
 800469a:	460c      	mov	r4, r1
 800469c:	4605      	mov	r5, r0
 800469e:	eb12 0804 	adds.w	r8, r2, r4
 80046a2:	eb43 0905 	adc.w	r9, r3, r5
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	469a      	mov	sl, r3
 80046ae:	4693      	mov	fp, r2
 80046b0:	4652      	mov	r2, sl
 80046b2:	465b      	mov	r3, fp
 80046b4:	4640      	mov	r0, r8
 80046b6:	4649      	mov	r1, r9
 80046b8:	f7fc fa6a 	bl	8000b90 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4613      	mov	r3, r2
 80046c2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ca:	d308      	bcc.n	80046de <UART_SetConfig+0x3d2>
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d2:	d204      	bcs.n	80046de <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	60da      	str	r2, [r3, #12]
 80046dc:	e0c8      	b.n	8004870 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046e4:	e0c4      	b.n	8004870 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ee:	d167      	bne.n	80047c0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80046f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d828      	bhi.n	800474a <UART_SetConfig+0x43e>
 80046f8:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <UART_SetConfig+0x3f4>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004725 	.word	0x08004725
 8004704:	0800472d 	.word	0x0800472d
 8004708:	08004735 	.word	0x08004735
 800470c:	0800474b 	.word	0x0800474b
 8004710:	0800473b 	.word	0x0800473b
 8004714:	0800474b 	.word	0x0800474b
 8004718:	0800474b 	.word	0x0800474b
 800471c:	0800474b 	.word	0x0800474b
 8004720:	08004743 	.word	0x08004743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004724:	f7fe fc28 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 8004728:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800472a:	e014      	b.n	8004756 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800472c:	f7fe fc3a 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 8004730:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004732:	e010      	b.n	8004756 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004734:	4b5a      	ldr	r3, [pc, #360]	; (80048a0 <UART_SetConfig+0x594>)
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004738:	e00d      	b.n	8004756 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473a:	f7fe fbaf 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 800473e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004740:	e009      	b.n	8004756 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004748:	e005      	b.n	8004756 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8089 	beq.w	8004870 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	4a4e      	ldr	r2, [pc, #312]	; (800489c <UART_SetConfig+0x590>)
 8004764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004768:	461a      	mov	r2, r3
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004770:	005a      	lsls	r2, r3, #1
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	441a      	add	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	2b0f      	cmp	r3, #15
 8004788:	d916      	bls.n	80047b8 <UART_SetConfig+0x4ac>
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004790:	d212      	bcs.n	80047b8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f023 030f 	bic.w	r3, r3, #15
 800479a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	085b      	lsrs	r3, r3, #1
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	8bfb      	ldrh	r3, [r7, #30]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	8bfa      	ldrh	r2, [r7, #30]
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	e05b      	b.n	8004870 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047be:	e057      	b.n	8004870 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d828      	bhi.n	800481a <UART_SetConfig+0x50e>
 80047c8:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x4c4>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	08004805 	.word	0x08004805
 80047dc:	0800481b 	.word	0x0800481b
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	0800481b 	.word	0x0800481b
 80047e8:	0800481b 	.word	0x0800481b
 80047ec:	0800481b 	.word	0x0800481b
 80047f0:	08004813 	.word	0x08004813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fe fbc0 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 80047f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047fa:	e014      	b.n	8004826 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7fe fbd2 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 8004800:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004802:	e010      	b.n	8004826 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004804:	4b26      	ldr	r3, [pc, #152]	; (80048a0 <UART_SetConfig+0x594>)
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004808:	e00d      	b.n	8004826 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7fe fb47 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 800480e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004810:	e009      	b.n	8004826 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004818:	e005      	b.n	8004826 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004824:	bf00      	nop
    }

    if (pclk != 0U)
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	2b00      	cmp	r3, #0
 800482a:	d021      	beq.n	8004870 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	4a1a      	ldr	r2, [pc, #104]	; (800489c <UART_SetConfig+0x590>)
 8004832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004836:	461a      	mov	r2, r3
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	fbb3 f2f2 	udiv	r2, r3, r2
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	441a      	add	r2, r3
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	d909      	bls.n	800486a <UART_SetConfig+0x55e>
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800485c:	d205      	bcs.n	800486a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	b29a      	uxth	r2, r3
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60da      	str	r2, [r3, #12]
 8004868:	e002      	b.n	8004870 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2201      	movs	r2, #1
 8004874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2201      	movs	r2, #1
 800487c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2200      	movs	r2, #0
 8004884:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2200      	movs	r2, #0
 800488a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800488c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004890:	4618      	mov	r0, r3
 8004892:	3730      	adds	r7, #48	; 0x30
 8004894:	46bd      	mov	sp, r7
 8004896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800489a:	bf00      	nop
 800489c:	08005628 	.word	0x08005628
 80048a0:	00f42400 	.word	0x00f42400

080048a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01a      	beq.n	80049ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a2:	d10a      	bne.n	80049ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049f8:	f7fd faac 	bl	8001f54 <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d10e      	bne.n	8004a2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f82f 	bl	8004a7e <UART_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e025      	b.n	8004a76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d10e      	bne.n	8004a56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f819 	bl	8004a7e <UART_WaitOnFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e00f      	b.n	8004a76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b09c      	sub	sp, #112	; 0x70
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a8e:	e0a9      	b.n	8004be4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	f000 80a5 	beq.w	8004be4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a9a:	f7fd fa5b 	bl	8001f54 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d302      	bcc.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d140      	bne.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ac4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ad0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ad4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e6      	bne.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	663b      	str	r3, [r7, #96]	; 0x60
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3308      	adds	r3, #8
 8004b00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b02:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e5      	bne.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e069      	b.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d051      	beq.n	8004be4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b4e:	d149      	bne.n	8004be4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b78:	637b      	str	r3, [r7, #52]	; 0x34
 8004b7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e6      	bne.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bac:	623a      	str	r2, [r7, #32]
 8004bae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	69f9      	ldr	r1, [r7, #28]
 8004bb2:	6a3a      	ldr	r2, [r7, #32]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e010      	b.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	4013      	ands	r3, r2
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	bf0c      	ite	eq
 8004bf4:	2301      	moveq	r3, #1
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	f43f af46 	beq.w	8004a90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3770      	adds	r7, #112	; 0x70
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_UARTEx_DisableFifoMode+0x16>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e027      	b.n	8004c74 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2224      	movs	r2, #36	; 0x24
 8004c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0201 	bic.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e02d      	b.n	8004cf4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2224      	movs	r2, #36	; 0x24
 8004ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0201 	bic.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f84f 	bl	8004d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e02d      	b.n	8004d70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2224      	movs	r2, #36	; 0x24
 8004d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f811 	bl	8004d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d108      	bne.n	8004d9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d98:	e031      	b.n	8004dfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d9e:	2308      	movs	r3, #8
 8004da0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	0e5b      	lsrs	r3, r3, #25
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	0f5b      	lsrs	r3, r3, #29
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dc2:	7bbb      	ldrb	r3, [r7, #14]
 8004dc4:	7b3a      	ldrb	r2, [r7, #12]
 8004dc6:	4911      	ldr	r1, [pc, #68]	; (8004e0c <UARTEx_SetNbDataToProcess+0x94>)
 8004dc8:	5c8a      	ldrb	r2, [r1, r2]
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004dce:	7b3a      	ldrb	r2, [r7, #12]
 8004dd0:	490f      	ldr	r1, [pc, #60]	; (8004e10 <UARTEx_SetNbDataToProcess+0x98>)
 8004dd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	7b7a      	ldrb	r2, [r7, #13]
 8004de4:	4909      	ldr	r1, [pc, #36]	; (8004e0c <UARTEx_SetNbDataToProcess+0x94>)
 8004de6:	5c8a      	ldrb	r2, [r1, r2]
 8004de8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004dec:	7b7a      	ldrb	r2, [r7, #13]
 8004dee:	4908      	ldr	r1, [pc, #32]	; (8004e10 <UARTEx_SetNbDataToProcess+0x98>)
 8004df0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004df2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	08005640 	.word	0x08005640
 8004e10:	08005648 	.word	0x08005648

08004e14 <__errno>:
 8004e14:	4b01      	ldr	r3, [pc, #4]	; (8004e1c <__errno+0x8>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	2000000c 	.word	0x2000000c

08004e20 <__libc_init_array>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	4d0d      	ldr	r5, [pc, #52]	; (8004e58 <__libc_init_array+0x38>)
 8004e24:	4c0d      	ldr	r4, [pc, #52]	; (8004e5c <__libc_init_array+0x3c>)
 8004e26:	1b64      	subs	r4, r4, r5
 8004e28:	10a4      	asrs	r4, r4, #2
 8004e2a:	2600      	movs	r6, #0
 8004e2c:	42a6      	cmp	r6, r4
 8004e2e:	d109      	bne.n	8004e44 <__libc_init_array+0x24>
 8004e30:	4d0b      	ldr	r5, [pc, #44]	; (8004e60 <__libc_init_array+0x40>)
 8004e32:	4c0c      	ldr	r4, [pc, #48]	; (8004e64 <__libc_init_array+0x44>)
 8004e34:	f000 fae0 	bl	80053f8 <_init>
 8004e38:	1b64      	subs	r4, r4, r5
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	42a6      	cmp	r6, r4
 8004e40:	d105      	bne.n	8004e4e <__libc_init_array+0x2e>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e48:	4798      	blx	r3
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7ee      	b.n	8004e2c <__libc_init_array+0xc>
 8004e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e52:	4798      	blx	r3
 8004e54:	3601      	adds	r6, #1
 8004e56:	e7f2      	b.n	8004e3e <__libc_init_array+0x1e>
 8004e58:	0800565c 	.word	0x0800565c
 8004e5c:	0800565c 	.word	0x0800565c
 8004e60:	0800565c 	.word	0x0800565c
 8004e64:	08005660 	.word	0x08005660

08004e68 <malloc>:
 8004e68:	4b02      	ldr	r3, [pc, #8]	; (8004e74 <malloc+0xc>)
 8004e6a:	4601      	mov	r1, r0
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	f000 b82b 	b.w	8004ec8 <_malloc_r>
 8004e72:	bf00      	nop
 8004e74:	2000000c 	.word	0x2000000c

08004e78 <memset>:
 8004e78:	4402      	add	r2, r0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d100      	bne.n	8004e82 <memset+0xa>
 8004e80:	4770      	bx	lr
 8004e82:	f803 1b01 	strb.w	r1, [r3], #1
 8004e86:	e7f9      	b.n	8004e7c <memset+0x4>

08004e88 <sbrk_aligned>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	4e0e      	ldr	r6, [pc, #56]	; (8004ec4 <sbrk_aligned+0x3c>)
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	6831      	ldr	r1, [r6, #0]
 8004e90:	4605      	mov	r5, r0
 8004e92:	b911      	cbnz	r1, 8004e9a <sbrk_aligned+0x12>
 8004e94:	f000 f88c 	bl	8004fb0 <_sbrk_r>
 8004e98:	6030      	str	r0, [r6, #0]
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 f887 	bl	8004fb0 <_sbrk_r>
 8004ea2:	1c43      	adds	r3, r0, #1
 8004ea4:	d00a      	beq.n	8004ebc <sbrk_aligned+0x34>
 8004ea6:	1cc4      	adds	r4, r0, #3
 8004ea8:	f024 0403 	bic.w	r4, r4, #3
 8004eac:	42a0      	cmp	r0, r4
 8004eae:	d007      	beq.n	8004ec0 <sbrk_aligned+0x38>
 8004eb0:	1a21      	subs	r1, r4, r0
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f000 f87c 	bl	8004fb0 <_sbrk_r>
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d101      	bne.n	8004ec0 <sbrk_aligned+0x38>
 8004ebc:	f04f 34ff 	mov.w	r4, #4294967295
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
 8004ec4:	2000018c 	.word	0x2000018c

08004ec8 <_malloc_r>:
 8004ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ecc:	1ccd      	adds	r5, r1, #3
 8004ece:	f025 0503 	bic.w	r5, r5, #3
 8004ed2:	3508      	adds	r5, #8
 8004ed4:	2d0c      	cmp	r5, #12
 8004ed6:	bf38      	it	cc
 8004ed8:	250c      	movcc	r5, #12
 8004eda:	2d00      	cmp	r5, #0
 8004edc:	4607      	mov	r7, r0
 8004ede:	db01      	blt.n	8004ee4 <_malloc_r+0x1c>
 8004ee0:	42a9      	cmp	r1, r5
 8004ee2:	d905      	bls.n	8004ef0 <_malloc_r+0x28>
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	2600      	movs	r6, #0
 8004eea:	4630      	mov	r0, r6
 8004eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef0:	4e2e      	ldr	r6, [pc, #184]	; (8004fac <_malloc_r+0xe4>)
 8004ef2:	f000 f86d 	bl	8004fd0 <__malloc_lock>
 8004ef6:	6833      	ldr	r3, [r6, #0]
 8004ef8:	461c      	mov	r4, r3
 8004efa:	bb34      	cbnz	r4, 8004f4a <_malloc_r+0x82>
 8004efc:	4629      	mov	r1, r5
 8004efe:	4638      	mov	r0, r7
 8004f00:	f7ff ffc2 	bl	8004e88 <sbrk_aligned>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	4604      	mov	r4, r0
 8004f08:	d14d      	bne.n	8004fa6 <_malloc_r+0xde>
 8004f0a:	6834      	ldr	r4, [r6, #0]
 8004f0c:	4626      	mov	r6, r4
 8004f0e:	2e00      	cmp	r6, #0
 8004f10:	d140      	bne.n	8004f94 <_malloc_r+0xcc>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	4631      	mov	r1, r6
 8004f16:	4638      	mov	r0, r7
 8004f18:	eb04 0803 	add.w	r8, r4, r3
 8004f1c:	f000 f848 	bl	8004fb0 <_sbrk_r>
 8004f20:	4580      	cmp	r8, r0
 8004f22:	d13a      	bne.n	8004f9a <_malloc_r+0xd2>
 8004f24:	6821      	ldr	r1, [r4, #0]
 8004f26:	3503      	adds	r5, #3
 8004f28:	1a6d      	subs	r5, r5, r1
 8004f2a:	f025 0503 	bic.w	r5, r5, #3
 8004f2e:	3508      	adds	r5, #8
 8004f30:	2d0c      	cmp	r5, #12
 8004f32:	bf38      	it	cc
 8004f34:	250c      	movcc	r5, #12
 8004f36:	4629      	mov	r1, r5
 8004f38:	4638      	mov	r0, r7
 8004f3a:	f7ff ffa5 	bl	8004e88 <sbrk_aligned>
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d02b      	beq.n	8004f9a <_malloc_r+0xd2>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	442b      	add	r3, r5
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	e00e      	b.n	8004f68 <_malloc_r+0xa0>
 8004f4a:	6822      	ldr	r2, [r4, #0]
 8004f4c:	1b52      	subs	r2, r2, r5
 8004f4e:	d41e      	bmi.n	8004f8e <_malloc_r+0xc6>
 8004f50:	2a0b      	cmp	r2, #11
 8004f52:	d916      	bls.n	8004f82 <_malloc_r+0xba>
 8004f54:	1961      	adds	r1, r4, r5
 8004f56:	42a3      	cmp	r3, r4
 8004f58:	6025      	str	r5, [r4, #0]
 8004f5a:	bf18      	it	ne
 8004f5c:	6059      	strne	r1, [r3, #4]
 8004f5e:	6863      	ldr	r3, [r4, #4]
 8004f60:	bf08      	it	eq
 8004f62:	6031      	streq	r1, [r6, #0]
 8004f64:	5162      	str	r2, [r4, r5]
 8004f66:	604b      	str	r3, [r1, #4]
 8004f68:	4638      	mov	r0, r7
 8004f6a:	f104 060b 	add.w	r6, r4, #11
 8004f6e:	f000 f835 	bl	8004fdc <__malloc_unlock>
 8004f72:	f026 0607 	bic.w	r6, r6, #7
 8004f76:	1d23      	adds	r3, r4, #4
 8004f78:	1af2      	subs	r2, r6, r3
 8004f7a:	d0b6      	beq.n	8004eea <_malloc_r+0x22>
 8004f7c:	1b9b      	subs	r3, r3, r6
 8004f7e:	50a3      	str	r3, [r4, r2]
 8004f80:	e7b3      	b.n	8004eea <_malloc_r+0x22>
 8004f82:	6862      	ldr	r2, [r4, #4]
 8004f84:	42a3      	cmp	r3, r4
 8004f86:	bf0c      	ite	eq
 8004f88:	6032      	streq	r2, [r6, #0]
 8004f8a:	605a      	strne	r2, [r3, #4]
 8004f8c:	e7ec      	b.n	8004f68 <_malloc_r+0xa0>
 8004f8e:	4623      	mov	r3, r4
 8004f90:	6864      	ldr	r4, [r4, #4]
 8004f92:	e7b2      	b.n	8004efa <_malloc_r+0x32>
 8004f94:	4634      	mov	r4, r6
 8004f96:	6876      	ldr	r6, [r6, #4]
 8004f98:	e7b9      	b.n	8004f0e <_malloc_r+0x46>
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	f000 f81c 	bl	8004fdc <__malloc_unlock>
 8004fa4:	e7a1      	b.n	8004eea <_malloc_r+0x22>
 8004fa6:	6025      	str	r5, [r4, #0]
 8004fa8:	e7de      	b.n	8004f68 <_malloc_r+0xa0>
 8004faa:	bf00      	nop
 8004fac:	20000188 	.word	0x20000188

08004fb0 <_sbrk_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4d06      	ldr	r5, [pc, #24]	; (8004fcc <_sbrk_r+0x1c>)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	602b      	str	r3, [r5, #0]
 8004fbc:	f7fc fe3e 	bl	8001c3c <_sbrk>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_sbrk_r+0x1a>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_sbrk_r+0x1a>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	20000190 	.word	0x20000190

08004fd0 <__malloc_lock>:
 8004fd0:	4801      	ldr	r0, [pc, #4]	; (8004fd8 <__malloc_lock+0x8>)
 8004fd2:	f000 b809 	b.w	8004fe8 <__retarget_lock_acquire_recursive>
 8004fd6:	bf00      	nop
 8004fd8:	20000194 	.word	0x20000194

08004fdc <__malloc_unlock>:
 8004fdc:	4801      	ldr	r0, [pc, #4]	; (8004fe4 <__malloc_unlock+0x8>)
 8004fde:	f000 b804 	b.w	8004fea <__retarget_lock_release_recursive>
 8004fe2:	bf00      	nop
 8004fe4:	20000194 	.word	0x20000194

08004fe8 <__retarget_lock_acquire_recursive>:
 8004fe8:	4770      	bx	lr

08004fea <__retarget_lock_release_recursive>:
 8004fea:	4770      	bx	lr
 8004fec:	0000      	movs	r0, r0
	...

08004ff0 <log>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	ed2d 8b02 	vpush	{d8}
 8004ff6:	ec55 4b10 	vmov	r4, r5, d0
 8004ffa:	f000 f839 	bl	8005070 <__ieee754_log>
 8004ffe:	4622      	mov	r2, r4
 8005000:	462b      	mov	r3, r5
 8005002:	4620      	mov	r0, r4
 8005004:	4629      	mov	r1, r5
 8005006:	eeb0 8a40 	vmov.f32	s16, s0
 800500a:	eef0 8a60 	vmov.f32	s17, s1
 800500e:	f7fb fd59 	bl	8000ac4 <__aeabi_dcmpun>
 8005012:	b998      	cbnz	r0, 800503c <log+0x4c>
 8005014:	2200      	movs	r2, #0
 8005016:	2300      	movs	r3, #0
 8005018:	4620      	mov	r0, r4
 800501a:	4629      	mov	r1, r5
 800501c:	f7fb fd48 	bl	8000ab0 <__aeabi_dcmpgt>
 8005020:	b960      	cbnz	r0, 800503c <log+0x4c>
 8005022:	2200      	movs	r2, #0
 8005024:	2300      	movs	r3, #0
 8005026:	4620      	mov	r0, r4
 8005028:	4629      	mov	r1, r5
 800502a:	f7fb fd19 	bl	8000a60 <__aeabi_dcmpeq>
 800502e:	b160      	cbz	r0, 800504a <log+0x5a>
 8005030:	f7ff fef0 	bl	8004e14 <__errno>
 8005034:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8005060 <log+0x70>
 8005038:	2322      	movs	r3, #34	; 0x22
 800503a:	6003      	str	r3, [r0, #0]
 800503c:	eeb0 0a48 	vmov.f32	s0, s16
 8005040:	eef0 0a68 	vmov.f32	s1, s17
 8005044:	ecbd 8b02 	vpop	{d8}
 8005048:	bd38      	pop	{r3, r4, r5, pc}
 800504a:	f7ff fee3 	bl	8004e14 <__errno>
 800504e:	ecbd 8b02 	vpop	{d8}
 8005052:	2321      	movs	r3, #33	; 0x21
 8005054:	6003      	str	r3, [r0, #0]
 8005056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800505a:	4803      	ldr	r0, [pc, #12]	; (8005068 <log+0x78>)
 800505c:	f000 b9c4 	b.w	80053e8 <nan>
 8005060:	00000000 	.word	0x00000000
 8005064:	fff00000 	.word	0xfff00000
 8005068:	08005650 	.word	0x08005650
 800506c:	00000000 	.word	0x00000000

08005070 <__ieee754_log>:
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	ec51 0b10 	vmov	r0, r1, d0
 8005078:	ed2d 8b04 	vpush	{d8-d9}
 800507c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005080:	b083      	sub	sp, #12
 8005082:	460d      	mov	r5, r1
 8005084:	da29      	bge.n	80050da <__ieee754_log+0x6a>
 8005086:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800508a:	4303      	orrs	r3, r0
 800508c:	ee10 2a10 	vmov	r2, s0
 8005090:	d10c      	bne.n	80050ac <__ieee754_log+0x3c>
 8005092:	49cf      	ldr	r1, [pc, #828]	; (80053d0 <__ieee754_log+0x360>)
 8005094:	2200      	movs	r2, #0
 8005096:	2300      	movs	r3, #0
 8005098:	2000      	movs	r0, #0
 800509a:	f7fb fba3 	bl	80007e4 <__aeabi_ddiv>
 800509e:	ec41 0b10 	vmov	d0, r0, r1
 80050a2:	b003      	add	sp, #12
 80050a4:	ecbd 8b04 	vpop	{d8-d9}
 80050a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ac:	2900      	cmp	r1, #0
 80050ae:	da05      	bge.n	80050bc <__ieee754_log+0x4c>
 80050b0:	460b      	mov	r3, r1
 80050b2:	f7fb f8b5 	bl	8000220 <__aeabi_dsub>
 80050b6:	2200      	movs	r2, #0
 80050b8:	2300      	movs	r3, #0
 80050ba:	e7ee      	b.n	800509a <__ieee754_log+0x2a>
 80050bc:	4bc5      	ldr	r3, [pc, #788]	; (80053d4 <__ieee754_log+0x364>)
 80050be:	2200      	movs	r2, #0
 80050c0:	f7fb fa66 	bl	8000590 <__aeabi_dmul>
 80050c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80050c8:	460d      	mov	r5, r1
 80050ca:	4ac3      	ldr	r2, [pc, #780]	; (80053d8 <__ieee754_log+0x368>)
 80050cc:	4295      	cmp	r5, r2
 80050ce:	dd06      	ble.n	80050de <__ieee754_log+0x6e>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	f7fb f8a6 	bl	8000224 <__adddf3>
 80050d8:	e7e1      	b.n	800509e <__ieee754_log+0x2e>
 80050da:	2300      	movs	r3, #0
 80050dc:	e7f5      	b.n	80050ca <__ieee754_log+0x5a>
 80050de:	152c      	asrs	r4, r5, #20
 80050e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80050e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80050e8:	441c      	add	r4, r3
 80050ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80050ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80050f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80050fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80050fe:	ea42 0105 	orr.w	r1, r2, r5
 8005102:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005106:	2200      	movs	r2, #0
 8005108:	4bb4      	ldr	r3, [pc, #720]	; (80053dc <__ieee754_log+0x36c>)
 800510a:	f7fb f889 	bl	8000220 <__aeabi_dsub>
 800510e:	1cab      	adds	r3, r5, #2
 8005110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005114:	2b02      	cmp	r3, #2
 8005116:	4682      	mov	sl, r0
 8005118:	468b      	mov	fp, r1
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	dc53      	bgt.n	80051c8 <__ieee754_log+0x158>
 8005120:	2300      	movs	r3, #0
 8005122:	f7fb fc9d 	bl	8000a60 <__aeabi_dcmpeq>
 8005126:	b1d0      	cbz	r0, 800515e <__ieee754_log+0xee>
 8005128:	2c00      	cmp	r4, #0
 800512a:	f000 8122 	beq.w	8005372 <__ieee754_log+0x302>
 800512e:	4620      	mov	r0, r4
 8005130:	f7fb f9c4 	bl	80004bc <__aeabi_i2d>
 8005134:	a390      	add	r3, pc, #576	; (adr r3, 8005378 <__ieee754_log+0x308>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	4606      	mov	r6, r0
 800513c:	460f      	mov	r7, r1
 800513e:	f7fb fa27 	bl	8000590 <__aeabi_dmul>
 8005142:	a38f      	add	r3, pc, #572	; (adr r3, 8005380 <__ieee754_log+0x310>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	4604      	mov	r4, r0
 800514a:	460d      	mov	r5, r1
 800514c:	4630      	mov	r0, r6
 800514e:	4639      	mov	r1, r7
 8005150:	f7fb fa1e 	bl	8000590 <__aeabi_dmul>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4620      	mov	r0, r4
 800515a:	4629      	mov	r1, r5
 800515c:	e7ba      	b.n	80050d4 <__ieee754_log+0x64>
 800515e:	a38a      	add	r3, pc, #552	; (adr r3, 8005388 <__ieee754_log+0x318>)
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	4650      	mov	r0, sl
 8005166:	4659      	mov	r1, fp
 8005168:	f7fb fa12 	bl	8000590 <__aeabi_dmul>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	2000      	movs	r0, #0
 8005172:	499b      	ldr	r1, [pc, #620]	; (80053e0 <__ieee754_log+0x370>)
 8005174:	f7fb f854 	bl	8000220 <__aeabi_dsub>
 8005178:	4652      	mov	r2, sl
 800517a:	4606      	mov	r6, r0
 800517c:	460f      	mov	r7, r1
 800517e:	465b      	mov	r3, fp
 8005180:	4650      	mov	r0, sl
 8005182:	4659      	mov	r1, fp
 8005184:	f7fb fa04 	bl	8000590 <__aeabi_dmul>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4630      	mov	r0, r6
 800518e:	4639      	mov	r1, r7
 8005190:	f7fb f9fe 	bl	8000590 <__aeabi_dmul>
 8005194:	4606      	mov	r6, r0
 8005196:	460f      	mov	r7, r1
 8005198:	b914      	cbnz	r4, 80051a0 <__ieee754_log+0x130>
 800519a:	4632      	mov	r2, r6
 800519c:	463b      	mov	r3, r7
 800519e:	e0a2      	b.n	80052e6 <__ieee754_log+0x276>
 80051a0:	4620      	mov	r0, r4
 80051a2:	f7fb f98b 	bl	80004bc <__aeabi_i2d>
 80051a6:	a374      	add	r3, pc, #464	; (adr r3, 8005378 <__ieee754_log+0x308>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	4680      	mov	r8, r0
 80051ae:	4689      	mov	r9, r1
 80051b0:	f7fb f9ee 	bl	8000590 <__aeabi_dmul>
 80051b4:	a372      	add	r3, pc, #456	; (adr r3, 8005380 <__ieee754_log+0x310>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	4604      	mov	r4, r0
 80051bc:	460d      	mov	r5, r1
 80051be:	4640      	mov	r0, r8
 80051c0:	4649      	mov	r1, r9
 80051c2:	f7fb f9e5 	bl	8000590 <__aeabi_dmul>
 80051c6:	e0a7      	b.n	8005318 <__ieee754_log+0x2a8>
 80051c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051cc:	f7fb f82a 	bl	8000224 <__adddf3>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4650      	mov	r0, sl
 80051d6:	4659      	mov	r1, fp
 80051d8:	f7fb fb04 	bl	80007e4 <__aeabi_ddiv>
 80051dc:	ec41 0b18 	vmov	d8, r0, r1
 80051e0:	4620      	mov	r0, r4
 80051e2:	f7fb f96b 	bl	80004bc <__aeabi_i2d>
 80051e6:	ec53 2b18 	vmov	r2, r3, d8
 80051ea:	ec41 0b19 	vmov	d9, r0, r1
 80051ee:	ec51 0b18 	vmov	r0, r1, d8
 80051f2:	f7fb f9cd 	bl	8000590 <__aeabi_dmul>
 80051f6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80051fa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4680      	mov	r8, r0
 8005206:	4689      	mov	r9, r1
 8005208:	f7fb f9c2 	bl	8000590 <__aeabi_dmul>
 800520c:	a360      	add	r3, pc, #384	; (adr r3, 8005390 <__ieee754_log+0x320>)
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	4606      	mov	r6, r0
 8005214:	460f      	mov	r7, r1
 8005216:	f7fb f9bb 	bl	8000590 <__aeabi_dmul>
 800521a:	a35f      	add	r3, pc, #380	; (adr r3, 8005398 <__ieee754_log+0x328>)
 800521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005220:	f7fb f800 	bl	8000224 <__adddf3>
 8005224:	4632      	mov	r2, r6
 8005226:	463b      	mov	r3, r7
 8005228:	f7fb f9b2 	bl	8000590 <__aeabi_dmul>
 800522c:	a35c      	add	r3, pc, #368	; (adr r3, 80053a0 <__ieee754_log+0x330>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7fa fff7 	bl	8000224 <__adddf3>
 8005236:	4632      	mov	r2, r6
 8005238:	463b      	mov	r3, r7
 800523a:	f7fb f9a9 	bl	8000590 <__aeabi_dmul>
 800523e:	a35a      	add	r3, pc, #360	; (adr r3, 80053a8 <__ieee754_log+0x338>)
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f7fa ffee 	bl	8000224 <__adddf3>
 8005248:	4642      	mov	r2, r8
 800524a:	464b      	mov	r3, r9
 800524c:	f7fb f9a0 	bl	8000590 <__aeabi_dmul>
 8005250:	a357      	add	r3, pc, #348	; (adr r3, 80053b0 <__ieee754_log+0x340>)
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	4680      	mov	r8, r0
 8005258:	4689      	mov	r9, r1
 800525a:	4630      	mov	r0, r6
 800525c:	4639      	mov	r1, r7
 800525e:	f7fb f997 	bl	8000590 <__aeabi_dmul>
 8005262:	a355      	add	r3, pc, #340	; (adr r3, 80053b8 <__ieee754_log+0x348>)
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	f7fa ffdc 	bl	8000224 <__adddf3>
 800526c:	4632      	mov	r2, r6
 800526e:	463b      	mov	r3, r7
 8005270:	f7fb f98e 	bl	8000590 <__aeabi_dmul>
 8005274:	a352      	add	r3, pc, #328	; (adr r3, 80053c0 <__ieee754_log+0x350>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f7fa ffd3 	bl	8000224 <__adddf3>
 800527e:	4632      	mov	r2, r6
 8005280:	463b      	mov	r3, r7
 8005282:	f7fb f985 	bl	8000590 <__aeabi_dmul>
 8005286:	460b      	mov	r3, r1
 8005288:	4602      	mov	r2, r0
 800528a:	4649      	mov	r1, r9
 800528c:	4640      	mov	r0, r8
 800528e:	f7fa ffc9 	bl	8000224 <__adddf3>
 8005292:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005296:	9b01      	ldr	r3, [sp, #4]
 8005298:	3551      	adds	r5, #81	; 0x51
 800529a:	431d      	orrs	r5, r3
 800529c:	2d00      	cmp	r5, #0
 800529e:	4680      	mov	r8, r0
 80052a0:	4689      	mov	r9, r1
 80052a2:	dd48      	ble.n	8005336 <__ieee754_log+0x2c6>
 80052a4:	4b4e      	ldr	r3, [pc, #312]	; (80053e0 <__ieee754_log+0x370>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	4650      	mov	r0, sl
 80052aa:	4659      	mov	r1, fp
 80052ac:	f7fb f970 	bl	8000590 <__aeabi_dmul>
 80052b0:	4652      	mov	r2, sl
 80052b2:	465b      	mov	r3, fp
 80052b4:	f7fb f96c 	bl	8000590 <__aeabi_dmul>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4606      	mov	r6, r0
 80052be:	460f      	mov	r7, r1
 80052c0:	4640      	mov	r0, r8
 80052c2:	4649      	mov	r1, r9
 80052c4:	f7fa ffae 	bl	8000224 <__adddf3>
 80052c8:	ec53 2b18 	vmov	r2, r3, d8
 80052cc:	f7fb f960 	bl	8000590 <__aeabi_dmul>
 80052d0:	4680      	mov	r8, r0
 80052d2:	4689      	mov	r9, r1
 80052d4:	b964      	cbnz	r4, 80052f0 <__ieee754_log+0x280>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4630      	mov	r0, r6
 80052dc:	4639      	mov	r1, r7
 80052de:	f7fa ff9f 	bl	8000220 <__aeabi_dsub>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4650      	mov	r0, sl
 80052e8:	4659      	mov	r1, fp
 80052ea:	f7fa ff99 	bl	8000220 <__aeabi_dsub>
 80052ee:	e6d6      	b.n	800509e <__ieee754_log+0x2e>
 80052f0:	a321      	add	r3, pc, #132	; (adr r3, 8005378 <__ieee754_log+0x308>)
 80052f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f6:	ec51 0b19 	vmov	r0, r1, d9
 80052fa:	f7fb f949 	bl	8000590 <__aeabi_dmul>
 80052fe:	a320      	add	r3, pc, #128	; (adr r3, 8005380 <__ieee754_log+0x310>)
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	4604      	mov	r4, r0
 8005306:	460d      	mov	r5, r1
 8005308:	ec51 0b19 	vmov	r0, r1, d9
 800530c:	f7fb f940 	bl	8000590 <__aeabi_dmul>
 8005310:	4642      	mov	r2, r8
 8005312:	464b      	mov	r3, r9
 8005314:	f7fa ff86 	bl	8000224 <__adddf3>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4630      	mov	r0, r6
 800531e:	4639      	mov	r1, r7
 8005320:	f7fa ff7e 	bl	8000220 <__aeabi_dsub>
 8005324:	4652      	mov	r2, sl
 8005326:	465b      	mov	r3, fp
 8005328:	f7fa ff7a 	bl	8000220 <__aeabi_dsub>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4620      	mov	r0, r4
 8005332:	4629      	mov	r1, r5
 8005334:	e7d9      	b.n	80052ea <__ieee754_log+0x27a>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4650      	mov	r0, sl
 800533c:	4659      	mov	r1, fp
 800533e:	f7fa ff6f 	bl	8000220 <__aeabi_dsub>
 8005342:	ec53 2b18 	vmov	r2, r3, d8
 8005346:	f7fb f923 	bl	8000590 <__aeabi_dmul>
 800534a:	4606      	mov	r6, r0
 800534c:	460f      	mov	r7, r1
 800534e:	2c00      	cmp	r4, #0
 8005350:	f43f af23 	beq.w	800519a <__ieee754_log+0x12a>
 8005354:	a308      	add	r3, pc, #32	; (adr r3, 8005378 <__ieee754_log+0x308>)
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	ec51 0b19 	vmov	r0, r1, d9
 800535e:	f7fb f917 	bl	8000590 <__aeabi_dmul>
 8005362:	a307      	add	r3, pc, #28	; (adr r3, 8005380 <__ieee754_log+0x310>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	4604      	mov	r4, r0
 800536a:	460d      	mov	r5, r1
 800536c:	ec51 0b19 	vmov	r0, r1, d9
 8005370:	e727      	b.n	80051c2 <__ieee754_log+0x152>
 8005372:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80053c8 <__ieee754_log+0x358>
 8005376:	e694      	b.n	80050a2 <__ieee754_log+0x32>
 8005378:	fee00000 	.word	0xfee00000
 800537c:	3fe62e42 	.word	0x3fe62e42
 8005380:	35793c76 	.word	0x35793c76
 8005384:	3dea39ef 	.word	0x3dea39ef
 8005388:	55555555 	.word	0x55555555
 800538c:	3fd55555 	.word	0x3fd55555
 8005390:	df3e5244 	.word	0xdf3e5244
 8005394:	3fc2f112 	.word	0x3fc2f112
 8005398:	96cb03de 	.word	0x96cb03de
 800539c:	3fc74664 	.word	0x3fc74664
 80053a0:	94229359 	.word	0x94229359
 80053a4:	3fd24924 	.word	0x3fd24924
 80053a8:	55555593 	.word	0x55555593
 80053ac:	3fe55555 	.word	0x3fe55555
 80053b0:	d078c69f 	.word	0xd078c69f
 80053b4:	3fc39a09 	.word	0x3fc39a09
 80053b8:	1d8e78af 	.word	0x1d8e78af
 80053bc:	3fcc71c5 	.word	0x3fcc71c5
 80053c0:	9997fa04 	.word	0x9997fa04
 80053c4:	3fd99999 	.word	0x3fd99999
	...
 80053d0:	c3500000 	.word	0xc3500000
 80053d4:	43500000 	.word	0x43500000
 80053d8:	7fefffff 	.word	0x7fefffff
 80053dc:	3ff00000 	.word	0x3ff00000
 80053e0:	3fe00000 	.word	0x3fe00000
 80053e4:	00000000 	.word	0x00000000

080053e8 <nan>:
 80053e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80053f0 <nan+0x8>
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	00000000 	.word	0x00000000
 80053f4:	7ff80000 	.word	0x7ff80000

080053f8 <_init>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	bf00      	nop
 80053fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fe:	bc08      	pop	{r3}
 8005400:	469e      	mov	lr, r3
 8005402:	4770      	bx	lr

08005404 <_fini>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr
