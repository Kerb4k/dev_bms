
dev_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f30  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800654c  0800654c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006554  08006554  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800655c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000070  080065cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080065cc  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d9a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9d  00000000  00000000  00035e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  000388d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  00039bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f2e3  00000000  00000000  0003adc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c4f  00000000  00000000  0005a0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c95ec  00000000  00000000  0006fcf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001392de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  00139330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080060f0 	.word	0x080060f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	080060f0 	.word	0x080060f0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <WakeIdle>:
#define T_WAKE_MAX		400
#define T_REFUP_MAX		4400
#define T_CYCLE_FAST_MAX	1185	// Measure 12 Cells

void WakeIdle(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000e98:	20ff      	movs	r0, #255	; 0xff
 8000e9a:	f000 fc8d 	bl	80017b8 <spi_write_read_byte>
	delay_u(IC_NUM * T_READY);
 8000e9e:	2014      	movs	r0, #20
 8000ea0:	f000 fc56 	bl	8001750 <delay_u>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <WakeUp>:

void WakeUp(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000eac:	20ff      	movs	r0, #255	; 0xff
 8000eae:	f000 fc83 	bl	80017b8 <spi_write_read_byte>
	delay_u(IC_NUM * T_WAKE_MAX);
 8000eb2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000eb6:	f000 fc4b 	bl	8001750 <delay_u>

#if ((IC_NUM * T_WAKE_MAX) >= T_IDLE_MIN)
	spi_write_read_byte(0xFF);
	delay_u(IC_NUM * T_READY);
#endif
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <initialize>:
uint8_t ADCV[2]; //!< Cell Voltage conversion command
uint8_t ADAX[2]; //!< GPIO conversion command
uint8_t ADSTAT[2]; //!< STAT conversion command

void initialize(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af02      	add	r7, sp, #8
	init(MD_NORMAL,DCP_DISABLED,CELL_CH_ALL,AUX_CH_ALL,STS_CH_ALL);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f000 f804 	bl	8000edc <init>
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <init>:
				  uint8_t DCP,	//Discharge Permit
				  uint8_t CH,	//Cell Channels to be measured
				  uint8_t CHG,	//GPIO Channels to be measured
				  uint8_t CHST	//Status Channels to be measured
				  )
{
 8000edc:	b490      	push	{r4, r7}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4623      	mov	r3, r4
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71bb      	strb	r3, [r7, #6]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	717b      	strb	r3, [r7, #5]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	713b      	strb	r3, [r7, #4]
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	105b      	asrs	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
	ADCV[0] = md_bits + 0x02;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	3302      	adds	r3, #2
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <init+0xb8>)
 8000f0e:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	01db      	lsls	r3, r3, #7
 8000f14:	73fb      	strb	r3, [r7, #15]
	ADCV[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	797b      	ldrb	r3, [r7, #5]
 8000f24:	4413      	add	r3, r2
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	3360      	adds	r3, #96	; 0x60
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <init+0xb8>)
 8000f2e:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	105b      	asrs	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
	ADAX[0] = md_bits + 0x04;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	3304      	adds	r3, #4
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <init+0xbc>)
 8000f44:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	01db      	lsls	r3, r3, #7
 8000f4a:	73fb      	strb	r3, [r7, #15]
	ADAX[1] = md_bits + 0x60 + CHG;
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3360      	adds	r3, #96	; 0x60
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <init+0xbc>)
 8000f5a:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	105b      	asrs	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
	ADSTAT[0] = md_bits + 0x04;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <init+0xc0>)
 8000f70:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	01db      	lsls	r3, r3, #7
 8000f76:	73fb      	strb	r3, [r7, #15]
	ADSTAT[1] = md_bits + 0x68 + CHST;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	7e3b      	ldrb	r3, [r7, #24]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	3368      	adds	r3, #104	; 0x68
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <init+0xc0>)
 8000f86:	705a      	strb	r2, [r3, #1]
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc90      	pop	{r4, r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	2000008c 	.word	0x2000008c
 8000f98:	20000090 	.word	0x20000090
 8000f9c:	20000094 	.word	0x20000094

08000fa0 <pec15_calc>:

uint16_t pec15_calc(uint8_t len,	//Number of bytes that will be used to calculate a PEC
                    uint8_t *data	//Array of data that will be used to calculate  a PEC
                   )
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder, addr;

  remainder = 16;					//initialize the PEC
 8000fac:	2310      	movs	r3, #16
 8000fae:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	737b      	strb	r3, [r7, #13]
 8000fb4:	e018      	b.n	8000fe8 <pec15_calc+0x48>
  {
    addr = ((remainder>>7)^data[i])&0xff;	//calculate PEC table address
 8000fb6:	89fb      	ldrh	r3, [r7, #14]
 8000fb8:	09db      	lsrs	r3, r3, #7
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	7b7b      	ldrb	r3, [r7, #13]
 8000fbe:	6839      	ldr	r1, [r7, #0]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	817b      	strh	r3, [r7, #10]
    remainder = (remainder<<8)^crc15Table[addr];
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	897b      	ldrh	r3, [r7, #10]
 8000fd6:	490b      	ldr	r1, [pc, #44]	; (8001004 <pec15_calc+0x64>)
 8000fd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	4053      	eors	r3, r2
 8000fe0:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	737b      	strb	r3, [r7, #13]
 8000fe8:	7b7a      	ldrb	r2, [r7, #13]
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d3e2      	bcc.n	8000fb6 <pec15_calc+0x16>
  }
  return(remainder*2);	//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	b29b      	uxth	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	08006108 	.word	0x08006108

08001008 <rdcv>:

uint8_t rdcv(uint8_t reg,				// Controls which cell voltage register is read back.
                     uint8_t total_ic,			// the number of ICs in the system
                     cell_data_t cell_codes[][18]	// Array of the parsed cell codes
                    )
{
 8001008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100c:	b08b      	sub	sp, #44	; 0x2c
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	603a      	str	r2, [r7, #0]
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	460b      	mov	r3, r1
 8001018:	71bb      	strb	r3, [r7, #6]
 800101a:	466b      	mov	r3, sp
 800101c:	461e      	mov	r6, r3

	const uint8_t NUM_RX_BYT = 8;
 800101e:	2308      	movs	r3, #8
 8001020:	f887 3020 	strb.w	r3, [r7, #32]
	const uint8_t BYT_IN_REG = 6;
 8001024:	2306      	movs	r3, #6
 8001026:	77fb      	strb	r3, [r7, #31]
	const uint8_t CELL_IN_REG = 3;
 8001028:	2303      	movs	r3, #3
 800102a:	77bb      	strb	r3, [r7, #30]

	uint8_t pec_error = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter=0;	//data counter
 8001032:	2300      	movs	r3, #0
 8001034:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if DYNAMIC_MEM
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 18;
 8001038:	2312      	movs	r3, #18
 800103a:	777b      	strb	r3, [r7, #29]
	uint8_t cell_data[NUM_RX_BYT * max_ic];
 800103c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001040:	7f7a      	ldrb	r2, [r7, #29]
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	3b01      	subs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800104e:	7f7a      	ldrb	r2, [r7, #29]
 8001050:	fb02 f303 	mul.w	r3, r2, r3
 8001054:	461a      	mov	r2, r3
 8001056:	2300      	movs	r3, #0
 8001058:	4690      	mov	r8, r2
 800105a:	4699      	mov	r9, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001068:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001070:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001074:	7f7a      	ldrb	r2, [r7, #29]
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	461a      	mov	r2, r3
 800107c:	2300      	movs	r3, #0
 800107e:	4614      	mov	r4, r2
 8001080:	461d      	mov	r5, r3
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	00eb      	lsls	r3, r5, #3
 800108c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001090:	00e2      	lsls	r2, r4, #3
 8001092:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001096:	7f7a      	ldrb	r2, [r7, #29]
 8001098:	fb02 f303 	mul.w	r3, r2, r3
 800109c:	3307      	adds	r3, #7
 800109e:	08db      	lsrs	r3, r3, #3
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	ebad 0d03 	sub.w	sp, sp, r3
 80010a6:	466b      	mov	r3, sp
 80010a8:	3300      	adds	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
#endif


	if (reg == 0)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f040 8088 	bne.w	80011c4 <rdcv+0x1bc>
	{
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 80010b4:	2301      	movs	r3, #1
 80010b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80010ba:	e07d      	b.n	80011b8 <rdcv+0x1b0>
		{
			data_counter = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			rdcv_reg(cell_reg, total_ic,cell_data );				 //Reads a single Cell voltage register
 80010c2:	79b9      	ldrb	r1, [r7, #6]
 80010c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f8f6 	bl	80012bc <rdcv_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80010d6:	e065      	b.n	80011a4 <rdcv+0x19c>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80010de:	e02d      	b.n	800113c <rdcv+0x134>
				{
					// loops once for each of the 3 cell voltage codes in the register

					parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 80010e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	5cd3      	ldrb	r3, [r2, r3]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010ee:	3301      	adds	r3, #1
 80010f0:	6979      	ldr	r1, [r7, #20]
 80010f2:	5ccb      	ldrb	r3, [r1, r3]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	81fb      	strh	r3, [r7, #14]
					// create the parsed cell voltage code
					//cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
					cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)].voltage = parsed_cell;
 80010fe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	461a      	mov	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	4413      	add	r3, r2
 8001110:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001114:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001118:	3a01      	subs	r2, #1
 800111a:	7fb8      	ldrb	r0, [r7, #30]
 800111c:	fb00 f202 	mul.w	r2, r0, r2
 8001120:	440a      	add	r2, r1
 8001122:	89f9      	ldrh	r1, [r7, #14]
 8001124:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 8001128:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800112c:	3302      	adds	r3, #2
 800112e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001136:	3301      	adds	r3, #1
 8001138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800113c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001140:	7fbb      	ldrb	r3, [r7, #30]
 8001142:	429a      	cmp	r2, r3
 8001144:	d3cc      	bcc.n	80010e0 <rdcv+0xd8>
					//must increment by two for each parsed cell code
				}
				received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001146:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	5cd3      	ldrb	r3, [r2, r3]
 800114e:	b29b      	uxth	r3, r3
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b29a      	uxth	r2, r3
 8001154:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001158:	3301      	adds	r3, #1
 800115a:	6979      	ldr	r1, [r7, #20]
 800115c:	5ccb      	ldrb	r3, [r1, r3]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4413      	add	r3, r2
 8001162:	827b      	strh	r3, [r7, #18]
				//after the 6 cell voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001164:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001168:	f897 2020 	ldrb.w	r2, [r7, #32]
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	441a      	add	r2, r3
 8001174:	7ffb      	ldrb	r3, [r7, #31]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff11 	bl	8000fa0 <pec15_calc>
 800117e:	4603      	mov	r3, r0
 8001180:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 8001182:	8a7a      	ldrh	r2, [r7, #18]
 8001184:	8a3b      	ldrh	r3, [r7, #16]
 8001186:	429a      	cmp	r2, r3
 8001188:	d002      	beq.n	8001190 <rdcv+0x188>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 800118a:	23ff      	movs	r3, #255	; 0xff
 800118c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					//are detected in the serial data
				}
			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8001190:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001194:	3302      	adds	r3, #2
 8001196:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 800119a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800119e:	3301      	adds	r3, #1
 80011a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80011a4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d394      	bcc.n	80010d8 <rdcv+0xd0>
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 80011ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011b2:	3301      	adds	r3, #1
 80011b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80011b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011bc:	2b06      	cmp	r3, #6
 80011be:	f67f af7d 	bls.w	80010bc <rdcv+0xb4>
 80011c2:	e073      	b.n	80012ac <rdcv+0x2a4>
		}
	}

	else
	{
		rdcv_reg(reg, total_ic,cell_data);
 80011c4:	79b9      	ldrb	r1, [r7, #6]
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f876 	bl	80012bc <rdcv_reg>
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80011d6:	e064      	b.n	80012a2 <rdcv+0x29a>
		{
			// current_ic is used as the IC counter
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80011de:	e02c      	b.n	800123a <rdcv+0x232>
			{
				// loops once for each of the 3 cell voltage codes in the register

				parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8); //Each cell code is received as two bytes and is combined to
 80011e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	5cd3      	ldrb	r3, [r2, r3]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011ee:	3301      	adds	r3, #1
 80011f0:	6979      	ldr	r1, [r7, #20]
 80011f2:	5ccb      	ldrb	r3, [r1, r3]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	81fb      	strh	r3, [r7, #14]
				// create the parsed cell voltage code

				//cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
				cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)].voltage = 0x0000FFFF & parsed_cell;
 80011fe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	461a      	mov	r2, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001214:	79fa      	ldrb	r2, [r7, #7]
 8001216:	3a01      	subs	r2, #1
 8001218:	7fb8      	ldrb	r0, [r7, #30]
 800121a:	fb00 f202 	mul.w	r2, r0, r2
 800121e:	440a      	add	r2, r1
 8001220:	89f9      	ldrh	r1, [r7, #14]
 8001222:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter= data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 8001226:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800122a:	3302      	adds	r3, #2
 800122c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001230:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001234:	3301      	adds	r3, #1
 8001236:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800123a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800123e:	7fbb      	ldrb	r3, [r7, #30]
 8001240:	429a      	cmp	r2, r3
 8001242:	d3cd      	bcc.n	80011e0 <rdcv+0x1d8>
				//must increment by two for each parsed cell code
			}
			received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001244:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	5cd3      	ldrb	r3, [r2, r3]
 800124c:	b29b      	uxth	r3, r3
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b29a      	uxth	r2, r3
 8001252:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001256:	3301      	adds	r3, #1
 8001258:	6979      	ldr	r1, [r7, #20]
 800125a:	5ccb      	ldrb	r3, [r1, r3]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	827b      	strh	r3, [r7, #18]
			//after the 6 cell voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001262:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001266:	f897 2020 	ldrb.w	r2, [r7, #32]
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	441a      	add	r2, r3
 8001272:	7ffb      	ldrb	r3, [r7, #31]
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fe92 	bl	8000fa0 <pec15_calc>
 800127c:	4603      	mov	r3, r0
 800127e:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 8001280:	8a7a      	ldrh	r2, [r7, #18]
 8001282:	8a3b      	ldrh	r3, [r7, #16]
 8001284:	429a      	cmp	r2, r3
 8001286:	d002      	beq.n	800128e <rdcv+0x286>
			{
				pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 8001288:	23ff      	movs	r3, #255	; 0xff
 800128a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//are detected in the serial data
			}
			data_counter= data_counter + 2;                       //Because the transmitted PEC code is 2 bytes long the data_counter
 800128e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001292:	3302      	adds	r3, #2
 8001294:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 8001298:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800129c:	3301      	adds	r3, #1
 800129e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80012a2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d395      	bcc.n	80011d8 <rdcv+0x1d0>
		}
	}
#if DYNAMIC_MEM
	free(cell_data);
#endif
	return(pec_error);
 80012ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b0:	46b5      	mov	sp, r6
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	372c      	adds	r7, #44	; 0x2c
 80012b6:	46bd      	mov	sp, r7
 80012b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080012bc <rdcv_reg>:
*/
void rdcv_reg(uint8_t reg,			//Determines which cell voltage register is read back
                      uint8_t total_ic,		//the number of ICs in the
                      uint8_t *data			//An array of the unparsed cell codes
                     )
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	603a      	str	r2, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	460b      	mov	r3, r1
 80012ca:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 80012cc:	2308      	movs	r3, #8
 80012ce:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d104      	bne.n	80012e0 <rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 80012d6:	2304      	movs	r3, #4
 80012d8:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	723b      	strb	r3, [r7, #8]
 80012de:	e026      	b.n	800132e <rdcv_reg+0x72>
	}
	else if (reg == 2)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d104      	bne.n	80012f0 <rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 80012e6:	2306      	movs	r3, #6
 80012e8:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	723b      	strb	r3, [r7, #8]
 80012ee:	e01e      	b.n	800132e <rdcv_reg+0x72>
	}
	else if (reg == 3)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d104      	bne.n	8001300 <rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 80012f6:	2308      	movs	r3, #8
 80012f8:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80012fa:	2300      	movs	r3, #0
 80012fc:	723b      	strb	r3, [r7, #8]
 80012fe:	e016      	b.n	800132e <rdcv_reg+0x72>
	}
	else if (reg == 4)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b04      	cmp	r3, #4
 8001304:	d104      	bne.n	8001310 <rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 8001306:	230a      	movs	r3, #10
 8001308:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800130a:	2300      	movs	r3, #0
 800130c:	723b      	strb	r3, [r7, #8]
 800130e:	e00e      	b.n	800132e <rdcv_reg+0x72>
	}
	else if (reg == 5) // LTC6813 - Cell register E
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b05      	cmp	r3, #5
 8001314:	d104      	bne.n	8001320 <rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 8001316:	2309      	movs	r3, #9
 8001318:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800131a:	2300      	movs	r3, #0
 800131c:	723b      	strb	r3, [r7, #8]
 800131e:	e006      	b.n	800132e <rdcv_reg+0x72>
	}
	else if (reg == 6) // LTC6813 - Cell register F
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b06      	cmp	r3, #6
 8001324:	d103      	bne.n	800132e <rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 8001326:	230b      	movs	r3, #11
 8001328:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800132a:	2300      	movs	r3, #0
 800132c:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4619      	mov	r1, r3
 8001334:	2002      	movs	r0, #2
 8001336:	f7ff fe33 	bl	8000fa0 <pec15_calc>
 800133a:	4603      	mov	r3, r0
 800133c:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800133e:	89bb      	ldrh	r3, [r7, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	b29b      	uxth	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001348:	89bb      	ldrh	r3, [r7, #12]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 800134e:	f7ff fda1 	bl	8000e94 <WakeIdle>
	WakeIdle();
 8001352:	f7ff fd9f 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	79ba      	ldrb	r2, [r7, #6]
 800135a:	fb03 f202 	mul.w	r2, r3, r2
 800135e:	f107 0108 	add.w	r1, r7, #8
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2004      	movs	r0, #4
 8001366:	f000 fa6b 	bl	8001840 <spi_write_then_read_array_ltc>
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <rdaux>:
*/
int8_t rdaux(uint8_t reg,				//Determines which GPIO voltage register is read back.
                     uint8_t total_ic,			//the number of ICs in the system
                     temp_data_t aux_codes[][GPIO_NUM]	//A two dimensional array of the gpio voltage codes.
                    )
{
 8001372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001376:	b08d      	sub	sp, #52	; 0x34
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	603a      	str	r2, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	460b      	mov	r3, r1
 8001382:	71bb      	strb	r3, [r7, #6]
 8001384:	466b      	mov	r3, sp
 8001386:	461e      	mov	r6, r3
	const uint8_t NUM_RX_BYT = 8;
 8001388:	2308      	movs	r3, #8
 800138a:	77fb      	strb	r3, [r7, #31]
	const uint8_t BYT_IN_REG = 6;
 800138c:	2306      	movs	r3, #6
 800138e:	77bb      	strb	r3, [r7, #30]
	const uint8_t GPIO_IN_REG = 3;
 8001390:	2303      	movs	r3, #3
 8001392:	777b      	strb	r3, [r7, #29]

	uint8_t data_counter = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int8_t pec_error = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t data_pec;
#if DYNAMIC_MEM
	uint8_t *data;
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 80013a0:	230c      	movs	r3, #12
 80013a2:	773b      	strb	r3, [r7, #28]
	uint8_t data[NUM_RX_BYT * max_ic];
 80013a4:	7ffb      	ldrb	r3, [r7, #31]
 80013a6:	7f3a      	ldrb	r2, [r7, #28]
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	3b01      	subs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	7ffb      	ldrb	r3, [r7, #31]
 80013b2:	7f3a      	ldrb	r2, [r7, #28]
 80013b4:	fb02 f303 	mul.w	r3, r2, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	2300      	movs	r3, #0
 80013bc:	4690      	mov	r8, r2
 80013be:	4699      	mov	r9, r3
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013d4:	7ffb      	ldrb	r3, [r7, #31]
 80013d6:	7f3a      	ldrb	r2, [r7, #28]
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	2300      	movs	r3, #0
 80013e0:	4614      	mov	r4, r2
 80013e2:	461d      	mov	r5, r3
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	00eb      	lsls	r3, r5, #3
 80013ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013f2:	00e2      	lsls	r2, r4, #3
 80013f4:	7ffb      	ldrb	r3, [r7, #31]
 80013f6:	7f3a      	ldrb	r2, [r7, #28]
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
 80013fc:	3307      	adds	r3, #7
 80013fe:	08db      	lsrs	r3, r3, #3
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	ebad 0d03 	sub.w	sp, sp, r3
 8001406:	466b      	mov	r3, sp
 8001408:	3300      	adds	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
#endif

	if (reg == 0)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 8087 	bne.w	8001522 <rdaux+0x1b0>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 8001414:	2301      	movs	r3, #1
 8001416:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800141a:	e07c      	b.n	8001516 <rdaux+0x1a4>
		{
			data_counter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8001422:	79b9      	ldrb	r1, [r7, #6]
 8001424:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f8fa 	bl	8001624 <rdaux_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 8001430:	2300      	movs	r3, #0
 8001432:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001436:	e064      	b.n	8001502 <rdaux+0x190>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 8001438:	2300      	movs	r3, #0
 800143a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800143e:	e02d      	b.n	800149c <rdaux+0x12a>
				{
					// loops once for each of the 3 gpio voltage codes in the register

					parsed_aux = data[data_counter] + (data[data_counter+1]<<8);              //Each gpio codes is received as two bytes and is combined to
 8001440:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	b29a      	uxth	r2, r3
 800144a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800144e:	3301      	adds	r3, #1
 8001450:	6979      	ldr	r1, [r7, #20]
 8001452:	5ccb      	ldrb	r3, [r1, r3]
 8001454:	b29b      	uxth	r3, r3
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b29b      	uxth	r3, r3
 800145a:	4413      	add	r3, r2
 800145c:	81fb      	strh	r3, [r7, #14]
					// create the parsed gpio voltage code

					//aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
					aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 800145e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	461a      	mov	r2, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4413      	add	r3, r2
 8001470:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8001474:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001478:	3a01      	subs	r2, #1
 800147a:	7f78      	ldrb	r0, [r7, #29]
 800147c:	fb00 f202 	mul.w	r2, r0, r2
 8001480:	440a      	add	r2, r1
 8001482:	89f9      	ldrh	r1, [r7, #14]
 8001484:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
					data_counter=data_counter+2;                        //Because gpio voltage codes are two bytes the data counter
 8001488:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800148c:	3302      	adds	r3, #2
 800148e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 8001492:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001496:	3301      	adds	r3, #1
 8001498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800149c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80014a0:	7f7b      	ldrb	r3, [r7, #29]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d3cc      	bcc.n	8001440 <rdaux+0xce>
					//must increment by two for each parsed gpio voltage code
				}
				received_pec = (data[data_counter]<<8)+ data[data_counter+1];          //The received PEC for the current_ic is transmitted as the 7th and 8th
 80014a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80014b8:	3301      	adds	r3, #1
 80014ba:	6979      	ldr	r1, [r7, #20]
 80014bc:	5ccb      	ldrb	r3, [r1, r3]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	827b      	strh	r3, [r7, #18]
				//after the 6 gpio voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 80014c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014c8:	7ffa      	ldrb	r2, [r7, #31]
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	441a      	add	r2, r3
 80014d2:	7fbb      	ldrb	r3, [r7, #30]
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fd62 	bl	8000fa0 <pec15_calc>
 80014dc:	4603      	mov	r3, r0
 80014de:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 80014e0:	8a7a      	ldrh	r2, [r7, #18]
 80014e2:	8a3b      	ldrh	r3, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d002      	beq.n	80014ee <rdaux+0x17c>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 80014e8:	23ff      	movs	r3, #255	; 0xff
 80014ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					//are detected in the received serial data
				}

				data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 80014ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80014f2:	3302      	adds	r3, #2
 80014f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80014f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014fc:	3301      	adds	r3, #1
 80014fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001502:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001506:	79bb      	ldrb	r3, [r7, #6]
 8001508:	429a      	cmp	r2, r3
 800150a:	d395      	bcc.n	8001438 <rdaux+0xc6>
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 800150c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001510:	3301      	adds	r3, #1
 8001512:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001516:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800151a:	2b04      	cmp	r3, #4
 800151c:	f67f af7e 	bls.w	800141c <rdaux+0xaa>
 8001520:	e067      	b.n	80015f2 <rdaux+0x280>
		}

	}
	else
	{
		rdaux_reg(reg, total_ic, data);
 8001522:	79b9      	ldrb	r1, [r7, #6]
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f87b 	bl	8001624 <rdaux_reg>
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
 8001532:	e05a      	b.n	80015ea <rdaux+0x278>
		{
			// current_ic is used as an IC counter

			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
 8001538:	e028      	b.n	800158c <rdaux+0x21a>
			{
				// once for each aux voltage in the register

				parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));        //Each gpio codes is received as two bytes and is combined to
 800153a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	5cd3      	ldrb	r3, [r2, r3]
 8001542:	b29a      	uxth	r2, r3
 8001544:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001548:	3301      	adds	r3, #1
 800154a:	6979      	ldr	r1, [r7, #20]
 800154c:	5ccb      	ldrb	r3, [r1, r3]
 800154e:	b29b      	uxth	r3, r3
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	81fb      	strh	r3, [r7, #14]
				// create the parsed gpio voltage code
				//aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
				aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	461a      	mov	r2, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	79fa      	ldrb	r2, [r7, #7]
 800156a:	3a01      	subs	r2, #1
 800156c:	7f79      	ldrb	r1, [r7, #29]
 800156e:	fb02 f101 	mul.w	r1, r2, r1
 8001572:	6a3a      	ldr	r2, [r7, #32]
 8001574:	440a      	add	r2, r1
 8001576:	89f9      	ldrh	r1, [r7, #14]
 8001578:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
				data_counter=data_counter+2;                      //Because gpio voltage codes are two bytes the data counter
 800157c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001580:	3302      	adds	r3, #2
 8001582:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	3301      	adds	r3, #1
 800158a:	623b      	str	r3, [r7, #32]
 800158c:	7f7b      	ldrb	r3, [r7, #29]
 800158e:	6a3a      	ldr	r2, [r7, #32]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbd2      	blt.n	800153a <rdaux+0x1c8>
				//must increment by two for each parsed gpio voltage code
			}
			received_pec = (data[data_counter]<<8) + data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001594:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	b29b      	uxth	r3, r3
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80015a6:	3301      	adds	r3, #1
 80015a8:	6979      	ldr	r1, [r7, #20]
 80015aa:	5ccb      	ldrb	r3, [r1, r3]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	827b      	strh	r3, [r7, #18]
			//after the 6 gpio voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 80015b2:	7ffb      	ldrb	r3, [r7, #31]
 80015b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	441a      	add	r2, r3
 80015be:	7fbb      	ldrb	r3, [r7, #30]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fcec 	bl	8000fa0 <pec15_calc>
 80015c8:	4603      	mov	r3, r0
 80015ca:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80015cc:	8a7a      	ldrh	r2, [r7, #18]
 80015ce:	8a3b      	ldrh	r3, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d002      	beq.n	80015da <rdaux+0x268>
			{
				pec_error = -1;                               //The pec_error variable is simply set negative if any PEC errors
 80015d4:	23ff      	movs	r3, #255	; 0xff
 80015d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				//are detected in the received serial data
			}

			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 80015da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80015de:	3302      	adds	r3, #2
 80015e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	3301      	adds	r3, #1
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ea:	79bb      	ldrb	r3, [r7, #6]
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dba0      	blt.n	8001534 <rdaux+0x1c2>
	}

#if DYNAMIC_MEM
	free(data);
#endif
	return (pec_error);
 80015f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80015f6:	46b5      	mov	sp, r6
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3734      	adds	r7, #52	; 0x34
 80015fc:	46bd      	mov	sp, r7
 80015fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001602 <adcv_delay>:

adcv_delay(void){
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001606:	f241 50d1 	movw	r0, #5585	; 0x15d1
 800160a:	f000 f8a1 	bl	8001750 <delay_u>
}
 800160e:	bf00      	nop
 8001610:	4618      	mov	r0, r3
 8001612:	bd80      	pop	{r7, pc}

08001614 <adax_delay>:

void adax_delay(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001618:	f241 50d1 	movw	r0, #5585	; 0x15d1
 800161c:	f000 f898 	bl	8001750 <delay_u>
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <rdaux_reg>:
*/
void rdaux_reg(uint8_t reg,			//Determines which GPIO voltage register is read back
                       uint8_t total_ic,	//The number of ICs in the system
                       uint8_t *data		//Array of the unparsed auxiliary codes
                      )
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	603a      	str	r2, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	460b      	mov	r3, r1
 8001632:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001634:	2308      	movs	r3, #8
 8001636:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d104      	bne.n	8001648 <rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 800163e:	230c      	movs	r3, #12
 8001640:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	723b      	strb	r3, [r7, #8]
 8001646:	e01b      	b.n	8001680 <rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d104      	bne.n	8001658 <rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 800164e:	230e      	movs	r3, #14
 8001650:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001652:	2300      	movs	r3, #0
 8001654:	723b      	strb	r3, [r7, #8]
 8001656:	e013      	b.n	8001680 <rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d104      	bne.n	8001668 <rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 800165e:	230d      	movs	r3, #13
 8001660:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001662:	2300      	movs	r3, #0
 8001664:	723b      	strb	r3, [r7, #8]
 8001666:	e00b      	b.n	8001680 <rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b04      	cmp	r3, #4
 800166c:	d104      	bne.n	8001678 <rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 800166e:	230f      	movs	r3, #15
 8001670:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001672:	2300      	movs	r3, #0
 8001674:	723b      	strb	r3, [r7, #8]
 8001676:	e003      	b.n	8001680 <rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8001678:	230c      	movs	r3, #12
 800167a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800167c:	2300      	movs	r3, #0
 800167e:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4619      	mov	r1, r3
 8001686:	2002      	movs	r0, #2
 8001688:	f7ff fc8a 	bl	8000fa0 <pec15_calc>
 800168c:	4603      	mov	r3, r0
 800168e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001690:	89bb      	ldrh	r3, [r7, #12]
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	b29b      	uxth	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800169a:	89bb      	ldrh	r3, [r7, #12]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 80016a0:	f7ff fbf8 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	79ba      	ldrb	r2, [r7, #6]
 80016a8:	fb03 f202 	mul.w	r2, r3, r2
 80016ac:	f107 0108 	add.w	r1, r7, #8
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2004      	movs	r0, #4
 80016b4:	f000 f8c4 	bl	8001840 <spi_write_then_read_array_ltc>
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <adcv>:

/*!
	\brief Starts cell voltage conversion.
*/
void adcv(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADCV[0];
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <adcv+0x44>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <adcv+0x44>)
 80016ce:	785b      	ldrb	r3, [r3, #1]
 80016d0:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADCV);
 80016d2:	490c      	ldr	r1, [pc, #48]	; (8001704 <adcv+0x44>)
 80016d4:	2002      	movs	r0, #2
 80016d6:	f7ff fc63 	bl	8000fa0 <pec15_calc>
 80016da:	4603      	mov	r3, r0
 80016dc:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 80016ee:	f7ff fbd1 	bl	8000e94 <WakeIdle>
	spi_write_array(4, cmd);
 80016f2:	463b      	mov	r3, r7
 80016f4:	4619      	mov	r1, r3
 80016f6:	2004      	movs	r0, #4
 80016f8:	f000 f880 	bl	80017fc <spi_write_array>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000008c 	.word	0x2000008c

08001708 <adax>:

/*!
	\brief Start an GPIO Conversion.
*/
void adax(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADAX[0];
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <adax+0x44>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <adax+0x44>)
 8001716:	785b      	ldrb	r3, [r3, #1]
 8001718:	707b      	strb	r3, [r7, #1]
	cmd_pec = pec15_calc(2, ADAX);
 800171a:	490c      	ldr	r1, [pc, #48]	; (800174c <adax+0x44>)
 800171c:	2002      	movs	r0, #2
 800171e:	f7ff fc3f 	bl	8000fa0 <pec15_calc>
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29b      	uxth	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001736:	f7ff fbad 	bl	8000e94 <WakeIdle>
	spi_write_array(4, cmd);
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	2004      	movs	r0, #4
 8001740:	f000 f85c 	bl	80017fc <spi_write_array>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000090 	.word	0x20000090

08001750 <delay_u>:
#include "conf.h"

extern SPI_HandleTypeDef hspi1;


void delay_u(uint32_t us){
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <delay_u+0x58>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <delay_u+0x58>)
 800175e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001762:	60d3      	str	r3, [r2, #12]
		    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <delay_u+0x5c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a10      	ldr	r2, [pc, #64]	; (80017ac <delay_u+0x5c>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6013      	str	r3, [r2, #0]
		    // Get the current number of clock cycles
		    uint32_t const startTicks = DWT->CYCCNT;
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <delay_u+0x5c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	60fb      	str	r3, [r7, #12]
		    // Calculate the number of clock cycles for the desired delay
		    uint32_t const delayTicks = (SystemCoreClock / 1000000) * us;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <delay_u+0x60>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <delay_u+0x64>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	0c9a      	lsrs	r2, r3, #18
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	60bb      	str	r3, [r7, #8]
		    // Wait until the number of clock cycles has elapsed
		    while (DWT->CYCCNT - startTicks < delayTicks);
 800178a:	bf00      	nop
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <delay_u+0x5c>)
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	429a      	cmp	r2, r3
 8001798:	d8f8      	bhi.n	800178c <delay_u+0x3c>
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000edf0 	.word	0xe000edf0
 80017ac:	e0001000 	.word	0xe0001000
 80017b0:	20000000 	.word	0x20000000
 80017b4:	431bde83 	.word	0x431bde83

080017b8 <spi_write_read_byte>:

void delay_m(uint32_t ms){
	HAL_Delay(ms);
}

uint8_t spi_write_read_byte(uint8_t wbyte){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]

	uint8_t rxByte;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2110      	movs	r1, #16
 80017c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ca:	f001 f81b 	bl	8002804 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &wbyte, &rxByte, 1, SPI_TIMEOUT);
 80017ce:	f107 020f 	add.w	r2, r7, #15
 80017d2:	1df9      	adds	r1, r7, #7
 80017d4:	f643 2398 	movw	r3, #15000	; 0x3a98
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2301      	movs	r3, #1
 80017dc:	4806      	ldr	r0, [pc, #24]	; (80017f8 <spi_write_read_byte+0x40>)
 80017de:	f002 fb3a 	bl	8003e56 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80017e2:	2201      	movs	r2, #1
 80017e4:	2110      	movs	r1, #16
 80017e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ea:	f001 f80b 	bl	8002804 <HAL_GPIO_WritePin>

	return rxByte;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000098 	.word	0x20000098

080017fc <spi_write_array>:

uint32_t spi_write_array(uint8_t len, uint8_t *data){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2110      	movs	r1, #16
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001810:	f000 fff8 	bl	8002804 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, len, SPI_TIMEOUT);
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	b29a      	uxth	r2, r3
 8001818:	f643 2398 	movw	r3, #15000	; 0x3a98
 800181c:	6839      	ldr	r1, [r7, #0]
 800181e:	4807      	ldr	r0, [pc, #28]	; (800183c <spi_write_array+0x40>)
 8001820:	f002 f87b 	bl	800391a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001824:	2201      	movs	r2, #1
 8001826:	2110      	movs	r1, #16
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f000 ffea 	bl	8002804 <HAL_GPIO_WritePin>

	return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000098 	.word	0x20000098

08001840 <spi_write_then_read_array_ltc>:

uint32_t spi_write_then_read_array_ltc(uint8_t wlen, uint8_t *wbuffer, uint8_t rlen, uint8_t *rbuffer){
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	4613      	mov	r3, r2
 8001850:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2110      	movs	r1, #16
 8001856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185a:	f000 ffd3 	bl	8002804 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wbuffer, wlen, SPI_TIMEOUT);
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	b29a      	uxth	r2, r3
 8001862:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	480a      	ldr	r0, [pc, #40]	; (8001894 <spi_write_then_read_array_ltc+0x54>)
 800186a:	f002 f856 	bl	800391a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rbuffer, rlen, SPI_TIMEOUT);
 800186e:	7bbb      	ldrb	r3, [r7, #14]
 8001870:	b29a      	uxth	r2, r3
 8001872:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4806      	ldr	r0, [pc, #24]	; (8001894 <spi_write_then_read_array_ltc+0x54>)
 800187a:	f002 f9bc 	bl	8003bf6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800187e:	2201      	movs	r2, #1
 8001880:	2110      	movs	r1, #16
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f000 ffbd 	bl	8002804 <HAL_GPIO_WritePin>

	return 0;
 800188a:	2300      	movs	r3, #0

}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000098 	.word	0x20000098

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189c:	f000 fcb9 	bl	8002212 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a0:	f000 f80b 	bl	80018ba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a4:	f000 f938 	bl	8001b18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018a8:	f000 f8ea 	bl	8001a80 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80018ac:	f000 f850 	bl	8001950 <MX_SPI1_Init>
  MX_TIM3_Init();
 80018b0:	f000 f88c 	bl	80019cc <MX_TIM3_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  operation_main();
 80018b4:	f000 f98c 	bl	8001bd0 <operation_main>
  {
 80018b8:	e7fc      	b.n	80018b4 <main+0x1c>

080018ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b094      	sub	sp, #80	; 0x50
 80018be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c0:	f107 0318 	add.w	r3, r7, #24
 80018c4:	2238      	movs	r2, #56	; 0x38
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 fa05 	bl	8005cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80018dc:	2000      	movs	r0, #0
 80018de:	f000 ffa9 	bl	8002834 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ec:	2340      	movs	r3, #64	; 0x40
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f0:	2302      	movs	r3, #2
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018f4:	2302      	movs	r3, #2
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80018f8:	2304      	movs	r3, #4
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80018fc:	2355      	movs	r3, #85	; 0x55
 80018fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001900:	2302      	movs	r3, #2
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001904:	2302      	movs	r3, #2
 8001906:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001908:	2302      	movs	r3, #2
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	4618      	mov	r0, r3
 8001912:	f001 f833 	bl	800297c <HAL_RCC_OscConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800191c:	f000 f952 	bl	8001bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001920:	230f      	movs	r3, #15
 8001922:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001924:	2303      	movs	r3, #3
 8001926:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2104      	movs	r1, #4
 8001938:	4618      	mov	r0, r3
 800193a:	f001 fb37 	bl	8002fac <HAL_RCC_ClockConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001944:	f000 f93e 	bl	8001bc4 <Error_Handler>
  }
}
 8001948:	bf00      	nop
 800194a:	3750      	adds	r7, #80	; 0x50
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <MX_SPI1_Init+0x78>)
 8001958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <MX_SPI1_Init+0x74>)
 800195c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_SPI1_Init+0x74>)
 800196a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800196e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001972:	2202      	movs	r2, #2
 8001974:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001978:	2201      	movs	r2, #1
 800197a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_SPI1_Init+0x74>)
 800197e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001982:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001986:	2238      	movs	r2, #56	; 0x38
 8001988:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_SPI1_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_SPI1_Init+0x74>)
 800199e:	2207      	movs	r2, #7
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <MX_SPI1_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_SPI1_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_SPI1_Init+0x74>)
 80019b0:	f001 ff08 	bl	80037c4 <HAL_SPI_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019ba:	f000 f903 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000098 	.word	0x20000098
 80019c8:	40013000 	.word	0x40013000

080019cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019de:	463b      	mov	r3, r7
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
 80019ec:	615a      	str	r2, [r3, #20]
 80019ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <MX_TIM3_Init+0xac>)
 80019f2:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <MX_TIM3_Init+0xb0>)
 80019f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <MX_TIM3_Init+0xac>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_TIM3_Init+0xac>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <MX_TIM3_Init+0xac>)
 8001a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <MX_TIM3_Init+0xac>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <MX_TIM3_Init+0xac>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a16:	4818      	ldr	r0, [pc, #96]	; (8001a78 <MX_TIM3_Init+0xac>)
 8001a18:	f002 fdec 	bl	80045f4 <HAL_TIM_PWM_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a22:	f000 f8cf 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4810      	ldr	r0, [pc, #64]	; (8001a78 <MX_TIM3_Init+0xac>)
 8001a36:	f003 facf 	bl	8004fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a40:	f000 f8c0 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a44:	2360      	movs	r3, #96	; 0x60
 8001a46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a54:	463b      	mov	r3, r7
 8001a56:	2204      	movs	r2, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <MX_TIM3_Init+0xac>)
 8001a5c:	f002 fe22 	bl	80046a4 <HAL_TIM_PWM_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001a66:	f000 f8ad 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a6a:	4803      	ldr	r0, [pc, #12]	; (8001a78 <MX_TIM3_Init+0xac>)
 8001a6c:	f000 fa26 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200000fc 	.word	0x200000fc
 8001a7c:	40000400 	.word	0x40000400

08001a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a84:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001a86:	4a23      	ldr	r2, [pc, #140]	; (8001b14 <MX_USART2_UART_Init+0x94>)
 8001a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a8a:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ac8:	4811      	ldr	r0, [pc, #68]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001aca:	f003 fb07 	bl	80050dc <HAL_UART_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ad4:	f000 f876 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad8:	2100      	movs	r1, #0
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001adc:	f004 f808 	bl	8005af0 <HAL_UARTEx_SetTxFifoThreshold>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ae6:	f000 f86d 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aea:	2100      	movs	r1, #0
 8001aec:	4808      	ldr	r0, [pc, #32]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001aee:	f004 f83d 	bl	8005b6c <HAL_UARTEx_SetRxFifoThreshold>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001af8:	f000 f864 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_USART2_UART_Init+0x90>)
 8001afe:	f003 ffbe 	bl	8005a7e <HAL_UARTEx_DisableFifoMode>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b08:	f000 f85c 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000148 	.word	0x20000148
 8001b14:	40004400 	.word	0x40004400

08001b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <MX_GPIO_Init+0xa4>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a22      	ldr	r2, [pc, #136]	; (8001bbc <MX_GPIO_Init+0xa4>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <MX_GPIO_Init+0xa4>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <MX_GPIO_Init+0xa4>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <MX_GPIO_Init+0xa4>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_GPIO_Init+0xa4>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2110      	movs	r1, #16
 8001b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b66:	f000 fe4d 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b70:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <MX_GPIO_Init+0xa8>)
 8001b72:	f000 fe47 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b76:	2310      	movs	r3, #16
 8001b78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b90:	f000 fcb6 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	4619      	mov	r1, r3
 8001bac:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <MX_GPIO_Init+0xa8>)
 8001bae:	f000 fca7 	bl	8002500 <HAL_GPIO_Init>

}
 8001bb2:	bf00      	nop
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	48000400 	.word	0x48000400

08001bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc8:	b672      	cpsid	i
}
 8001bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <Error_Handler+0x8>
	...

08001bd0 <operation_main>:
};

int charger_event_flag;
static uint8_t charger_event_counter;

void operation_main(void){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0

	initialize();
 8001bd6:	f7ff f972 	bl	8000ebe <initialize>
	init_slave_cfg();
 8001bda:	f000 f899 	bl	8001d10 <init_slave_cfg>

	for(uint32_t i=0; i<NUMB_REASON_CODES; i++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	e009      	b.n	8001bf8 <operation_main+0x28>
		{
			status_data.error_counters[i]=0;
 8001be4:	4a16      	ldr	r2, [pc, #88]	; (8001c40 <operation_main+0x70>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3312      	adds	r3, #18
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<NUMB_REASON_CODES; i++)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d9f2      	bls.n	8001be4 <operation_main+0x14>
		}

		status_data.pec_error_counter = 0;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <operation_main+0x70>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	641a      	str	r2, [r3, #64]	; 0x40
		status_data.pec_error_counter_last = 0;
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <operation_main+0x70>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	645a      	str	r2, [r3, #68]	; 0x44

		status_data.limping = 0;
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <operation_main+0x70>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		status_data.recieved_IVT = 0;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <operation_main+0x70>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		status_data.opmode = 0;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <operation_main+0x70>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	769a      	strb	r2, [r3, #26]
		status_data.opmode = (1 << 0)|(1 << 4);
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <operation_main+0x70>)
 8001c22:	2211      	movs	r2, #17
 8001c24:	769a      	strb	r2, [r3, #26]
		status_data.logging = true; //Always true
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <operation_main+0x70>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	771a      	strb	r2, [r3, #28]



	while(1){

		read_cell_voltage();
 8001c2c:	f000 f80a 	bl	8001c44 <read_cell_voltage>
		read_temp_measurement();
 8001c30:	f000 f832 	bl	8001c98 <read_temp_measurement>

		HAL_Delay(500);
 8001c34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c38:	f000 fb5c 	bl	80022f4 <HAL_Delay>
	while(1){
 8001c3c:	e7f6      	b.n	8001c2c <operation_main+0x5c>
 8001c3e:	bf00      	nop
 8001c40:	2000027c 	.word	0x2000027c

08001c44 <read_cell_voltage>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_cell_voltage(void){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 8001c4a:	f7ff f92d 	bl	8000ea8 <WakeUp>
	adcv();
 8001c4e:	f7ff fd37 	bl	80016c0 <adcv>
	adcv_delay();
 8001c52:	f7ff fcd6 	bl	8001602 <adcv_delay>

	WakeIdle();
 8001c56:	f7ff f91d 	bl	8000e94 <WakeIdle>

	for(uint8_t reg = 0; reg < 5; reg++){
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	71fb      	strb	r3, [r7, #7]
 8001c5e:	e011      	b.n	8001c84 <read_cell_voltage+0x40>
		pec = rdcv(0, IC_NUM, cell_data);
 8001c60:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <read_cell_voltage+0x50>)
 8001c62:	2102      	movs	r1, #2
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff f9cf 	bl	8001008 <rdcv>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71bb      	strb	r3, [r7, #6]
		if (pec == 0) {
 8001c6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <read_cell_voltage+0x36>
			return 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e008      	b.n	8001c8c <read_cell_voltage+0x48>
		}
		else increase_pec_counter();
 8001c7a:	f000 f83b 	bl	8001cf4 <increase_pec_counter>
	for(uint8_t reg = 0; reg < 5; reg++){
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	3301      	adds	r3, #1
 8001c82:	71fb      	strb	r3, [r7, #7]
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d9ea      	bls.n	8001c60 <read_cell_voltage+0x1c>
	}
	//goto_safe_state(PEC_ERROR);
	return -1;
 8001c8a:	23ff      	movs	r3, #255	; 0xff

}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200001d8 	.word	0x200001d8

08001c98 <read_temp_measurement>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_temp_measurement(void){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 8001c9e:	f7ff f903 	bl	8000ea8 <WakeUp>
	adax();
 8001ca2:	f7ff fd31 	bl	8001708 <adax>
	adax_delay();
 8001ca6:	f7ff fcb5 	bl	8001614 <adax_delay>
	WakeIdle();
 8001caa:	f7ff f8f3 	bl	8000e94 <WakeIdle>

	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 8001cae:	2300      	movs	r3, #0
 8001cb0:	71fb      	strb	r3, [r7, #7]
 8001cb2:	e015      	b.n	8001ce0 <read_temp_measurement+0x48>
			 pec = rdaux(0, IC_NUM, temp_data);  // pec = ltc6804_rdaux(0, IC_NUM, temp_data);
 8001cb4:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <read_temp_measurement+0x58>)
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff fb5a 	bl	8001372 <rdaux>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71bb      	strb	r3, [r7, #6]
			 temp_calc(IC_NUM, temp_data); // Moved out of 'if' to execute even on pec error
 8001cc2:	490b      	ldr	r1, [pc, #44]	; (8001cf0 <read_temp_measurement+0x58>)
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f000 f9c7 	bl	8002058 <temp_calc>
			if (pec == 0) {
 8001cca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <read_temp_measurement+0x3e>
				return 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e008      	b.n	8001ce8 <read_temp_measurement+0x50>
			} else {
				increase_pec_counter();
 8001cd6:	f000 f80d 	bl	8001cf4 <increase_pec_counter>
	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	71fb      	strb	r3, [r7, #7]
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d9e6      	bls.n	8001cb4 <read_temp_measurement+0x1c>
			}
		}
		//goto_safe_state(PEC_ERROR);
		return -1;
 8001ce6:	23ff      	movs	r3, #255	; 0xff

}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000220 	.word	0x20000220

08001cf4 <increase_pec_counter>:

void increase_pec_counter(void){
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
	status_data.pec_error_counter+=1;
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <increase_pec_counter+0x18>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4a03      	ldr	r2, [pc, #12]	; (8001d0c <increase_pec_counter+0x18>)
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	2000027c 	.word	0x2000027c

08001d10 <init_slave_cfg>:
void init_slave_cfg(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < IC_NUM; i++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	71fb      	strb	r3, [r7, #7]
 8001d1a:	e03d      	b.n	8001d98 <init_slave_cfg+0x88>
	{
		slave_cfg_tx[i][0] = 0xfe;
 8001d1c:	79fa      	ldrb	r2, [r7, #7]
 8001d1e:	4923      	ldr	r1, [pc, #140]	; (8001dac <init_slave_cfg+0x9c>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	440b      	add	r3, r1
 8001d2a:	22fe      	movs	r2, #254	; 0xfe
 8001d2c:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][1] = 0x00;
 8001d2e:	79fa      	ldrb	r2, [r7, #7]
 8001d30:	491e      	ldr	r1, [pc, #120]	; (8001dac <init_slave_cfg+0x9c>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][2] = 0x00;
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	4919      	ldr	r1, [pc, #100]	; (8001dac <init_slave_cfg+0x9c>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	440b      	add	r3, r1
 8001d50:	3302      	adds	r3, #2
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][3] = 0x00;
 8001d56:	79fa      	ldrb	r2, [r7, #7]
 8001d58:	4914      	ldr	r1, [pc, #80]	; (8001dac <init_slave_cfg+0x9c>)
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	440b      	add	r3, r1
 8001d64:	3303      	adds	r3, #3
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][4] = 0x00;
 8001d6a:	79fa      	ldrb	r2, [r7, #7]
 8001d6c:	490f      	ldr	r1, [pc, #60]	; (8001dac <init_slave_cfg+0x9c>)
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	440b      	add	r3, r1
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 8001d7e:	79fa      	ldrb	r2, [r7, #7]
 8001d80:	490a      	ldr	r1, [pc, #40]	; (8001dac <init_slave_cfg+0x9c>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3305      	adds	r3, #5
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < IC_NUM; i++)
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	3301      	adds	r3, #1
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d9be      	bls.n	8001d1c <init_slave_cfg+0xc>
	}
}
 8001d9e:	bf00      	nop
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	20000270 	.word	0x20000270

08001db0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_MspInit+0x44>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <HAL_MspInit+0x44>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_MspInit+0x44>)
 8001dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_MspInit+0x44>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_MspInit+0x44>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_MspInit+0x44>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000

08001df8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <HAL_SPI_MspInit+0x7c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d128      	bne.n	8001e6c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_SPI_MspInit+0x80>)
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1e:	4a16      	ldr	r2, [pc, #88]	; (8001e78 <HAL_SPI_MspInit+0x80>)
 8001e20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e24:	6613      	str	r3, [r2, #96]	; 0x60
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <HAL_SPI_MspInit+0x80>)
 8001e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_SPI_MspInit+0x80>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <HAL_SPI_MspInit+0x80>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_SPI_MspInit+0x80>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e4a:	23e0      	movs	r3, #224	; 0xe0
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e5a:	2305      	movs	r3, #5
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e68:	f000 fb4a 	bl	8002500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3728      	adds	r7, #40	; 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40013000 	.word	0x40013000
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x38>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4a09      	ldr	r2, [pc, #36]	; (8001eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	40021000 	.word	0x40021000

08001ebc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <HAL_TIM_MspPostInit+0x64>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d11b      	bne.n	8001f16 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_TIM_MspPostInit+0x68>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_TIM_MspPostInit+0x68>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_TIM_MspPostInit+0x68>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <HAL_TIM_MspPostInit+0x6c>)
 8001f12:	f000 faf5 	bl	8002500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f16:	bf00      	nop
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000400 	.word	0x48000400

08001f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b09a      	sub	sp, #104	; 0x68
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	2244      	movs	r2, #68	; 0x44
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fec3 	bl	8005cd8 <memset>
  if(huart->Instance==USART2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <HAL_UART_MspInit+0xa8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d136      	bne.n	8001fca <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 fa3b 	bl	80033e4 <HAL_RCCEx_PeriphCLKConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f74:	f7ff fe26 	bl	8001bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_UART_MspInit+0xac>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <HAL_UART_MspInit+0xac>)
 8001f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f82:	6593      	str	r3, [r2, #88]	; 0x58
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_UART_MspInit+0xac>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_UART_MspInit+0xac>)
 8001f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f94:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <HAL_UART_MspInit+0xac>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_UART_MspInit+0xac>)
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001fa8:	230c      	movs	r3, #12
 8001faa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fb8:	2307      	movs	r3, #7
 8001fba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc6:	f000 fa9b 	bl	8002500 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3768      	adds	r7, #104	; 0x68
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40004400 	.word	0x40004400
 8001fd8:	40021000 	.word	0x40021000

08001fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <NMI_Handler+0x4>

08001fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <HardFault_Handler+0x4>

08001fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <MemManage_Handler+0x4>

08001fee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <BusFault_Handler+0x4>

08001ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <UsageFault_Handler+0x4>

08001ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002028:	f000 f946 	bl	80022b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}

08002030 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <SystemInit+0x20>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <SystemInit+0x20>)
 800203c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00
 8002054:	00000000 	.word	0x00000000

08002058 <temp_calc>:





void temp_calc(uint8_t total_ic,  temp_data_t temp_data[][GPIO_NUM]){ //fix arguments
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
	float v, r, vv , t;
	for(int i = 0; i < total_ic; i++){
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	e091      	b.n	800218e <temp_calc+0x136>
		for(int j = 0; j < 10; j++){
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	e087      	b.n	8002180 <temp_calc+0x128>
			//vv =  ic[i].aux.a_codes[j];
			vv = temp_data[i][j].raw;
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	461a      	mov	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208e:	edc7 7a05 	vstr	s15, [r7, #20]
			v = vv/10000;
 8002092:	ed97 7a05 	vldr	s14, [r7, #20]
 8002096:	eddf 6a48 	vldr	s13, [pc, #288]	; 80021b8 <temp_calc+0x160>
 800209a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800209e:	edc7 7a04 	vstr	s15, [r7, #16]
			r = (v*10000)/(3-v);
 80020a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020a6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80021b8 <temp_calc+0x160>
 80020aa:	ee67 6a87 	vmul.f32	s13, s15, s14
 80020ae:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80020b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020be:	edc7 7a03 	vstr	s15, [r7, #12]
			t = log(r/10000);
 80020c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020c6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80021b8 <temp_calc+0x160>
 80020ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020ce:	ee16 0a90 	vmov	r0, s13
 80020d2:	f7fe fa05 	bl	80004e0 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	ec43 2b10 	vmov	d0, r2, r3
 80020de:	f003 fe03 	bl	8005ce8 <log>
 80020e2:	ec53 2b10 	vmov	r2, r3, d0
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7fe fd01 	bl	8000af0 <__aeabi_d2f>
 80020ee:	4603      	mov	r3, r0
 80020f0:	60bb      	str	r3, [r7, #8]
			    t = t / 3660;
 80020f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80020f6:	eddf 6a31 	vldr	s13, [pc, #196]	; 80021bc <temp_calc+0x164>
 80020fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020fe:	edc7 7a02 	vstr	s15, [r7, #8]
			    t = t + 1/298.15;
 8002102:	68b8      	ldr	r0, [r7, #8]
 8002104:	f7fe f9ec 	bl	80004e0 <__aeabi_f2d>
 8002108:	a327      	add	r3, pc, #156	; (adr r3, 80021a8 <temp_calc+0x150>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe f889 	bl	8000224 <__adddf3>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe fce9 	bl	8000af0 <__aeabi_d2f>
 800211e:	4603      	mov	r3, r0
 8002120:	60bb      	str	r3, [r7, #8]
			    t = 1/t;
 8002122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002126:	ed97 7a02 	vldr	s14, [r7, #8]
 800212a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800212e:	edc7 7a02 	vstr	s15, [r7, #8]

			    t -= 273.15;
 8002132:	68b8      	ldr	r0, [r7, #8]
 8002134:	f7fe f9d4 	bl	80004e0 <__aeabi_f2d>
 8002138:	a31d      	add	r3, pc, #116	; (adr r3, 80021b0 <temp_calc+0x158>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe f86f 	bl	8000220 <__aeabi_dsub>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fcd1 	bl	8000af0 <__aeabi_d2f>
 800214e:	4603      	mov	r3, r0
 8002150:	60bb      	str	r3, [r7, #8]
		temp_data[i][j].temp = (int)t;
 8002152:	edd7 7a02 	vldr	s15, [r7, #8]
 8002156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	461a      	mov	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	441a      	add	r2, r3
 800216a:	ee17 3a90 	vmov	r3, s15
 800216e:	b219      	sxth	r1, r3
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	460a      	mov	r2, r1
 8002178:	805a      	strh	r2, [r3, #2]
		for(int j = 0; j < 10; j++){
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	3301      	adds	r3, #1
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b09      	cmp	r3, #9
 8002184:	f77f af74 	ble.w	8002070 <temp_calc+0x18>
	for(int i = 0; i < total_ic; i++){
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	3301      	adds	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	429a      	cmp	r2, r3
 8002194:	f6ff af69 	blt.w	800206a <temp_calc+0x12>
		//	ic[i].aux.s_temp[j] = t;

		}
	}

}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	f3af 8000 	nop.w
 80021a8:	dcb5db83 	.word	0xdcb5db83
 80021ac:	3f6b79e1 	.word	0x3f6b79e1
 80021b0:	66666666 	.word	0x66666666
 80021b4:	40711266 	.word	0x40711266
 80021b8:	461c4000 	.word	0x461c4000
 80021bc:	4564c000 	.word	0x4564c000

080021c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c4:	480d      	ldr	r0, [pc, #52]	; (80021fc <LoopForever+0x6>)
  ldr r1, =_edata
 80021c6:	490e      	ldr	r1, [pc, #56]	; (8002200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <LoopForever+0xe>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021cc:	e002      	b.n	80021d4 <LoopCopyDataInit>

080021ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d2:	3304      	adds	r3, #4

080021d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d8:	d3f9      	bcc.n	80021ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021da:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021dc:	4c0b      	ldr	r4, [pc, #44]	; (800220c <LoopForever+0x16>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e0:	e001      	b.n	80021e6 <LoopFillZerobss>

080021e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e4:	3204      	adds	r2, #4

080021e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e8:	d3fb      	bcc.n	80021e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021ea:	f7ff ff21 	bl	8002030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ee:	f003 fd4f 	bl	8005c90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021f2:	f7ff fb51 	bl	8001898 <main>

080021f6 <LoopForever>:

LoopForever:
    b LoopForever
 80021f6:	e7fe      	b.n	80021f6 <LoopForever>
  ldr   r0, =_estack
 80021f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002204:	0800655c 	.word	0x0800655c
  ldr r2, =_sbss
 8002208:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800220c:	20000330 	.word	0x20000330

08002210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC1_2_IRQHandler>

08002212 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221c:	2003      	movs	r0, #3
 800221e:	f000 f93d 	bl	800249c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002222:	2000      	movs	r0, #0
 8002224:	f000 f80e 	bl	8002244 <HAL_InitTick>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	71fb      	strb	r3, [r7, #7]
 8002232:	e001      	b.n	8002238 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002234:	f7ff fdbc 	bl	8001db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002238:	79fb      	ldrb	r3, [r7, #7]

}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_InitTick+0x68>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d022      	beq.n	800229e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_InitTick+0x6c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_InitTick+0x68>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002264:	fbb1 f3f3 	udiv	r3, r1, r3
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f93a 	bl	80024e6 <HAL_SYSTICK_Config>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10f      	bne.n	8002298 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b0f      	cmp	r3, #15
 800227c:	d809      	bhi.n	8002292 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800227e:	2200      	movs	r2, #0
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	f04f 30ff 	mov.w	r0, #4294967295
 8002286:	f000 f914 	bl	80024b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_InitTick+0x70>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e007      	b.n	80022a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
 8002296:	e004      	b.n	80022a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e001      	b.n	80022a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000008 	.word	0x20000008
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_IncTick+0x1c>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_IncTick+0x20>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	4a03      	ldr	r2, [pc, #12]	; (80022d4 <HAL_IncTick+0x1c>)
 80022c8:	6013      	str	r3, [r2, #0]
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	2000032c 	.word	0x2000032c
 80022d8:	20000008 	.word	0x20000008

080022dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return uwTick;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_GetTick+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	2000032c 	.word	0x2000032c

080022f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022fc:	f7ff ffee 	bl	80022dc <HAL_GetTick>
 8002300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d004      	beq.n	8002318 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_Delay+0x40>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4413      	add	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002318:	bf00      	nop
 800231a:	f7ff ffdf 	bl	80022dc <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	429a      	cmp	r2, r3
 8002328:	d8f7      	bhi.n	800231a <HAL_Delay+0x26>
  {
  }
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000008 	.word	0x20000008

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	; (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	; (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3304      	adds	r3, #4
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b03      	subs	r3, #3
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002438:	f04f 31ff 	mov.w	r1, #4294967295
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43d9      	mvns	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	4313      	orrs	r3, r2
         );
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002468:	d301      	bcc.n	800246e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246a:	2301      	movs	r3, #1
 800246c:	e00f      	b.n	800248e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <SysTick_Config+0x40>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002476:	210f      	movs	r1, #15
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f7ff ff8e 	bl	800239c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <SysTick_Config+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002486:	4b04      	ldr	r3, [pc, #16]	; (8002498 <SysTick_Config+0x40>)
 8002488:	2207      	movs	r2, #7
 800248a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff47 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024c0:	f7ff ff5e 	bl	8002380 <__NVIC_GetPriorityGrouping>
 80024c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f7ff ff90 	bl	80023f0 <NVIC_EncodePriority>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff5f 	bl	800239c <__NVIC_SetPriority>
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ffb2 	bl	8002458 <SysTick_Config>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800250e:	e15a      	b.n	80027c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2101      	movs	r1, #1
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 814c 	beq.w	80027c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d005      	beq.n	8002540 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800253c:	2b02      	cmp	r3, #2
 800253e:	d130      	bne.n	80025a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002576:	2201      	movs	r2, #1
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	f003 0201 	and.w	r2, r3, #1
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d017      	beq.n	80025de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	2203      	movs	r2, #3
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d123      	bne.n	8002632 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	08da      	lsrs	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3208      	adds	r2, #8
 80025f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	220f      	movs	r2, #15
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	08da      	lsrs	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3208      	adds	r2, #8
 800262c:	6939      	ldr	r1, [r7, #16]
 800262e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0203 	and.w	r2, r3, #3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 80a6 	beq.w	80027c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002674:	4b5b      	ldr	r3, [pc, #364]	; (80027e4 <HAL_GPIO_Init+0x2e4>)
 8002676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002678:	4a5a      	ldr	r2, [pc, #360]	; (80027e4 <HAL_GPIO_Init+0x2e4>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6613      	str	r3, [r2, #96]	; 0x60
 8002680:	4b58      	ldr	r3, [pc, #352]	; (80027e4 <HAL_GPIO_Init+0x2e4>)
 8002682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268c:	4a56      	ldr	r2, [pc, #344]	; (80027e8 <HAL_GPIO_Init+0x2e8>)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	3302      	adds	r3, #2
 8002694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	220f      	movs	r2, #15
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026b6:	d01f      	beq.n	80026f8 <HAL_GPIO_Init+0x1f8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a4c      	ldr	r2, [pc, #304]	; (80027ec <HAL_GPIO_Init+0x2ec>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d019      	beq.n	80026f4 <HAL_GPIO_Init+0x1f4>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a4b      	ldr	r2, [pc, #300]	; (80027f0 <HAL_GPIO_Init+0x2f0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d013      	beq.n	80026f0 <HAL_GPIO_Init+0x1f0>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a4a      	ldr	r2, [pc, #296]	; (80027f4 <HAL_GPIO_Init+0x2f4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00d      	beq.n	80026ec <HAL_GPIO_Init+0x1ec>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a49      	ldr	r2, [pc, #292]	; (80027f8 <HAL_GPIO_Init+0x2f8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d007      	beq.n	80026e8 <HAL_GPIO_Init+0x1e8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a48      	ldr	r2, [pc, #288]	; (80027fc <HAL_GPIO_Init+0x2fc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d101      	bne.n	80026e4 <HAL_GPIO_Init+0x1e4>
 80026e0:	2305      	movs	r3, #5
 80026e2:	e00a      	b.n	80026fa <HAL_GPIO_Init+0x1fa>
 80026e4:	2306      	movs	r3, #6
 80026e6:	e008      	b.n	80026fa <HAL_GPIO_Init+0x1fa>
 80026e8:	2304      	movs	r3, #4
 80026ea:	e006      	b.n	80026fa <HAL_GPIO_Init+0x1fa>
 80026ec:	2303      	movs	r3, #3
 80026ee:	e004      	b.n	80026fa <HAL_GPIO_Init+0x1fa>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e002      	b.n	80026fa <HAL_GPIO_Init+0x1fa>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <HAL_GPIO_Init+0x1fa>
 80026f8:	2300      	movs	r3, #0
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	f002 0203 	and.w	r2, r2, #3
 8002700:	0092      	lsls	r2, r2, #2
 8002702:	4093      	lsls	r3, r2
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800270a:	4937      	ldr	r1, [pc, #220]	; (80027e8 <HAL_GPIO_Init+0x2e8>)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	3302      	adds	r3, #2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002718:	4b39      	ldr	r3, [pc, #228]	; (8002800 <HAL_GPIO_Init+0x300>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800273c:	4a30      	ldr	r2, [pc, #192]	; (8002800 <HAL_GPIO_Init+0x300>)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002742:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <HAL_GPIO_Init+0x300>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002766:	4a26      	ldr	r2, [pc, #152]	; (8002800 <HAL_GPIO_Init+0x300>)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_GPIO_Init+0x300>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002790:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <HAL_GPIO_Init+0x300>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <HAL_GPIO_Init+0x300>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	43db      	mvns	r3, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027ba:	4a11      	ldr	r2, [pc, #68]	; (8002800 <HAL_GPIO_Init+0x300>)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3301      	adds	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f47f ae9d 	bne.w	8002510 <HAL_GPIO_Init+0x10>
  }
}
 80027d6:	bf00      	nop
 80027d8:	bf00      	nop
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010000 	.word	0x40010000
 80027ec:	48000400 	.word	0x48000400
 80027f0:	48000800 	.word	0x48000800
 80027f4:	48000c00 	.word	0x48000c00
 80027f8:	48001000 	.word	0x48001000
 80027fc:	48001400 	.word	0x48001400
 8002800:	40010400 	.word	0x40010400

08002804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
 8002810:	4613      	mov	r3, r2
 8002812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002820:	e002      	b.n	8002828 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d141      	bne.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002842:	4b4b      	ldr	r3, [pc, #300]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284e:	d131      	bne.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002850:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002856:	4a46      	ldr	r2, [pc, #280]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800285c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002860:	4b43      	ldr	r3, [pc, #268]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002868:	4a41      	ldr	r2, [pc, #260]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002870:	4b40      	ldr	r3, [pc, #256]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2232      	movs	r2, #50	; 0x32
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	4a3f      	ldr	r2, [pc, #252]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	0c9b      	lsrs	r3, r3, #18
 8002882:	3301      	adds	r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002886:	e002      	b.n	800288e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3b01      	subs	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800288e:	4b38      	ldr	r3, [pc, #224]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d102      	bne.n	80028a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f2      	bne.n	8002888 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028a2:	4b33      	ldr	r3, [pc, #204]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ae:	d158      	bne.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e057      	b.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028b4:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ba:	4a2d      	ldr	r2, [pc, #180]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80028c4:	e04d      	b.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028cc:	d141      	bne.n	8002952 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ce:	4b28      	ldr	r3, [pc, #160]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028da:	d131      	bne.n	8002940 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028e2:	4a23      	ldr	r2, [pc, #140]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ec:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028f4:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2232      	movs	r2, #50	; 0x32
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	0c9b      	lsrs	r3, r3, #18
 800290e:	3301      	adds	r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002912:	e002      	b.n	800291a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3b01      	subs	r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002926:	d102      	bne.n	800292e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f2      	bne.n	8002914 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293a:	d112      	bne.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e011      	b.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002950:	e007      	b.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002960:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40007000 	.word	0x40007000
 8002974:	20000000 	.word	0x20000000
 8002978:	431bde83 	.word	0x431bde83

0800297c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e306      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d075      	beq.n	8002a86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800299a:	4b97      	ldr	r3, [pc, #604]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a4:	4b94      	ldr	r3, [pc, #592]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b0c      	cmp	r3, #12
 80029b2:	d102      	bne.n	80029ba <HAL_RCC_OscConfig+0x3e>
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d002      	beq.n	80029c0 <HAL_RCC_OscConfig+0x44>
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d10b      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	4b8d      	ldr	r3, [pc, #564]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d05b      	beq.n	8002a84 <HAL_RCC_OscConfig+0x108>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d157      	bne.n	8002a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e2e1      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e0:	d106      	bne.n	80029f0 <HAL_RCC_OscConfig+0x74>
 80029e2:	4b85      	ldr	r3, [pc, #532]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a84      	ldr	r2, [pc, #528]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e01d      	b.n	8002a2c <HAL_RCC_OscConfig+0xb0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x98>
 80029fa:	4b7f      	ldr	r3, [pc, #508]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7e      	ldr	r2, [pc, #504]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b7c      	ldr	r3, [pc, #496]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a7b      	ldr	r2, [pc, #492]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0xb0>
 8002a14:	4b78      	ldr	r3, [pc, #480]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a77      	ldr	r2, [pc, #476]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b75      	ldr	r3, [pc, #468]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a74      	ldr	r2, [pc, #464]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7ff fc52 	bl	80022dc <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7ff fc4e 	bl	80022dc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e2a6      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4e:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0xc0>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fc3e 	bl	80022dc <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a64:	f7ff fc3a 	bl	80022dc <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e292      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a76:	4b60      	ldr	r3, [pc, #384]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0xe8>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d075      	beq.n	8002b7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a92:	4b59      	ldr	r3, [pc, #356]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a9c:	4b56      	ldr	r3, [pc, #344]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b0c      	cmp	r3, #12
 8002aaa:	d102      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x136>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d002      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x13c>
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d11f      	bne.n	8002af8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab8:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x154>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e265      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b49      	ldr	r3, [pc, #292]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	4946      	ldr	r1, [pc, #280]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ae4:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <HAL_RCC_OscConfig+0x280>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fbab 	bl	8002244 <HAL_InitTick>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d043      	beq.n	8002b7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e251      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d023      	beq.n	8002b48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b00:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a3c      	ldr	r2, [pc, #240]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7ff fbe6 	bl	80022dc <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b14:	f7ff fbe2 	bl	80022dc <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e23a      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b26:	4b34      	ldr	r3, [pc, #208]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	492d      	ldr	r1, [pc, #180]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
 8002b46:	e01a      	b.n	8002b7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b48:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a2a      	ldr	r2, [pc, #168]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7ff fbc2 	bl	80022dc <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5c:	f7ff fbbe 	bl	80022dc <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e216      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x1e0>
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d041      	beq.n	8002c0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b92:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b98:	4a17      	ldr	r2, [pc, #92]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7ff fb9b 	bl	80022dc <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002baa:	f7ff fb97 	bl	80022dc <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1ef      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ef      	beq.n	8002baa <HAL_RCC_OscConfig+0x22e>
 8002bca:	e020      	b.n	8002c0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd2:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7ff fb7e 	bl	80022dc <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002be2:	e00d      	b.n	8002c00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be4:	f7ff fb7a 	bl	80022dc <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d906      	bls.n	8002c00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e1d2      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c00:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1ea      	bne.n	8002be4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80a6 	beq.w	8002d68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c20:	4b84      	ldr	r3, [pc, #528]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_OscConfig+0x2b4>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x2b6>
 8002c30:	2300      	movs	r3, #0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00d      	beq.n	8002c52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b7f      	ldr	r3, [pc, #508]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	4a7e      	ldr	r2, [pc, #504]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6593      	str	r3, [r2, #88]	; 0x58
 8002c42:	4b7c      	ldr	r3, [pc, #496]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c52:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <HAL_RCC_OscConfig+0x4bc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c5e:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x4bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a75      	ldr	r2, [pc, #468]	; (8002e38 <HAL_RCC_OscConfig+0x4bc>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7ff fb37 	bl	80022dc <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7ff fb33 	bl	80022dc <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e18b      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c84:	4b6c      	ldr	r3, [pc, #432]	; (8002e38 <HAL_RCC_OscConfig+0x4bc>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d108      	bne.n	8002caa <HAL_RCC_OscConfig+0x32e>
 8002c98:	4b66      	ldr	r3, [pc, #408]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	4a65      	ldr	r2, [pc, #404]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca8:	e024      	b.n	8002cf4 <HAL_RCC_OscConfig+0x378>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d110      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x358>
 8002cb2:	4b60      	ldr	r3, [pc, #384]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	4a5e      	ldr	r2, [pc, #376]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002cba:	f043 0304 	orr.w	r3, r3, #4
 8002cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	4a5a      	ldr	r2, [pc, #360]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd2:	e00f      	b.n	8002cf4 <HAL_RCC_OscConfig+0x378>
 8002cd4:	4b57      	ldr	r3, [pc, #348]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	4a56      	ldr	r2, [pc, #344]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ce4:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	4a52      	ldr	r2, [pc, #328]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d016      	beq.n	8002d2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7ff faee 	bl	80022dc <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7ff faea 	bl	80022dc <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e140      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d1a:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0ed      	beq.n	8002d04 <HAL_RCC_OscConfig+0x388>
 8002d28:	e015      	b.n	8002d56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7ff fad7 	bl	80022dc <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7ff fad3 	bl	80022dc <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e129      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d48:	4b3a      	ldr	r3, [pc, #232]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1ed      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5c:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	4a34      	ldr	r2, [pc, #208]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03c      	beq.n	8002dee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01c      	beq.n	8002db6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d82:	4a2c      	ldr	r2, [pc, #176]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7ff faa6 	bl	80022dc <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d94:	f7ff faa2 	bl	80022dc <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e0fa      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002da6:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ef      	beq.n	8002d94 <HAL_RCC_OscConfig+0x418>
 8002db4:	e01b      	b.n	8002dee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dbc:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7ff fa89 	bl	80022dc <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dce:	f7ff fa85 	bl	80022dc <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e0dd      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002de0:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ef      	bne.n	8002dce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80d1 	beq.w	8002f9a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	f000 808b 	beq.w	8002f1c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d15e      	bne.n	8002ecc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <HAL_RCC_OscConfig+0x4b8>)
 8002e14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7ff fa5f 	bl	80022dc <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e20:	e00c      	b.n	8002e3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e22:	f7ff fa5b 	bl	80022dc <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d905      	bls.n	8002e3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0b3      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3c:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ec      	bne.n	8002e22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e48:	4b56      	ldr	r3, [pc, #344]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	4b56      	ldr	r3, [pc, #344]	; (8002fa8 <HAL_RCC_OscConfig+0x62c>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6a11      	ldr	r1, [r2, #32]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e58:	3a01      	subs	r2, #1
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	4311      	orrs	r1, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e62:	0212      	lsls	r2, r2, #8
 8002e64:	4311      	orrs	r1, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e6a:	0852      	lsrs	r2, r2, #1
 8002e6c:	3a01      	subs	r2, #1
 8002e6e:	0552      	lsls	r2, r2, #21
 8002e70:	4311      	orrs	r1, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e76:	0852      	lsrs	r2, r2, #1
 8002e78:	3a01      	subs	r2, #1
 8002e7a:	0652      	lsls	r2, r2, #25
 8002e7c:	4311      	orrs	r1, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e82:	06d2      	lsls	r2, r2, #27
 8002e84:	430a      	orrs	r2, r1
 8002e86:	4947      	ldr	r1, [pc, #284]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e8c:	4b45      	ldr	r3, [pc, #276]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a44      	ldr	r2, [pc, #272]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e98:	4b42      	ldr	r3, [pc, #264]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a41      	ldr	r2, [pc, #260]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7ff fa1a 	bl	80022dc <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eac:	f7ff fa16 	bl	80022dc <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e06e      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ebe:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x530>
 8002eca:	e066      	b.n	8002f9a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ecc:	4b35      	ldr	r3, [pc, #212]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a34      	ldr	r2, [pc, #208]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ed8:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4a31      	ldr	r2, [pc, #196]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002ede:	f023 0303 	bic.w	r3, r3, #3
 8002ee2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ee4:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a2e      	ldr	r2, [pc, #184]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002eea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7ff f9f2 	bl	80022dc <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efc:	f7ff f9ee 	bl	80022dc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e046      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0e:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x580>
 8002f1a:	e03e      	b.n	8002f9a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e039      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <HAL_RCC_OscConfig+0x628>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 0203 	and.w	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d12c      	bne.n	8002f96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	3b01      	subs	r3, #1
 8002f48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d123      	bne.n	8002f96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d11b      	bne.n	8002f96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d113      	bne.n	8002f96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d109      	bne.n	8002f96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8c:	085b      	lsrs	r3, r3, #1
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	019f800c 	.word	0x019f800c

08002fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e11e      	b.n	8003202 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b91      	ldr	r3, [pc, #580]	; (800320c <HAL_RCC_ClockConfig+0x260>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d910      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b8e      	ldr	r3, [pc, #568]	; (800320c <HAL_RCC_ClockConfig+0x260>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 020f 	bic.w	r2, r3, #15
 8002fda:	498c      	ldr	r1, [pc, #560]	; (800320c <HAL_RCC_ClockConfig+0x260>)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b8a      	ldr	r3, [pc, #552]	; (800320c <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e106      	b.n	8003202 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d073      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d129      	bne.n	800305c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003008:	4b81      	ldr	r3, [pc, #516]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0f4      	b.n	8003202 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003018:	f000 f99e 	bl	8003358 <RCC_GetSysClockFreqFromPLLSource>
 800301c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4a7c      	ldr	r2, [pc, #496]	; (8003214 <HAL_RCC_ClockConfig+0x268>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d93f      	bls.n	80030a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003026:	4b7a      	ldr	r3, [pc, #488]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800303a:	2b00      	cmp	r3, #0
 800303c:	d033      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003042:	2b00      	cmp	r3, #0
 8003044:	d12f      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003046:	4b72      	ldr	r3, [pc, #456]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800304e:	4a70      	ldr	r2, [pc, #448]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 8003050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003054:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e024      	b.n	80030a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d107      	bne.n	8003074 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003064:	4b6a      	ldr	r3, [pc, #424]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0c6      	b.n	8003202 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003074:	4b66      	ldr	r3, [pc, #408]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0be      	b.n	8003202 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003084:	f000 f8ce 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 8003088:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4a61      	ldr	r2, [pc, #388]	; (8003214 <HAL_RCC_ClockConfig+0x268>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d909      	bls.n	80030a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003092:	4b5f      	ldr	r3, [pc, #380]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800309a:	4a5d      	ldr	r2, [pc, #372]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b5a      	ldr	r3, [pc, #360]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4957      	ldr	r1, [pc, #348]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b8:	f7ff f910 	bl	80022dc <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7ff f90c 	bl	80022dc <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e095      	b.n	8003202 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b4e      	ldr	r3, [pc, #312]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d023      	beq.n	800313c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003100:	4b43      	ldr	r3, [pc, #268]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a42      	ldr	r2, [pc, #264]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 8003106:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800310a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003118:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003120:	4a3b      	ldr	r2, [pc, #236]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 8003122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003126:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b39      	ldr	r3, [pc, #228]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4936      	ldr	r1, [pc, #216]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
 800313a:	e008      	b.n	800314e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b80      	cmp	r3, #128	; 0x80
 8003140:	d105      	bne.n	800314e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003142:	4b33      	ldr	r3, [pc, #204]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	4a32      	ldr	r2, [pc, #200]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 8003148:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800314c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800314e:	4b2f      	ldr	r3, [pc, #188]	; (800320c <HAL_RCC_ClockConfig+0x260>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d21d      	bcs.n	8003198 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315c:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_RCC_ClockConfig+0x260>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 020f 	bic.w	r2, r3, #15
 8003164:	4929      	ldr	r1, [pc, #164]	; (800320c <HAL_RCC_ClockConfig+0x260>)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800316c:	f7ff f8b6 	bl	80022dc <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	e00a      	b.n	800318a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7ff f8b2 	bl	80022dc <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e03b      	b.n	8003202 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_RCC_ClockConfig+0x260>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d1ed      	bne.n	8003174 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a4:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4917      	ldr	r1, [pc, #92]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	490f      	ldr	r1, [pc, #60]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031d6:	f000 f825 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80031da:	4602      	mov	r2, r0
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <HAL_RCC_ClockConfig+0x264>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	490c      	ldr	r1, [pc, #48]	; (8003218 <HAL_RCC_ClockConfig+0x26c>)
 80031e8:	5ccb      	ldrb	r3, [r1, r3]
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	4a0a      	ldr	r2, [pc, #40]	; (800321c <HAL_RCC_ClockConfig+0x270>)
 80031f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <HAL_RCC_ClockConfig+0x274>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff f822 	bl	8002244 <HAL_InitTick>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40022000 	.word	0x40022000
 8003210:	40021000 	.word	0x40021000
 8003214:	04c4b400 	.word	0x04c4b400
 8003218:	08006508 	.word	0x08006508
 800321c:	20000000 	.word	0x20000000
 8003220:	20000004 	.word	0x20000004

08003224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800322a:	4b2c      	ldr	r3, [pc, #176]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b04      	cmp	r3, #4
 8003234:	d102      	bne.n	800323c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	e047      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800323c:	4b27      	ldr	r3, [pc, #156]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d102      	bne.n	800324e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003248:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	e03e      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d136      	bne.n	80032c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	3301      	adds	r3, #1
 8003270:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d10c      	bne.n	8003292 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003278:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	4a16      	ldr	r2, [pc, #88]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003282:	68d2      	ldr	r2, [r2, #12]
 8003284:	0a12      	lsrs	r2, r2, #8
 8003286:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	617b      	str	r3, [r7, #20]
      break;
 8003290:	e00c      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003292:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	4a10      	ldr	r2, [pc, #64]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800329c:	68d2      	ldr	r2, [r2, #12]
 800329e:	0a12      	lsrs	r2, r2, #8
 80032a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]
      break;
 80032aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0e5b      	lsrs	r3, r3, #25
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	3301      	adds	r3, #1
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	e001      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032cc:	693b      	ldr	r3, [r7, #16]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
 80032e0:	00f42400 	.word	0x00f42400
 80032e4:	007a1200 	.word	0x007a1200

080032e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20000000 	.word	0x20000000

08003300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003304:	f7ff fff0 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003308:	4602      	mov	r2, r0
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_RCC_GetPCLK1Freq+0x24>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	4904      	ldr	r1, [pc, #16]	; (8003328 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003316:	5ccb      	ldrb	r3, [r1, r3]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000
 8003328:	08006518 	.word	0x08006518

0800332c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003330:	f7ff ffda 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	0adb      	lsrs	r3, r3, #11
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4904      	ldr	r1, [pc, #16]	; (8003354 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	08006518 	.word	0x08006518

08003358 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800335e:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	3301      	adds	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d10c      	bne.n	8003396 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800337c:	4a17      	ldr	r2, [pc, #92]	; (80033dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003386:	68d2      	ldr	r2, [r2, #12]
 8003388:	0a12      	lsrs	r2, r2, #8
 800338a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	617b      	str	r3, [r7, #20]
    break;
 8003394:	e00c      	b.n	80033b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003396:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033a0:	68d2      	ldr	r2, [r2, #12]
 80033a2:	0a12      	lsrs	r2, r2, #8
 80033a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
    break;
 80033ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	0e5b      	lsrs	r3, r3, #25
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	3301      	adds	r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80033ca:	687b      	ldr	r3, [r7, #4]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40021000 	.word	0x40021000
 80033dc:	007a1200 	.word	0x007a1200
 80033e0:	00f42400 	.word	0x00f42400

080033e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033ec:	2300      	movs	r3, #0
 80033ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033f0:	2300      	movs	r3, #0
 80033f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8098 	beq.w	8003532 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003406:	4b43      	ldr	r3, [pc, #268]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10d      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003412:	4b40      	ldr	r3, [pc, #256]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003416:	4a3f      	ldr	r2, [pc, #252]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341c:	6593      	str	r3, [r2, #88]	; 0x58
 800341e:	4b3d      	ldr	r3, [pc, #244]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342a:	2301      	movs	r3, #1
 800342c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800342e:	4b3a      	ldr	r3, [pc, #232]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a39      	ldr	r2, [pc, #228]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800343a:	f7fe ff4f 	bl	80022dc <HAL_GetTick>
 800343e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003440:	e009      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7fe ff4b 	bl	80022dc <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d902      	bls.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	74fb      	strb	r3, [r7, #19]
        break;
 8003454:	e005      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003456:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0ef      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d159      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003468:	4b2a      	ldr	r3, [pc, #168]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003472:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01e      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	429a      	cmp	r2, r3
 8003482:	d019      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003484:	4b23      	ldr	r3, [pc, #140]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034b0:	4a18      	ldr	r2, [pc, #96]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fe ff0b 	bl	80022dc <HAL_GetTick>
 80034c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c8:	e00b      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fe ff07 	bl	80022dc <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d902      	bls.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	74fb      	strb	r3, [r7, #19]
            break;
 80034e0:	e006      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ec      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	4903      	ldr	r1, [pc, #12]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800350c:	e008      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	74bb      	strb	r3, [r7, #18]
 8003512:	e005      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003514:	40021000 	.word	0x40021000
 8003518:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003520:	7c7b      	ldrb	r3, [r7, #17]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003526:	4ba6      	ldr	r3, [pc, #664]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352a:	4aa5      	ldr	r2, [pc, #660]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003530:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353e:	4ba0      	ldr	r3, [pc, #640]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	f023 0203 	bic.w	r2, r3, #3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	499c      	ldr	r1, [pc, #624]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003560:	4b97      	ldr	r3, [pc, #604]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f023 020c 	bic.w	r2, r3, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	4994      	ldr	r1, [pc, #592]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003582:	4b8f      	ldr	r3, [pc, #572]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	498b      	ldr	r1, [pc, #556]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035a4:	4b86      	ldr	r3, [pc, #536]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	4983      	ldr	r1, [pc, #524]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035c6:	4b7e      	ldr	r3, [pc, #504]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	497a      	ldr	r1, [pc, #488]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e8:	4b75      	ldr	r3, [pc, #468]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	4972      	ldr	r1, [pc, #456]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800360a:	4b6d      	ldr	r3, [pc, #436]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4969      	ldr	r1, [pc, #420]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800362c:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	4961      	ldr	r1, [pc, #388]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800364e:	4b5c      	ldr	r3, [pc, #368]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	4958      	ldr	r1, [pc, #352]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366c:	2b00      	cmp	r3, #0
 800366e:	d015      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003670:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	4950      	ldr	r1, [pc, #320]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800368e:	d105      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003690:	4b4b      	ldr	r3, [pc, #300]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4a4a      	ldr	r2, [pc, #296]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800369a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d015      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036a8:	4b45      	ldr	r3, [pc, #276]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	4942      	ldr	r1, [pc, #264]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c6:	d105      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c8:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a3c      	ldr	r2, [pc, #240]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d015      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036e0:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	4934      	ldr	r1, [pc, #208]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036fe:	d105      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003700:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a2e      	ldr	r2, [pc, #184]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800370a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d015      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003718:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003726:	4926      	ldr	r1, [pc, #152]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003736:	d105      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003738:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4a20      	ldr	r2, [pc, #128]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003742:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d015      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	4918      	ldr	r1, [pc, #96]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800376e:	d105      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800377a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d015      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003788:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003796:	490a      	ldr	r1, [pc, #40]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037a6:	d105      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80037b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e09d      	b.n	8003912 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037e6:	d009      	beq.n	80037fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	61da      	str	r2, [r3, #28]
 80037ee:	e005      	b.n	80037fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fe faee 	bl	8001df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003832:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800383c:	d902      	bls.n	8003844 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	e002      	b.n	800384a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003848:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003852:	d007      	beq.n	8003864 <HAL_SPI_Init+0xa0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800385c:	d002      	beq.n	8003864 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	ea42 0103 	orr.w	r1, r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	0c1b      	lsrs	r3, r3, #16
 80038c0:	f003 0204 	and.w	r2, r3, #4
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038e0:	ea42 0103 	orr.w	r1, r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003900:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b088      	sub	sp, #32
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_SPI_Transmit+0x22>
 8003938:	2302      	movs	r3, #2
 800393a:	e158      	b.n	8003bee <HAL_SPI_Transmit+0x2d4>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003944:	f7fe fcca 	bl	80022dc <HAL_GetTick>
 8003948:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d002      	beq.n	8003960 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800395e:	e13d      	b.n	8003bdc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_SPI_Transmit+0x52>
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003970:	e134      	b.n	8003bdc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2203      	movs	r2, #3
 8003976:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039bc:	d10f      	bne.n	80039de <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d007      	beq.n	80039fc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a04:	d94b      	bls.n	8003a9e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_SPI_Transmit+0xfa>
 8003a0e:	8afb      	ldrh	r3, [r7, #22]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d13e      	bne.n	8003a92 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	881a      	ldrh	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a38:	e02b      	b.n	8003a92 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d112      	bne.n	8003a6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a6c:	e011      	b.n	8003a92 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a6e:	f7fe fc35 	bl	80022dc <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d803      	bhi.n	8003a86 <HAL_SPI_Transmit+0x16c>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d102      	bne.n	8003a8c <HAL_SPI_Transmit+0x172>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a90:	e0a4      	b.n	8003bdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ce      	bne.n	8003a3a <HAL_SPI_Transmit+0x120>
 8003a9c:	e07c      	b.n	8003b98 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_SPI_Transmit+0x192>
 8003aa6:	8afb      	ldrh	r3, [r7, #22]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d170      	bne.n	8003b8e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d912      	bls.n	8003adc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	881a      	ldrh	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	1c9a      	adds	r2, r3, #2
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b02      	subs	r3, #2
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ada:	e058      	b.n	8003b8e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	7812      	ldrb	r2, [r2, #0]
 8003ae8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b02:	e044      	b.n	8003b8e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d12b      	bne.n	8003b6a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d912      	bls.n	8003b42 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b02      	subs	r3, #2
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b40:	e025      	b.n	8003b8e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b68:	e011      	b.n	8003b8e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b6a:	f7fe fbb7 	bl	80022dc <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d803      	bhi.n	8003b82 <HAL_SPI_Transmit+0x268>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d102      	bne.n	8003b88 <HAL_SPI_Transmit+0x26e>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d102      	bne.n	8003b8e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b8c:	e026      	b.n	8003bdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1b5      	bne.n	8003b04 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	6839      	ldr	r1, [r7, #0]
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fce3 	bl	8004568 <SPI_EndRxTxTransaction>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e000      	b.n	8003bdc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003bda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003bec:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b088      	sub	sp, #32
 8003bfa:	af02      	add	r7, sp, #8
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	603b      	str	r3, [r7, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c12:	d112      	bne.n	8003c3a <HAL_SPI_Receive+0x44>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10e      	bne.n	8003c3a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f910 	bl	8003e56 <HAL_SPI_TransmitReceive>
 8003c36:	4603      	mov	r3, r0
 8003c38:	e109      	b.n	8003e4e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_SPI_Receive+0x52>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e102      	b.n	8003e4e <HAL_SPI_Receive+0x258>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c50:	f7fe fb44 	bl	80022dc <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c62:	2302      	movs	r3, #2
 8003c64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c66:	e0e9      	b.n	8003e3c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_Receive+0x7e>
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c78:	e0e0      	b.n	8003e3c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cc4:	d908      	bls.n	8003cd8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	e007      	b.n	8003ce8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf0:	d10f      	bne.n	8003d12 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d10:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b40      	cmp	r3, #64	; 0x40
 8003d1e:	d007      	beq.n	8003d30 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d2e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d38:	d867      	bhi.n	8003e0a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d3a:	e030      	b.n	8003d9e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d117      	bne.n	8003d7a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f103 020c 	add.w	r2, r3, #12
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	7812      	ldrb	r2, [r2, #0]
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003d78:	e011      	b.n	8003d9e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d7a:	f7fe faaf 	bl	80022dc <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d803      	bhi.n	8003d92 <HAL_SPI_Receive+0x19c>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d102      	bne.n	8003d98 <HAL_SPI_Receive+0x1a2>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d9c:	e04e      	b.n	8003e3c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1c8      	bne.n	8003d3c <HAL_SPI_Receive+0x146>
 8003daa:	e034      	b.n	8003e16 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d115      	bne.n	8003de6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	b292      	uxth	r2, r2
 8003dc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	1c9a      	adds	r2, r3, #2
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003de4:	e011      	b.n	8003e0a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de6:	f7fe fa79 	bl	80022dc <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d803      	bhi.n	8003dfe <HAL_SPI_Receive+0x208>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d102      	bne.n	8003e04 <HAL_SPI_Receive+0x20e>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e08:	e018      	b.n	8003e3c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1ca      	bne.n	8003dac <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	6839      	ldr	r1, [r7, #0]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fb4c 	bl	80044b8 <SPI_EndRxTransaction>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	75fb      	strb	r3, [r7, #23]
 8003e38:	e000      	b.n	8003e3c <HAL_SPI_Receive+0x246>
  }

error :
 8003e3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b08a      	sub	sp, #40	; 0x28
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e64:	2301      	movs	r3, #1
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_SPI_TransmitReceive+0x26>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e1fb      	b.n	8004274 <HAL_SPI_TransmitReceive+0x41e>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e84:	f7fe fa2a 	bl	80022dc <HAL_GetTick>
 8003e88:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e90:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003e98:	887b      	ldrh	r3, [r7, #2]
 8003e9a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003e9c:	887b      	ldrh	r3, [r7, #2]
 8003e9e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ea0:	7efb      	ldrb	r3, [r7, #27]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d00e      	beq.n	8003ec4 <HAL_SPI_TransmitReceive+0x6e>
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eac:	d106      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x66>
 8003eb6:	7efb      	ldrb	r3, [r7, #27]
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d003      	beq.n	8003ec4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ec2:	e1cd      	b.n	8004260 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x80>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x80>
 8003ed0:	887b      	ldrh	r3, [r7, #2]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003edc:	e1c0      	b.n	8004260 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d003      	beq.n	8003ef2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2205      	movs	r2, #5
 8003eee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	887a      	ldrh	r2, [r7, #2]
 8003f02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	887a      	ldrh	r2, [r7, #2]
 8003f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	887a      	ldrh	r2, [r7, #2]
 8003f1e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f34:	d802      	bhi.n	8003f3c <HAL_SPI_TransmitReceive+0xe6>
 8003f36:	8a3b      	ldrh	r3, [r7, #16]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d908      	bls.n	8003f4e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	e007      	b.n	8003f5e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f5c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b40      	cmp	r3, #64	; 0x40
 8003f6a:	d007      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f84:	d97c      	bls.n	8004080 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_SPI_TransmitReceive+0x13e>
 8003f8e:	8a7b      	ldrh	r3, [r7, #18]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d169      	bne.n	8004068 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	881a      	ldrh	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	1c9a      	adds	r2, r3, #2
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fb8:	e056      	b.n	8004068 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d11b      	bne.n	8004000 <HAL_SPI_TransmitReceive+0x1aa>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d016      	beq.n	8004000 <HAL_SPI_TransmitReceive+0x1aa>
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d113      	bne.n	8004000 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	881a      	ldrh	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d11c      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x1f2>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d016      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	b292      	uxth	r2, r2
 8004026:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	1c9a      	adds	r2, r3, #2
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004044:	2301      	movs	r3, #1
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004048:	f7fe f948 	bl	80022dc <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004054:	429a      	cmp	r2, r3
 8004056:	d807      	bhi.n	8004068 <HAL_SPI_TransmitReceive+0x212>
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405e:	d003      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004066:	e0fb      	b.n	8004260 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1a3      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x164>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d19d      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x164>
 800407e:	e0df      	b.n	8004240 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_SPI_TransmitReceive+0x23a>
 8004088:	8a7b      	ldrh	r3, [r7, #18]
 800408a:	2b01      	cmp	r3, #1
 800408c:	f040 80cb 	bne.w	8004226 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d912      	bls.n	80040c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	1c9a      	adds	r2, r3, #2
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b02      	subs	r3, #2
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040be:	e0b2      	b.n	8004226 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	7812      	ldrb	r2, [r2, #0]
 80040cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e6:	e09e      	b.n	8004226 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d134      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x30a>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d02f      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x30a>
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	2b01      	cmp	r3, #1
 8004104:	d12c      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d912      	bls.n	8004136 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	881a      	ldrh	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b02      	subs	r3, #2
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004134:	e012      	b.n	800415c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	7812      	ldrb	r2, [r2, #0]
 8004142:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d148      	bne.n	8004200 <HAL_SPI_TransmitReceive+0x3aa>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d042      	beq.n	8004200 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	d923      	bls.n	80041ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	b292      	uxth	r2, r2
 8004192:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	1c9a      	adds	r2, r3, #2
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b02      	subs	r3, #2
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d81f      	bhi.n	80041fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	e016      	b.n	80041fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f103 020c 	add.w	r2, r3, #12
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	7812      	ldrb	r2, [r2, #0]
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041fc:	2301      	movs	r3, #1
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004200:	f7fe f86c 	bl	80022dc <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800420c:	429a      	cmp	r2, r3
 800420e:	d803      	bhi.n	8004218 <HAL_SPI_TransmitReceive+0x3c2>
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004216:	d102      	bne.n	800421e <HAL_SPI_TransmitReceive+0x3c8>
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	2b00      	cmp	r3, #0
 800421c:	d103      	bne.n	8004226 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004224:	e01c      	b.n	8004260 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	f47f af5b 	bne.w	80040e8 <HAL_SPI_TransmitReceive+0x292>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	f47f af54 	bne.w	80040e8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f98f 	bl	8004568 <SPI_EndRxTxTransaction>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d006      	beq.n	800425e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	661a      	str	r2, [r3, #96]	; 0x60
 800425c:	e000      	b.n	8004260 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800425e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004270:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004274:	4618      	mov	r0, r3
 8004276:	3728      	adds	r7, #40	; 0x28
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800428c:	f7fe f826 	bl	80022dc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	4413      	add	r3, r2
 800429a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800429c:	f7fe f81e 	bl	80022dc <HAL_GetTick>
 80042a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042a2:	4b39      	ldr	r3, [pc, #228]	; (8004388 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	015b      	lsls	r3, r3, #5
 80042a8:	0d1b      	lsrs	r3, r3, #20
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	fb02 f303 	mul.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042b2:	e054      	b.n	800435e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d050      	beq.n	800435e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042bc:	f7fe f80e 	bl	80022dc <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d902      	bls.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d13d      	bne.n	800434e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ea:	d111      	bne.n	8004310 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f4:	d004      	beq.n	8004300 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fe:	d107      	bne.n	8004310 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004318:	d10f      	bne.n	800433a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004338:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e017      	b.n	800437e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3b01      	subs	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4013      	ands	r3, r2
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	429a      	cmp	r2, r3
 800436c:	bf0c      	ite	eq
 800436e:	2301      	moveq	r3, #1
 8004370:	2300      	movne	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	429a      	cmp	r2, r3
 800437a:	d19b      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20000000 	.word	0x20000000

0800438c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	; 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800439e:	f7fd ff9d 	bl	80022dc <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	4413      	add	r3, r2
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043ae:	f7fd ff95 	bl	80022dc <HAL_GetTick>
 80043b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043bc:	4b3d      	ldr	r3, [pc, #244]	; (80044b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	00da      	lsls	r2, r3, #3
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	0d1b      	lsrs	r3, r3, #20
 80043cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043d4:	e060      	b.n	8004498 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043dc:	d107      	bne.n	80043ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d104      	bne.n	80043ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d050      	beq.n	8004498 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043f6:	f7fd ff71 	bl	80022dc <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004402:	429a      	cmp	r2, r3
 8004404:	d902      	bls.n	800440c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	d13d      	bne.n	8004488 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800441a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004424:	d111      	bne.n	800444a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800442e:	d004      	beq.n	800443a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004438:	d107      	bne.n	800444a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004448:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004452:	d10f      	bne.n	8004474 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004472:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e010      	b.n	80044aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	3b01      	subs	r3, #1
 8004496:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d196      	bne.n	80043d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3728      	adds	r7, #40	; 0x28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000000 	.word	0x20000000

080044b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044cc:	d111      	bne.n	80044f2 <SPI_EndRxTransaction+0x3a>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d6:	d004      	beq.n	80044e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e0:	d107      	bne.n	80044f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2200      	movs	r2, #0
 80044fa:	2180      	movs	r1, #128	; 0x80
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff febd 	bl	800427c <SPI_WaitFlagStateUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450c:	f043 0220 	orr.w	r2, r3, #32
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e023      	b.n	8004560 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004520:	d11d      	bne.n	800455e <SPI_EndRxTransaction+0xa6>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452a:	d004      	beq.n	8004536 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004534:	d113      	bne.n	800455e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2200      	movs	r2, #0
 800453e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff ff22 	bl	800438c <SPI_WaitFifoStateUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e000      	b.n	8004560 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2200      	movs	r2, #0
 800457c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff ff03 	bl	800438c <SPI_WaitFifoStateUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e027      	b.n	80045ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2200      	movs	r2, #0
 80045a4:	2180      	movs	r1, #128	; 0x80
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff fe68 	bl	800427c <SPI_WaitFlagStateUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e014      	b.n	80045ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff fedc 	bl	800438c <SPI_WaitFifoStateUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045de:	f043 0220 	orr.w	r2, r3, #32
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e000      	b.n	80045ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e049      	b.n	800469a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fd fc2e 	bl	8001e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f000 f94a 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0ff      	b.n	80048c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b14      	cmp	r3, #20
 80046ce:	f200 80f0 	bhi.w	80048b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	0800472d 	.word	0x0800472d
 80046dc:	080048b3 	.word	0x080048b3
 80046e0:	080048b3 	.word	0x080048b3
 80046e4:	080048b3 	.word	0x080048b3
 80046e8:	0800476d 	.word	0x0800476d
 80046ec:	080048b3 	.word	0x080048b3
 80046f0:	080048b3 	.word	0x080048b3
 80046f4:	080048b3 	.word	0x080048b3
 80046f8:	080047af 	.word	0x080047af
 80046fc:	080048b3 	.word	0x080048b3
 8004700:	080048b3 	.word	0x080048b3
 8004704:	080048b3 	.word	0x080048b3
 8004708:	080047ef 	.word	0x080047ef
 800470c:	080048b3 	.word	0x080048b3
 8004710:	080048b3 	.word	0x080048b3
 8004714:	080048b3 	.word	0x080048b3
 8004718:	08004831 	.word	0x08004831
 800471c:	080048b3 	.word	0x080048b3
 8004720:	080048b3 	.word	0x080048b3
 8004724:	080048b3 	.word	0x080048b3
 8004728:	08004871 	.word	0x08004871
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 f95a 	bl	80049ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0204 	bic.w	r2, r2, #4
 8004756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6999      	ldr	r1, [r3, #24]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	619a      	str	r2, [r3, #24]
      break;
 800476a:	e0a5      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f9ca 	bl	8004b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6999      	ldr	r1, [r3, #24]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	021a      	lsls	r2, r3, #8
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	619a      	str	r2, [r3, #24]
      break;
 80047ac:	e084      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fa33 	bl	8004c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0208 	orr.w	r2, r2, #8
 80047c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0204 	bic.w	r2, r2, #4
 80047d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69d9      	ldr	r1, [r3, #28]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	61da      	str	r2, [r3, #28]
      break;
 80047ec:	e064      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fa9b 	bl	8004d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69d9      	ldr	r1, [r3, #28]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	021a      	lsls	r2, r3, #8
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	61da      	str	r2, [r3, #28]
      break;
 800482e:	e043      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fb04 	bl	8004e44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0208 	orr.w	r2, r2, #8
 800484a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0204 	bic.w	r2, r2, #4
 800485a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800486e:	e023      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fb48 	bl	8004f0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	021a      	lsls	r2, r3, #8
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80048b0:	e002      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
      break;
 80048b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop

080048cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3c      	ldr	r2, [pc, #240]	; (80049d0 <TIM_Base_SetConfig+0x104>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00f      	beq.n	8004904 <TIM_Base_SetConfig+0x38>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ea:	d00b      	beq.n	8004904 <TIM_Base_SetConfig+0x38>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a39      	ldr	r2, [pc, #228]	; (80049d4 <TIM_Base_SetConfig+0x108>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <TIM_Base_SetConfig+0x38>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a38      	ldr	r2, [pc, #224]	; (80049d8 <TIM_Base_SetConfig+0x10c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_Base_SetConfig+0x38>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a37      	ldr	r2, [pc, #220]	; (80049dc <TIM_Base_SetConfig+0x110>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d108      	bne.n	8004916 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2d      	ldr	r2, [pc, #180]	; (80049d0 <TIM_Base_SetConfig+0x104>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01b      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004924:	d017      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <TIM_Base_SetConfig+0x108>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d013      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a29      	ldr	r2, [pc, #164]	; (80049d8 <TIM_Base_SetConfig+0x10c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00f      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a28      	ldr	r2, [pc, #160]	; (80049dc <TIM_Base_SetConfig+0x110>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00b      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <TIM_Base_SetConfig+0x114>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <TIM_Base_SetConfig+0x118>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d003      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a25      	ldr	r2, [pc, #148]	; (80049e8 <TIM_Base_SetConfig+0x11c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d108      	bne.n	8004968 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a10      	ldr	r2, [pc, #64]	; (80049d0 <TIM_Base_SetConfig+0x104>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00f      	beq.n	80049b4 <TIM_Base_SetConfig+0xe8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a11      	ldr	r2, [pc, #68]	; (80049dc <TIM_Base_SetConfig+0x110>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00b      	beq.n	80049b4 <TIM_Base_SetConfig+0xe8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <TIM_Base_SetConfig+0x114>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <TIM_Base_SetConfig+0xe8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a0f      	ldr	r2, [pc, #60]	; (80049e4 <TIM_Base_SetConfig+0x118>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_Base_SetConfig+0xe8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a0e      	ldr	r2, [pc, #56]	; (80049e8 <TIM_Base_SetConfig+0x11c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d103      	bne.n	80049bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	615a      	str	r2, [r3, #20]
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40013400 	.word	0x40013400
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40014400 	.word	0x40014400
 80049e8:	40014800 	.word	0x40014800

080049ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f023 0201 	bic.w	r2, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f023 0302 	bic.w	r3, r3, #2
 8004a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a2c      	ldr	r2, [pc, #176]	; (8004af8 <TIM_OC1_SetConfig+0x10c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00f      	beq.n	8004a6c <TIM_OC1_SetConfig+0x80>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a2b      	ldr	r2, [pc, #172]	; (8004afc <TIM_OC1_SetConfig+0x110>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <TIM_OC1_SetConfig+0x80>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a2a      	ldr	r2, [pc, #168]	; (8004b00 <TIM_OC1_SetConfig+0x114>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_OC1_SetConfig+0x80>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a29      	ldr	r2, [pc, #164]	; (8004b04 <TIM_OC1_SetConfig+0x118>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_OC1_SetConfig+0x80>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a28      	ldr	r2, [pc, #160]	; (8004b08 <TIM_OC1_SetConfig+0x11c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d10c      	bne.n	8004a86 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f023 0308 	bic.w	r3, r3, #8
 8004a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f023 0304 	bic.w	r3, r3, #4
 8004a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <TIM_OC1_SetConfig+0x10c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00f      	beq.n	8004aae <TIM_OC1_SetConfig+0xc2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <TIM_OC1_SetConfig+0x110>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00b      	beq.n	8004aae <TIM_OC1_SetConfig+0xc2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <TIM_OC1_SetConfig+0x114>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d007      	beq.n	8004aae <TIM_OC1_SetConfig+0xc2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a18      	ldr	r2, [pc, #96]	; (8004b04 <TIM_OC1_SetConfig+0x118>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d003      	beq.n	8004aae <TIM_OC1_SetConfig+0xc2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <TIM_OC1_SetConfig+0x11c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d111      	bne.n	8004ad2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	621a      	str	r2, [r3, #32]
}
 8004aec:	bf00      	nop
 8004aee:	371c      	adds	r7, #28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40013400 	.word	0x40013400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40014400 	.word	0x40014400
 8004b08:	40014800 	.word	0x40014800

08004b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f023 0210 	bic.w	r2, r3, #16
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f023 0320 	bic.w	r3, r3, #32
 8004b5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a28      	ldr	r2, [pc, #160]	; (8004c0c <TIM_OC2_SetConfig+0x100>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_OC2_SetConfig+0x6c>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a27      	ldr	r2, [pc, #156]	; (8004c10 <TIM_OC2_SetConfig+0x104>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d10d      	bne.n	8004b94 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <TIM_OC2_SetConfig+0x100>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00f      	beq.n	8004bbc <TIM_OC2_SetConfig+0xb0>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <TIM_OC2_SetConfig+0x104>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00b      	beq.n	8004bbc <TIM_OC2_SetConfig+0xb0>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <TIM_OC2_SetConfig+0x108>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d007      	beq.n	8004bbc <TIM_OC2_SetConfig+0xb0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a1a      	ldr	r2, [pc, #104]	; (8004c18 <TIM_OC2_SetConfig+0x10c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_OC2_SetConfig+0xb0>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a19      	ldr	r2, [pc, #100]	; (8004c1c <TIM_OC2_SetConfig+0x110>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d113      	bne.n	8004be4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	621a      	str	r2, [r3, #32]
}
 8004bfe:	bf00      	nop
 8004c00:	371c      	adds	r7, #28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40014400 	.word	0x40014400
 8004c1c:	40014800 	.word	0x40014800

08004c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0303 	bic.w	r3, r3, #3
 8004c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a27      	ldr	r2, [pc, #156]	; (8004d1c <TIM_OC3_SetConfig+0xfc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d003      	beq.n	8004c8a <TIM_OC3_SetConfig+0x6a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a26      	ldr	r2, [pc, #152]	; (8004d20 <TIM_OC3_SetConfig+0x100>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d10d      	bne.n	8004ca6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <TIM_OC3_SetConfig+0xfc>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00f      	beq.n	8004cce <TIM_OC3_SetConfig+0xae>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <TIM_OC3_SetConfig+0x100>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_OC3_SetConfig+0xae>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <TIM_OC3_SetConfig+0x104>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_OC3_SetConfig+0xae>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <TIM_OC3_SetConfig+0x108>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_OC3_SetConfig+0xae>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <TIM_OC3_SetConfig+0x10c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d113      	bne.n	8004cf6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	621a      	str	r2, [r3, #32]
}
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40013400 	.word	0x40013400
 8004d24:	40014000 	.word	0x40014000
 8004d28:	40014400 	.word	0x40014400
 8004d2c:	40014800 	.word	0x40014800

08004d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	031b      	lsls	r3, r3, #12
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a28      	ldr	r2, [pc, #160]	; (8004e30 <TIM_OC4_SetConfig+0x100>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_OC4_SetConfig+0x6c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a27      	ldr	r2, [pc, #156]	; (8004e34 <TIM_OC4_SetConfig+0x104>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d10d      	bne.n	8004db8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	031b      	lsls	r3, r3, #12
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <TIM_OC4_SetConfig+0x100>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00f      	beq.n	8004de0 <TIM_OC4_SetConfig+0xb0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <TIM_OC4_SetConfig+0x104>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00b      	beq.n	8004de0 <TIM_OC4_SetConfig+0xb0>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a1b      	ldr	r2, [pc, #108]	; (8004e38 <TIM_OC4_SetConfig+0x108>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d007      	beq.n	8004de0 <TIM_OC4_SetConfig+0xb0>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a1a      	ldr	r2, [pc, #104]	; (8004e3c <TIM_OC4_SetConfig+0x10c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_OC4_SetConfig+0xb0>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a19      	ldr	r2, [pc, #100]	; (8004e40 <TIM_OC4_SetConfig+0x110>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d113      	bne.n	8004e08 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	019b      	lsls	r3, r3, #6
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	019b      	lsls	r3, r3, #6
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	621a      	str	r2, [r3, #32]
}
 8004e22:	bf00      	nop
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	40013400 	.word	0x40013400
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800

08004e44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	041b      	lsls	r3, r3, #16
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <TIM_OC5_SetConfig+0xb4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00f      	beq.n	8004ebe <TIM_OC5_SetConfig+0x7a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a16      	ldr	r2, [pc, #88]	; (8004efc <TIM_OC5_SetConfig+0xb8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00b      	beq.n	8004ebe <TIM_OC5_SetConfig+0x7a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a15      	ldr	r2, [pc, #84]	; (8004f00 <TIM_OC5_SetConfig+0xbc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <TIM_OC5_SetConfig+0x7a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a14      	ldr	r2, [pc, #80]	; (8004f04 <TIM_OC5_SetConfig+0xc0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d003      	beq.n	8004ebe <TIM_OC5_SetConfig+0x7a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a13      	ldr	r2, [pc, #76]	; (8004f08 <TIM_OC5_SetConfig+0xc4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d109      	bne.n	8004ed2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	621a      	str	r2, [r3, #32]
}
 8004eec:	bf00      	nop
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	40013400 	.word	0x40013400
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40014400 	.word	0x40014400
 8004f08:	40014800 	.word	0x40014800

08004f0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	051b      	lsls	r3, r3, #20
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a18      	ldr	r2, [pc, #96]	; (8004fc4 <TIM_OC6_SetConfig+0xb8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00f      	beq.n	8004f88 <TIM_OC6_SetConfig+0x7c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <TIM_OC6_SetConfig+0xbc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00b      	beq.n	8004f88 <TIM_OC6_SetConfig+0x7c>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a16      	ldr	r2, [pc, #88]	; (8004fcc <TIM_OC6_SetConfig+0xc0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <TIM_OC6_SetConfig+0x7c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <TIM_OC6_SetConfig+0xc4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_OC6_SetConfig+0x7c>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a14      	ldr	r2, [pc, #80]	; (8004fd4 <TIM_OC6_SetConfig+0xc8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d109      	bne.n	8004f9c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	029b      	lsls	r3, r3, #10
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40013400 	.word	0x40013400
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40014400 	.word	0x40014400
 8004fd4:	40014800 	.word	0x40014800

08004fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e065      	b.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a2c      	ldr	r2, [pc, #176]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a2b      	ldr	r2, [pc, #172]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d108      	bne.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800502a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800503c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005040:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d018      	beq.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005066:	d013      	beq.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00e      	beq.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d009      	beq.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a12      	ldr	r2, [pc, #72]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d004      	beq.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10c      	bne.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005096:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40012c00 	.word	0x40012c00
 80050cc:	40013400 	.word	0x40013400
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40014000 	.word	0x40014000

080050dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e042      	b.n	8005174 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7fc ff13 	bl	8001f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2224      	movs	r2, #36	; 0x24
 800510a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0201 	bic.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f82c 	bl	800517c <UART_SetConfig>
 8005124:	4603      	mov	r3, r0
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e022      	b.n	8005174 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 faec 	bl	8005714 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800514a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800515a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fb73 	bl	8005858 <UART_CheckIdleState>
 8005172:	4603      	mov	r3, r0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800517c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005180:	b08c      	sub	sp, #48	; 0x30
 8005182:	af00      	add	r7, sp, #0
 8005184:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	431a      	orrs	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	431a      	orrs	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4bab      	ldr	r3, [pc, #684]	; (8005458 <UART_SetConfig+0x2dc>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4aa0      	ldr	r2, [pc, #640]	; (800545c <UART_SetConfig+0x2e0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e4:	4313      	orrs	r3, r2
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	f023 010f 	bic.w	r1, r3, #15
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a91      	ldr	r2, [pc, #580]	; (8005460 <UART_SetConfig+0x2e4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d125      	bne.n	800526c <UART_SetConfig+0xf0>
 8005220:	4b90      	ldr	r3, [pc, #576]	; (8005464 <UART_SetConfig+0x2e8>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b03      	cmp	r3, #3
 800522c:	d81a      	bhi.n	8005264 <UART_SetConfig+0xe8>
 800522e:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <UART_SetConfig+0xb8>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	08005245 	.word	0x08005245
 8005238:	08005255 	.word	0x08005255
 800523c:	0800524d 	.word	0x0800524d
 8005240:	0800525d 	.word	0x0800525d
 8005244:	2301      	movs	r3, #1
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800524a:	e0d6      	b.n	80053fa <UART_SetConfig+0x27e>
 800524c:	2302      	movs	r3, #2
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005252:	e0d2      	b.n	80053fa <UART_SetConfig+0x27e>
 8005254:	2304      	movs	r3, #4
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525a:	e0ce      	b.n	80053fa <UART_SetConfig+0x27e>
 800525c:	2308      	movs	r3, #8
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005262:	e0ca      	b.n	80053fa <UART_SetConfig+0x27e>
 8005264:	2310      	movs	r3, #16
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526a:	e0c6      	b.n	80053fa <UART_SetConfig+0x27e>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a7d      	ldr	r2, [pc, #500]	; (8005468 <UART_SetConfig+0x2ec>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d138      	bne.n	80052e8 <UART_SetConfig+0x16c>
 8005276:	4b7b      	ldr	r3, [pc, #492]	; (8005464 <UART_SetConfig+0x2e8>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	f003 030c 	and.w	r3, r3, #12
 8005280:	2b0c      	cmp	r3, #12
 8005282:	d82d      	bhi.n	80052e0 <UART_SetConfig+0x164>
 8005284:	a201      	add	r2, pc, #4	; (adr r2, 800528c <UART_SetConfig+0x110>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052c1 	.word	0x080052c1
 8005290:	080052e1 	.word	0x080052e1
 8005294:	080052e1 	.word	0x080052e1
 8005298:	080052e1 	.word	0x080052e1
 800529c:	080052d1 	.word	0x080052d1
 80052a0:	080052e1 	.word	0x080052e1
 80052a4:	080052e1 	.word	0x080052e1
 80052a8:	080052e1 	.word	0x080052e1
 80052ac:	080052c9 	.word	0x080052c9
 80052b0:	080052e1 	.word	0x080052e1
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052e1 	.word	0x080052e1
 80052bc:	080052d9 	.word	0x080052d9
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c6:	e098      	b.n	80053fa <UART_SetConfig+0x27e>
 80052c8:	2302      	movs	r3, #2
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ce:	e094      	b.n	80053fa <UART_SetConfig+0x27e>
 80052d0:	2304      	movs	r3, #4
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052d6:	e090      	b.n	80053fa <UART_SetConfig+0x27e>
 80052d8:	2308      	movs	r3, #8
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052de:	e08c      	b.n	80053fa <UART_SetConfig+0x27e>
 80052e0:	2310      	movs	r3, #16
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052e6:	e088      	b.n	80053fa <UART_SetConfig+0x27e>
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a5f      	ldr	r2, [pc, #380]	; (800546c <UART_SetConfig+0x2f0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d125      	bne.n	800533e <UART_SetConfig+0x1c2>
 80052f2:	4b5c      	ldr	r3, [pc, #368]	; (8005464 <UART_SetConfig+0x2e8>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052fc:	2b30      	cmp	r3, #48	; 0x30
 80052fe:	d016      	beq.n	800532e <UART_SetConfig+0x1b2>
 8005300:	2b30      	cmp	r3, #48	; 0x30
 8005302:	d818      	bhi.n	8005336 <UART_SetConfig+0x1ba>
 8005304:	2b20      	cmp	r3, #32
 8005306:	d00a      	beq.n	800531e <UART_SetConfig+0x1a2>
 8005308:	2b20      	cmp	r3, #32
 800530a:	d814      	bhi.n	8005336 <UART_SetConfig+0x1ba>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <UART_SetConfig+0x19a>
 8005310:	2b10      	cmp	r3, #16
 8005312:	d008      	beq.n	8005326 <UART_SetConfig+0x1aa>
 8005314:	e00f      	b.n	8005336 <UART_SetConfig+0x1ba>
 8005316:	2300      	movs	r3, #0
 8005318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800531c:	e06d      	b.n	80053fa <UART_SetConfig+0x27e>
 800531e:	2302      	movs	r3, #2
 8005320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005324:	e069      	b.n	80053fa <UART_SetConfig+0x27e>
 8005326:	2304      	movs	r3, #4
 8005328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800532c:	e065      	b.n	80053fa <UART_SetConfig+0x27e>
 800532e:	2308      	movs	r3, #8
 8005330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005334:	e061      	b.n	80053fa <UART_SetConfig+0x27e>
 8005336:	2310      	movs	r3, #16
 8005338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800533c:	e05d      	b.n	80053fa <UART_SetConfig+0x27e>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a4b      	ldr	r2, [pc, #300]	; (8005470 <UART_SetConfig+0x2f4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d125      	bne.n	8005394 <UART_SetConfig+0x218>
 8005348:	4b46      	ldr	r3, [pc, #280]	; (8005464 <UART_SetConfig+0x2e8>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005352:	2bc0      	cmp	r3, #192	; 0xc0
 8005354:	d016      	beq.n	8005384 <UART_SetConfig+0x208>
 8005356:	2bc0      	cmp	r3, #192	; 0xc0
 8005358:	d818      	bhi.n	800538c <UART_SetConfig+0x210>
 800535a:	2b80      	cmp	r3, #128	; 0x80
 800535c:	d00a      	beq.n	8005374 <UART_SetConfig+0x1f8>
 800535e:	2b80      	cmp	r3, #128	; 0x80
 8005360:	d814      	bhi.n	800538c <UART_SetConfig+0x210>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <UART_SetConfig+0x1f0>
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d008      	beq.n	800537c <UART_SetConfig+0x200>
 800536a:	e00f      	b.n	800538c <UART_SetConfig+0x210>
 800536c:	2300      	movs	r3, #0
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005372:	e042      	b.n	80053fa <UART_SetConfig+0x27e>
 8005374:	2302      	movs	r3, #2
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800537a:	e03e      	b.n	80053fa <UART_SetConfig+0x27e>
 800537c:	2304      	movs	r3, #4
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005382:	e03a      	b.n	80053fa <UART_SetConfig+0x27e>
 8005384:	2308      	movs	r3, #8
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800538a:	e036      	b.n	80053fa <UART_SetConfig+0x27e>
 800538c:	2310      	movs	r3, #16
 800538e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005392:	e032      	b.n	80053fa <UART_SetConfig+0x27e>
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a30      	ldr	r2, [pc, #192]	; (800545c <UART_SetConfig+0x2e0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d12a      	bne.n	80053f4 <UART_SetConfig+0x278>
 800539e:	4b31      	ldr	r3, [pc, #196]	; (8005464 <UART_SetConfig+0x2e8>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053ac:	d01a      	beq.n	80053e4 <UART_SetConfig+0x268>
 80053ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053b2:	d81b      	bhi.n	80053ec <UART_SetConfig+0x270>
 80053b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b8:	d00c      	beq.n	80053d4 <UART_SetConfig+0x258>
 80053ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053be:	d815      	bhi.n	80053ec <UART_SetConfig+0x270>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <UART_SetConfig+0x250>
 80053c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c8:	d008      	beq.n	80053dc <UART_SetConfig+0x260>
 80053ca:	e00f      	b.n	80053ec <UART_SetConfig+0x270>
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053d2:	e012      	b.n	80053fa <UART_SetConfig+0x27e>
 80053d4:	2302      	movs	r3, #2
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053da:	e00e      	b.n	80053fa <UART_SetConfig+0x27e>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e2:	e00a      	b.n	80053fa <UART_SetConfig+0x27e>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ea:	e006      	b.n	80053fa <UART_SetConfig+0x27e>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053f2:	e002      	b.n	80053fa <UART_SetConfig+0x27e>
 80053f4:	2310      	movs	r3, #16
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a17      	ldr	r2, [pc, #92]	; (800545c <UART_SetConfig+0x2e0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	f040 80a8 	bne.w	8005556 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800540a:	2b08      	cmp	r3, #8
 800540c:	d834      	bhi.n	8005478 <UART_SetConfig+0x2fc>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <UART_SetConfig+0x298>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005439 	.word	0x08005439
 8005418:	08005479 	.word	0x08005479
 800541c:	08005441 	.word	0x08005441
 8005420:	08005479 	.word	0x08005479
 8005424:	08005447 	.word	0x08005447
 8005428:	08005479 	.word	0x08005479
 800542c:	08005479 	.word	0x08005479
 8005430:	08005479 	.word	0x08005479
 8005434:	0800544f 	.word	0x0800544f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005438:	f7fd ff62 	bl	8003300 <HAL_RCC_GetPCLK1Freq>
 800543c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800543e:	e021      	b.n	8005484 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005440:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <UART_SetConfig+0x2f8>)
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005444:	e01e      	b.n	8005484 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005446:	f7fd feed 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 800544a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800544c:	e01a      	b.n	8005484 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800544e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005454:	e016      	b.n	8005484 <UART_SetConfig+0x308>
 8005456:	bf00      	nop
 8005458:	cfff69f3 	.word	0xcfff69f3
 800545c:	40008000 	.word	0x40008000
 8005460:	40013800 	.word	0x40013800
 8005464:	40021000 	.word	0x40021000
 8005468:	40004400 	.word	0x40004400
 800546c:	40004800 	.word	0x40004800
 8005470:	40004c00 	.word	0x40004c00
 8005474:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005482:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 812a 	beq.w	80056e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	4a9e      	ldr	r2, [pc, #632]	; (800570c <UART_SetConfig+0x590>)
 8005492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005496:	461a      	mov	r2, r3
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	fbb3 f3f2 	udiv	r3, r3, r2
 800549e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	4413      	add	r3, r2
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d305      	bcc.n	80054bc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d903      	bls.n	80054c4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054c2:	e10d      	b.n	80056e0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	2200      	movs	r2, #0
 80054c8:	60bb      	str	r3, [r7, #8]
 80054ca:	60fa      	str	r2, [r7, #12]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	4a8e      	ldr	r2, [pc, #568]	; (800570c <UART_SetConfig+0x590>)
 80054d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2200      	movs	r2, #0
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	607a      	str	r2, [r7, #4]
 80054de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054e6:	f7fb fb53 	bl	8000b90 <__aeabi_uldivmod>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4610      	mov	r0, r2
 80054f0:	4619      	mov	r1, r3
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	020b      	lsls	r3, r1, #8
 80054fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005500:	0202      	lsls	r2, r0, #8
 8005502:	6979      	ldr	r1, [r7, #20]
 8005504:	6849      	ldr	r1, [r1, #4]
 8005506:	0849      	lsrs	r1, r1, #1
 8005508:	2000      	movs	r0, #0
 800550a:	460c      	mov	r4, r1
 800550c:	4605      	mov	r5, r0
 800550e:	eb12 0804 	adds.w	r8, r2, r4
 8005512:	eb43 0905 	adc.w	r9, r3, r5
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	469a      	mov	sl, r3
 800551e:	4693      	mov	fp, r2
 8005520:	4652      	mov	r2, sl
 8005522:	465b      	mov	r3, fp
 8005524:	4640      	mov	r0, r8
 8005526:	4649      	mov	r1, r9
 8005528:	f7fb fb32 	bl	8000b90 <__aeabi_uldivmod>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4613      	mov	r3, r2
 8005532:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800553a:	d308      	bcc.n	800554e <UART_SetConfig+0x3d2>
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005542:	d204      	bcs.n	800554e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6a3a      	ldr	r2, [r7, #32]
 800554a:	60da      	str	r2, [r3, #12]
 800554c:	e0c8      	b.n	80056e0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005554:	e0c4      	b.n	80056e0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555e:	d167      	bne.n	8005630 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005560:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005564:	2b08      	cmp	r3, #8
 8005566:	d828      	bhi.n	80055ba <UART_SetConfig+0x43e>
 8005568:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <UART_SetConfig+0x3f4>)
 800556a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556e:	bf00      	nop
 8005570:	08005595 	.word	0x08005595
 8005574:	0800559d 	.word	0x0800559d
 8005578:	080055a5 	.word	0x080055a5
 800557c:	080055bb 	.word	0x080055bb
 8005580:	080055ab 	.word	0x080055ab
 8005584:	080055bb 	.word	0x080055bb
 8005588:	080055bb 	.word	0x080055bb
 800558c:	080055bb 	.word	0x080055bb
 8005590:	080055b3 	.word	0x080055b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005594:	f7fd feb4 	bl	8003300 <HAL_RCC_GetPCLK1Freq>
 8005598:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800559a:	e014      	b.n	80055c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800559c:	f7fd fec6 	bl	800332c <HAL_RCC_GetPCLK2Freq>
 80055a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055a2:	e010      	b.n	80055c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055a4:	4b5a      	ldr	r3, [pc, #360]	; (8005710 <UART_SetConfig+0x594>)
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055a8:	e00d      	b.n	80055c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055aa:	f7fd fe3b 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80055ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055b0:	e009      	b.n	80055c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055b8:	e005      	b.n	80055c6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80055c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8089 	beq.w	80056e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	4a4e      	ldr	r2, [pc, #312]	; (800570c <UART_SetConfig+0x590>)
 80055d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055d8:	461a      	mov	r2, r3
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80055e0:	005a      	lsls	r2, r3, #1
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	085b      	lsrs	r3, r3, #1
 80055e8:	441a      	add	r2, r3
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	2b0f      	cmp	r3, #15
 80055f8:	d916      	bls.n	8005628 <UART_SetConfig+0x4ac>
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005600:	d212      	bcs.n	8005628 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f023 030f 	bic.w	r3, r3, #15
 800560a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	b29b      	uxth	r3, r3
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	b29a      	uxth	r2, r3
 8005618:	8bfb      	ldrh	r3, [r7, #30]
 800561a:	4313      	orrs	r3, r2
 800561c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	8bfa      	ldrh	r2, [r7, #30]
 8005624:	60da      	str	r2, [r3, #12]
 8005626:	e05b      	b.n	80056e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800562e:	e057      	b.n	80056e0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005630:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005634:	2b08      	cmp	r3, #8
 8005636:	d828      	bhi.n	800568a <UART_SetConfig+0x50e>
 8005638:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <UART_SetConfig+0x4c4>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08005665 	.word	0x08005665
 8005644:	0800566d 	.word	0x0800566d
 8005648:	08005675 	.word	0x08005675
 800564c:	0800568b 	.word	0x0800568b
 8005650:	0800567b 	.word	0x0800567b
 8005654:	0800568b 	.word	0x0800568b
 8005658:	0800568b 	.word	0x0800568b
 800565c:	0800568b 	.word	0x0800568b
 8005660:	08005683 	.word	0x08005683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005664:	f7fd fe4c 	bl	8003300 <HAL_RCC_GetPCLK1Freq>
 8005668:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800566a:	e014      	b.n	8005696 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800566c:	f7fd fe5e 	bl	800332c <HAL_RCC_GetPCLK2Freq>
 8005670:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005672:	e010      	b.n	8005696 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005674:	4b26      	ldr	r3, [pc, #152]	; (8005710 <UART_SetConfig+0x594>)
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005678:	e00d      	b.n	8005696 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800567a:	f7fd fdd3 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 800567e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005680:	e009      	b.n	8005696 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005688:	e005      	b.n	8005696 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005694:	bf00      	nop
    }

    if (pclk != 0U)
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	2b00      	cmp	r3, #0
 800569a:	d021      	beq.n	80056e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	4a1a      	ldr	r2, [pc, #104]	; (800570c <UART_SetConfig+0x590>)
 80056a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056a6:	461a      	mov	r2, r3
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	441a      	add	r2, r3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80056be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	2b0f      	cmp	r3, #15
 80056c4:	d909      	bls.n	80056da <UART_SetConfig+0x55e>
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056cc:	d205      	bcs.n	80056da <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60da      	str	r2, [r3, #12]
 80056d8:	e002      	b.n	80056e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2200      	movs	r2, #0
 80056f4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2200      	movs	r2, #0
 80056fa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80056fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005700:	4618      	mov	r0, r3
 8005702:	3730      	adds	r7, #48	; 0x30
 8005704:	46bd      	mov	sp, r7
 8005706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800570a:	bf00      	nop
 800570c:	08006520 	.word	0x08006520
 8005710:	00f42400 	.word	0x00f42400

08005714 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01a      	beq.n	800582a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005812:	d10a      	bne.n	800582a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	605a      	str	r2, [r3, #4]
  }
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af02      	add	r7, sp, #8
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005868:	f7fc fd38 	bl	80022dc <HAL_GetTick>
 800586c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b08      	cmp	r3, #8
 800587a:	d10e      	bne.n	800589a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800587c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f82f 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e025      	b.n	80058e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d10e      	bne.n	80058c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f819 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e00f      	b.n	80058e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b09c      	sub	sp, #112	; 0x70
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	603b      	str	r3, [r7, #0]
 80058fa:	4613      	mov	r3, r2
 80058fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fe:	e0a9      	b.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	f000 80a5 	beq.w	8005a54 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590a:	f7fc fce7 	bl	80022dc <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005916:	429a      	cmp	r2, r3
 8005918:	d302      	bcc.n	8005920 <UART_WaitOnFlagUntilTimeout+0x32>
 800591a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800591c:	2b00      	cmp	r3, #0
 800591e:	d140      	bne.n	80059a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800592e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005930:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005934:	667b      	str	r3, [r7, #100]	; 0x64
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800593e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005940:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005944:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800594c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e6      	bne.n	8005920 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3308      	adds	r3, #8
 8005958:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	f023 0301 	bic.w	r3, r3, #1
 8005968:	663b      	str	r3, [r7, #96]	; 0x60
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3308      	adds	r3, #8
 8005970:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005972:	64ba      	str	r2, [r7, #72]	; 0x48
 8005974:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e5      	bne.n	8005952 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2220      	movs	r2, #32
 800598a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e069      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d051      	beq.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059be:	d149      	bne.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e6      	bne.n	80059ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a1c:	623a      	str	r2, [r7, #32]
 8005a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	69f9      	ldr	r1, [r7, #28]
 8005a22:	6a3a      	ldr	r2, [r7, #32]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e010      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69da      	ldr	r2, [r3, #28]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	f43f af46 	beq.w	8005900 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3770      	adds	r7, #112	; 0x70
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e027      	b.n	8005ae4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2224      	movs	r2, #36	; 0x24
 8005aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0201 	bic.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ac2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e02d      	b.n	8005b64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	; 0x24
 8005b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f84f 	bl	8005be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e02d      	b.n	8005be0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2224      	movs	r2, #36	; 0x24
 8005b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f811 	bl	8005be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d108      	bne.n	8005c0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c08:	e031      	b.n	8005c6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c0a:	2308      	movs	r3, #8
 8005c0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c0e:	2308      	movs	r3, #8
 8005c10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	0e5b      	lsrs	r3, r3, #25
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	0f5b      	lsrs	r3, r3, #29
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	7b3a      	ldrb	r2, [r7, #12]
 8005c36:	4911      	ldr	r1, [pc, #68]	; (8005c7c <UARTEx_SetNbDataToProcess+0x94>)
 8005c38:	5c8a      	ldrb	r2, [r1, r2]
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c3e:	7b3a      	ldrb	r2, [r7, #12]
 8005c40:	490f      	ldr	r1, [pc, #60]	; (8005c80 <UARTEx_SetNbDataToProcess+0x98>)
 8005c42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c44:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	7b7a      	ldrb	r2, [r7, #13]
 8005c54:	4909      	ldr	r1, [pc, #36]	; (8005c7c <UARTEx_SetNbDataToProcess+0x94>)
 8005c56:	5c8a      	ldrb	r2, [r1, r2]
 8005c58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c5c:	7b7a      	ldrb	r2, [r7, #13]
 8005c5e:	4908      	ldr	r1, [pc, #32]	; (8005c80 <UARTEx_SetNbDataToProcess+0x98>)
 8005c60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c62:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	08006538 	.word	0x08006538
 8005c80:	08006540 	.word	0x08006540

08005c84 <__errno>:
 8005c84:	4b01      	ldr	r3, [pc, #4]	; (8005c8c <__errno+0x8>)
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	2000000c 	.word	0x2000000c

08005c90 <__libc_init_array>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	4d0d      	ldr	r5, [pc, #52]	; (8005cc8 <__libc_init_array+0x38>)
 8005c94:	4c0d      	ldr	r4, [pc, #52]	; (8005ccc <__libc_init_array+0x3c>)
 8005c96:	1b64      	subs	r4, r4, r5
 8005c98:	10a4      	asrs	r4, r4, #2
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	42a6      	cmp	r6, r4
 8005c9e:	d109      	bne.n	8005cb4 <__libc_init_array+0x24>
 8005ca0:	4d0b      	ldr	r5, [pc, #44]	; (8005cd0 <__libc_init_array+0x40>)
 8005ca2:	4c0c      	ldr	r4, [pc, #48]	; (8005cd4 <__libc_init_array+0x44>)
 8005ca4:	f000 fa24 	bl	80060f0 <_init>
 8005ca8:	1b64      	subs	r4, r4, r5
 8005caa:	10a4      	asrs	r4, r4, #2
 8005cac:	2600      	movs	r6, #0
 8005cae:	42a6      	cmp	r6, r4
 8005cb0:	d105      	bne.n	8005cbe <__libc_init_array+0x2e>
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb8:	4798      	blx	r3
 8005cba:	3601      	adds	r6, #1
 8005cbc:	e7ee      	b.n	8005c9c <__libc_init_array+0xc>
 8005cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc2:	4798      	blx	r3
 8005cc4:	3601      	adds	r6, #1
 8005cc6:	e7f2      	b.n	8005cae <__libc_init_array+0x1e>
 8005cc8:	08006554 	.word	0x08006554
 8005ccc:	08006554 	.word	0x08006554
 8005cd0:	08006554 	.word	0x08006554
 8005cd4:	08006558 	.word	0x08006558

08005cd8 <memset>:
 8005cd8:	4402      	add	r2, r0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d100      	bne.n	8005ce2 <memset+0xa>
 8005ce0:	4770      	bx	lr
 8005ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce6:	e7f9      	b.n	8005cdc <memset+0x4>

08005ce8 <log>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	ed2d 8b02 	vpush	{d8}
 8005cee:	ec55 4b10 	vmov	r4, r5, d0
 8005cf2:	f000 f839 	bl	8005d68 <__ieee754_log>
 8005cf6:	4622      	mov	r2, r4
 8005cf8:	462b      	mov	r3, r5
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	eeb0 8a40 	vmov.f32	s16, s0
 8005d02:	eef0 8a60 	vmov.f32	s17, s1
 8005d06:	f7fa fedd 	bl	8000ac4 <__aeabi_dcmpun>
 8005d0a:	b998      	cbnz	r0, 8005d34 <log+0x4c>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4620      	mov	r0, r4
 8005d12:	4629      	mov	r1, r5
 8005d14:	f7fa fecc 	bl	8000ab0 <__aeabi_dcmpgt>
 8005d18:	b960      	cbnz	r0, 8005d34 <log+0x4c>
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4620      	mov	r0, r4
 8005d20:	4629      	mov	r1, r5
 8005d22:	f7fa fe9d 	bl	8000a60 <__aeabi_dcmpeq>
 8005d26:	b160      	cbz	r0, 8005d42 <log+0x5a>
 8005d28:	f7ff ffac 	bl	8005c84 <__errno>
 8005d2c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8005d58 <log+0x70>
 8005d30:	2322      	movs	r3, #34	; 0x22
 8005d32:	6003      	str	r3, [r0, #0]
 8005d34:	eeb0 0a48 	vmov.f32	s0, s16
 8005d38:	eef0 0a68 	vmov.f32	s1, s17
 8005d3c:	ecbd 8b02 	vpop	{d8}
 8005d40:	bd38      	pop	{r3, r4, r5, pc}
 8005d42:	f7ff ff9f 	bl	8005c84 <__errno>
 8005d46:	ecbd 8b02 	vpop	{d8}
 8005d4a:	2321      	movs	r3, #33	; 0x21
 8005d4c:	6003      	str	r3, [r0, #0]
 8005d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d52:	4803      	ldr	r0, [pc, #12]	; (8005d60 <log+0x78>)
 8005d54:	f000 b9c4 	b.w	80060e0 <nan>
 8005d58:	00000000 	.word	0x00000000
 8005d5c:	fff00000 	.word	0xfff00000
 8005d60:	08006548 	.word	0x08006548
 8005d64:	00000000 	.word	0x00000000

08005d68 <__ieee754_log>:
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	ec51 0b10 	vmov	r0, r1, d0
 8005d70:	ed2d 8b04 	vpush	{d8-d9}
 8005d74:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005d78:	b083      	sub	sp, #12
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	da29      	bge.n	8005dd2 <__ieee754_log+0x6a>
 8005d7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d82:	4303      	orrs	r3, r0
 8005d84:	ee10 2a10 	vmov	r2, s0
 8005d88:	d10c      	bne.n	8005da4 <__ieee754_log+0x3c>
 8005d8a:	49cf      	ldr	r1, [pc, #828]	; (80060c8 <__ieee754_log+0x360>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2000      	movs	r0, #0
 8005d92:	f7fa fd27 	bl	80007e4 <__aeabi_ddiv>
 8005d96:	ec41 0b10 	vmov	d0, r0, r1
 8005d9a:	b003      	add	sp, #12
 8005d9c:	ecbd 8b04 	vpop	{d8-d9}
 8005da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da4:	2900      	cmp	r1, #0
 8005da6:	da05      	bge.n	8005db4 <__ieee754_log+0x4c>
 8005da8:	460b      	mov	r3, r1
 8005daa:	f7fa fa39 	bl	8000220 <__aeabi_dsub>
 8005dae:	2200      	movs	r2, #0
 8005db0:	2300      	movs	r3, #0
 8005db2:	e7ee      	b.n	8005d92 <__ieee754_log+0x2a>
 8005db4:	4bc5      	ldr	r3, [pc, #788]	; (80060cc <__ieee754_log+0x364>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	f7fa fbea 	bl	8000590 <__aeabi_dmul>
 8005dbc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005dc0:	460d      	mov	r5, r1
 8005dc2:	4ac3      	ldr	r2, [pc, #780]	; (80060d0 <__ieee754_log+0x368>)
 8005dc4:	4295      	cmp	r5, r2
 8005dc6:	dd06      	ble.n	8005dd6 <__ieee754_log+0x6e>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	f7fa fa2a 	bl	8000224 <__adddf3>
 8005dd0:	e7e1      	b.n	8005d96 <__ieee754_log+0x2e>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e7f5      	b.n	8005dc2 <__ieee754_log+0x5a>
 8005dd6:	152c      	asrs	r4, r5, #20
 8005dd8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005ddc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005de0:	441c      	add	r4, r3
 8005de2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005de6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005df2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005df6:	ea42 0105 	orr.w	r1, r2, r5
 8005dfa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4bb4      	ldr	r3, [pc, #720]	; (80060d4 <__ieee754_log+0x36c>)
 8005e02:	f7fa fa0d 	bl	8000220 <__aeabi_dsub>
 8005e06:	1cab      	adds	r3, r5, #2
 8005e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	4682      	mov	sl, r0
 8005e10:	468b      	mov	fp, r1
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	dc53      	bgt.n	8005ec0 <__ieee754_log+0x158>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f7fa fe21 	bl	8000a60 <__aeabi_dcmpeq>
 8005e1e:	b1d0      	cbz	r0, 8005e56 <__ieee754_log+0xee>
 8005e20:	2c00      	cmp	r4, #0
 8005e22:	f000 8122 	beq.w	800606a <__ieee754_log+0x302>
 8005e26:	4620      	mov	r0, r4
 8005e28:	f7fa fb48 	bl	80004bc <__aeabi_i2d>
 8005e2c:	a390      	add	r3, pc, #576	; (adr r3, 8006070 <__ieee754_log+0x308>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	4606      	mov	r6, r0
 8005e34:	460f      	mov	r7, r1
 8005e36:	f7fa fbab 	bl	8000590 <__aeabi_dmul>
 8005e3a:	a38f      	add	r3, pc, #572	; (adr r3, 8006078 <__ieee754_log+0x310>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	4604      	mov	r4, r0
 8005e42:	460d      	mov	r5, r1
 8005e44:	4630      	mov	r0, r6
 8005e46:	4639      	mov	r1, r7
 8005e48:	f7fa fba2 	bl	8000590 <__aeabi_dmul>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4620      	mov	r0, r4
 8005e52:	4629      	mov	r1, r5
 8005e54:	e7ba      	b.n	8005dcc <__ieee754_log+0x64>
 8005e56:	a38a      	add	r3, pc, #552	; (adr r3, 8006080 <__ieee754_log+0x318>)
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	4650      	mov	r0, sl
 8005e5e:	4659      	mov	r1, fp
 8005e60:	f7fa fb96 	bl	8000590 <__aeabi_dmul>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	2000      	movs	r0, #0
 8005e6a:	499b      	ldr	r1, [pc, #620]	; (80060d8 <__ieee754_log+0x370>)
 8005e6c:	f7fa f9d8 	bl	8000220 <__aeabi_dsub>
 8005e70:	4652      	mov	r2, sl
 8005e72:	4606      	mov	r6, r0
 8005e74:	460f      	mov	r7, r1
 8005e76:	465b      	mov	r3, fp
 8005e78:	4650      	mov	r0, sl
 8005e7a:	4659      	mov	r1, fp
 8005e7c:	f7fa fb88 	bl	8000590 <__aeabi_dmul>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4630      	mov	r0, r6
 8005e86:	4639      	mov	r1, r7
 8005e88:	f7fa fb82 	bl	8000590 <__aeabi_dmul>
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	460f      	mov	r7, r1
 8005e90:	b914      	cbnz	r4, 8005e98 <__ieee754_log+0x130>
 8005e92:	4632      	mov	r2, r6
 8005e94:	463b      	mov	r3, r7
 8005e96:	e0a2      	b.n	8005fde <__ieee754_log+0x276>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f7fa fb0f 	bl	80004bc <__aeabi_i2d>
 8005e9e:	a374      	add	r3, pc, #464	; (adr r3, 8006070 <__ieee754_log+0x308>)
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	4680      	mov	r8, r0
 8005ea6:	4689      	mov	r9, r1
 8005ea8:	f7fa fb72 	bl	8000590 <__aeabi_dmul>
 8005eac:	a372      	add	r3, pc, #456	; (adr r3, 8006078 <__ieee754_log+0x310>)
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	460d      	mov	r5, r1
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	4649      	mov	r1, r9
 8005eba:	f7fa fb69 	bl	8000590 <__aeabi_dmul>
 8005ebe:	e0a7      	b.n	8006010 <__ieee754_log+0x2a8>
 8005ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ec4:	f7fa f9ae 	bl	8000224 <__adddf3>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4650      	mov	r0, sl
 8005ece:	4659      	mov	r1, fp
 8005ed0:	f7fa fc88 	bl	80007e4 <__aeabi_ddiv>
 8005ed4:	ec41 0b18 	vmov	d8, r0, r1
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7fa faef 	bl	80004bc <__aeabi_i2d>
 8005ede:	ec53 2b18 	vmov	r2, r3, d8
 8005ee2:	ec41 0b19 	vmov	d9, r0, r1
 8005ee6:	ec51 0b18 	vmov	r0, r1, d8
 8005eea:	f7fa fb51 	bl	8000590 <__aeabi_dmul>
 8005eee:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8005ef2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4680      	mov	r8, r0
 8005efe:	4689      	mov	r9, r1
 8005f00:	f7fa fb46 	bl	8000590 <__aeabi_dmul>
 8005f04:	a360      	add	r3, pc, #384	; (adr r3, 8006088 <__ieee754_log+0x320>)
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	460f      	mov	r7, r1
 8005f0e:	f7fa fb3f 	bl	8000590 <__aeabi_dmul>
 8005f12:	a35f      	add	r3, pc, #380	; (adr r3, 8006090 <__ieee754_log+0x328>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f7fa f984 	bl	8000224 <__adddf3>
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	463b      	mov	r3, r7
 8005f20:	f7fa fb36 	bl	8000590 <__aeabi_dmul>
 8005f24:	a35c      	add	r3, pc, #368	; (adr r3, 8006098 <__ieee754_log+0x330>)
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	f7fa f97b 	bl	8000224 <__adddf3>
 8005f2e:	4632      	mov	r2, r6
 8005f30:	463b      	mov	r3, r7
 8005f32:	f7fa fb2d 	bl	8000590 <__aeabi_dmul>
 8005f36:	a35a      	add	r3, pc, #360	; (adr r3, 80060a0 <__ieee754_log+0x338>)
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f7fa f972 	bl	8000224 <__adddf3>
 8005f40:	4642      	mov	r2, r8
 8005f42:	464b      	mov	r3, r9
 8005f44:	f7fa fb24 	bl	8000590 <__aeabi_dmul>
 8005f48:	a357      	add	r3, pc, #348	; (adr r3, 80060a8 <__ieee754_log+0x340>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	4680      	mov	r8, r0
 8005f50:	4689      	mov	r9, r1
 8005f52:	4630      	mov	r0, r6
 8005f54:	4639      	mov	r1, r7
 8005f56:	f7fa fb1b 	bl	8000590 <__aeabi_dmul>
 8005f5a:	a355      	add	r3, pc, #340	; (adr r3, 80060b0 <__ieee754_log+0x348>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa f960 	bl	8000224 <__adddf3>
 8005f64:	4632      	mov	r2, r6
 8005f66:	463b      	mov	r3, r7
 8005f68:	f7fa fb12 	bl	8000590 <__aeabi_dmul>
 8005f6c:	a352      	add	r3, pc, #328	; (adr r3, 80060b8 <__ieee754_log+0x350>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa f957 	bl	8000224 <__adddf3>
 8005f76:	4632      	mov	r2, r6
 8005f78:	463b      	mov	r3, r7
 8005f7a:	f7fa fb09 	bl	8000590 <__aeabi_dmul>
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4602      	mov	r2, r0
 8005f82:	4649      	mov	r1, r9
 8005f84:	4640      	mov	r0, r8
 8005f86:	f7fa f94d 	bl	8000224 <__adddf3>
 8005f8a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005f8e:	9b01      	ldr	r3, [sp, #4]
 8005f90:	3551      	adds	r5, #81	; 0x51
 8005f92:	431d      	orrs	r5, r3
 8005f94:	2d00      	cmp	r5, #0
 8005f96:	4680      	mov	r8, r0
 8005f98:	4689      	mov	r9, r1
 8005f9a:	dd48      	ble.n	800602e <__ieee754_log+0x2c6>
 8005f9c:	4b4e      	ldr	r3, [pc, #312]	; (80060d8 <__ieee754_log+0x370>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	4650      	mov	r0, sl
 8005fa2:	4659      	mov	r1, fp
 8005fa4:	f7fa faf4 	bl	8000590 <__aeabi_dmul>
 8005fa8:	4652      	mov	r2, sl
 8005faa:	465b      	mov	r3, fp
 8005fac:	f7fa faf0 	bl	8000590 <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	460f      	mov	r7, r1
 8005fb8:	4640      	mov	r0, r8
 8005fba:	4649      	mov	r1, r9
 8005fbc:	f7fa f932 	bl	8000224 <__adddf3>
 8005fc0:	ec53 2b18 	vmov	r2, r3, d8
 8005fc4:	f7fa fae4 	bl	8000590 <__aeabi_dmul>
 8005fc8:	4680      	mov	r8, r0
 8005fca:	4689      	mov	r9, r1
 8005fcc:	b964      	cbnz	r4, 8005fe8 <__ieee754_log+0x280>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	4639      	mov	r1, r7
 8005fd6:	f7fa f923 	bl	8000220 <__aeabi_dsub>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4650      	mov	r0, sl
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	f7fa f91d 	bl	8000220 <__aeabi_dsub>
 8005fe6:	e6d6      	b.n	8005d96 <__ieee754_log+0x2e>
 8005fe8:	a321      	add	r3, pc, #132	; (adr r3, 8006070 <__ieee754_log+0x308>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	ec51 0b19 	vmov	r0, r1, d9
 8005ff2:	f7fa facd 	bl	8000590 <__aeabi_dmul>
 8005ff6:	a320      	add	r3, pc, #128	; (adr r3, 8006078 <__ieee754_log+0x310>)
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	460d      	mov	r5, r1
 8006000:	ec51 0b19 	vmov	r0, r1, d9
 8006004:	f7fa fac4 	bl	8000590 <__aeabi_dmul>
 8006008:	4642      	mov	r2, r8
 800600a:	464b      	mov	r3, r9
 800600c:	f7fa f90a 	bl	8000224 <__adddf3>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4630      	mov	r0, r6
 8006016:	4639      	mov	r1, r7
 8006018:	f7fa f902 	bl	8000220 <__aeabi_dsub>
 800601c:	4652      	mov	r2, sl
 800601e:	465b      	mov	r3, fp
 8006020:	f7fa f8fe 	bl	8000220 <__aeabi_dsub>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4620      	mov	r0, r4
 800602a:	4629      	mov	r1, r5
 800602c:	e7d9      	b.n	8005fe2 <__ieee754_log+0x27a>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4650      	mov	r0, sl
 8006034:	4659      	mov	r1, fp
 8006036:	f7fa f8f3 	bl	8000220 <__aeabi_dsub>
 800603a:	ec53 2b18 	vmov	r2, r3, d8
 800603e:	f7fa faa7 	bl	8000590 <__aeabi_dmul>
 8006042:	4606      	mov	r6, r0
 8006044:	460f      	mov	r7, r1
 8006046:	2c00      	cmp	r4, #0
 8006048:	f43f af23 	beq.w	8005e92 <__ieee754_log+0x12a>
 800604c:	a308      	add	r3, pc, #32	; (adr r3, 8006070 <__ieee754_log+0x308>)
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	ec51 0b19 	vmov	r0, r1, d9
 8006056:	f7fa fa9b 	bl	8000590 <__aeabi_dmul>
 800605a:	a307      	add	r3, pc, #28	; (adr r3, 8006078 <__ieee754_log+0x310>)
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	4604      	mov	r4, r0
 8006062:	460d      	mov	r5, r1
 8006064:	ec51 0b19 	vmov	r0, r1, d9
 8006068:	e727      	b.n	8005eba <__ieee754_log+0x152>
 800606a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80060c0 <__ieee754_log+0x358>
 800606e:	e694      	b.n	8005d9a <__ieee754_log+0x32>
 8006070:	fee00000 	.word	0xfee00000
 8006074:	3fe62e42 	.word	0x3fe62e42
 8006078:	35793c76 	.word	0x35793c76
 800607c:	3dea39ef 	.word	0x3dea39ef
 8006080:	55555555 	.word	0x55555555
 8006084:	3fd55555 	.word	0x3fd55555
 8006088:	df3e5244 	.word	0xdf3e5244
 800608c:	3fc2f112 	.word	0x3fc2f112
 8006090:	96cb03de 	.word	0x96cb03de
 8006094:	3fc74664 	.word	0x3fc74664
 8006098:	94229359 	.word	0x94229359
 800609c:	3fd24924 	.word	0x3fd24924
 80060a0:	55555593 	.word	0x55555593
 80060a4:	3fe55555 	.word	0x3fe55555
 80060a8:	d078c69f 	.word	0xd078c69f
 80060ac:	3fc39a09 	.word	0x3fc39a09
 80060b0:	1d8e78af 	.word	0x1d8e78af
 80060b4:	3fcc71c5 	.word	0x3fcc71c5
 80060b8:	9997fa04 	.word	0x9997fa04
 80060bc:	3fd99999 	.word	0x3fd99999
	...
 80060c8:	c3500000 	.word	0xc3500000
 80060cc:	43500000 	.word	0x43500000
 80060d0:	7fefffff 	.word	0x7fefffff
 80060d4:	3ff00000 	.word	0x3ff00000
 80060d8:	3fe00000 	.word	0x3fe00000
 80060dc:	00000000 	.word	0x00000000

080060e0 <nan>:
 80060e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80060e8 <nan+0x8>
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	00000000 	.word	0x00000000
 80060ec:	7ff80000 	.word	0x7ff80000

080060f0 <_init>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr

080060fc <_fini>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr
