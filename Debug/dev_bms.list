
dev_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004354  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800452c  0800452c  0001452c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800476c  0800476c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004774  08004774  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800477c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  080047ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080047ec  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001004c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223c  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00032328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  00032f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dbd5  00000000  00000000  00033a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f183  00000000  00000000  00051625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b96a6  00000000  00000000  000607a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119e4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000329c  00000000  00000000  00119ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004514 	.word	0x08004514

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08004514 	.word	0x08004514

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	6039      	str	r1, [r7, #0]
 8000526:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 8000528:	2310      	movs	r3, #16
 800052a:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 800052c:	2300      	movs	r3, #0
 800052e:	737b      	strb	r3, [r7, #13]
 8000530:	e019      	b.n	8000566 <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8000532:	89fb      	ldrh	r3, [r7, #14]
 8000534:	09db      	lsrs	r3, r3, #7
 8000536:	b29a      	uxth	r2, r3
 8000538:	7b7b      	ldrb	r3, [r7, #13]
 800053a:	6839      	ldr	r1, [r7, #0]
 800053c:	440b      	add	r3, r1
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b29b      	uxth	r3, r3
 8000542:	4053      	eors	r3, r2
 8000544:	b29b      	uxth	r3, r3
 8000546:	b2db      	uxtb	r3, r3
 8000548:	817b      	strh	r3, [r7, #10]

		remainder = (remainder<<8)^crc15Table[addr];
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	b21a      	sxth	r2, r3
 8000550:	897b      	ldrh	r3, [r7, #10]
 8000552:	490b      	ldr	r1, [pc, #44]	; (8000580 <pec15_calc+0x64>)
 8000554:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000558:	b21b      	sxth	r3, r3
 800055a:	4053      	eors	r3, r2
 800055c:	b21b      	sxth	r3, r3
 800055e:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000560:	7b7b      	ldrb	r3, [r7, #13]
 8000562:	3301      	adds	r3, #1
 8000564:	737b      	strb	r3, [r7, #13]
 8000566:	7b7a      	ldrb	r2, [r7, #13]
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	429a      	cmp	r2, r3
 800056c:	d3e1      	bcc.n	8000532 <pec15_calc+0x16>

	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 800056e:	89fb      	ldrh	r3, [r7, #14]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	b29b      	uxth	r3, r3
}
 8000574:	4618      	mov	r0, r3
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	0800452c 	.word	0x0800452c

08000584 <LTC681x_check_pec>:

/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 8000584:	b480      	push	{r7}
 8000586:	b08b      	sub	sp, #44	; 0x2c
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
	switch (reg)
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2b04      	cmp	r3, #4
 8000594:	f200 81b0 	bhi.w	80008f8 <LTC681x_check_pec+0x374>
 8000598:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <LTC681x_check_pec+0x1c>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	080005b5 	.word	0x080005b5
 80005a4:	080006c5 	.word	0x080006c5
 80005a8:	08000781 	.word	0x08000781
 80005ac:	0800083d 	.word	0x0800083d
 80005b0:	0800063d 	.word	0x0800063d
	{
		case CFGR:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
 80005b8:	e03c      	b.n	8000634 <LTC681x_check_pec+0xb0>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005bc:	f44f 729c 	mov.w	r2, #312	; 0x138
 80005c0:	fb02 f303 	mul.w	r3, r2, r3
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 80005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ce:	f44f 729c 	mov.w	r2, #312	; 0x138
 80005d2:	fb02 f303 	mul.w	r3, r2, r3
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	4413      	add	r3, r2
 80005da:	7b9b      	ldrb	r3, [r3, #14]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	f44f 709c 	mov.w	r0, #312	; 0x138
 80005e4:	fb00 f303 	mul.w	r3, r0, r3
 80005e8:	6838      	ldr	r0, [r7, #0]
 80005ea:	4403      	add	r3, r0
 80005ec:	440a      	add	r2, r1
 80005ee:	b292      	uxth	r2, r2
 80005f0:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 80005f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80005fa:	fb02 f303 	mul.w	r3, r2, r3
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	4413      	add	r3, r2
 8000602:	f8b3 1114 	ldrh.w	r1, [r3, #276]	; 0x114
 8000606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000608:	f44f 729c 	mov.w	r2, #312	; 0x138
 800060c:	fb02 f303 	mul.w	r3, r2, r3
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	4413      	add	r3, r2
 8000614:	7b9b      	ldrb	r3, [r3, #14]
 8000616:	b29a      	uxth	r2, r3
 8000618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061a:	f44f 709c 	mov.w	r0, #312	; 0x138
 800061e:	fb00 f303 	mul.w	r3, r0, r3
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	4403      	add	r3, r0
 8000626:	440a      	add	r2, r1
 8000628:	b292      	uxth	r2, r2
 800062a:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 800062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000630:	3301      	adds	r3, #1
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	2b01      	cmp	r3, #1
 8000638:	ddbf      	ble.n	80005ba <LTC681x_check_pec+0x36>
		  }
		break;
 800063a:	e15e      	b.n	80008fa <LTC681x_check_pec+0x376>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
 8000640:	e03c      	b.n	80006bc <LTC681x_check_pec+0x138>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000648:	fb02 f303 	mul.w	r3, r2, r3
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	4413      	add	r3, r2
 8000650:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	f44f 729c 	mov.w	r2, #312	; 0x138
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	4413      	add	r3, r2
 8000662:	7f5b      	ldrb	r3, [r3, #29]
 8000664:	b29a      	uxth	r2, r3
 8000666:	6a3b      	ldr	r3, [r7, #32]
 8000668:	f44f 709c 	mov.w	r0, #312	; 0x138
 800066c:	fb00 f303 	mul.w	r3, r0, r3
 8000670:	6838      	ldr	r0, [r7, #0]
 8000672:	4403      	add	r3, r0
 8000674:	440a      	add	r2, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 800067c:	6a3b      	ldr	r3, [r7, #32]
 800067e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000682:	fb02 f303 	mul.w	r3, r2, r3
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	4413      	add	r3, r2
 800068a:	f8b3 1114 	ldrh.w	r1, [r3, #276]	; 0x114
 800068e:	6a3b      	ldr	r3, [r7, #32]
 8000690:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000694:	fb02 f303 	mul.w	r3, r2, r3
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	4413      	add	r3, r2
 800069c:	7f5b      	ldrb	r3, [r3, #29]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	6a3b      	ldr	r3, [r7, #32]
 80006a2:	f44f 709c 	mov.w	r0, #312	; 0x138
 80006a6:	fb00 f303 	mul.w	r3, r0, r3
 80006aa:	6838      	ldr	r0, [r7, #0]
 80006ac:	4403      	add	r3, r0
 80006ae:	440a      	add	r2, r1
 80006b0:	b292      	uxth	r2, r2
 80006b2:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 80006b6:	6a3b      	ldr	r3, [r7, #32]
 80006b8:	3301      	adds	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	ddbf      	ble.n	8000642 <LTC681x_check_pec+0xbe>
		  }
		break;
 80006c2:	e11a      	b.n	80008fa <LTC681x_check_pec+0x376>
		case CELL:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
 80006c8:	e056      	b.n	8000778 <LTC681x_check_pec+0x1f4>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	e049      	b.n	8000764 <LTC681x_check_pec+0x1e0>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80006d6:	fb02 f303 	mul.w	r3, r2, r3
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	4413      	add	r3, r2
 80006de:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80006e8:	fb02 f303 	mul.w	r3, r2, r3
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	441a      	add	r2, r3
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	4413      	add	r3, r2
 80006f4:	3342      	adds	r3, #66	; 0x42
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	f44f 709c 	mov.w	r0, #312	; 0x138
 8000700:	fb00 f303 	mul.w	r3, r0, r3
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	4403      	add	r3, r0
 8000708:	440a      	add	r2, r1
 800070a:	b292      	uxth	r2, r2
 800070c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000716:	fb02 f303 	mul.w	r3, r2, r3
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	441a      	add	r2, r3
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	3388      	adds	r3, #136	; 0x88
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	4413      	add	r3, r2
 8000726:	88d9      	ldrh	r1, [r3, #6]
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800072e:	fb02 f303 	mul.w	r3, r2, r3
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	441a      	add	r2, r3
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	4413      	add	r3, r2
 800073a:	3342      	adds	r3, #66	; 0x42
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	69fa      	ldr	r2, [r7, #28]
 8000742:	f44f 709c 	mov.w	r0, #312	; 0x138
 8000746:	fb00 f202 	mul.w	r2, r0, r2
 800074a:	6838      	ldr	r0, [r7, #0]
 800074c:	4402      	add	r2, r0
 800074e:	440b      	add	r3, r1
 8000750:	b299      	uxth	r1, r3
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	3388      	adds	r3, #136	; 0x88
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	460a      	mov	r2, r1
 800075c:	80da      	strh	r2, [r3, #6]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	3301      	adds	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800076a:	461a      	mov	r2, r3
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	4293      	cmp	r3, r2
 8000770:	dbae      	blt.n	80006d0 <LTC681x_check_pec+0x14c>
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3301      	adds	r3, #1
 8000776:	61fb      	str	r3, [r7, #28]
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	2b01      	cmp	r3, #1
 800077c:	dda5      	ble.n	80006ca <LTC681x_check_pec+0x146>
			}
		  }
		break;
 800077e:	e0bc      	b.n	80008fa <LTC681x_check_pec+0x376>
		case AUX:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e056      	b.n	8000834 <LTC681x_check_pec+0x2b0>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	e049      	b.n	8000820 <LTC681x_check_pec+0x29c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000792:	fb02 f303 	mul.w	r3, r2, r3
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	4413      	add	r3, r2
 800079a:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80007a4:	fb02 f303 	mul.w	r3, r2, r3
 80007a8:	683a      	ldr	r2, [r7, #0]
 80007aa:	441a      	add	r2, r3
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	4413      	add	r3, r2
 80007b0:	335c      	adds	r3, #92	; 0x5c
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	f44f 709c 	mov.w	r0, #312	; 0x138
 80007bc:	fb00 f303 	mul.w	r3, r0, r3
 80007c0:	6838      	ldr	r0, [r7, #0]
 80007c2:	4403      	add	r3, r0
 80007c4:	440a      	add	r2, r1
 80007c6:	b292      	uxth	r2, r2
 80007c8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	f44f 729c 	mov.w	r2, #312	; 0x138
 80007d2:	fb02 f303 	mul.w	r3, r2, r3
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	441a      	add	r2, r3
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	3390      	adds	r3, #144	; 0x90
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	8859      	ldrh	r1, [r3, #2]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80007ea:	fb02 f303 	mul.w	r3, r2, r3
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	441a      	add	r2, r3
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	4413      	add	r3, r2
 80007f6:	335c      	adds	r3, #92	; 0x5c
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	f44f 709c 	mov.w	r0, #312	; 0x138
 8000802:	fb00 f202 	mul.w	r2, r0, r2
 8000806:	6838      	ldr	r0, [r7, #0]
 8000808:	4402      	add	r2, r0
 800080a:	440b      	add	r3, r1
 800080c:	b299      	uxth	r1, r3
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	3390      	adds	r3, #144	; 0x90
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	4413      	add	r3, r2
 8000816:	460a      	mov	r2, r1
 8000818:	805a      	strh	r2, [r3, #2]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	3301      	adds	r3, #1
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8000826:	461a      	mov	r2, r3
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	4293      	cmp	r3, r2
 800082c:	dbae      	blt.n	800078c <LTC681x_check_pec+0x208>
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	2b01      	cmp	r3, #1
 8000838:	dda5      	ble.n	8000786 <LTC681x_check_pec+0x202>
			}
		  }

		break;
 800083a:	e05e      	b.n	80008fa <LTC681x_check_pec+0x376>
		case STAT:
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	e056      	b.n	80008f0 <LTC681x_check_pec+0x36c>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	e049      	b.n	80008dc <LTC681x_check_pec+0x358>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800084e:	fb02 f303 	mul.w	r3, r2, r3
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000860:	fb02 f303 	mul.w	r3, r2, r3
 8000864:	683a      	ldr	r2, [r7, #0]
 8000866:	441a      	add	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4413      	add	r3, r2
 800086c:	33bd      	adds	r3, #189	; 0xbd
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b29a      	uxth	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f44f 709c 	mov.w	r0, #312	; 0x138
 8000878:	fb00 f303 	mul.w	r3, r0, r3
 800087c:	6838      	ldr	r0, [r7, #0]
 800087e:	4403      	add	r3, r0
 8000880:	440a      	add	r2, r1
 8000882:	b292      	uxth	r2, r2
 8000884:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800088e:	fb02 f303 	mul.w	r3, r2, r3
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	441a      	add	r2, r3
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	3394      	adds	r3, #148	; 0x94
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	8859      	ldrh	r1, [r3, #2]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80008a6:	fb02 f303 	mul.w	r3, r2, r3
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	441a      	add	r2, r3
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	4413      	add	r3, r2
 80008b2:	33bd      	adds	r3, #189	; 0xbd
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	f44f 709c 	mov.w	r0, #312	; 0x138
 80008be:	fb00 f202 	mul.w	r2, r0, r2
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	4402      	add	r2, r0
 80008c6:	440b      	add	r3, r1
 80008c8:	b299      	uxth	r1, r3
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	3394      	adds	r3, #148	; 0x94
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4413      	add	r3, r2
 80008d2:	460a      	mov	r2, r1
 80008d4:	805a      	strh	r2, [r3, #2]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	3301      	adds	r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 80008e2:	3b01      	subs	r3, #1
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	dbae      	blt.n	8000848 <LTC681x_check_pec+0x2c4>
		  for (int current_ic = 0 ; current_ic < ic_number; current_ic++)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3301      	adds	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	dda5      	ble.n	8000842 <LTC681x_check_pec+0x2be>
			}
		  }
		break;
 80008f6:	e000      	b.n	80008fa <LTC681x_check_pec+0x376>
		default:
		break;
 80008f8:	bf00      	nop
	}
}
 80008fa:	bf00      	nop
 80008fc:	372c      	adds	r7, #44	; 0x2c
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <cmd_68>:


/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2], SPI_HandleTypeDef *hspi) //The command to be transmitted
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	//uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	785b      	ldrb	r3, [r3, #1]
 800091c:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4619      	mov	r1, r3
 8000924:	2002      	movs	r0, #2
 8000926:	f7ff fdf9 	bl	800051c <pec15_calc>
 800092a:	4603      	mov	r3, r0
 800092c:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800092e:	89fb      	ldrh	r3, [r7, #14]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8000938:	89fb      	ldrh	r3, [r7, #14]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	72fb      	strb	r3, [r7, #11]


	wakeup_idle(hspi);
 800093e:	6838      	ldr	r0, [r7, #0]
 8000940:	f000 f80b 	bl	800095a <wakeup_idle>
	spi_write_array(4,cmd,hspi);
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	2004      	movs	r0, #4
 800094e:	f000 fa1c 	bl	8000d8a <spi_write_array>

}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <wakeup_idle>:


/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(SPI_HandleTypeDef *hspi) //Number of ICs in the system
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b084      	sub	sp, #16
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
	for (int i =0; i<ic_number; i++)
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e00d      	b.n	8000984 <wakeup_idle+0x2a>
		{
		   cs_low();
 8000968:	f000 f9b9 	bl	8000cde <cs_low>
		   delay_u(300); // Guarantees the LTC681x will be in standby ///if it doesnt work use delay_u(300)
 800096c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000970:	f000 f9ca 	bl	8000d08 <delay_u>
		   cs_high();
 8000974:	f000 f9bd 	bl	8000cf2 <cs_high>
		   delay_u(10); ///if it doesnt work use delay_u(10)
 8000978:	200a      	movs	r0, #10
 800097a:	f000 f9c5 	bl	8000d08 <delay_u>
	for (int i =0; i<ic_number; i++)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	3301      	adds	r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b01      	cmp	r3, #1
 8000988:	ddee      	ble.n	8000968 <wakeup_idle+0xe>
		}
}
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <wakeup_sleep>:

/*!
 Wake the LTC681x from the sleep state
 @return void
 */
void wakeup_sleep(){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
	for (int i =0; i<ic_number; i++)
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	e00f      	b.n	80009c0 <wakeup_sleep+0x2c>
			{
			   cs_low(CS_PIN);
 80009a0:	200a      	movs	r0, #10
 80009a2:	f000 f99c 	bl	8000cde <cs_low>
			   delay_u(300); // Guarantees the LTC681x will be in standby ///if it doesnt work use delay_u(300)
 80009a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009aa:	f000 f9ad 	bl	8000d08 <delay_u>
			   cs_high(CS_PIN);
 80009ae:	200a      	movs	r0, #10
 80009b0:	f000 f99f 	bl	8000cf2 <cs_high>
			   delay_u(10); ///if it doesnt work use delay_u(10)
 80009b4:	200a      	movs	r0, #10
 80009b6:	f000 f9a7 	bl	8000d08 <delay_u>
	for (int i =0; i<ic_number; i++)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3301      	adds	r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	ddec      	ble.n	80009a0 <wakeup_sleep+0xc>
			}
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <parse_cells>:
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					//SPI_HandleTypeDef *hspi
					)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60ba      	str	r2, [r7, #8]
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4603      	mov	r3, r0
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	460b      	mov	r3, r1
 80009e0:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 80009e2:	2306      	movs	r3, #6
 80009e4:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 80009e6:	2303      	movs	r3, #3
 80009e8:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80009f4:	2300      	movs	r3, #0
 80009f6:	777b      	strb	r3, [r7, #29]
 80009f8:	e020      	b.n	8000a3c <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 80009fa:	7fbb      	ldrb	r3, [r7, #30]
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	7fbb      	ldrb	r3, [r7, #30]
 8000a06:	3301      	adds	r3, #1
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	440b      	add	r3, r1
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4413      	add	r3, r2
 8000a16:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8000a18:	7f7a      	ldrb	r2, [r7, #29]
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	7ef9      	ldrb	r1, [r7, #27]
 8000a20:	fb01 f303 	mul.w	r3, r1, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	8aba      	ldrh	r2, [r7, #20]
 8000a2e:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 8000a30:	7fbb      	ldrb	r3, [r7, #30]
 8000a32:	3302      	adds	r3, #2
 8000a34:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8000a36:	7f7b      	ldrb	r3, [r7, #29]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	777b      	strb	r3, [r7, #29]
 8000a3c:	7f7a      	ldrb	r2, [r7, #29]
 8000a3e:	7efb      	ldrb	r3, [r7, #27]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d3da      	bcc.n	80009fa <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8000a44:	7fbb      	ldrb	r3, [r7, #30]
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	7fbb      	ldrb	r3, [r7, #30]
 8000a52:	3301      	adds	r3, #1
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	440b      	add	r3, r1
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	461a      	mov	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	441a      	add	r2, r3
 8000a6c:	7f3b      	ldrb	r3, [r7, #28]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fd53 	bl	800051c <pec15_calc>
 8000a76:	4603      	mov	r3, r0
 8000a78:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 8000a7a:	8b3a      	ldrh	r2, [r7, #24]
 8000a7c:	8afb      	ldrh	r3, [r7, #22]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d008      	beq.n	8000a94 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8000a82:	2301      	movs	r3, #1
 8000a84:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a8c:	4413      	add	r3, r2
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e005      	b.n	8000aa0 <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a9a:	4413      	add	r3, r2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8000aa0:	7fbb      	ldrb	r3, [r7, #30]
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 8000aa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t *data, //An array of the unparsed cell codes
					  SPI_HandleTypeDef *hspi
                     )
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b088      	sub	sp, #32
 8000ab6:	af02      	add	r7, sp, #8
 8000ab8:	4603      	mov	r3, r0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	73fb      	strb	r3, [r7, #15]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d104      	bne.n	8000ad4 <LTC681x_rdcv_reg+0x22>
	{
		cmd[1] = 0x04;
 8000aca:	2304      	movs	r3, #4
 8000acc:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	743b      	strb	r3, [r7, #16]
 8000ad2:	e026      	b.n	8000b22 <LTC681x_rdcv_reg+0x70>
	}
	else if (reg == 2) //2: RDCVB
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d104      	bne.n	8000ae4 <LTC681x_rdcv_reg+0x32>
	{
		cmd[1] = 0x06;
 8000ada:	2306      	movs	r3, #6
 8000adc:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	743b      	strb	r3, [r7, #16]
 8000ae2:	e01e      	b.n	8000b22 <LTC681x_rdcv_reg+0x70>
	}
	else if (reg == 3) //3: RDCVC
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d104      	bne.n	8000af4 <LTC681x_rdcv_reg+0x42>
	{
		cmd[1] = 0x08;
 8000aea:	2308      	movs	r3, #8
 8000aec:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000aee:	2300      	movs	r3, #0
 8000af0:	743b      	strb	r3, [r7, #16]
 8000af2:	e016      	b.n	8000b22 <LTC681x_rdcv_reg+0x70>
	}
	else if (reg == 4) //4: RDCVD
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	d104      	bne.n	8000b04 <LTC681x_rdcv_reg+0x52>
	{
		cmd[1] = 0x0A;
 8000afa:	230a      	movs	r3, #10
 8000afc:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000afe:	2300      	movs	r3, #0
 8000b00:	743b      	strb	r3, [r7, #16]
 8000b02:	e00e      	b.n	8000b22 <LTC681x_rdcv_reg+0x70>
	}
	else if (reg == 5) //4: RDCVE
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	2b05      	cmp	r3, #5
 8000b08:	d104      	bne.n	8000b14 <LTC681x_rdcv_reg+0x62>
	{
		cmd[1] = 0x09;
 8000b0a:	2309      	movs	r3, #9
 8000b0c:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	743b      	strb	r3, [r7, #16]
 8000b12:	e006      	b.n	8000b22 <LTC681x_rdcv_reg+0x70>
	}
	else if (reg == 6) //4: RDCVF
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d103      	bne.n	8000b22 <LTC681x_rdcv_reg+0x70>
	{
		cmd[1] = 0x0B;
 8000b1a:	230b      	movs	r3, #11
 8000b1c:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	743b      	strb	r3, [r7, #16]
	}

	cmd_pec = pec15_calc(2, cmd);
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	4619      	mov	r1, r3
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff fcf7 	bl	800051c <pec15_calc>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	82bb      	strh	r3, [r7, #20]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000b32:	8abb      	ldrh	r3, [r7, #20]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t)(cmd_pec);
 8000b3c:	8abb      	ldrh	r3, [r7, #20]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	74fb      	strb	r3, [r7, #19]

	wakeup_idle(hspi);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff09 	bl	800095a <wakeup_idle>
	spi_write_read(cmd,4,data,(REG_LEN*ic_number),hspi);
 8000b48:	7dfb      	ldrb	r3, [r7, #23]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	f107 0010 	add.w	r0, r7, #16
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	4613      	mov	r3, r2
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	f000 f928 	bl	8000db0 <spi_write_read>

}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <rdcv>:

uint8_t rdcv(        cell_asic *ic, //!< Array of the parsed cell codes
					 SPI_HandleTypeDef *hspi
                    ){
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b08b      	sub	sp, #44	; 0x2c
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]


		int8_t pec_error = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	77fb      	strb	r3, [r7, #31]
	    uint8_t cell_data[NUM_RX_BYT * ic_number];
	    uint8_t c_ic = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	77bb      	strb	r3, [r7, #30]

	    // Executes once for each of the LTC6811 cell voltage registers
	    for (uint8_t cell_reg = 1; cell_reg < 7; cell_reg++) {
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	777b      	strb	r3, [r7, #29]
 8000b7e:	e042      	b.n	8000c06 <rdcv+0x9e>

	    	LTC681x_rdcv_reg(cell_reg,cell_data,hspi );
 8000b80:	f107 0108 	add.w	r1, r7, #8
 8000b84:	7f7b      	ldrb	r3, [r7, #29]
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff92 	bl	8000ab2 <LTC681x_rdcv_reg>
	    				for (int current_ic = 0; current_ic<ic_number; current_ic++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	e032      	b.n	8000bfa <rdcv+0x92>
	    				{
	    				if (ic->isospi_reverse == false)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8000b9a:	f083 0301 	eor.w	r3, r3, #1
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <rdcv+0x42>
	    				{
	    				  c_ic = current_ic;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	77bb      	strb	r3, [r7, #30]
 8000ba8:	e004      	b.n	8000bb4 <rdcv+0x4c>
	    				}
	    				else
	    				{
	    				  c_ic = ic_number - current_ic - 1;
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f1c3 0301 	rsb	r3, r3, #1
 8000bb2:	77bb      	strb	r3, [r7, #30]
	    				}
	    				pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	b2d8      	uxtb	r0, r3
	    													&ic[c_ic].cells.c_codes[0],
 8000bb8:	7fbb      	ldrb	r3, [r7, #30]
 8000bba:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000bbe:	fb02 f303 	mul.w	r3, r2, r3
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	4413      	add	r3, r2
	    				pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8000bc6:	f103 041e 	add.w	r4, r3, #30
	    													&ic[c_ic].cells.pec_match[0]);
 8000bca:	7fbb      	ldrb	r3, [r7, #30]
 8000bcc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000bd0:	fb02 f303 	mul.w	r3, r2, r3
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	4413      	add	r3, r2
	    				pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8000bd8:	3342      	adds	r3, #66	; 0x42
 8000bda:	f107 0208 	add.w	r2, r7, #8
 8000bde:	7f79      	ldrb	r1, [r7, #29]
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	4623      	mov	r3, r4
 8000be4:	f7ff fef4 	bl	80009d0 <parse_cells>
 8000be8:	4603      	mov	r3, r0
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
 8000bee:	4413      	add	r3, r2
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	77fb      	strb	r3, [r7, #31]
	    				for (int current_ic = 0; current_ic<ic_number; current_ic++)
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	ddc9      	ble.n	8000b94 <rdcv+0x2c>
	    for (uint8_t cell_reg = 1; cell_reg < 7; cell_reg++) {
 8000c00:	7f7b      	ldrb	r3, [r7, #29]
 8000c02:	3301      	adds	r3, #1
 8000c04:	777b      	strb	r3, [r7, #29]
 8000c06:	7f7b      	ldrb	r3, [r7, #29]
 8000c08:	2b06      	cmp	r3, #6
 8000c0a:	d9b9      	bls.n	8000b80 <rdcv+0x18>
	    				}

	    }
	    LTC681x_check_pec(CELL, ic);
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff fcb8 	bl	8000584 <LTC681x_check_pec>

	  return(pec_error);
 8000c14:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd90      	pop	{r4, r7, pc}

08000c1e <clrcell>:

void clrcell(SPI_HandleTypeDef *hspi){
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b084      	sub	sp, #16
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]

	uint8_t cmd[2]= {0x07 , 0x11};
 8000c26:	f241 1307 	movw	r3, #4359	; 0x1107
 8000c2a:	81bb      	strh	r3, [r7, #12]
		cmd_68(cmd,hspi);
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fe68 	bl	8000908 <cmd_68>
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <adcv>:
void adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH, //Cell Channels to be measured
				   SPI_HandleTypeDef *hspi
                 )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	4603      	mov	r3, r0
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	71bb      	strb	r3, [r7, #6]
 8000c50:	4613      	mov	r3, r2
 8000c52:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	105b      	asrs	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	3302      	adds	r3, #2
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	01db      	lsls	r3, r3, #7
 8000c6c:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	4413      	add	r3, r2
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	797b      	ldrb	r3, [r7, #5]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	3360      	adds	r3, #96	; 0x60
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd, hspi);
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	6839      	ldr	r1, [r7, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fe3b 	bl	8000908 <cmd_68>
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <cell_voltage>:

int cell_voltage(cell_asic *ic ,SPI_HandleTypeDef *hspi){
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b084      	sub	sp, #16
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
	uint8_t pec;
	wakeup_sleep();
 8000ca4:	f7ff fe76 	bl	8000994 <wakeup_sleep>
	delay_u(T_wake_max);
 8000ca8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000cac:	f000 f82c 	bl	8000d08 <delay_u>
	adcv(1, 0, 0, hspi);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff ffc2 	bl	8000c40 <adcv>
	//delay_u(T_refup_max+T_CYCLE_FAST_MAX); //waiting for conversion
	delay_m(10);
 8000cbc:	200a      	movs	r0, #10
 8000cbe:	f000 f857 	bl	8000d70 <delay_m>

	pec = rdcv(ic, hspi);
 8000cc2:	6839      	ldr	r1, [r7, #0]
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff4f 	bl	8000b68 <rdcv>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	73fb      	strb	r3, [r7, #15]
	clrcell(hspi);
 8000cce:	6838      	ldr	r0, [r7, #0]
 8000cd0:	f7ff ffa5 	bl	8000c1e <clrcell>
}
 8000cd4:	bf00      	nop
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <cs_low>:
#define gpio_pin GPIO_PIN_4
#define gpio_type GPIOA



void cs_low(){
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(gpio_type, gpio_pin, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f000 fe4d 	bl	8001988 <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <cs_high>:

void cs_high(){
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(gpio_type, gpio_pin, 1);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2110      	movs	r1, #16
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f000 fe43 	bl	8001988 <HAL_GPIO_WritePin>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <delay_u>:


///////////////////////////////////
// library https://github.com/keatis/dwt_delay/
void delay_u(uint32_t microseconds)// microseconds
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	 CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <delay_u+0x58>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <delay_u+0x58>)
 8000d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d1a:	60d3      	str	r3, [r2, #12]
	    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <delay_u+0x5c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <delay_u+0x5c>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6013      	str	r3, [r2, #0]
	    // Get the current number of clock cycles
	    uint32_t const startTicks = DWT->CYCCNT;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <delay_u+0x5c>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]
	    // Calculate the number of clock cycles for the desired delay
	    uint32_t const delayTicks = (SystemCoreClock / 1000000) * microseconds;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <delay_u+0x60>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <delay_u+0x64>)
 8000d34:	fba2 2303 	umull	r2, r3, r2, r3
 8000d38:	0c9a      	lsrs	r2, r3, #18
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	fb02 f303 	mul.w	r3, r2, r3
 8000d40:	60bb      	str	r3, [r7, #8]
	    // Wait until the number of clock cycles has elapsed
	    while (DWT->CYCCNT - startTicks < delayTicks);
 8000d42:	bf00      	nop
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <delay_u+0x5c>)
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	68ba      	ldr	r2, [r7, #8]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d8f8      	bhi.n	8000d44 <delay_u+0x3c>
}
 8000d52:	bf00      	nop
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000edf0 	.word	0xe000edf0
 8000d64:	e0001000 	.word	0xe0001000
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	431bde83 	.word	0x431bde83

08000d70 <delay_m>:
//////////////////////////////////

void delay_m(uint16_t milli)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(milli);
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fb7b 	bl	8001478 <HAL_Delay>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <spi_write_array>:
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[], //Array of bytes to be written on the SPI port
					SPI_HandleTypeDef *hspi
					)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, data,len,1000); // might be changed in future
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f001 fe7b 	bl	8002a9e <HAL_SPI_Transmit>

}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
        uint8_t tx_len, //length of the tx data arry
        uint8_t *rx_data,//Input: array that will store the data read by the SPI port
        uint8_t rx_len ,//Option: number of bytes to be read from the SPI port
		SPI_HandleTypeDef * hspi //spi reference
       ){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	72fb      	strb	r3, [r7, #11]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(gpio_type, gpio_pin, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f000 fddc 	bl	8001988 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(hspi, tx_Data, tx_len, 1000);
 8000dd0:	7afb      	ldrb	r3, [r7, #11]
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd8:	68f9      	ldr	r1, [r7, #12]
 8000dda:	69b8      	ldr	r0, [r7, #24]
 8000ddc:	f001 fe5f 	bl	8002a9e <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, rx_data, rx_len, 1000);
 8000de0:	7abb      	ldrb	r3, [r7, #10]
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	69b8      	ldr	r0, [r7, #24]
 8000dec:	f001 ffc5 	bl	8002d7a <HAL_SPI_Receive>

	HAL_GPIO_WritePin(gpio_type, gpio_pin, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df8:	f000 fdc6 	bl	8001988 <HAL_GPIO_WritePin>

}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0c:	f000 fac3 	bl	8001396 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 f836 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f000 f90a 	bl	800102c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e18:	f000 f8bc 	bl	8000f94 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000e1c:	f000 f87c 	bl	8000f18 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  cell_asic *c_a = (cell_asic *)malloc(ic_number);
 8000e20:	2002      	movs	r0, #2
 8000e22:	f003 faa7 	bl	8004374 <malloc>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pec = cell_voltage(c_a, &hspi1);
 8000e2c:	4913      	ldr	r1, [pc, #76]	; (8000e7c <main+0x78>)
 8000e2e:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8000e32:	f7ff ff32 	bl	8000c9a <cell_voltage>
 8000e36:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270

	  cell_asic c1 = c_a[0], c2 = c_a[1];
 8000e3a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8000e3e:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8000e42:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000e4e:	461a      	mov	r2, r3
 8000e50:	f003 fa98 	bl	8004384 <memcpy>
 8000e54:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8000e58:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8000e5c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8000e60:	4610      	mov	r0, r2
 8000e62:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000e66:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f003 fa8a 	bl	8004384 <memcpy>




	  HAL_Delay(500);
 8000e70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e74:	f000 fb00 	bl	8001478 <HAL_Delay>
  {
 8000e78:	e7d8      	b.n	8000e2c <main+0x28>
 8000e7a:	bf00      	nop
 8000e7c:	2000008c 	.word	0x2000008c

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b094      	sub	sp, #80	; 0x50
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	2238      	movs	r2, #56	; 0x38
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 fa86 	bl	80043a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 fd88 	bl	80019b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb2:	2340      	movs	r3, #64	; 0x40
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ec2:	2355      	movs	r3, #85	; 0x55
 8000ec4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fe12 	bl	8001b00 <HAL_RCC_OscConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ee2:	f000 f8f9 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eea:	2303      	movs	r3, #3
 8000eec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2104      	movs	r1, #4
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 f916 	bl	8002130 <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f0a:	f000 f8e5 	bl	80010d8 <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3750      	adds	r7, #80	; 0x50
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <MX_SPI1_Init+0x78>)
 8000f20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f4e:	2238      	movs	r2, #56	; 0x38
 8000f50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f66:	2207      	movs	r2, #7
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_SPI1_Init+0x74>)
 8000f78:	f001 fce6 	bl	8002948 <HAL_SPI_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f000 f8a9 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000008c 	.word	0x2000008c
 8000f90:	40013000 	.word	0x40013000

08000f94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <MX_USART2_UART_Init+0x94>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fdc:	4811      	ldr	r0, [pc, #68]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000fde:	f002 fbcb 	bl	8003778 <HAL_UART_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fe8:	f000 f876 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8000ff0:	f003 f8cc 	bl	800418c <HAL_UARTEx_SetTxFifoThreshold>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ffa:	f000 f86d 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8001002:	f003 f901 	bl	8004208 <HAL_UARTEx_SetRxFifoThreshold>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800100c:	f000 f864 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_USART2_UART_Init+0x90>)
 8001012:	f003 f882 	bl	800411a <HAL_UARTEx_DisableFifoMode>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800101c:	f000 f85c 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200000f0 	.word	0x200000f0
 8001028:	40004400 	.word	0x40004400

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <MX_GPIO_Init+0xa4>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <MX_GPIO_Init+0xa4>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MX_GPIO_Init+0xa4>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_GPIO_Init+0xa4>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <MX_GPIO_Init+0xa4>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_GPIO_Init+0xa4>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2110      	movs	r1, #16
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f000 fc85 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MX_GPIO_Init+0xa8>)
 8001086:	f000 fc7f 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800108a:	2310      	movs	r3, #16
 800108c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f000 faee 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	4619      	mov	r1, r3
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_GPIO_Init+0xa8>)
 80010c2:	f000 fadf 	bl	8001684 <HAL_GPIO_Init>

}
 80010c6:	bf00      	nop
 80010c8:	3720      	adds	r7, #32
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000400 	.word	0x48000400

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_MspInit+0x44>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_MspInit+0x44>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6613      	str	r3, [r2, #96]	; 0x60
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_MspInit+0x44>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_MspInit+0x44>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_MspInit+0x44>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	6593      	str	r3, [r2, #88]	; 0x58
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_MspInit+0x44>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_SPI_MspInit+0x7c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d128      	bne.n	80011a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_SPI_MspInit+0x80>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001152:	4a16      	ldr	r2, [pc, #88]	; (80011ac <HAL_SPI_MspInit+0x80>)
 8001154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001158:	6613      	str	r3, [r2, #96]	; 0x60
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_SPI_MspInit+0x80>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_SPI_MspInit+0x80>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a10      	ldr	r2, [pc, #64]	; (80011ac <HAL_SPI_MspInit+0x80>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_SPI_MspInit+0x80>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800117e:	23e0      	movs	r3, #224	; 0xe0
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800118e:	2305      	movs	r3, #5
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119c:	f000 fa72 	bl	8001684 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40013000 	.word	0x40013000
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b09a      	sub	sp, #104	; 0x68
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2244      	movs	r2, #68	; 0x44
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 f8e5 	bl	80043a0 <memset>
  if(huart->Instance==USART2)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <HAL_UART_MspInit+0xa8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d136      	bne.n	800124e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 f9bb 	bl	8002568 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011f8:	f7ff ff6e 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_UART_MspInit+0xac>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	4a16      	ldr	r2, [pc, #88]	; (800125c <HAL_UART_MspInit+0xac>)
 8001202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001206:	6593      	str	r3, [r2, #88]	; 0x58
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_UART_MspInit+0xac>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_UART_MspInit+0xac>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_UART_MspInit+0xac>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_UART_MspInit+0xac>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800122c:	230c      	movs	r3, #12
 800122e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800123c:	2307      	movs	r3, #7
 800123e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f000 fa1b 	bl	8001684 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3768      	adds	r7, #104	; 0x68
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40004400 	.word	0x40004400
 800125c:	40021000 	.word	0x40021000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ac:	f000 f8c6 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <_sbrk+0x5c>)
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <_sbrk+0x60>)
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <_sbrk+0x64>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <_sbrk+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d207      	bcs.n	80012f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e4:	f003 f81c 	bl	8004320 <__errno>
 80012e8:	4603      	mov	r3, r0
 80012ea:	220c      	movs	r2, #12
 80012ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e009      	b.n	8001308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <_sbrk+0x64>)
 8001304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20008000 	.word	0x20008000
 8001314:	00000400 	.word	0x00000400
 8001318:	20000180 	.word	0x20000180
 800131c:	20000198 	.word	0x20000198

08001320 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001346:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <LoopForever+0x6>)
  ldr r1, =_edata
 800134a:	490e      	ldr	r1, [pc, #56]	; (8001384 <LoopForever+0xa>)
  ldr r2, =_sidata
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <LoopForever+0xe>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001360:	4c0b      	ldr	r4, [pc, #44]	; (8001390 <LoopForever+0x16>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800136e:	f7ff ffd7 	bl	8001320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001372:	f002 ffdb 	bl	800432c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001376:	f7ff fd45 	bl	8000e04 <main>

0800137a <LoopForever>:

LoopForever:
    b LoopForever
 800137a:	e7fe      	b.n	800137a <LoopForever>
  ldr   r0, =_estack
 800137c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001388:	0800477c 	.word	0x0800477c
  ldr r2, =_sbss
 800138c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001390:	20000198 	.word	0x20000198

08001394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_2_IRQHandler>

08001396 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f000 f93d 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 f80e 	bl	80013c8 <HAL_InitTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	e001      	b.n	80013bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b8:	f7ff fe94 	bl	80010e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013bc:	79fb      	ldrb	r3, [r7, #7]

}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <HAL_InitTick+0x68>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d022      	beq.n	8001422 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_InitTick+0x6c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <HAL_InitTick+0x68>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f93a 	bl	800166a <HAL_SYSTICK_Config>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10f      	bne.n	800141c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b0f      	cmp	r3, #15
 8001400:	d809      	bhi.n	8001416 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001402:	2200      	movs	r2, #0
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	f04f 30ff 	mov.w	r0, #4294967295
 800140a:	f000 f914 	bl	8001636 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_InitTick+0x70>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	e007      	b.n	8001426 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	73fb      	strb	r3, [r7, #15]
 800141a:	e004      	b.n	8001426 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e001      	b.n	8001426 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000008 	.word	0x20000008
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_IncTick+0x1c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_IncTick+0x20>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4413      	add	r3, r2
 800144a:	4a03      	ldr	r2, [pc, #12]	; (8001458 <HAL_IncTick+0x1c>)
 800144c:	6013      	str	r3, [r2, #0]
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	20000184 	.word	0x20000184
 800145c:	20000008 	.word	0x20000008

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000184 	.word	0x20000184

08001478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff ffee 	bl	8001460 <HAL_GetTick>
 8001484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001490:	d004      	beq.n	800149c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_Delay+0x40>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	4413      	add	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149c:	bf00      	nop
 800149e:	f7ff ffdf 	bl	8001460 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d8f7      	bhi.n	800149e <HAL_Delay+0x26>
  {
  }
}
 80014ae:	bf00      	nop
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000008 	.word	0x20000008

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff47 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff5e 	bl	8001504 <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff90 	bl	8001574 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5f 	bl	8001520 <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffb2 	bl	80015dc <SysTick_Config>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001692:	e15a      	b.n	800194a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	2101      	movs	r1, #1
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	4013      	ands	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 814c 	beq.w	8001944 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d005      	beq.n	80016c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d130      	bne.n	8001726 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016fa:	2201      	movs	r2, #1
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f003 0201 	and.w	r2, r3, #1
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b03      	cmp	r3, #3
 8001730:	d017      	beq.n	8001762 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d123      	bne.n	80017b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	08da      	lsrs	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3208      	adds	r2, #8
 8001776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	220f      	movs	r2, #15
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	08da      	lsrs	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3208      	adds	r2, #8
 80017b0:	6939      	ldr	r1, [r7, #16]
 80017b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0203 	and.w	r2, r3, #3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80a6 	beq.w	8001944 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f8:	4b5b      	ldr	r3, [pc, #364]	; (8001968 <HAL_GPIO_Init+0x2e4>)
 80017fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fc:	4a5a      	ldr	r2, [pc, #360]	; (8001968 <HAL_GPIO_Init+0x2e4>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6613      	str	r3, [r2, #96]	; 0x60
 8001804:	4b58      	ldr	r3, [pc, #352]	; (8001968 <HAL_GPIO_Init+0x2e4>)
 8001806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001810:	4a56      	ldr	r2, [pc, #344]	; (800196c <HAL_GPIO_Init+0x2e8>)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800183a:	d01f      	beq.n	800187c <HAL_GPIO_Init+0x1f8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a4c      	ldr	r2, [pc, #304]	; (8001970 <HAL_GPIO_Init+0x2ec>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d019      	beq.n	8001878 <HAL_GPIO_Init+0x1f4>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a4b      	ldr	r2, [pc, #300]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d013      	beq.n	8001874 <HAL_GPIO_Init+0x1f0>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a4a      	ldr	r2, [pc, #296]	; (8001978 <HAL_GPIO_Init+0x2f4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d00d      	beq.n	8001870 <HAL_GPIO_Init+0x1ec>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a49      	ldr	r2, [pc, #292]	; (800197c <HAL_GPIO_Init+0x2f8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d007      	beq.n	800186c <HAL_GPIO_Init+0x1e8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a48      	ldr	r2, [pc, #288]	; (8001980 <HAL_GPIO_Init+0x2fc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_GPIO_Init+0x1e4>
 8001864:	2305      	movs	r3, #5
 8001866:	e00a      	b.n	800187e <HAL_GPIO_Init+0x1fa>
 8001868:	2306      	movs	r3, #6
 800186a:	e008      	b.n	800187e <HAL_GPIO_Init+0x1fa>
 800186c:	2304      	movs	r3, #4
 800186e:	e006      	b.n	800187e <HAL_GPIO_Init+0x1fa>
 8001870:	2303      	movs	r3, #3
 8001872:	e004      	b.n	800187e <HAL_GPIO_Init+0x1fa>
 8001874:	2302      	movs	r3, #2
 8001876:	e002      	b.n	800187e <HAL_GPIO_Init+0x1fa>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_GPIO_Init+0x1fa>
 800187c:	2300      	movs	r3, #0
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	f002 0203 	and.w	r2, r2, #3
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	4093      	lsls	r3, r2
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800188e:	4937      	ldr	r1, [pc, #220]	; (800196c <HAL_GPIO_Init+0x2e8>)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800189c:	4b39      	ldr	r3, [pc, #228]	; (8001984 <HAL_GPIO_Init+0x300>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018c0:	4a30      	ldr	r2, [pc, #192]	; (8001984 <HAL_GPIO_Init+0x300>)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018c6:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <HAL_GPIO_Init+0x300>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018ea:	4a26      	ldr	r2, [pc, #152]	; (8001984 <HAL_GPIO_Init+0x300>)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_GPIO_Init+0x300>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001914:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <HAL_GPIO_Init+0x300>)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <HAL_GPIO_Init+0x300>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800193e:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_GPIO_Init+0x300>)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3301      	adds	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	f47f ae9d 	bne.w	8001694 <HAL_GPIO_Init+0x10>
  }
}
 800195a:	bf00      	nop
 800195c:	bf00      	nop
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40021000 	.word	0x40021000
 800196c:	40010000 	.word	0x40010000
 8001970:	48000400 	.word	0x48000400
 8001974:	48000800 	.word	0x48000800
 8001978:	48000c00 	.word	0x48000c00
 800197c:	48001000 	.word	0x48001000
 8001980:	48001400 	.word	0x48001400
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a4:	e002      	b.n	80019ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d141      	bne.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019c6:	4b4b      	ldr	r3, [pc, #300]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d2:	d131      	bne.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019d4:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019da:	4a46      	ldr	r2, [pc, #280]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e4:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ec:	4a41      	ldr	r2, [pc, #260]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019f4:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2232      	movs	r2, #50	; 0x32
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	4a3f      	ldr	r2, [pc, #252]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a00:	fba2 2303 	umull	r2, r3, r2, r3
 8001a04:	0c9b      	lsrs	r3, r3, #18
 8001a06:	3301      	adds	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0a:	e002      	b.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a12:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1e:	d102      	bne.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f2      	bne.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a26:	4b33      	ldr	r3, [pc, #204]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a32:	d158      	bne.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e057      	b.n	8001ae8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a38:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a3e:	4a2d      	ldr	r2, [pc, #180]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a48:	e04d      	b.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a50:	d141      	bne.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5e:	d131      	bne.n	8001ac4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a66:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a70:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a78:	4a1e      	ldr	r2, [pc, #120]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2232      	movs	r2, #50	; 0x32
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	0c9b      	lsrs	r3, r3, #18
 8001a92:	3301      	adds	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a96:	e002      	b.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aaa:	d102      	bne.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f2      	bne.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abe:	d112      	bne.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e011      	b.n	8001ae8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ad4:	e007      	b.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40007000 	.word	0x40007000
 8001af8:	20000000 	.word	0x20000000
 8001afc:	431bde83 	.word	0x431bde83

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e306      	b.n	8002120 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d075      	beq.n	8001c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1e:	4b97      	ldr	r3, [pc, #604]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b28:	4b94      	ldr	r3, [pc, #592]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2b0c      	cmp	r3, #12
 8001b36:	d102      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3e>
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d002      	beq.n	8001b44 <HAL_RCC_OscConfig+0x44>
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d10b      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	4b8d      	ldr	r3, [pc, #564]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d05b      	beq.n	8001c08 <HAL_RCC_OscConfig+0x108>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d157      	bne.n	8001c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e2e1      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d106      	bne.n	8001b74 <HAL_RCC_OscConfig+0x74>
 8001b66:	4b85      	ldr	r3, [pc, #532]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a84      	ldr	r2, [pc, #528]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e01d      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x98>
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a7e      	ldr	r2, [pc, #504]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b7c      	ldr	r3, [pc, #496]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a7b      	ldr	r2, [pc, #492]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b98:	4b78      	ldr	r3, [pc, #480]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a77      	ldr	r2, [pc, #476]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b75      	ldr	r3, [pc, #468]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a74      	ldr	r2, [pc, #464]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d013      	beq.n	8001be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fc52 	bl	8001460 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fc4e 	bl	8001460 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e2a6      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd2:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xc0>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff fc3e 	bl	8001460 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fc3a 	bl	8001460 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e292      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfa:	4b60      	ldr	r3, [pc, #384]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0xe8>
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d075      	beq.n	8001d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c16:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c20:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2b0c      	cmp	r3, #12
 8001c2e:	d102      	bne.n	8001c36 <HAL_RCC_OscConfig+0x136>
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_OscConfig+0x13c>
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d11f      	bne.n	8001c7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c3c:	4b4f      	ldr	r3, [pc, #316]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_OscConfig+0x154>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e265      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	4946      	ldr	r1, [pc, #280]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c68:	4b45      	ldr	r3, [pc, #276]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fbab 	bl	80013c8 <HAL_InitTick>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d043      	beq.n	8001d00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e251      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d023      	beq.n	8001ccc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c84:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a3c      	ldr	r2, [pc, #240]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff fbe6 	bl	8001460 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c98:	f7ff fbe2 	bl	8001460 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e23a      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001caa:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb6:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	061b      	lsls	r3, r3, #24
 8001cc4:	492d      	ldr	r1, [pc, #180]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
 8001cca:	e01a      	b.n	8001d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2a      	ldr	r2, [pc, #168]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fbc2 	bl	8001460 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fbbe 	bl	8001460 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e216      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x1e0>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d041      	beq.n	8001d92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d01c      	beq.n	8001d50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1c:	4a17      	ldr	r2, [pc, #92]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d26:	f7ff fb9b 	bl	8001460 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fb97 	bl	8001460 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e1ef      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0ef      	beq.n	8001d2e <HAL_RCC_OscConfig+0x22e>
 8001d4e:	e020      	b.n	8001d92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff fb7e 	bl	8001460 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d66:	e00d      	b.n	8001d84 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff fb7a 	bl	8001460 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d906      	bls.n	8001d84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e1d2      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d84:	4b8c      	ldr	r3, [pc, #560]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1ea      	bne.n	8001d68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 80a6 	beq.w	8001eec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001da4:	4b84      	ldr	r3, [pc, #528]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2b4>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x2b6>
 8001db4:	2300      	movs	r3, #0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00d      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	4a7e      	ldr	r2, [pc, #504]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc6:	4b7c      	ldr	r3, [pc, #496]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd6:	4b79      	ldr	r3, [pc, #484]	; (8001fbc <HAL_RCC_OscConfig+0x4bc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d118      	bne.n	8001e14 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de2:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x4bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a75      	ldr	r2, [pc, #468]	; (8001fbc <HAL_RCC_OscConfig+0x4bc>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dee:	f7ff fb37 	bl	8001460 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df6:	f7ff fb33 	bl	8001460 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e18b      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e08:	4b6c      	ldr	r3, [pc, #432]	; (8001fbc <HAL_RCC_OscConfig+0x4bc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d108      	bne.n	8001e2e <HAL_RCC_OscConfig+0x32e>
 8001e1c:	4b66      	ldr	r3, [pc, #408]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e22:	4a65      	ldr	r2, [pc, #404]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2c:	e024      	b.n	8001e78 <HAL_RCC_OscConfig+0x378>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d110      	bne.n	8001e58 <HAL_RCC_OscConfig+0x358>
 8001e36:	4b60      	ldr	r3, [pc, #384]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	4a5e      	ldr	r2, [pc, #376]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e46:	4b5c      	ldr	r3, [pc, #368]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4c:	4a5a      	ldr	r2, [pc, #360]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e56:	e00f      	b.n	8001e78 <HAL_RCC_OscConfig+0x378>
 8001e58:	4b57      	ldr	r3, [pc, #348]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	4a56      	ldr	r2, [pc, #344]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e68:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	4a52      	ldr	r2, [pc, #328]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d016      	beq.n	8001eae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e80:	f7ff faee 	bl	8001460 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e88:	f7ff faea 	bl	8001460 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e140      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e9e:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ed      	beq.n	8001e88 <HAL_RCC_OscConfig+0x388>
 8001eac:	e015      	b.n	8001eda <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eae:	f7ff fad7 	bl	8001460 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fad3 	bl	8001460 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e129      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ed      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eda:	7ffb      	ldrb	r3, [r7, #31]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee0:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	4a34      	ldr	r2, [pc, #208]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d03c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f00:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f06:	4a2c      	ldr	r2, [pc, #176]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7ff faa6 	bl	8001460 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f18:	f7ff faa2 	bl	8001460 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e0fa      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f2a:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ef      	beq.n	8001f18 <HAL_RCC_OscConfig+0x418>
 8001f38:	e01b      	b.n	8001f72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f40:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fa89 	bl	8001460 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f52:	f7ff fa85 	bl	8001460 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0dd      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ef      	bne.n	8001f52 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80d1 	beq.w	800211e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	f000 808b 	beq.w	80020a0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d15e      	bne.n	8002050 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <HAL_RCC_OscConfig+0x4b8>)
 8001f98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fa5f 	bl	8001460 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa4:	e00c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fa5b 	bl	8001460 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d905      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e0b3      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc0:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1ec      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fcc:	4b56      	ldr	r3, [pc, #344]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	4b56      	ldr	r3, [pc, #344]	; (800212c <HAL_RCC_OscConfig+0x62c>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6a11      	ldr	r1, [r2, #32]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fdc:	3a01      	subs	r2, #1
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	4311      	orrs	r1, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fe6:	0212      	lsls	r2, r2, #8
 8001fe8:	4311      	orrs	r1, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fee:	0852      	lsrs	r2, r2, #1
 8001ff0:	3a01      	subs	r2, #1
 8001ff2:	0552      	lsls	r2, r2, #21
 8001ff4:	4311      	orrs	r1, r2
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ffa:	0852      	lsrs	r2, r2, #1
 8001ffc:	3a01      	subs	r2, #1
 8001ffe:	0652      	lsls	r2, r2, #25
 8002000:	4311      	orrs	r1, r2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002006:	06d2      	lsls	r2, r2, #27
 8002008:	430a      	orrs	r2, r1
 800200a:	4947      	ldr	r1, [pc, #284]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 800200c:	4313      	orrs	r3, r2
 800200e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b45      	ldr	r3, [pc, #276]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a44      	ldr	r2, [pc, #272]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 8002016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800201a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800201c:	4b42      	ldr	r3, [pc, #264]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4a41      	ldr	r2, [pc, #260]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 8002022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002026:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff fa1a 	bl	8001460 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7ff fa16 	bl	8001460 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e06e      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x530>
 800204e:	e066      	b.n	800211e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002050:	4b35      	ldr	r3, [pc, #212]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a34      	ldr	r2, [pc, #208]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 8002056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800205a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800205c:	4b32      	ldr	r3, [pc, #200]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a31      	ldr	r2, [pc, #196]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 8002062:	f023 0303 	bic.w	r3, r3, #3
 8002066:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002068:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a2e      	ldr	r2, [pc, #184]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 800206e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff f9f2 	bl	8001460 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7ff f9ee 	bl	8001460 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e046      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002092:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x580>
 800209e:	e03e      	b.n	800211e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e039      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <HAL_RCC_OscConfig+0x628>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0203 	and.w	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d12c      	bne.n	800211a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	3b01      	subs	r3, #1
 80020cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d123      	bne.n	800211a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d11b      	bne.n	800211a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d113      	bne.n	800211a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	3b01      	subs	r3, #1
 8002100:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d109      	bne.n	800211a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	3b01      	subs	r3, #1
 8002114:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	019f800c 	.word	0x019f800c

08002130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e11e      	b.n	8002386 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b91      	ldr	r3, [pc, #580]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d910      	bls.n	8002178 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b8e      	ldr	r3, [pc, #568]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 020f 	bic.w	r2, r3, #15
 800215e:	498c      	ldr	r1, [pc, #560]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b8a      	ldr	r3, [pc, #552]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e106      	b.n	8002386 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d073      	beq.n	800226c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d129      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800218c:	4b81      	ldr	r3, [pc, #516]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0f4      	b.n	8002386 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800219c:	f000 f99e 	bl	80024dc <RCC_GetSysClockFreqFromPLLSource>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4a7c      	ldr	r2, [pc, #496]	; (8002398 <HAL_RCC_ClockConfig+0x268>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d93f      	bls.n	800222a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021aa:	4b7a      	ldr	r3, [pc, #488]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d033      	beq.n	800222a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d12f      	bne.n	800222a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ca:	4b72      	ldr	r3, [pc, #456]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021d2:	4a70      	ldr	r2, [pc, #448]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 80021d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e024      	b.n	800222a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d107      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e8:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d109      	bne.n	8002208 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0c6      	b.n	8002386 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f8:	4b66      	ldr	r3, [pc, #408]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0be      	b.n	8002386 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002208:	f000 f8ce 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 800220c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4a61      	ldr	r2, [pc, #388]	; (8002398 <HAL_RCC_ClockConfig+0x268>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d909      	bls.n	800222a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002216:	4b5f      	ldr	r3, [pc, #380]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800221e:	4a5d      	ldr	r2, [pc, #372]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 8002220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002224:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800222a:	4b5a      	ldr	r3, [pc, #360]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f023 0203 	bic.w	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4957      	ldr	r1, [pc, #348]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 8002238:	4313      	orrs	r3, r2
 800223a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800223c:	f7ff f910 	bl	8001460 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	e00a      	b.n	800225a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002244:	f7ff f90c 	bl	8001460 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e095      	b.n	8002386 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	4b4e      	ldr	r3, [pc, #312]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 020c 	and.w	r2, r3, #12
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	429a      	cmp	r2, r3
 800226a:	d1eb      	bne.n	8002244 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d023      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002284:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a42      	ldr	r2, [pc, #264]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 800228a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800228e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800229c:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80022a4:	4a3b      	ldr	r2, [pc, #236]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 80022a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ac:	4b39      	ldr	r3, [pc, #228]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4936      	ldr	r1, [pc, #216]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
 80022be:	e008      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b80      	cmp	r3, #128	; 0x80
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022c6:	4b33      	ldr	r3, [pc, #204]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4a32      	ldr	r2, [pc, #200]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 80022cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d21d      	bcs.n	800231c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e0:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 020f 	bic.w	r2, r3, #15
 80022e8:	4929      	ldr	r1, [pc, #164]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022f0:	f7ff f8b6 	bl	8001460 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	e00a      	b.n	800230e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f8:	f7ff f8b2 	bl	8001460 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	; 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e03b      	b.n	8002386 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d1ed      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4917      	ldr	r1, [pc, #92]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	490f      	ldr	r1, [pc, #60]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800235a:	f000 f825 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 800235e:	4602      	mov	r2, r0
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_RCC_ClockConfig+0x264>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	490c      	ldr	r1, [pc, #48]	; (800239c <HAL_RCC_ClockConfig+0x26c>)
 800236c:	5ccb      	ldrb	r3, [r1, r3]
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <HAL_RCC_ClockConfig+0x270>)
 8002378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_RCC_ClockConfig+0x274>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f822 	bl	80013c8 <HAL_InitTick>
 8002384:	4603      	mov	r3, r0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40022000 	.word	0x40022000
 8002394:	40021000 	.word	0x40021000
 8002398:	04c4b400 	.word	0x04c4b400
 800239c:	0800472c 	.word	0x0800472c
 80023a0:	20000000 	.word	0x20000000
 80023a4:	20000004 	.word	0x20000004

080023a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023ae:	4b2c      	ldr	r3, [pc, #176]	; (8002460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d102      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e047      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d102      	bne.n	80023d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	e03e      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d136      	bne.n	800244c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3301      	adds	r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d10c      	bne.n	8002416 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023fc:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	4a16      	ldr	r2, [pc, #88]	; (8002460 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002406:	68d2      	ldr	r2, [r2, #12]
 8002408:	0a12      	lsrs	r2, r2, #8
 800240a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	617b      	str	r3, [r7, #20]
      break;
 8002414:	e00c      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002416:	4a13      	ldr	r2, [pc, #76]	; (8002464 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	4a10      	ldr	r2, [pc, #64]	; (8002460 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002420:	68d2      	ldr	r2, [r2, #12]
 8002422:	0a12      	lsrs	r2, r2, #8
 8002424:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
      break;
 800242e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	0e5b      	lsrs	r3, r3, #25
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	3301      	adds	r3, #1
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	e001      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002450:	693b      	ldr	r3, [r7, #16]
}
 8002452:	4618      	mov	r0, r3
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	00f42400 	.word	0x00f42400
 8002468:	007a1200 	.word	0x007a1200

0800246c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_RCC_GetHCLKFreq+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000000 	.word	0x20000000

08002484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002488:	f7ff fff0 	bl	800246c <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4904      	ldr	r1, [pc, #16]	; (80024ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	0800473c 	.word	0x0800473c

080024b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024b4:	f7ff ffda 	bl	800246c <HAL_RCC_GetHCLKFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	0adb      	lsrs	r3, r3, #11
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4904      	ldr	r1, [pc, #16]	; (80024d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	0800473c 	.word	0x0800473c

080024dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024e2:	4b1e      	ldr	r3, [pc, #120]	; (800255c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3301      	adds	r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d10c      	bne.n	800251a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002500:	4a17      	ldr	r2, [pc, #92]	; (8002560 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800250a:	68d2      	ldr	r2, [r2, #12]
 800250c:	0a12      	lsrs	r2, r2, #8
 800250e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	617b      	str	r3, [r7, #20]
    break;
 8002518:	e00c      	b.n	8002534 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800251a:	4a12      	ldr	r2, [pc, #72]	; (8002564 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4a0e      	ldr	r2, [pc, #56]	; (800255c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002524:	68d2      	ldr	r2, [r2, #12]
 8002526:	0a12      	lsrs	r2, r2, #8
 8002528:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    break;
 8002532:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0e5b      	lsrs	r3, r3, #25
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	3301      	adds	r3, #1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800254e:	687b      	ldr	r3, [r7, #4]
}
 8002550:	4618      	mov	r0, r3
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40021000 	.word	0x40021000
 8002560:	007a1200 	.word	0x007a1200
 8002564:	00f42400 	.word	0x00f42400

08002568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002570:	2300      	movs	r3, #0
 8002572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002574:	2300      	movs	r3, #0
 8002576:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8098 	beq.w	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10d      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b40      	ldr	r3, [pc, #256]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	4a3f      	ldr	r2, [pc, #252]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	6593      	str	r3, [r2, #88]	; 0x58
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ae:	2301      	movs	r3, #1
 80025b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025b2:	4b3a      	ldr	r3, [pc, #232]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a39      	ldr	r2, [pc, #228]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025be:	f7fe ff4f 	bl	8001460 <HAL_GetTick>
 80025c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025c4:	e009      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c6:	f7fe ff4b 	bl	8001460 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d902      	bls.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	74fb      	strb	r3, [r7, #19]
        break;
 80025d8:	e005      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025da:	4b30      	ldr	r3, [pc, #192]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ef      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d159      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025ec:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01e      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	429a      	cmp	r2, r3
 8002606:	d019      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002612:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002614:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002634:	4a18      	ldr	r2, [pc, #96]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7fe ff0b 	bl	8001460 <HAL_GetTick>
 800264a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264c:	e00b      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe ff07 	bl	8001460 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d902      	bls.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	74fb      	strb	r3, [r7, #19]
            break;
 8002664:	e006      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ec      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10b      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	4903      	ldr	r1, [pc, #12]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002690:	e008      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	74bb      	strb	r3, [r7, #18]
 8002696:	e005      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002698:	40021000 	.word	0x40021000
 800269c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a4:	7c7b      	ldrb	r3, [r7, #17]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d105      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026aa:	4ba6      	ldr	r3, [pc, #664]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	4aa5      	ldr	r2, [pc, #660]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026c2:	4ba0      	ldr	r3, [pc, #640]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c8:	f023 0203 	bic.w	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	499c      	ldr	r1, [pc, #624]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026e4:	4b97      	ldr	r3, [pc, #604]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f023 020c 	bic.w	r2, r3, #12
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4994      	ldr	r1, [pc, #592]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002706:	4b8f      	ldr	r3, [pc, #572]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	498b      	ldr	r1, [pc, #556]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002728:	4b86      	ldr	r3, [pc, #536]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	4983      	ldr	r1, [pc, #524]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800274a:	4b7e      	ldr	r3, [pc, #504]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	497a      	ldr	r1, [pc, #488]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800276c:	4b75      	ldr	r3, [pc, #468]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	4972      	ldr	r1, [pc, #456]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800278e:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	4969      	ldr	r1, [pc, #420]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027b0:	4b64      	ldr	r3, [pc, #400]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4961      	ldr	r1, [pc, #388]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027d2:	4b5c      	ldr	r3, [pc, #368]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	4958      	ldr	r1, [pc, #352]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f4:	4b53      	ldr	r3, [pc, #332]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	4950      	ldr	r1, [pc, #320]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002812:	d105      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002814:	4b4b      	ldr	r3, [pc, #300]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a4a      	ldr	r2, [pc, #296]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800281e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002828:	2b00      	cmp	r3, #0
 800282a:	d015      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800282c:	4b45      	ldr	r3, [pc, #276]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	4942      	ldr	r1, [pc, #264]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284a:	d105      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800284c:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a3c      	ldr	r2, [pc, #240]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002856:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d015      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002864:	4b37      	ldr	r3, [pc, #220]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4934      	ldr	r1, [pc, #208]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002882:	d105      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002884:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a2e      	ldr	r2, [pc, #184]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800288e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d015      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	4926      	ldr	r1, [pc, #152]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ba:	d105      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a20      	ldr	r2, [pc, #128]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d015      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	4918      	ldr	r1, [pc, #96]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f2:	d105      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a12      	ldr	r2, [pc, #72]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d015      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	490a      	ldr	r1, [pc, #40]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800292a:	d105      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002936:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002938:	7cbb      	ldrb	r3, [r7, #18]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e09d      	b.n	8002a96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2b00      	cmp	r3, #0
 8002960:	d108      	bne.n	8002974 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800296a:	d009      	beq.n	8002980 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
 8002972:	e005      	b.n	8002980 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fbc6 	bl	800112c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029c0:	d902      	bls.n	80029c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	e002      	b.n	80029ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029d6:	d007      	beq.n	80029e8 <HAL_SPI_Init+0xa0>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029e0:	d002      	beq.n	80029e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2a:	ea42 0103 	orr.w	r1, r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	f003 0204 	and.w	r2, r3, #4
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a64:	ea42 0103 	orr.w	r1, r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b088      	sub	sp, #32
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_SPI_Transmit+0x22>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e158      	b.n	8002d72 <HAL_SPI_Transmit+0x2d4>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ac8:	f7fe fcca 	bl	8001460 <HAL_GetTick>
 8002acc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d002      	beq.n	8002ae4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ae2:	e13d      	b.n	8002d60 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_SPI_Transmit+0x52>
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002af4:	e134      	b.n	8002d60 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2203      	movs	r2, #3
 8002afa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	88fa      	ldrh	r2, [r7, #6]
 8002b14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b40:	d10f      	bne.n	8002b62 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d007      	beq.n	8002b80 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b88:	d94b      	bls.n	8002c22 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_SPI_Transmit+0xfa>
 8002b92:	8afb      	ldrh	r3, [r7, #22]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d13e      	bne.n	8002c16 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	881a      	ldrh	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	1c9a      	adds	r2, r3, #2
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bbc:	e02b      	b.n	8002c16 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d112      	bne.n	8002bf2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	881a      	ldrh	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	1c9a      	adds	r2, r3, #2
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bf0:	e011      	b.n	8002c16 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bf2:	f7fe fc35 	bl	8001460 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d803      	bhi.n	8002c0a <HAL_SPI_Transmit+0x16c>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d102      	bne.n	8002c10 <HAL_SPI_Transmit+0x172>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c14:	e0a4      	b.n	8002d60 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ce      	bne.n	8002bbe <HAL_SPI_Transmit+0x120>
 8002c20:	e07c      	b.n	8002d1c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_SPI_Transmit+0x192>
 8002c2a:	8afb      	ldrh	r3, [r7, #22]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d170      	bne.n	8002d12 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d912      	bls.n	8002c60 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	881a      	ldrh	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	1c9a      	adds	r2, r3, #2
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b02      	subs	r3, #2
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c5e:	e058      	b.n	8002d12 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	330c      	adds	r3, #12
 8002c6a:	7812      	ldrb	r2, [r2, #0]
 8002c6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c86:	e044      	b.n	8002d12 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d12b      	bne.n	8002cee <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d912      	bls.n	8002cc6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	881a      	ldrh	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	1c9a      	adds	r2, r3, #2
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b02      	subs	r3, #2
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cc4:	e025      	b.n	8002d12 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cec:	e011      	b.n	8002d12 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cee:	f7fe fbb7 	bl	8001460 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d803      	bhi.n	8002d06 <HAL_SPI_Transmit+0x268>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d04:	d102      	bne.n	8002d0c <HAL_SPI_Transmit+0x26e>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d10:	e026      	b.n	8002d60 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1b5      	bne.n	8002c88 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	6839      	ldr	r1, [r7, #0]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fce3 	bl	80036ec <SPI_EndRxTxTransaction>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10a      	bne.n	8002d50 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	77fb      	strb	r3, [r7, #31]
 8002d5c:	e000      	b.n	8002d60 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002d5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d70:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3720      	adds	r7, #32
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b088      	sub	sp, #32
 8002d7e:	af02      	add	r7, sp, #8
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d96:	d112      	bne.n	8002dbe <HAL_SPI_Receive+0x44>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10e      	bne.n	8002dbe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2204      	movs	r2, #4
 8002da4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002da8:	88fa      	ldrh	r2, [r7, #6]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f910 	bl	8002fda <HAL_SPI_TransmitReceive>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	e109      	b.n	8002fd2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_SPI_Receive+0x52>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e102      	b.n	8002fd2 <HAL_SPI_Receive+0x258>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dd4:	f7fe fb44 	bl	8001460 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d002      	beq.n	8002dec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
 8002de8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dea:	e0e9      	b.n	8002fc0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_SPI_Receive+0x7e>
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dfc:	e0e0      	b.n	8002fc0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2204      	movs	r2, #4
 8002e02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	88fa      	ldrh	r2, [r7, #6]
 8002e1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e48:	d908      	bls.n	8002e5c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	e007      	b.n	8002e6c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e6a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e74:	d10f      	bne.n	8002e96 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d007      	beq.n	8002eb4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ebc:	d867      	bhi.n	8002f8e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ebe:	e030      	b.n	8002f22 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d117      	bne.n	8002efe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f103 020c 	add.w	r2, r3, #12
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	7812      	ldrb	r2, [r2, #0]
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002efc:	e011      	b.n	8002f22 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002efe:	f7fe faaf 	bl	8001460 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d803      	bhi.n	8002f16 <HAL_SPI_Receive+0x19c>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d102      	bne.n	8002f1c <HAL_SPI_Receive+0x1a2>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f20:	e04e      	b.n	8002fc0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1c8      	bne.n	8002ec0 <HAL_SPI_Receive+0x146>
 8002f2e:	e034      	b.n	8002f9a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d115      	bne.n	8002f6a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	b292      	uxth	r2, r2
 8002f4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	1c9a      	adds	r2, r3, #2
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002f68:	e011      	b.n	8002f8e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f6a:	f7fe fa79 	bl	8001460 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d803      	bhi.n	8002f82 <HAL_SPI_Receive+0x208>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d102      	bne.n	8002f88 <HAL_SPI_Receive+0x20e>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f8c:	e018      	b.n	8002fc0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ca      	bne.n	8002f30 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	6839      	ldr	r1, [r7, #0]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fb4c 	bl	800363c <SPI_EndRxTransaction>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]
 8002fbc:	e000      	b.n	8002fc0 <HAL_SPI_Receive+0x246>
  }

error :
 8002fbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b08a      	sub	sp, #40	; 0x28
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_SPI_TransmitReceive+0x26>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e1fb      	b.n	80033f8 <HAL_SPI_TransmitReceive+0x41e>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003008:	f7fe fa2a 	bl	8001460 <HAL_GetTick>
 800300c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003014:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003020:	887b      	ldrh	r3, [r7, #2]
 8003022:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003024:	7efb      	ldrb	r3, [r7, #27]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d00e      	beq.n	8003048 <HAL_SPI_TransmitReceive+0x6e>
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003030:	d106      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x66>
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d003      	beq.n	8003048 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003040:	2302      	movs	r3, #2
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003046:	e1cd      	b.n	80033e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_SPI_TransmitReceive+0x80>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HAL_SPI_TransmitReceive+0x80>
 8003054:	887b      	ldrh	r3, [r7, #2]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003060:	e1c0      	b.n	80033e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b04      	cmp	r3, #4
 800306c:	d003      	beq.n	8003076 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2205      	movs	r2, #5
 8003072:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	887a      	ldrh	r2, [r7, #2]
 8003086:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	887a      	ldrh	r2, [r7, #2]
 800308e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	887a      	ldrh	r2, [r7, #2]
 80030a2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030b8:	d802      	bhi.n	80030c0 <HAL_SPI_TransmitReceive+0xe6>
 80030ba:	8a3b      	ldrh	r3, [r7, #16]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d908      	bls.n	80030d2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	e007      	b.n	80030e2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d007      	beq.n	8003100 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003108:	d97c      	bls.n	8003204 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_SPI_TransmitReceive+0x13e>
 8003112:	8a7b      	ldrh	r3, [r7, #18]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d169      	bne.n	80031ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	881a      	ldrh	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	1c9a      	adds	r2, r3, #2
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800313c:	e056      	b.n	80031ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b02      	cmp	r3, #2
 800314a:	d11b      	bne.n	8003184 <HAL_SPI_TransmitReceive+0x1aa>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d016      	beq.n	8003184 <HAL_SPI_TransmitReceive+0x1aa>
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	2b01      	cmp	r3, #1
 800315a:	d113      	bne.n	8003184 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	881a      	ldrh	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	1c9a      	adds	r2, r3, #2
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d11c      	bne.n	80031cc <HAL_SPI_TransmitReceive+0x1f2>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	b292      	uxth	r2, r2
 80031aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	1c9a      	adds	r2, r3, #2
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031c8:	2301      	movs	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031cc:	f7fe f948 	bl	8001460 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d8:	429a      	cmp	r2, r3
 80031da:	d807      	bhi.n	80031ec <HAL_SPI_TransmitReceive+0x212>
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d003      	beq.n	80031ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80031ea:	e0fb      	b.n	80033e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1a3      	bne.n	800313e <HAL_SPI_TransmitReceive+0x164>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d19d      	bne.n	800313e <HAL_SPI_TransmitReceive+0x164>
 8003202:	e0df      	b.n	80033c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_SPI_TransmitReceive+0x23a>
 800320c:	8a7b      	ldrh	r3, [r7, #18]
 800320e:	2b01      	cmp	r3, #1
 8003210:	f040 80cb 	bne.w	80033aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d912      	bls.n	8003244 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	881a      	ldrh	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b02      	subs	r3, #2
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003242:	e0b2      	b.n	80033aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	7812      	ldrb	r2, [r2, #0]
 8003250:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800326a:	e09e      	b.n	80033aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b02      	cmp	r3, #2
 8003278:	d134      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x30a>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d02f      	beq.n	80032e4 <HAL_SPI_TransmitReceive+0x30a>
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	2b01      	cmp	r3, #1
 8003288:	d12c      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d912      	bls.n	80032ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	881a      	ldrh	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	1c9a      	adds	r2, r3, #2
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b02      	subs	r3, #2
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032b8:	e012      	b.n	80032e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	330c      	adds	r3, #12
 80032c4:	7812      	ldrb	r2, [r2, #0]
 80032c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d148      	bne.n	8003384 <HAL_SPI_TransmitReceive+0x3aa>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d042      	beq.n	8003384 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d923      	bls.n	8003352 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	b292      	uxth	r2, r2
 8003316:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	1c9a      	adds	r2, r3, #2
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b02      	subs	r3, #2
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b01      	cmp	r3, #1
 800333e:	d81f      	bhi.n	8003380 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	e016      	b.n	8003380 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f103 020c 	add.w	r2, r3, #12
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	7812      	ldrb	r2, [r2, #0]
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003380:	2301      	movs	r3, #1
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003384:	f7fe f86c 	bl	8001460 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003390:	429a      	cmp	r2, r3
 8003392:	d803      	bhi.n	800339c <HAL_SPI_TransmitReceive+0x3c2>
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d102      	bne.n	80033a2 <HAL_SPI_TransmitReceive+0x3c8>
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80033a8:	e01c      	b.n	80033e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f47f af5b 	bne.w	800326c <HAL_SPI_TransmitReceive+0x292>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f47f af54 	bne.w	800326c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f98f 	bl	80036ec <SPI_EndRxTxTransaction>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d006      	beq.n	80033e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	661a      	str	r2, [r3, #96]	; 0x60
 80033e0:	e000      	b.n	80033e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80033e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3728      	adds	r7, #40	; 0x28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003410:	f7fe f826 	bl	8001460 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	4413      	add	r3, r2
 800341e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003420:	f7fe f81e 	bl	8001460 <HAL_GetTick>
 8003424:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003426:	4b39      	ldr	r3, [pc, #228]	; (800350c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	015b      	lsls	r3, r3, #5
 800342c:	0d1b      	lsrs	r3, r3, #20
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003436:	e054      	b.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d050      	beq.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003440:	f7fe f80e 	bl	8001460 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	429a      	cmp	r2, r3
 800344e:	d902      	bls.n	8003456 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d13d      	bne.n	80034d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800346e:	d111      	bne.n	8003494 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003478:	d004      	beq.n	8003484 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003482:	d107      	bne.n	8003494 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003492:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349c:	d10f      	bne.n	80034be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e017      	b.n	8003502 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3b01      	subs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4013      	ands	r3, r2
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d19b      	bne.n	8003438 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000000 	.word	0x20000000

08003510 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003522:	f7fd ff9d 	bl	8001460 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	4413      	add	r3, r2
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003532:	f7fd ff95 	bl	8001460 <HAL_GetTick>
 8003536:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003540:	4b3d      	ldr	r3, [pc, #244]	; (8003638 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	00da      	lsls	r2, r3, #3
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	0d1b      	lsrs	r3, r3, #20
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003558:	e060      	b.n	800361c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003560:	d107      	bne.n	8003572 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d104      	bne.n	8003572 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003570:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d050      	beq.n	800361c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800357a:	f7fd ff71 	bl	8001460 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003586:	429a      	cmp	r2, r3
 8003588:	d902      	bls.n	8003590 <SPI_WaitFifoStateUntilTimeout+0x80>
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	2b00      	cmp	r3, #0
 800358e:	d13d      	bne.n	800360c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800359e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035a8:	d111      	bne.n	80035ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b2:	d004      	beq.n	80035be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035bc:	d107      	bne.n	80035ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d6:	d10f      	bne.n	80035f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e010      	b.n	800362e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	3b01      	subs	r3, #1
 800361a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d196      	bne.n	800355a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3728      	adds	r7, #40	; 0x28
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000000 	.word	0x20000000

0800363c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003650:	d111      	bne.n	8003676 <SPI_EndRxTransaction+0x3a>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365a:	d004      	beq.n	8003666 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d107      	bne.n	8003676 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003674:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2200      	movs	r2, #0
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff febd 	bl	8003400 <SPI_WaitFlagStateUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003690:	f043 0220 	orr.w	r2, r3, #32
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e023      	b.n	80036e4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036a4:	d11d      	bne.n	80036e2 <SPI_EndRxTransaction+0xa6>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ae:	d004      	beq.n	80036ba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b8:	d113      	bne.n	80036e2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f7ff ff22 	bl	8003510 <SPI_WaitFifoStateUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d6:	f043 0220 	orr.w	r2, r3, #32
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e000      	b.n	80036e4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2200      	movs	r2, #0
 8003700:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff ff03 	bl	8003510 <SPI_WaitFifoStateUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e027      	b.n	8003770 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2200      	movs	r2, #0
 8003728:	2180      	movs	r1, #128	; 0x80
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7ff fe68 	bl	8003400 <SPI_WaitFlagStateUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373a:	f043 0220 	orr.w	r2, r3, #32
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e014      	b.n	8003770 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2200      	movs	r2, #0
 800374e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff fedc 	bl	8003510 <SPI_WaitFifoStateUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003762:	f043 0220 	orr.w	r2, r3, #32
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e000      	b.n	8003770 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e042      	b.n	8003810 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fd fd07 	bl	80011b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2224      	movs	r2, #36	; 0x24
 80037a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f82c 	bl	8003818 <UART_SetConfig>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e022      	b.n	8003810 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 faec 	bl	8003db0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fb73 	bl	8003ef4 <UART_CheckIdleState>
 800380e:	4603      	mov	r3, r0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800381c:	b08c      	sub	sp, #48	; 0x30
 800381e:	af00      	add	r7, sp, #0
 8003820:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	431a      	orrs	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	431a      	orrs	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	4313      	orrs	r3, r2
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4bab      	ldr	r3, [pc, #684]	; (8003af4 <UART_SetConfig+0x2dc>)
 8003848:	4013      	ands	r3, r2
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	6812      	ldr	r2, [r2, #0]
 800384e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003850:	430b      	orrs	r3, r1
 8003852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4aa0      	ldr	r2, [pc, #640]	; (8003af8 <UART_SetConfig+0x2e0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003880:	4313      	orrs	r3, r2
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800388e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003898:	430b      	orrs	r3, r1
 800389a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	f023 010f 	bic.w	r1, r3, #15
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a91      	ldr	r2, [pc, #580]	; (8003afc <UART_SetConfig+0x2e4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d125      	bne.n	8003908 <UART_SetConfig+0xf0>
 80038bc:	4b90      	ldr	r3, [pc, #576]	; (8003b00 <UART_SetConfig+0x2e8>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d81a      	bhi.n	8003900 <UART_SetConfig+0xe8>
 80038ca:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <UART_SetConfig+0xb8>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	080038e1 	.word	0x080038e1
 80038d4:	080038f1 	.word	0x080038f1
 80038d8:	080038e9 	.word	0x080038e9
 80038dc:	080038f9 	.word	0x080038f9
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038e6:	e0d6      	b.n	8003a96 <UART_SetConfig+0x27e>
 80038e8:	2302      	movs	r3, #2
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ee:	e0d2      	b.n	8003a96 <UART_SetConfig+0x27e>
 80038f0:	2304      	movs	r3, #4
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f6:	e0ce      	b.n	8003a96 <UART_SetConfig+0x27e>
 80038f8:	2308      	movs	r3, #8
 80038fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038fe:	e0ca      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003900:	2310      	movs	r3, #16
 8003902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003906:	e0c6      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a7d      	ldr	r2, [pc, #500]	; (8003b04 <UART_SetConfig+0x2ec>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d138      	bne.n	8003984 <UART_SetConfig+0x16c>
 8003912:	4b7b      	ldr	r3, [pc, #492]	; (8003b00 <UART_SetConfig+0x2e8>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f003 030c 	and.w	r3, r3, #12
 800391c:	2b0c      	cmp	r3, #12
 800391e:	d82d      	bhi.n	800397c <UART_SetConfig+0x164>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <UART_SetConfig+0x110>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	0800395d 	.word	0x0800395d
 800392c:	0800397d 	.word	0x0800397d
 8003930:	0800397d 	.word	0x0800397d
 8003934:	0800397d 	.word	0x0800397d
 8003938:	0800396d 	.word	0x0800396d
 800393c:	0800397d 	.word	0x0800397d
 8003940:	0800397d 	.word	0x0800397d
 8003944:	0800397d 	.word	0x0800397d
 8003948:	08003965 	.word	0x08003965
 800394c:	0800397d 	.word	0x0800397d
 8003950:	0800397d 	.word	0x0800397d
 8003954:	0800397d 	.word	0x0800397d
 8003958:	08003975 	.word	0x08003975
 800395c:	2300      	movs	r3, #0
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003962:	e098      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003964:	2302      	movs	r3, #2
 8003966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396a:	e094      	b.n	8003a96 <UART_SetConfig+0x27e>
 800396c:	2304      	movs	r3, #4
 800396e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003972:	e090      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003974:	2308      	movs	r3, #8
 8003976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800397a:	e08c      	b.n	8003a96 <UART_SetConfig+0x27e>
 800397c:	2310      	movs	r3, #16
 800397e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003982:	e088      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a5f      	ldr	r2, [pc, #380]	; (8003b08 <UART_SetConfig+0x2f0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d125      	bne.n	80039da <UART_SetConfig+0x1c2>
 800398e:	4b5c      	ldr	r3, [pc, #368]	; (8003b00 <UART_SetConfig+0x2e8>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003998:	2b30      	cmp	r3, #48	; 0x30
 800399a:	d016      	beq.n	80039ca <UART_SetConfig+0x1b2>
 800399c:	2b30      	cmp	r3, #48	; 0x30
 800399e:	d818      	bhi.n	80039d2 <UART_SetConfig+0x1ba>
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d00a      	beq.n	80039ba <UART_SetConfig+0x1a2>
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d814      	bhi.n	80039d2 <UART_SetConfig+0x1ba>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <UART_SetConfig+0x19a>
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d008      	beq.n	80039c2 <UART_SetConfig+0x1aa>
 80039b0:	e00f      	b.n	80039d2 <UART_SetConfig+0x1ba>
 80039b2:	2300      	movs	r3, #0
 80039b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b8:	e06d      	b.n	8003a96 <UART_SetConfig+0x27e>
 80039ba:	2302      	movs	r3, #2
 80039bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c0:	e069      	b.n	8003a96 <UART_SetConfig+0x27e>
 80039c2:	2304      	movs	r3, #4
 80039c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c8:	e065      	b.n	8003a96 <UART_SetConfig+0x27e>
 80039ca:	2308      	movs	r3, #8
 80039cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d0:	e061      	b.n	8003a96 <UART_SetConfig+0x27e>
 80039d2:	2310      	movs	r3, #16
 80039d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d8:	e05d      	b.n	8003a96 <UART_SetConfig+0x27e>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a4b      	ldr	r2, [pc, #300]	; (8003b0c <UART_SetConfig+0x2f4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d125      	bne.n	8003a30 <UART_SetConfig+0x218>
 80039e4:	4b46      	ldr	r3, [pc, #280]	; (8003b00 <UART_SetConfig+0x2e8>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039ee:	2bc0      	cmp	r3, #192	; 0xc0
 80039f0:	d016      	beq.n	8003a20 <UART_SetConfig+0x208>
 80039f2:	2bc0      	cmp	r3, #192	; 0xc0
 80039f4:	d818      	bhi.n	8003a28 <UART_SetConfig+0x210>
 80039f6:	2b80      	cmp	r3, #128	; 0x80
 80039f8:	d00a      	beq.n	8003a10 <UART_SetConfig+0x1f8>
 80039fa:	2b80      	cmp	r3, #128	; 0x80
 80039fc:	d814      	bhi.n	8003a28 <UART_SetConfig+0x210>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <UART_SetConfig+0x1f0>
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d008      	beq.n	8003a18 <UART_SetConfig+0x200>
 8003a06:	e00f      	b.n	8003a28 <UART_SetConfig+0x210>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a0e:	e042      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003a10:	2302      	movs	r3, #2
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a16:	e03e      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a1e:	e03a      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003a20:	2308      	movs	r3, #8
 8003a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a26:	e036      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003a28:	2310      	movs	r3, #16
 8003a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a2e:	e032      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a30      	ldr	r2, [pc, #192]	; (8003af8 <UART_SetConfig+0x2e0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d12a      	bne.n	8003a90 <UART_SetConfig+0x278>
 8003a3a:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <UART_SetConfig+0x2e8>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a48:	d01a      	beq.n	8003a80 <UART_SetConfig+0x268>
 8003a4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a4e:	d81b      	bhi.n	8003a88 <UART_SetConfig+0x270>
 8003a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a54:	d00c      	beq.n	8003a70 <UART_SetConfig+0x258>
 8003a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5a:	d815      	bhi.n	8003a88 <UART_SetConfig+0x270>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <UART_SetConfig+0x250>
 8003a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a64:	d008      	beq.n	8003a78 <UART_SetConfig+0x260>
 8003a66:	e00f      	b.n	8003a88 <UART_SetConfig+0x270>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a6e:	e012      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003a70:	2302      	movs	r3, #2
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a76:	e00e      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7e:	e00a      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003a80:	2308      	movs	r3, #8
 8003a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a86:	e006      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a8e:	e002      	b.n	8003a96 <UART_SetConfig+0x27e>
 8003a90:	2310      	movs	r3, #16
 8003a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a17      	ldr	r2, [pc, #92]	; (8003af8 <UART_SetConfig+0x2e0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	f040 80a8 	bne.w	8003bf2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d834      	bhi.n	8003b14 <UART_SetConfig+0x2fc>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <UART_SetConfig+0x298>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ad5 	.word	0x08003ad5
 8003ab4:	08003b15 	.word	0x08003b15
 8003ab8:	08003add 	.word	0x08003add
 8003abc:	08003b15 	.word	0x08003b15
 8003ac0:	08003ae3 	.word	0x08003ae3
 8003ac4:	08003b15 	.word	0x08003b15
 8003ac8:	08003b15 	.word	0x08003b15
 8003acc:	08003b15 	.word	0x08003b15
 8003ad0:	08003aeb 	.word	0x08003aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad4:	f7fe fcd6 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8003ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ada:	e021      	b.n	8003b20 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <UART_SetConfig+0x2f8>)
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ae0:	e01e      	b.n	8003b20 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ae2:	f7fe fc61 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8003ae6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ae8:	e01a      	b.n	8003b20 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003af0:	e016      	b.n	8003b20 <UART_SetConfig+0x308>
 8003af2:	bf00      	nop
 8003af4:	cfff69f3 	.word	0xcfff69f3
 8003af8:	40008000 	.word	0x40008000
 8003afc:	40013800 	.word	0x40013800
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40004400 	.word	0x40004400
 8003b08:	40004800 	.word	0x40004800
 8003b0c:	40004c00 	.word	0x40004c00
 8003b10:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 812a 	beq.w	8003d7c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	4a9e      	ldr	r2, [pc, #632]	; (8003da8 <UART_SetConfig+0x590>)
 8003b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b32:	461a      	mov	r2, r3
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d305      	bcc.n	8003b58 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d903      	bls.n	8003b60 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b5e:	e10d      	b.n	8003d7c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	2200      	movs	r2, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	60fa      	str	r2, [r7, #12]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	4a8e      	ldr	r2, [pc, #568]	; (8003da8 <UART_SetConfig+0x590>)
 8003b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b82:	f7fc fb49 	bl	8000218 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	020b      	lsls	r3, r1, #8
 8003b98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b9c:	0202      	lsls	r2, r0, #8
 8003b9e:	6979      	ldr	r1, [r7, #20]
 8003ba0:	6849      	ldr	r1, [r1, #4]
 8003ba2:	0849      	lsrs	r1, r1, #1
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	4605      	mov	r5, r0
 8003baa:	eb12 0804 	adds.w	r8, r2, r4
 8003bae:	eb43 0905 	adc.w	r9, r3, r5
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	469a      	mov	sl, r3
 8003bba:	4693      	mov	fp, r2
 8003bbc:	4652      	mov	r2, sl
 8003bbe:	465b      	mov	r3, fp
 8003bc0:	4640      	mov	r0, r8
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	f7fc fb28 	bl	8000218 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4613      	mov	r3, r2
 8003bce:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd6:	d308      	bcc.n	8003bea <UART_SetConfig+0x3d2>
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bde:	d204      	bcs.n	8003bea <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6a3a      	ldr	r2, [r7, #32]
 8003be6:	60da      	str	r2, [r3, #12]
 8003be8:	e0c8      	b.n	8003d7c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bf0:	e0c4      	b.n	8003d7c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfa:	d167      	bne.n	8003ccc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003bfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d828      	bhi.n	8003c56 <UART_SetConfig+0x43e>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <UART_SetConfig+0x3f4>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c31 	.word	0x08003c31
 8003c10:	08003c39 	.word	0x08003c39
 8003c14:	08003c41 	.word	0x08003c41
 8003c18:	08003c57 	.word	0x08003c57
 8003c1c:	08003c47 	.word	0x08003c47
 8003c20:	08003c57 	.word	0x08003c57
 8003c24:	08003c57 	.word	0x08003c57
 8003c28:	08003c57 	.word	0x08003c57
 8003c2c:	08003c4f 	.word	0x08003c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c30:	f7fe fc28 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8003c34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c36:	e014      	b.n	8003c62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c38:	f7fe fc3a 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8003c3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c3e:	e010      	b.n	8003c62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c40:	4b5a      	ldr	r3, [pc, #360]	; (8003dac <UART_SetConfig+0x594>)
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c44:	e00d      	b.n	8003c62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c46:	f7fe fbaf 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8003c4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c4c:	e009      	b.n	8003c62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c54:	e005      	b.n	8003c62 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8089 	beq.w	8003d7c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	4a4e      	ldr	r2, [pc, #312]	; (8003da8 <UART_SetConfig+0x590>)
 8003c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c74:	461a      	mov	r2, r3
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c7c:	005a      	lsls	r2, r3, #1
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	441a      	add	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	2b0f      	cmp	r3, #15
 8003c94:	d916      	bls.n	8003cc4 <UART_SetConfig+0x4ac>
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d212      	bcs.n	8003cc4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	f023 030f 	bic.w	r3, r3, #15
 8003ca6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	085b      	lsrs	r3, r3, #1
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	8bfb      	ldrh	r3, [r7, #30]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	8bfa      	ldrh	r2, [r7, #30]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	e05b      	b.n	8003d7c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003cca:	e057      	b.n	8003d7c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ccc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d828      	bhi.n	8003d26 <UART_SetConfig+0x50e>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <UART_SetConfig+0x4c4>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003d01 	.word	0x08003d01
 8003ce0:	08003d09 	.word	0x08003d09
 8003ce4:	08003d11 	.word	0x08003d11
 8003ce8:	08003d27 	.word	0x08003d27
 8003cec:	08003d17 	.word	0x08003d17
 8003cf0:	08003d27 	.word	0x08003d27
 8003cf4:	08003d27 	.word	0x08003d27
 8003cf8:	08003d27 	.word	0x08003d27
 8003cfc:	08003d1f 	.word	0x08003d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d00:	f7fe fbc0 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8003d04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d06:	e014      	b.n	8003d32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d08:	f7fe fbd2 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8003d0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d0e:	e010      	b.n	8003d32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d10:	4b26      	ldr	r3, [pc, #152]	; (8003dac <UART_SetConfig+0x594>)
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d14:	e00d      	b.n	8003d32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d16:	f7fe fb47 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8003d1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d1c:	e009      	b.n	8003d32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d24:	e005      	b.n	8003d32 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d30:	bf00      	nop
    }

    if (pclk != 0U)
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d021      	beq.n	8003d7c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	4a1a      	ldr	r2, [pc, #104]	; (8003da8 <UART_SetConfig+0x590>)
 8003d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d42:	461a      	mov	r2, r3
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	441a      	add	r2, r3
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	d909      	bls.n	8003d76 <UART_SetConfig+0x55e>
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d68:	d205      	bcs.n	8003d76 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60da      	str	r2, [r3, #12]
 8003d74:	e002      	b.n	8003d7c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003d98:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3730      	adds	r7, #48	; 0x30
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	08004744 	.word	0x08004744
 8003dac:	00f42400 	.word	0x00f42400

08003db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eae:	d10a      	bne.n	8003ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f04:	f7fd faac 	bl	8001460 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d10e      	bne.n	8003f36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f82f 	bl	8003f8a <UART_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e025      	b.n	8003f82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d10e      	bne.n	8003f62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f819 	bl	8003f8a <UART_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e00f      	b.n	8003f82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b09c      	sub	sp, #112	; 0x70
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	4613      	mov	r3, r2
 8003f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9a:	e0a9      	b.n	80040f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa2:	f000 80a5 	beq.w	80040f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa6:	f7fd fa5b 	bl	8001460 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d302      	bcc.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x32>
 8003fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d140      	bne.n	800403e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fe0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e6      	bne.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	663b      	str	r3, [r7, #96]	; 0x60
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3308      	adds	r3, #8
 800400c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800400e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004010:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800401c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e5      	bne.n	8003fee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e069      	b.n	8004112 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d051      	beq.n	80040f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405a:	d149      	bne.n	80040f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004064:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800407a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
 8004086:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800408a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e6      	bne.n	8004066 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3308      	adds	r3, #8
 800409e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	613b      	str	r3, [r7, #16]
   return(result);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3308      	adds	r3, #8
 80040b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040b8:	623a      	str	r2, [r7, #32]
 80040ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	69f9      	ldr	r1, [r7, #28]
 80040be:	6a3a      	ldr	r2, [r7, #32]
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e010      	b.n	8004112 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4013      	ands	r3, r2
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	429a      	cmp	r2, r3
 800410c:	f43f af46 	beq.w	8003f9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3770      	adds	r7, #112	; 0x70
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800411a:	b480      	push	{r7}
 800411c:	b085      	sub	sp, #20
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_UARTEx_DisableFifoMode+0x16>
 800412c:	2302      	movs	r3, #2
 800412e:	e027      	b.n	8004180 <HAL_UARTEx_DisableFifoMode+0x66>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2224      	movs	r2, #36	; 0x24
 800413c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800415e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e02d      	b.n	8004200 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	; 0x24
 80041b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f84f 	bl	8004284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800421c:	2302      	movs	r3, #2
 800421e:	e02d      	b.n	800427c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2224      	movs	r2, #36	; 0x24
 800422c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f811 	bl	8004284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004290:	2b00      	cmp	r3, #0
 8004292:	d108      	bne.n	80042a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042a4:	e031      	b.n	800430a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042a6:	2308      	movs	r3, #8
 80042a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042aa:	2308      	movs	r3, #8
 80042ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	0e5b      	lsrs	r3, r3, #25
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	0f5b      	lsrs	r3, r3, #29
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042ce:	7bbb      	ldrb	r3, [r7, #14]
 80042d0:	7b3a      	ldrb	r2, [r7, #12]
 80042d2:	4911      	ldr	r1, [pc, #68]	; (8004318 <UARTEx_SetNbDataToProcess+0x94>)
 80042d4:	5c8a      	ldrb	r2, [r1, r2]
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80042da:	7b3a      	ldrb	r2, [r7, #12]
 80042dc:	490f      	ldr	r1, [pc, #60]	; (800431c <UARTEx_SetNbDataToProcess+0x98>)
 80042de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	7b7a      	ldrb	r2, [r7, #13]
 80042f0:	4909      	ldr	r1, [pc, #36]	; (8004318 <UARTEx_SetNbDataToProcess+0x94>)
 80042f2:	5c8a      	ldrb	r2, [r1, r2]
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80042f8:	7b7a      	ldrb	r2, [r7, #13]
 80042fa:	4908      	ldr	r1, [pc, #32]	; (800431c <UARTEx_SetNbDataToProcess+0x98>)
 80042fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8004302:	b29a      	uxth	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	0800475c 	.word	0x0800475c
 800431c:	08004764 	.word	0x08004764

08004320 <__errno>:
 8004320:	4b01      	ldr	r3, [pc, #4]	; (8004328 <__errno+0x8>)
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	2000000c 	.word	0x2000000c

0800432c <__libc_init_array>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	4d0d      	ldr	r5, [pc, #52]	; (8004364 <__libc_init_array+0x38>)
 8004330:	4c0d      	ldr	r4, [pc, #52]	; (8004368 <__libc_init_array+0x3c>)
 8004332:	1b64      	subs	r4, r4, r5
 8004334:	10a4      	asrs	r4, r4, #2
 8004336:	2600      	movs	r6, #0
 8004338:	42a6      	cmp	r6, r4
 800433a:	d109      	bne.n	8004350 <__libc_init_array+0x24>
 800433c:	4d0b      	ldr	r5, [pc, #44]	; (800436c <__libc_init_array+0x40>)
 800433e:	4c0c      	ldr	r4, [pc, #48]	; (8004370 <__libc_init_array+0x44>)
 8004340:	f000 f8e8 	bl	8004514 <_init>
 8004344:	1b64      	subs	r4, r4, r5
 8004346:	10a4      	asrs	r4, r4, #2
 8004348:	2600      	movs	r6, #0
 800434a:	42a6      	cmp	r6, r4
 800434c:	d105      	bne.n	800435a <__libc_init_array+0x2e>
 800434e:	bd70      	pop	{r4, r5, r6, pc}
 8004350:	f855 3b04 	ldr.w	r3, [r5], #4
 8004354:	4798      	blx	r3
 8004356:	3601      	adds	r6, #1
 8004358:	e7ee      	b.n	8004338 <__libc_init_array+0xc>
 800435a:	f855 3b04 	ldr.w	r3, [r5], #4
 800435e:	4798      	blx	r3
 8004360:	3601      	adds	r6, #1
 8004362:	e7f2      	b.n	800434a <__libc_init_array+0x1e>
 8004364:	08004774 	.word	0x08004774
 8004368:	08004774 	.word	0x08004774
 800436c:	08004774 	.word	0x08004774
 8004370:	08004778 	.word	0x08004778

08004374 <malloc>:
 8004374:	4b02      	ldr	r3, [pc, #8]	; (8004380 <malloc+0xc>)
 8004376:	4601      	mov	r1, r0
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	f000 b839 	b.w	80043f0 <_malloc_r>
 800437e:	bf00      	nop
 8004380:	2000000c 	.word	0x2000000c

08004384 <memcpy>:
 8004384:	440a      	add	r2, r1
 8004386:	4291      	cmp	r1, r2
 8004388:	f100 33ff 	add.w	r3, r0, #4294967295
 800438c:	d100      	bne.n	8004390 <memcpy+0xc>
 800438e:	4770      	bx	lr
 8004390:	b510      	push	{r4, lr}
 8004392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800439a:	4291      	cmp	r1, r2
 800439c:	d1f9      	bne.n	8004392 <memcpy+0xe>
 800439e:	bd10      	pop	{r4, pc}

080043a0 <memset>:
 80043a0:	4402      	add	r2, r0
 80043a2:	4603      	mov	r3, r0
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d100      	bne.n	80043aa <memset+0xa>
 80043a8:	4770      	bx	lr
 80043aa:	f803 1b01 	strb.w	r1, [r3], #1
 80043ae:	e7f9      	b.n	80043a4 <memset+0x4>

080043b0 <sbrk_aligned>:
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	4e0e      	ldr	r6, [pc, #56]	; (80043ec <sbrk_aligned+0x3c>)
 80043b4:	460c      	mov	r4, r1
 80043b6:	6831      	ldr	r1, [r6, #0]
 80043b8:	4605      	mov	r5, r0
 80043ba:	b911      	cbnz	r1, 80043c2 <sbrk_aligned+0x12>
 80043bc:	f000 f88c 	bl	80044d8 <_sbrk_r>
 80043c0:	6030      	str	r0, [r6, #0]
 80043c2:	4621      	mov	r1, r4
 80043c4:	4628      	mov	r0, r5
 80043c6:	f000 f887 	bl	80044d8 <_sbrk_r>
 80043ca:	1c43      	adds	r3, r0, #1
 80043cc:	d00a      	beq.n	80043e4 <sbrk_aligned+0x34>
 80043ce:	1cc4      	adds	r4, r0, #3
 80043d0:	f024 0403 	bic.w	r4, r4, #3
 80043d4:	42a0      	cmp	r0, r4
 80043d6:	d007      	beq.n	80043e8 <sbrk_aligned+0x38>
 80043d8:	1a21      	subs	r1, r4, r0
 80043da:	4628      	mov	r0, r5
 80043dc:	f000 f87c 	bl	80044d8 <_sbrk_r>
 80043e0:	3001      	adds	r0, #1
 80043e2:	d101      	bne.n	80043e8 <sbrk_aligned+0x38>
 80043e4:	f04f 34ff 	mov.w	r4, #4294967295
 80043e8:	4620      	mov	r0, r4
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	2000018c 	.word	0x2000018c

080043f0 <_malloc_r>:
 80043f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f4:	1ccd      	adds	r5, r1, #3
 80043f6:	f025 0503 	bic.w	r5, r5, #3
 80043fa:	3508      	adds	r5, #8
 80043fc:	2d0c      	cmp	r5, #12
 80043fe:	bf38      	it	cc
 8004400:	250c      	movcc	r5, #12
 8004402:	2d00      	cmp	r5, #0
 8004404:	4607      	mov	r7, r0
 8004406:	db01      	blt.n	800440c <_malloc_r+0x1c>
 8004408:	42a9      	cmp	r1, r5
 800440a:	d905      	bls.n	8004418 <_malloc_r+0x28>
 800440c:	230c      	movs	r3, #12
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	2600      	movs	r6, #0
 8004412:	4630      	mov	r0, r6
 8004414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004418:	4e2e      	ldr	r6, [pc, #184]	; (80044d4 <_malloc_r+0xe4>)
 800441a:	f000 f86d 	bl	80044f8 <__malloc_lock>
 800441e:	6833      	ldr	r3, [r6, #0]
 8004420:	461c      	mov	r4, r3
 8004422:	bb34      	cbnz	r4, 8004472 <_malloc_r+0x82>
 8004424:	4629      	mov	r1, r5
 8004426:	4638      	mov	r0, r7
 8004428:	f7ff ffc2 	bl	80043b0 <sbrk_aligned>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	4604      	mov	r4, r0
 8004430:	d14d      	bne.n	80044ce <_malloc_r+0xde>
 8004432:	6834      	ldr	r4, [r6, #0]
 8004434:	4626      	mov	r6, r4
 8004436:	2e00      	cmp	r6, #0
 8004438:	d140      	bne.n	80044bc <_malloc_r+0xcc>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	4631      	mov	r1, r6
 800443e:	4638      	mov	r0, r7
 8004440:	eb04 0803 	add.w	r8, r4, r3
 8004444:	f000 f848 	bl	80044d8 <_sbrk_r>
 8004448:	4580      	cmp	r8, r0
 800444a:	d13a      	bne.n	80044c2 <_malloc_r+0xd2>
 800444c:	6821      	ldr	r1, [r4, #0]
 800444e:	3503      	adds	r5, #3
 8004450:	1a6d      	subs	r5, r5, r1
 8004452:	f025 0503 	bic.w	r5, r5, #3
 8004456:	3508      	adds	r5, #8
 8004458:	2d0c      	cmp	r5, #12
 800445a:	bf38      	it	cc
 800445c:	250c      	movcc	r5, #12
 800445e:	4629      	mov	r1, r5
 8004460:	4638      	mov	r0, r7
 8004462:	f7ff ffa5 	bl	80043b0 <sbrk_aligned>
 8004466:	3001      	adds	r0, #1
 8004468:	d02b      	beq.n	80044c2 <_malloc_r+0xd2>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	442b      	add	r3, r5
 800446e:	6023      	str	r3, [r4, #0]
 8004470:	e00e      	b.n	8004490 <_malloc_r+0xa0>
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	1b52      	subs	r2, r2, r5
 8004476:	d41e      	bmi.n	80044b6 <_malloc_r+0xc6>
 8004478:	2a0b      	cmp	r2, #11
 800447a:	d916      	bls.n	80044aa <_malloc_r+0xba>
 800447c:	1961      	adds	r1, r4, r5
 800447e:	42a3      	cmp	r3, r4
 8004480:	6025      	str	r5, [r4, #0]
 8004482:	bf18      	it	ne
 8004484:	6059      	strne	r1, [r3, #4]
 8004486:	6863      	ldr	r3, [r4, #4]
 8004488:	bf08      	it	eq
 800448a:	6031      	streq	r1, [r6, #0]
 800448c:	5162      	str	r2, [r4, r5]
 800448e:	604b      	str	r3, [r1, #4]
 8004490:	4638      	mov	r0, r7
 8004492:	f104 060b 	add.w	r6, r4, #11
 8004496:	f000 f835 	bl	8004504 <__malloc_unlock>
 800449a:	f026 0607 	bic.w	r6, r6, #7
 800449e:	1d23      	adds	r3, r4, #4
 80044a0:	1af2      	subs	r2, r6, r3
 80044a2:	d0b6      	beq.n	8004412 <_malloc_r+0x22>
 80044a4:	1b9b      	subs	r3, r3, r6
 80044a6:	50a3      	str	r3, [r4, r2]
 80044a8:	e7b3      	b.n	8004412 <_malloc_r+0x22>
 80044aa:	6862      	ldr	r2, [r4, #4]
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	bf0c      	ite	eq
 80044b0:	6032      	streq	r2, [r6, #0]
 80044b2:	605a      	strne	r2, [r3, #4]
 80044b4:	e7ec      	b.n	8004490 <_malloc_r+0xa0>
 80044b6:	4623      	mov	r3, r4
 80044b8:	6864      	ldr	r4, [r4, #4]
 80044ba:	e7b2      	b.n	8004422 <_malloc_r+0x32>
 80044bc:	4634      	mov	r4, r6
 80044be:	6876      	ldr	r6, [r6, #4]
 80044c0:	e7b9      	b.n	8004436 <_malloc_r+0x46>
 80044c2:	230c      	movs	r3, #12
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	4638      	mov	r0, r7
 80044c8:	f000 f81c 	bl	8004504 <__malloc_unlock>
 80044cc:	e7a1      	b.n	8004412 <_malloc_r+0x22>
 80044ce:	6025      	str	r5, [r4, #0]
 80044d0:	e7de      	b.n	8004490 <_malloc_r+0xa0>
 80044d2:	bf00      	nop
 80044d4:	20000188 	.word	0x20000188

080044d8 <_sbrk_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4d06      	ldr	r5, [pc, #24]	; (80044f4 <_sbrk_r+0x1c>)
 80044dc:	2300      	movs	r3, #0
 80044de:	4604      	mov	r4, r0
 80044e0:	4608      	mov	r0, r1
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	f7fc fee6 	bl	80012b4 <_sbrk>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_sbrk_r+0x1a>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_sbrk_r+0x1a>
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	20000190 	.word	0x20000190

080044f8 <__malloc_lock>:
 80044f8:	4801      	ldr	r0, [pc, #4]	; (8004500 <__malloc_lock+0x8>)
 80044fa:	f000 b809 	b.w	8004510 <__retarget_lock_acquire_recursive>
 80044fe:	bf00      	nop
 8004500:	20000194 	.word	0x20000194

08004504 <__malloc_unlock>:
 8004504:	4801      	ldr	r0, [pc, #4]	; (800450c <__malloc_unlock+0x8>)
 8004506:	f000 b804 	b.w	8004512 <__retarget_lock_release_recursive>
 800450a:	bf00      	nop
 800450c:	20000194 	.word	0x20000194

08004510 <__retarget_lock_acquire_recursive>:
 8004510:	4770      	bx	lr

08004512 <__retarget_lock_release_recursive>:
 8004512:	4770      	bx	lr

08004514 <_init>:
 8004514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004516:	bf00      	nop
 8004518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451a:	bc08      	pop	{r3}
 800451c:	469e      	mov	lr, r3
 800451e:	4770      	bx	lr

08004520 <_fini>:
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	bf00      	nop
 8004524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004526:	bc08      	pop	{r3}
 8004528:	469e      	mov	lr, r3
 800452a:	4770      	bx	lr
