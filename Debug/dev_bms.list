
dev_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d94  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08008f6c  08008f6c  00018f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093c0  080093c0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080093c0  080093c0  000193c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093c8  080093c8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c8  080093c8  000193c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093cc  080093cc  000193cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080093d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  2000008c  0800945c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  0800945c  0002083c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a31e  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e3  00000000  00000000  0003a41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  0003d800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116a  00000000  00000000  0003ee50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002086b  00000000  00000000  0003ffba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab69  00000000  00000000  00060825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ceae1  00000000  00000000  0007b38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000635c  00000000  00000000  00149e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001501cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000008c 	.word	0x2000008c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008f54 	.word	0x08008f54

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000090 	.word	0x20000090
 8000214:	08008f54 	.word	0x08008f54

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 b970 	b.w	8000e88 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9e08      	ldr	r6, [sp, #32]
 8000bc6:	460d      	mov	r5, r1
 8000bc8:	4604      	mov	r4, r0
 8000bca:	460f      	mov	r7, r1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d14a      	bne.n	8000c66 <__udivmoddi4+0xa6>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4694      	mov	ip, r2
 8000bd4:	d965      	bls.n	8000ca2 <__udivmoddi4+0xe2>
 8000bd6:	fab2 f382 	clz	r3, r2
 8000bda:	b143      	cbz	r3, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000be0:	f1c3 0220 	rsb	r2, r3, #32
 8000be4:	409f      	lsls	r7, r3
 8000be6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bea:	4317      	orrs	r7, r2
 8000bec:	409c      	lsls	r4, r3
 8000bee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bf2:	fa1f f58c 	uxth.w	r5, ip
 8000bf6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bfa:	0c22      	lsrs	r2, r4, #16
 8000bfc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c00:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c04:	fb01 f005 	mul.w	r0, r1, r5
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	d90a      	bls.n	8000c22 <__udivmoddi4+0x62>
 8000c0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c10:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c14:	f080 811c 	bcs.w	8000e50 <__udivmoddi4+0x290>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f240 8119 	bls.w	8000e50 <__udivmoddi4+0x290>
 8000c1e:	3902      	subs	r1, #2
 8000c20:	4462      	add	r2, ip
 8000c22:	1a12      	subs	r2, r2, r0
 8000c24:	b2a4      	uxth	r4, r4
 8000c26:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c2a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c32:	fb00 f505 	mul.w	r5, r0, r5
 8000c36:	42a5      	cmp	r5, r4
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x90>
 8000c3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c42:	f080 8107 	bcs.w	8000e54 <__udivmoddi4+0x294>
 8000c46:	42a5      	cmp	r5, r4
 8000c48:	f240 8104 	bls.w	8000e54 <__udivmoddi4+0x294>
 8000c4c:	4464      	add	r4, ip
 8000c4e:	3802      	subs	r0, #2
 8000c50:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c54:	1b64      	subs	r4, r4, r5
 8000c56:	2100      	movs	r1, #0
 8000c58:	b11e      	cbz	r6, 8000c62 <__udivmoddi4+0xa2>
 8000c5a:	40dc      	lsrs	r4, r3
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0xbc>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	f000 80ed 	beq.w	8000e4a <__udivmoddi4+0x28a>
 8000c70:	2100      	movs	r1, #0
 8000c72:	e9c6 0500 	strd	r0, r5, [r6]
 8000c76:	4608      	mov	r0, r1
 8000c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7c:	fab3 f183 	clz	r1, r3
 8000c80:	2900      	cmp	r1, #0
 8000c82:	d149      	bne.n	8000d18 <__udivmoddi4+0x158>
 8000c84:	42ab      	cmp	r3, r5
 8000c86:	d302      	bcc.n	8000c8e <__udivmoddi4+0xce>
 8000c88:	4282      	cmp	r2, r0
 8000c8a:	f200 80f8 	bhi.w	8000e7e <__udivmoddi4+0x2be>
 8000c8e:	1a84      	subs	r4, r0, r2
 8000c90:	eb65 0203 	sbc.w	r2, r5, r3
 8000c94:	2001      	movs	r0, #1
 8000c96:	4617      	mov	r7, r2
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d0e2      	beq.n	8000c62 <__udivmoddi4+0xa2>
 8000c9c:	e9c6 4700 	strd	r4, r7, [r6]
 8000ca0:	e7df      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000ca2:	b902      	cbnz	r2, 8000ca6 <__udivmoddi4+0xe6>
 8000ca4:	deff      	udf	#255	; 0xff
 8000ca6:	fab2 f382 	clz	r3, r2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f040 8090 	bne.w	8000dd0 <__udivmoddi4+0x210>
 8000cb0:	1a8a      	subs	r2, r1, r2
 8000cb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	2101      	movs	r1, #1
 8000cbc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cc0:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc4:	0c22      	lsrs	r2, r4, #16
 8000cc6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cca:	fb0e f005 	mul.w	r0, lr, r5
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x124>
 8000cd2:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x122>
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	f200 80cb 	bhi.w	8000e78 <__udivmoddi4+0x2b8>
 8000ce2:	4645      	mov	r5, r8
 8000ce4:	1a12      	subs	r2, r2, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cec:	fb07 2210 	mls	r2, r7, r0, r2
 8000cf0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x14e>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d04:	d202      	bcs.n	8000d0c <__udivmoddi4+0x14c>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f200 80bb 	bhi.w	8000e82 <__udivmoddi4+0x2c2>
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d16:	e79f      	b.n	8000c58 <__udivmoddi4+0x98>
 8000d18:	f1c1 0720 	rsb	r7, r1, #32
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d26:	fa05 f401 	lsl.w	r4, r5, r1
 8000d2a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2e:	40fd      	lsrs	r5, r7
 8000d30:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d34:	4323      	orrs	r3, r4
 8000d36:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d3a:	fa1f fe8c 	uxth.w	lr, ip
 8000d3e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d42:	0c1c      	lsrs	r4, r3, #16
 8000d44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d48:	fb08 f50e 	mul.w	r5, r8, lr
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d52:	fa00 f001 	lsl.w	r0, r0, r1
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b0>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d60:	f080 8088 	bcs.w	8000e74 <__udivmoddi4+0x2b4>
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	f240 8085 	bls.w	8000e74 <__udivmoddi4+0x2b4>
 8000d6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6e:	4464      	add	r4, ip
 8000d70:	1b64      	subs	r4, r4, r5
 8000d72:	b29d      	uxth	r5, r3
 8000d74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d78:	fb09 4413 	mls	r4, r9, r3, r4
 8000d7c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d80:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d84:	45a6      	cmp	lr, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1da>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d90:	d26c      	bcs.n	8000e6c <__udivmoddi4+0x2ac>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	d96a      	bls.n	8000e6c <__udivmoddi4+0x2ac>
 8000d96:	3b02      	subs	r3, #2
 8000d98:	4464      	add	r4, ip
 8000d9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9e:	fba3 9502 	umull	r9, r5, r3, r2
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	42ac      	cmp	r4, r5
 8000da8:	46c8      	mov	r8, r9
 8000daa:	46ae      	mov	lr, r5
 8000dac:	d356      	bcc.n	8000e5c <__udivmoddi4+0x29c>
 8000dae:	d053      	beq.n	8000e58 <__udivmoddi4+0x298>
 8000db0:	b156      	cbz	r6, 8000dc8 <__udivmoddi4+0x208>
 8000db2:	ebb0 0208 	subs.w	r2, r0, r8
 8000db6:	eb64 040e 	sbc.w	r4, r4, lr
 8000dba:	fa04 f707 	lsl.w	r7, r4, r7
 8000dbe:	40ca      	lsrs	r2, r1
 8000dc0:	40cc      	lsrs	r4, r1
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	2100      	movs	r1, #0
 8000dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd0:	f1c3 0120 	rsb	r1, r3, #32
 8000dd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd8:	fa20 f201 	lsr.w	r2, r0, r1
 8000ddc:	fa25 f101 	lsr.w	r1, r5, r1
 8000de0:	409d      	lsls	r5, r3
 8000de2:	432a      	orrs	r2, r5
 8000de4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de8:	fa1f fe8c 	uxth.w	lr, ip
 8000dec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df0:	fb07 1510 	mls	r5, r7, r0, r1
 8000df4:	0c11      	lsrs	r1, r2, #16
 8000df6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dfa:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfe:	428d      	cmp	r5, r1
 8000e00:	fa04 f403 	lsl.w	r4, r4, r3
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x258>
 8000e06:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e0e:	d22f      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e10:	428d      	cmp	r5, r1
 8000e12:	d92d      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e14:	3802      	subs	r0, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	1b49      	subs	r1, r1, r5
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e20:	fb07 1115 	mls	r1, r7, r5, r1
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	fb05 f10e 	mul.w	r1, r5, lr
 8000e2c:	4291      	cmp	r1, r2
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x282>
 8000e30:	eb1c 0202 	adds.w	r2, ip, r2
 8000e34:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e38:	d216      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000e3a:	4291      	cmp	r1, r2
 8000e3c:	d914      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000e3e:	3d02      	subs	r5, #2
 8000e40:	4462      	add	r2, ip
 8000e42:	1a52      	subs	r2, r2, r1
 8000e44:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e48:	e738      	b.n	8000cbc <__udivmoddi4+0xfc>
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000e50:	4639      	mov	r1, r7
 8000e52:	e6e6      	b.n	8000c22 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e6fb      	b.n	8000c50 <__udivmoddi4+0x90>
 8000e58:	4548      	cmp	r0, r9
 8000e5a:	d2a9      	bcs.n	8000db0 <__udivmoddi4+0x1f0>
 8000e5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e64:	3b01      	subs	r3, #1
 8000e66:	e7a3      	b.n	8000db0 <__udivmoddi4+0x1f0>
 8000e68:	4645      	mov	r5, r8
 8000e6a:	e7ea      	b.n	8000e42 <__udivmoddi4+0x282>
 8000e6c:	462b      	mov	r3, r5
 8000e6e:	e794      	b.n	8000d9a <__udivmoddi4+0x1da>
 8000e70:	4640      	mov	r0, r8
 8000e72:	e7d1      	b.n	8000e18 <__udivmoddi4+0x258>
 8000e74:	46d0      	mov	r8, sl
 8000e76:	e77b      	b.n	8000d70 <__udivmoddi4+0x1b0>
 8000e78:	3d02      	subs	r5, #2
 8000e7a:	4462      	add	r2, ip
 8000e7c:	e732      	b.n	8000ce4 <__udivmoddi4+0x124>
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e70a      	b.n	8000c98 <__udivmoddi4+0xd8>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e742      	b.n	8000d0e <__udivmoddi4+0x14e>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <WakeIdle>:
#define T_WAKE_MAX		400
#define T_REFUP_MAX		4400
#define T_CYCLE_FAST_MAX	1185	// Measure 12 Cells

void WakeIdle(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000e90:	20ff      	movs	r0, #255	; 0xff
 8000e92:	f001 fbaf 	bl	80025f4 <spi_write_read_byte>
	delay_u(IC_NUM * T_READY);
 8000e96:	2050      	movs	r0, #80	; 0x50
 8000e98:	f001 fb78 	bl	800258c <delay_u>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <WakeUp>:

void WakeUp(void){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000ea4:	20ff      	movs	r0, #255	; 0xff
 8000ea6:	f001 fba5 	bl	80025f4 <spi_write_read_byte>
	delay_u(IC_NUM * T_WAKE_MAX);
 8000eaa:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 8000eae:	f001 fb6d 	bl	800258c <delay_u>

#if ((IC_NUM * T_WAKE_MAX) >= T_IDLE_MIN)
	spi_write_read_byte(0xFF);
	delay_u(IC_NUM * T_READY);
#endif
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <initialize>:
uint8_t ADCV[2]; //!< Cell Voltage conversion command
uint8_t ADAX[2]; //!< GPIO conversion command
uint8_t ADSTAT[2]; //!< STAT conversion command

void initialize(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af02      	add	r7, sp, #8
	init(MD_NORMAL,DCP_DISABLED,CELL_CH_ALL,AUX_CH_ALL,STS_CH_ALL);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f000 f804 	bl	8000ed4 <init>
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <init>:
				  uint8_t DCP,	//Discharge Permit
				  uint8_t CH,	//Cell Channels to be measured
				  uint8_t CHG,	//GPIO Channels to be measured
				  uint8_t CHST	//Status Channels to be measured
				  )
{
 8000ed4:	b490      	push	{r4, r7}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	4608      	mov	r0, r1
 8000ede:	4611      	mov	r1, r2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4623      	mov	r3, r4
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71bb      	strb	r3, [r7, #6]
 8000eea:	460b      	mov	r3, r1
 8000eec:	717b      	strb	r3, [r7, #5]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	713b      	strb	r3, [r7, #4]
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	105b      	asrs	r3, r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
	ADCV[0] = md_bits + 0x02;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	3302      	adds	r3, #2
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <init+0xb8>)
 8000f06:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	01db      	lsls	r3, r3, #7
 8000f0c:	73fb      	strb	r3, [r7, #15]
	ADCV[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	4413      	add	r3, r2
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	797b      	ldrb	r3, [r7, #5]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	3360      	adds	r3, #96	; 0x60
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <init+0xb8>)
 8000f26:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	105b      	asrs	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
	ADAX[0] = md_bits + 0x04;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	3304      	adds	r3, #4
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <init+0xbc>)
 8000f3c:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	01db      	lsls	r3, r3, #7
 8000f42:	73fb      	strb	r3, [r7, #15]
	ADAX[1] = md_bits + 0x60 + CHG;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	793b      	ldrb	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3360      	adds	r3, #96	; 0x60
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <init+0xbc>)
 8000f52:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
	ADSTAT[0] = md_bits + 0x04;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	3304      	adds	r3, #4
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <init+0xc0>)
 8000f68:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	01db      	lsls	r3, r3, #7
 8000f6e:	73fb      	strb	r3, [r7, #15]
	ADSTAT[1] = md_bits + 0x68 + CHST;
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	7e3b      	ldrb	r3, [r7, #24]
 8000f74:	4413      	add	r3, r2
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	3368      	adds	r3, #104	; 0x68
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <init+0xc0>)
 8000f7e:	705a      	strb	r2, [r3, #1]
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc90      	pop	{r4, r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200000a8 	.word	0x200000a8
 8000f90:	200000ac 	.word	0x200000ac
 8000f94:	200000b0 	.word	0x200000b0

08000f98 <pec15_calc>:

uint16_t pec15_calc(uint8_t len,	//Number of bytes that will be used to calculate a PEC
                    uint8_t *data	//Array of data that will be used to calculate  a PEC
                   )
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder, addr;

  remainder = 16;					//initialize the PEC
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fa8:	2300      	movs	r3, #0
 8000faa:	737b      	strb	r3, [r7, #13]
 8000fac:	e018      	b.n	8000fe0 <pec15_calc+0x48>
  {
    addr = ((remainder>>7)^data[i])&0xff;	//calculate PEC table address
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	09db      	lsrs	r3, r3, #7
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	7b7b      	ldrb	r3, [r7, #13]
 8000fb6:	6839      	ldr	r1, [r7, #0]
 8000fb8:	440b      	add	r3, r1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4053      	eors	r3, r2
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	817b      	strh	r3, [r7, #10]
    remainder = (remainder<<8)^crc15Table[addr];
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	897b      	ldrh	r3, [r7, #10]
 8000fce:	490b      	ldr	r1, [pc, #44]	; (8000ffc <pec15_calc+0x64>)
 8000fd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4053      	eors	r3, r2
 8000fd8:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fda:	7b7b      	ldrb	r3, [r7, #13]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	737b      	strb	r3, [r7, #13]
 8000fe0:	7b7a      	ldrb	r2, [r7, #13]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d3e2      	bcc.n	8000fae <pec15_calc+0x16>
  }
  return(remainder*2);	//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000fe8:	89fb      	ldrh	r3, [r7, #14]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	b29b      	uxth	r3, r3
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	08008f6c 	.word	0x08008f6c

08001000 <wrcfg>:

void wrcfg(uint8_t total_ic,
				   uint8_t config[][6]
				  )
{
 8001000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001004:	b089      	sub	sp, #36	; 0x24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	6039      	str	r1, [r7, #0]
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	466b      	mov	r3, sp
 8001010:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 8001012:	2306      	movs	r3, #6
 8001014:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	3304      	adds	r3, #4
 800101e:	76fb      	strb	r3, [r7, #27]

#if DYNAMIC_MEM
	uint8_t *cmd;
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
#else
	uint8_t cmd[CMD_LEN];
 8001020:	7efb      	ldrb	r3, [r7, #27]
 8001022:	3b01      	subs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	7efb      	ldrb	r3, [r7, #27]
 8001028:	2200      	movs	r2, #0
 800102a:	4698      	mov	r8, r3
 800102c:	4691      	mov	r9, r2
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800103a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800103e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001042:	7efb      	ldrb	r3, [r7, #27]
 8001044:	2200      	movs	r2, #0
 8001046:	461c      	mov	r4, r3
 8001048:	4615      	mov	r5, r2
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	00eb      	lsls	r3, r5, #3
 8001054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001058:	00e2      	lsls	r2, r4, #3
 800105a:	7efb      	ldrb	r3, [r7, #27]
 800105c:	3307      	adds	r3, #7
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	ebad 0d03 	sub.w	sp, sp, r3
 8001066:	466b      	mov	r3, sp
 8001068:	3300      	adds	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	2201      	movs	r2, #1
 8001076:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x3d;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	223d      	movs	r2, #61	; 0x3d
 800107c:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6e;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	226e      	movs	r2, #110	; 0x6e
 8001082:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 8001084:	2304      	movs	r3, #4
 8001086:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	77bb      	strb	r3, [r7, #30]
 800108c:	e03c      	b.n	8001108 <wrcfg+0x108>
	{
		/* the last IC on the stack. The first configuration written is */
		/* received by the last IC in the daisy chain */

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 800108e:	2300      	movs	r3, #0
 8001090:	777b      	strb	r3, [r7, #29]
 8001092:	e012      	b.n	80010ba <wrcfg+0xba>
		{
			/* current_byte is the byte counter */

			cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 8001094:	7fba      	ldrb	r2, [r7, #30]
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	3b06      	subs	r3, #6
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	18d1      	adds	r1, r2, r3
 80010a4:	7f7a      	ldrb	r2, [r7, #29]
 80010a6:	7ffb      	ldrb	r3, [r7, #31]
 80010a8:	5c89      	ldrb	r1, [r1, r2]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80010ae:	7ffb      	ldrb	r3, [r7, #31]
 80010b0:	3301      	adds	r3, #1
 80010b2:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 80010b4:	7f7b      	ldrb	r3, [r7, #29]
 80010b6:	3301      	adds	r3, #1
 80010b8:	777b      	strb	r3, [r7, #29]
 80010ba:	7f7a      	ldrb	r2, [r7, #29]
 80010bc:	7f3b      	ldrb	r3, [r7, #28]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3e8      	bcc.n	8001094 <wrcfg+0x94>
		}
		cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 80010c2:	7fba      	ldrb	r2, [r7, #30]
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	3b06      	subs	r3, #6
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	461a      	mov	r2, r3
 80010d4:	7f3b      	ldrb	r3, [r7, #28]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <pec15_calc>
 80010de:	4603      	mov	r3, r0
 80010e0:	81fb      	strh	r3, [r7, #14]
		cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 80010e2:	89fb      	ldrh	r3, [r7, #14]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	7ffb      	ldrb	r3, [r7, #31]
 80010ea:	b2d1      	uxtb	r1, r2
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	54d1      	strb	r1, [r2, r3]
		cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 80010f0:	7ffb      	ldrb	r3, [r7, #31]
 80010f2:	3301      	adds	r3, #1
 80010f4:	89fa      	ldrh	r2, [r7, #14]
 80010f6:	b2d1      	uxtb	r1, r2
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 80010fc:	7ffb      	ldrb	r3, [r7, #31]
 80010fe:	3302      	adds	r3, #2
 8001100:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001102:	7fbb      	ldrb	r3, [r7, #30]
 8001104:	3b01      	subs	r3, #1
 8001106:	77bb      	strb	r3, [r7, #30]
 8001108:	7fbb      	ldrb	r3, [r7, #30]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1bf      	bne.n	800108e <wrcfg+0x8e>
	}

	uint8_t rx_data;
	WakeIdle();
 800110e:	f7ff febd 	bl	8000e8c <WakeIdle>
	//spi_write_array(CMD_LEN, cmd); //This function causes bad stuff!
	spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 8001112:	7ef8      	ldrb	r0, [r7, #27]
 8001114:	f107 030d 	add.w	r3, r7, #13
 8001118:	2200      	movs	r2, #0
 800111a:	6939      	ldr	r1, [r7, #16]
 800111c:	f001 faae 	bl	800267c <spi_write_then_read_array_ltc>
 8001120:	46b5      	mov	sp, r6

#if DYNAMIC_MEM
	free(cmd);
#endif
}
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800112c <rdcfg>:

int8_t rdcfg(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 800112c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001130:	b089      	sub	sp, #36	; 0x24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	6039      	str	r1, [r7, #0]
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	466b      	mov	r3, sp
 800113c:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 800113e:	2308      	movs	r3, #8
 8001140:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	77fb      	strb	r3, [r7, #31]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 8001146:	230c      	movs	r3, #12
 8001148:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 800114a:	7efb      	ldrb	r3, [r7, #27]
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	3b01      	subs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	7efb      	ldrb	r3, [r7, #27]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	461a      	mov	r2, r3
 8001158:	2300      	movs	r3, #0
 800115a:	4690      	mov	r8, r2
 800115c:	4699      	mov	r9, r3
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800116a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800116e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001172:	7efb      	ldrb	r3, [r7, #27]
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	461a      	mov	r2, r3
 8001178:	2300      	movs	r3, #0
 800117a:	4614      	mov	r4, r2
 800117c:	461d      	mov	r5, r3
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	00eb      	lsls	r3, r5, #3
 8001188:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800118c:	00e2      	lsls	r2, r4, #3
 800118e:	7efb      	ldrb	r3, [r7, #27]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	3307      	adds	r3, #7
 8001194:	08db      	lsrs	r3, r3, #3
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	ebad 0d03 	sub.w	sp, sp, r3
 800119c:	466b      	mov	r3, sp
 800119e:	3300      	adds	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 80011a2:	2300      	movs	r3, #0
 80011a4:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x02;
 80011a6:	2302      	movs	r3, #2
 80011a8:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x2b;
 80011aa:	232b      	movs	r3, #43	; 0x2b
 80011ac:	72bb      	strb	r3, [r7, #10]
	cmd[3] = 0x0a;
 80011ae:	230a      	movs	r3, #10
 80011b0:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 80011b2:	f7ff fe6b 	bl	8000e8c <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 80011b6:	7f3b      	ldrb	r3, [r7, #28]
 80011b8:	79fa      	ldrb	r2, [r7, #7]
 80011ba:	fb03 f202 	mul.w	r2, r3, r2
 80011be:	f107 0108 	add.w	r1, r7, #8
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	2004      	movs	r0, #4
 80011c6:	f001 fa59 	bl	800267c <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	77bb      	strb	r3, [r7, #30]
 80011ce:	e03a      	b.n	8001246 <rdcfg+0x11a>
	{
		// executes for each LTC6804 in the daisy chain and packs the data
		// into the r_config array as well as check the received Config data
		// for any bit errors

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	777b      	strb	r3, [r7, #29]
 80011d4:	e010      	b.n	80011f8 <rdcfg+0xcc>
		{
			r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 80011d6:	7f7a      	ldrb	r2, [r7, #29]
 80011d8:	7fbb      	ldrb	r3, [r7, #30]
 80011da:	7f39      	ldrb	r1, [r7, #28]
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	18d1      	adds	r1, r2, r3
 80011e2:	7fbb      	ldrb	r3, [r7, #30]
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	441a      	add	r2, r3
 80011ea:	7f7b      	ldrb	r3, [r7, #29]
 80011ec:	6938      	ldr	r0, [r7, #16]
 80011ee:	5c41      	ldrb	r1, [r0, r1]
 80011f0:	54d1      	strb	r1, [r2, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80011f2:	7f7b      	ldrb	r3, [r7, #29]
 80011f4:	3301      	adds	r3, #1
 80011f6:	777b      	strb	r3, [r7, #29]
 80011f8:	7f7a      	ldrb	r2, [r7, #29]
 80011fa:	7f3b      	ldrb	r3, [r7, #28]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3ea      	bcc.n	80011d6 <rdcfg+0xaa>
		}

		received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8001200:	7fbb      	ldrb	r3, [r7, #30]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	4413      	add	r3, r2
 8001208:	799b      	ldrb	r3, [r3, #6]
 800120a:	b29b      	uxth	r3, r3
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b29a      	uxth	r2, r3
 8001210:	7fbb      	ldrb	r3, [r7, #30]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	440b      	add	r3, r1
 8001218:	79db      	ldrb	r3, [r3, #7]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	81fb      	strh	r3, [r7, #14]
		data_pec = pec15_calc(6, &r_config[current_ic][0]);
 8001220:	7fbb      	ldrb	r3, [r7, #30]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4619      	mov	r1, r3
 800122a:	2006      	movs	r0, #6
 800122c:	f7ff feb4 	bl	8000f98 <pec15_calc>
 8001230:	4603      	mov	r3, r0
 8001232:	81bb      	strh	r3, [r7, #12]
		if (received_pec != data_pec)
 8001234:	89fa      	ldrh	r2, [r7, #14]
 8001236:	89bb      	ldrh	r3, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <rdcfg+0x114>
		{
			pec_error = -1;
 800123c:	23ff      	movs	r3, #255	; 0xff
 800123e:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 8001240:	7fbb      	ldrb	r3, [r7, #30]
 8001242:	3301      	adds	r3, #1
 8001244:	77bb      	strb	r3, [r7, #30]
 8001246:	7fba      	ldrb	r2, [r7, #30]
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	429a      	cmp	r2, r3
 800124c:	d3c0      	bcc.n	80011d0 <rdcfg+0xa4>
	}

#if DYNAMIC_MEM
	free(rx_data);
#endif
	return(pec_error);
 800124e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001252:	46b5      	mov	sp, r6
}
 8001254:	4618      	mov	r0, r3
 8001256:	3724      	adds	r7, #36	; 0x24
 8001258:	46bd      	mov	sp, r7
 800125a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800125e <wrcfgb>:

void wrcfgb(uint8_t total_ic,
				   uint8_t config[][6]
				  ){
 800125e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	466b      	mov	r3, sp
 800126e:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 8001270:	2306      	movs	r3, #6
 8001272:	773b      	strb	r3, [r7, #28]
		const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	3304      	adds	r3, #4
 800127c:	76fb      	strb	r3, [r7, #27]

	#if DYNAMIC_MEM
		uint8_t *cmd;
		cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
	#else
		uint8_t cmd[CMD_LEN];
 800127e:	7efb      	ldrb	r3, [r7, #27]
 8001280:	3b01      	subs	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	7efb      	ldrb	r3, [r7, #27]
 8001286:	2200      	movs	r2, #0
 8001288:	4698      	mov	r8, r3
 800128a:	4691      	mov	r9, r2
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001298:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800129c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012a0:	7efb      	ldrb	r3, [r7, #27]
 80012a2:	2200      	movs	r2, #0
 80012a4:	461c      	mov	r4, r3
 80012a6:	4615      	mov	r5, r2
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	00eb      	lsls	r3, r5, #3
 80012b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012b6:	00e2      	lsls	r2, r4, #3
 80012b8:	7efb      	ldrb	r3, [r7, #27]
 80012ba:	3307      	adds	r3, #7
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	ebad 0d03 	sub.w	sp, sp, r3
 80012c4:	466b      	mov	r3, sp
 80012c6:	3300      	adds	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
	#endif

		cmd[0] = 0x00;
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
		cmd[1] = 0x24;
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2224      	movs	r2, #36	; 0x24
 80012d4:	705a      	strb	r2, [r3, #1]
		//pec15_calc(2, cmd);
		cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	2002      	movs	r0, #2
 80012da:	f7ff fe5d 	bl	8000f98 <pec15_calc>
 80012de:	4603      	mov	r3, r0
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	709a      	strb	r2, [r3, #2]
		cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 80012ea:	6939      	ldr	r1, [r7, #16]
 80012ec:	2002      	movs	r0, #2
 80012ee:	f7ff fe53 	bl	8000f98 <pec15_calc>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	70da      	strb	r2, [r3, #3]

		cmd_index = 4;
 80012fa:	2304      	movs	r3, #4
 80012fc:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	77bb      	strb	r3, [r7, #30]
 8001302:	e03c      	b.n	800137e <wrcfgb+0x120>
		{
			/* the last IC on the stack. The first configuration written is */
			/* received by the last IC in the daisy chain */

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 8001304:	2300      	movs	r3, #0
 8001306:	777b      	strb	r3, [r7, #29]
 8001308:	e012      	b.n	8001330 <wrcfgb+0xd2>
			{
				/* current_byte is the byte counter */

				cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 800130a:	7fba      	ldrb	r2, [r7, #30]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	3b06      	subs	r3, #6
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	18d1      	adds	r1, r2, r3
 800131a:	7f7a      	ldrb	r2, [r7, #29]
 800131c:	7ffb      	ldrb	r3, [r7, #31]
 800131e:	5c89      	ldrb	r1, [r1, r2]
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	54d1      	strb	r1, [r2, r3]
				cmd_index = cmd_index + 1;
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	3301      	adds	r3, #1
 8001328:	77fb      	strb	r3, [r7, #31]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 800132a:	7f7b      	ldrb	r3, [r7, #29]
 800132c:	3301      	adds	r3, #1
 800132e:	777b      	strb	r3, [r7, #29]
 8001330:	7f7a      	ldrb	r2, [r7, #29]
 8001332:	7f3b      	ldrb	r3, [r7, #28]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3e8      	bcc.n	800130a <wrcfgb+0xac>
			}
			cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 8001338:	7fba      	ldrb	r2, [r7, #30]
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	3b06      	subs	r3, #6
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	4413      	add	r3, r2
 8001348:	461a      	mov	r2, r3
 800134a:	7f3b      	ldrb	r3, [r7, #28]
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fe22 	bl	8000f98 <pec15_calc>
 8001354:	4603      	mov	r3, r0
 8001356:	81fb      	strh	r3, [r7, #14]
			cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8001358:	89fb      	ldrh	r3, [r7, #14]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	b29a      	uxth	r2, r3
 800135e:	7ffb      	ldrb	r3, [r7, #31]
 8001360:	b2d1      	uxtb	r1, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	54d1      	strb	r1, [r2, r3]
			cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8001366:	7ffb      	ldrb	r3, [r7, #31]
 8001368:	3301      	adds	r3, #1
 800136a:	89fa      	ldrh	r2, [r7, #14]
 800136c:	b2d1      	uxtb	r1, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 2;
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	3302      	adds	r3, #2
 8001376:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001378:	7fbb      	ldrb	r3, [r7, #30]
 800137a:	3b01      	subs	r3, #1
 800137c:	77bb      	strb	r3, [r7, #30]
 800137e:	7fbb      	ldrb	r3, [r7, #30]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1bf      	bne.n	8001304 <wrcfgb+0xa6>
		}

		uint8_t rx_data;

		WakeIdle();
 8001384:	f7ff fd82 	bl	8000e8c <WakeIdle>
		spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 8001388:	7ef8      	ldrb	r0, [r7, #27]
 800138a:	f107 030d 	add.w	r3, r7, #13
 800138e:	2200      	movs	r2, #0
 8001390:	6939      	ldr	r1, [r7, #16]
 8001392:	f001 f973 	bl	800267c <spi_write_then_read_array_ltc>
 8001396:	46b5      	mov	sp, r6
#if DYNAMIC_MEM
	free(cmd);
#endif

}
 8001398:	bf00      	nop
 800139a:	3724      	adds	r7, #36	; 0x24
 800139c:	46bd      	mov	sp, r7
 800139e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080013a2 <rdcfgb>:

int8_t rdcfgb(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 80013a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	466b      	mov	r3, sp
 80013b2:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 80013b4:	2308      	movs	r3, #8
 80013b6:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	77fb      	strb	r3, [r7, #31]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 80013bc:	230c      	movs	r3, #12
 80013be:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 80013c0:	7efb      	ldrb	r3, [r7, #27]
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	3b01      	subs	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	7efb      	ldrb	r3, [r7, #27]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	461a      	mov	r2, r3
 80013ce:	2300      	movs	r3, #0
 80013d0:	4690      	mov	r8, r2
 80013d2:	4699      	mov	r9, r3
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013e8:	7efb      	ldrb	r3, [r7, #27]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	461a      	mov	r2, r3
 80013ee:	2300      	movs	r3, #0
 80013f0:	4614      	mov	r4, r2
 80013f2:	461d      	mov	r5, r3
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	00eb      	lsls	r3, r5, #3
 80013fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001402:	00e2      	lsls	r2, r4, #3
 8001404:	7efb      	ldrb	r3, [r7, #27]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	3307      	adds	r3, #7
 800140a:	08db      	lsrs	r3, r3, #3
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	ebad 0d03 	sub.w	sp, sp, r3
 8001412:	466b      	mov	r3, sp
 8001414:	3300      	adds	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 8001418:	2300      	movs	r3, #0
 800141a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x26;
 800141c:	2326      	movs	r3, #38	; 0x26
 800141e:	727b      	strb	r3, [r7, #9]
	cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4619      	mov	r1, r3
 8001426:	2002      	movs	r0, #2
 8001428:	f7ff fdb6 	bl	8000f98 <pec15_calc>
 800142c:	4603      	mov	r3, r0
 800142e:	0a1b      	lsrs	r3, r3, #8
 8001430:	b29b      	uxth	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4619      	mov	r1, r3
 800143c:	2002      	movs	r0, #2
 800143e:	f7ff fdab 	bl	8000f98 <pec15_calc>
 8001442:	4603      	mov	r3, r0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001448:	f7ff fd20 	bl	8000e8c <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 800144c:	7f3b      	ldrb	r3, [r7, #28]
 800144e:	79fa      	ldrb	r2, [r7, #7]
 8001450:	fb03 f202 	mul.w	r2, r3, r2
 8001454:	f107 0108 	add.w	r1, r7, #8
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2004      	movs	r0, #4
 800145c:	f001 f90e 	bl	800267c <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 8001460:	2300      	movs	r3, #0
 8001462:	77bb      	strb	r3, [r7, #30]
 8001464:	e03a      	b.n	80014dc <rdcfgb+0x13a>
		{
			// executes for each LTC6804 in the daisy chain and packs the data
			// into the r_config array as well as check the received Config data
			// for any bit errors

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001466:	2300      	movs	r3, #0
 8001468:	777b      	strb	r3, [r7, #29]
 800146a:	e010      	b.n	800148e <rdcfgb+0xec>
			{
				r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 800146c:	7f7a      	ldrb	r2, [r7, #29]
 800146e:	7fbb      	ldrb	r3, [r7, #30]
 8001470:	7f39      	ldrb	r1, [r7, #28]
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	18d1      	adds	r1, r2, r3
 8001478:	7fbb      	ldrb	r3, [r7, #30]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	441a      	add	r2, r3
 8001480:	7f7b      	ldrb	r3, [r7, #29]
 8001482:	6938      	ldr	r0, [r7, #16]
 8001484:	5c41      	ldrb	r1, [r0, r1]
 8001486:	54d1      	strb	r1, [r2, r3]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001488:	7f7b      	ldrb	r3, [r7, #29]
 800148a:	3301      	adds	r3, #1
 800148c:	777b      	strb	r3, [r7, #29]
 800148e:	7f7a      	ldrb	r2, [r7, #29]
 8001490:	7f3b      	ldrb	r3, [r7, #28]
 8001492:	429a      	cmp	r2, r3
 8001494:	d3ea      	bcc.n	800146c <rdcfgb+0xca>
			}

			received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8001496:	7fbb      	ldrb	r3, [r7, #30]
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	4413      	add	r3, r2
 800149e:	799b      	ldrb	r3, [r3, #6]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	7fbb      	ldrb	r3, [r7, #30]
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	6839      	ldr	r1, [r7, #0]
 80014ac:	440b      	add	r3, r1
 80014ae:	79db      	ldrb	r3, [r3, #7]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	81fb      	strh	r3, [r7, #14]
			data_pec = pec15_calc(6, &r_config[current_ic][0]);
 80014b6:	7fbb      	ldrb	r3, [r7, #30]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	2006      	movs	r0, #6
 80014c2:	f7ff fd69 	bl	8000f98 <pec15_calc>
 80014c6:	4603      	mov	r3, r0
 80014c8:	81bb      	strh	r3, [r7, #12]
			if (received_pec != data_pec)
 80014ca:	89fa      	ldrh	r2, [r7, #14]
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d001      	beq.n	80014d6 <rdcfgb+0x134>
			{
				pec_error = -1;
 80014d2:	23ff      	movs	r3, #255	; 0xff
 80014d4:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80014d6:	7fbb      	ldrb	r3, [r7, #30]
 80014d8:	3301      	adds	r3, #1
 80014da:	77bb      	strb	r3, [r7, #30]
 80014dc:	7fba      	ldrb	r2, [r7, #30]
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3c0      	bcc.n	8001466 <rdcfgb+0xc4>
		}

	#if DYNAMIC_MEM
		free(rx_data);
	#endif
		return(pec_error);
 80014e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014e8:	46b5      	mov	sp, r6

}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014f4 <rdcv>:

uint8_t rdcv(uint8_t reg,				// Controls which cell voltage register is read back.
                     uint8_t total_ic,			// the number of ICs in the system
                     cell_data_t cell_codes[][18]	// Array of the parsed cell codes
                    )
{
 80014f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014f8:	b08b      	sub	sp, #44	; 0x2c
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	603a      	str	r2, [r7, #0]
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	460b      	mov	r3, r1
 8001504:	71bb      	strb	r3, [r7, #6]
 8001506:	466b      	mov	r3, sp
 8001508:	461e      	mov	r6, r3

	const uint8_t NUM_RX_BYT = 8;
 800150a:	2308      	movs	r3, #8
 800150c:	f887 3020 	strb.w	r3, [r7, #32]
	const uint8_t BYT_IN_REG = 6;
 8001510:	2306      	movs	r3, #6
 8001512:	77fb      	strb	r3, [r7, #31]
	const uint8_t CELL_IN_REG = 3;
 8001514:	2303      	movs	r3, #3
 8001516:	77bb      	strb	r3, [r7, #30]

	uint8_t pec_error = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter=0;	//data counter
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if DYNAMIC_MEM
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 18;
 8001524:	2312      	movs	r3, #18
 8001526:	777b      	strb	r3, [r7, #29]
	uint8_t cell_data[NUM_RX_BYT * max_ic];
 8001528:	f897 3020 	ldrb.w	r3, [r7, #32]
 800152c:	7f7a      	ldrb	r2, [r7, #29]
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	3b01      	subs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	f897 3020 	ldrb.w	r3, [r7, #32]
 800153a:	7f7a      	ldrb	r2, [r7, #29]
 800153c:	fb02 f303 	mul.w	r3, r2, r3
 8001540:	461a      	mov	r2, r3
 8001542:	2300      	movs	r3, #0
 8001544:	4690      	mov	r8, r2
 8001546:	4699      	mov	r9, r3
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001554:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001558:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800155c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001560:	7f7a      	ldrb	r2, [r7, #29]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	461a      	mov	r2, r3
 8001568:	2300      	movs	r3, #0
 800156a:	4614      	mov	r4, r2
 800156c:	461d      	mov	r5, r3
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	00eb      	lsls	r3, r5, #3
 8001578:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800157c:	00e2      	lsls	r2, r4, #3
 800157e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001582:	7f7a      	ldrb	r2, [r7, #29]
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	3307      	adds	r3, #7
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	ebad 0d03 	sub.w	sp, sp, r3
 8001592:	466b      	mov	r3, sp
 8001594:	3300      	adds	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
#endif


	if (reg == 0)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 8088 	bne.w	80016b0 <rdcv+0x1bc>
	{
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 80015a0:	2301      	movs	r3, #1
 80015a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80015a6:	e07d      	b.n	80016a4 <rdcv+0x1b0>
		{
			data_counter = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			rdcv_reg(cell_reg, total_ic,cell_data );				 //Reads a single Cell voltage register
 80015ae:	79b9      	ldrb	r1, [r7, #6]
 80015b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f8f6 	bl	80017a8 <rdcv_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80015c2:	e065      	b.n	8001690 <rdcv+0x19c>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015ca:	e02d      	b.n	8001628 <rdcv+0x134>
				{
					// loops once for each of the 3 cell voltage codes in the register

					parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 80015cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015da:	3301      	adds	r3, #1
 80015dc:	6979      	ldr	r1, [r7, #20]
 80015de:	5ccb      	ldrb	r3, [r1, r3]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	81fb      	strh	r3, [r7, #14]
					// create the parsed cell voltage code
					//cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
					cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)].voltage = parsed_cell;
 80015ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	461a      	mov	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001600:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001604:	3a01      	subs	r2, #1
 8001606:	7fb8      	ldrb	r0, [r7, #30]
 8001608:	fb00 f202 	mul.w	r2, r0, r2
 800160c:	440a      	add	r2, r1
 800160e:	89f9      	ldrh	r1, [r7, #14]
 8001610:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 8001614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001618:	3302      	adds	r3, #2
 800161a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 800161e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001622:	3301      	adds	r3, #1
 8001624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001628:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800162c:	7fbb      	ldrb	r3, [r7, #30]
 800162e:	429a      	cmp	r2, r3
 8001630:	d3cc      	bcc.n	80015cc <rdcv+0xd8>
					//must increment by two for each parsed cell code
				}
				received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001632:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	b29b      	uxth	r3, r3
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b29a      	uxth	r2, r3
 8001640:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001644:	3301      	adds	r3, #1
 8001646:	6979      	ldr	r1, [r7, #20]
 8001648:	5ccb      	ldrb	r3, [r1, r3]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4413      	add	r3, r2
 800164e:	827b      	strh	r3, [r7, #18]
				//after the 6 cell voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001650:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001654:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	441a      	add	r2, r3
 8001660:	7ffb      	ldrb	r3, [r7, #31]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fc97 	bl	8000f98 <pec15_calc>
 800166a:	4603      	mov	r3, r0
 800166c:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 800166e:	8a7a      	ldrh	r2, [r7, #18]
 8001670:	8a3b      	ldrh	r3, [r7, #16]
 8001672:	429a      	cmp	r2, r3
 8001674:	d002      	beq.n	800167c <rdcv+0x188>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 8001676:	23ff      	movs	r3, #255	; 0xff
 8001678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					//are detected in the serial data
				}
			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 800167c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001680:	3302      	adds	r3, #2
 8001682:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 8001686:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800168a:	3301      	adds	r3, #1
 800168c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001690:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	429a      	cmp	r2, r3
 8001698:	d394      	bcc.n	80015c4 <rdcv+0xd0>
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 800169a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800169e:	3301      	adds	r3, #1
 80016a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80016a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016a8:	2b06      	cmp	r3, #6
 80016aa:	f67f af7d 	bls.w	80015a8 <rdcv+0xb4>
 80016ae:	e073      	b.n	8001798 <rdcv+0x2a4>
		}
	}

	else
	{
		rdcv_reg(reg, total_ic,cell_data);
 80016b0:	79b9      	ldrb	r1, [r7, #6]
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f876 	bl	80017a8 <rdcv_reg>
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80016c2:	e064      	b.n	800178e <rdcv+0x29a>
		{
			// current_ic is used as the IC counter
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80016ca:	e02c      	b.n	8001726 <rdcv+0x232>
			{
				// loops once for each of the 3 cell voltage codes in the register

				parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8); //Each cell code is received as two bytes and is combined to
 80016cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	5cd3      	ldrb	r3, [r2, r3]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016da:	3301      	adds	r3, #1
 80016dc:	6979      	ldr	r1, [r7, #20]
 80016de:	5ccb      	ldrb	r3, [r1, r3]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	81fb      	strh	r3, [r7, #14]
				// create the parsed cell voltage code

				//cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
				cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)].voltage = 0x0000FFFF & parsed_cell;
 80016ea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016ee:	4613      	mov	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	461a      	mov	r2, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001700:	79fa      	ldrb	r2, [r7, #7]
 8001702:	3a01      	subs	r2, #1
 8001704:	7fb8      	ldrb	r0, [r7, #30]
 8001706:	fb00 f202 	mul.w	r2, r0, r2
 800170a:	440a      	add	r2, r1
 800170c:	89f9      	ldrh	r1, [r7, #14]
 800170e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter= data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 8001712:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001716:	3302      	adds	r3, #2
 8001718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 800171c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001720:	3301      	adds	r3, #1
 8001722:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001726:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800172a:	7fbb      	ldrb	r3, [r7, #30]
 800172c:	429a      	cmp	r2, r3
 800172e:	d3cd      	bcc.n	80016cc <rdcv+0x1d8>
				//must increment by two for each parsed cell code
			}
			received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	b29b      	uxth	r3, r3
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	b29a      	uxth	r2, r3
 800173e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001742:	3301      	adds	r3, #1
 8001744:	6979      	ldr	r1, [r7, #20]
 8001746:	5ccb      	ldrb	r3, [r1, r3]
 8001748:	b29b      	uxth	r3, r3
 800174a:	4413      	add	r3, r2
 800174c:	827b      	strh	r3, [r7, #18]
			//after the 6 cell voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 800174e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001752:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	441a      	add	r2, r3
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fc18 	bl	8000f98 <pec15_calc>
 8001768:	4603      	mov	r3, r0
 800176a:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 800176c:	8a7a      	ldrh	r2, [r7, #18]
 800176e:	8a3b      	ldrh	r3, [r7, #16]
 8001770:	429a      	cmp	r2, r3
 8001772:	d002      	beq.n	800177a <rdcv+0x286>
			{
				pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 8001774:	23ff      	movs	r3, #255	; 0xff
 8001776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//are detected in the serial data
			}
			data_counter= data_counter + 2;                       //Because the transmitted PEC code is 2 bytes long the data_counter
 800177a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800177e:	3302      	adds	r3, #2
 8001780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 8001784:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001788:	3301      	adds	r3, #1
 800178a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800178e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001792:	79bb      	ldrb	r3, [r7, #6]
 8001794:	429a      	cmp	r2, r3
 8001796:	d395      	bcc.n	80016c4 <rdcv+0x1d0>
		}
	}
#if DYNAMIC_MEM
	free(cell_data);
#endif
	return(pec_error);
 8001798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800179c:	46b5      	mov	sp, r6
}
 800179e:	4618      	mov	r0, r3
 80017a0:	372c      	adds	r7, #44	; 0x2c
 80017a2:	46bd      	mov	sp, r7
 80017a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080017a8 <rdcv_reg>:
*/
void rdcv_reg(uint8_t reg,			//Determines which cell voltage register is read back
                      uint8_t total_ic,		//the number of ICs in the
                      uint8_t *data			//An array of the unparsed cell codes
                     )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	603a      	str	r2, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
 80017b4:	460b      	mov	r3, r1
 80017b6:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 80017b8:	2308      	movs	r3, #8
 80017ba:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d104      	bne.n	80017cc <rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 80017c2:	2304      	movs	r3, #4
 80017c4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017c6:	2300      	movs	r3, #0
 80017c8:	723b      	strb	r3, [r7, #8]
 80017ca:	e026      	b.n	800181a <rdcv_reg+0x72>
	}
	else if (reg == 2)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d104      	bne.n	80017dc <rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 80017d2:	2306      	movs	r3, #6
 80017d4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017d6:	2300      	movs	r3, #0
 80017d8:	723b      	strb	r3, [r7, #8]
 80017da:	e01e      	b.n	800181a <rdcv_reg+0x72>
	}
	else if (reg == 3)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d104      	bne.n	80017ec <rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 80017e2:	2308      	movs	r3, #8
 80017e4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017e6:	2300      	movs	r3, #0
 80017e8:	723b      	strb	r3, [r7, #8]
 80017ea:	e016      	b.n	800181a <rdcv_reg+0x72>
	}
	else if (reg == 4)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d104      	bne.n	80017fc <rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 80017f2:	230a      	movs	r3, #10
 80017f4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017f6:	2300      	movs	r3, #0
 80017f8:	723b      	strb	r3, [r7, #8]
 80017fa:	e00e      	b.n	800181a <rdcv_reg+0x72>
	}
	else if (reg == 5) // LTC6813 - Cell register E
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d104      	bne.n	800180c <rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 8001802:	2309      	movs	r3, #9
 8001804:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001806:	2300      	movs	r3, #0
 8001808:	723b      	strb	r3, [r7, #8]
 800180a:	e006      	b.n	800181a <rdcv_reg+0x72>
	}
	else if (reg == 6) // LTC6813 - Cell register F
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2b06      	cmp	r3, #6
 8001810:	d103      	bne.n	800181a <rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 8001812:	230b      	movs	r3, #11
 8001814:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	4619      	mov	r1, r3
 8001820:	2002      	movs	r0, #2
 8001822:	f7ff fbb9 	bl	8000f98 <pec15_calc>
 8001826:	4603      	mov	r3, r0
 8001828:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800182a:	89bb      	ldrh	r3, [r7, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	b29b      	uxth	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001834:	89bb      	ldrh	r3, [r7, #12]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 800183a:	f7ff fb27 	bl	8000e8c <WakeIdle>
	WakeIdle();
 800183e:	f7ff fb25 	bl	8000e8c <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	79ba      	ldrb	r2, [r7, #6]
 8001846:	fb03 f202 	mul.w	r2, r3, r2
 800184a:	f107 0108 	add.w	r1, r7, #8
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2004      	movs	r0, #4
 8001852:	f000 ff13 	bl	800267c <spi_write_then_read_array_ltc>
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <rdaux>:
*/
int8_t rdaux(uint8_t reg,				//Determines which GPIO voltage register is read back.
                     uint8_t total_ic,			//the number of ICs in the system
                     temp_data_t aux_codes[][GPIO_NUM]	//A two dimensional array of the gpio voltage codes.
                    )
{
 800185e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001862:	b08d      	sub	sp, #52	; 0x34
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	603a      	str	r2, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	460b      	mov	r3, r1
 800186e:	71bb      	strb	r3, [r7, #6]
 8001870:	466b      	mov	r3, sp
 8001872:	461e      	mov	r6, r3
	const uint8_t NUM_RX_BYT = 8;
 8001874:	2308      	movs	r3, #8
 8001876:	77fb      	strb	r3, [r7, #31]
	const uint8_t BYT_IN_REG = 6;
 8001878:	2306      	movs	r3, #6
 800187a:	77bb      	strb	r3, [r7, #30]
	const uint8_t GPIO_IN_REG = 3;
 800187c:	2303      	movs	r3, #3
 800187e:	777b      	strb	r3, [r7, #29]

	uint8_t data_counter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int8_t pec_error = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint16_t data_pec;
#if DYNAMIC_MEM
	uint8_t *data;
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 800188c:	230c      	movs	r3, #12
 800188e:	773b      	strb	r3, [r7, #28]
	uint8_t data[NUM_RX_BYT * max_ic];
 8001890:	7ffb      	ldrb	r3, [r7, #31]
 8001892:	7f3a      	ldrb	r2, [r7, #28]
 8001894:	fb02 f303 	mul.w	r3, r2, r3
 8001898:	3b01      	subs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	7ffb      	ldrb	r3, [r7, #31]
 800189e:	7f3a      	ldrb	r2, [r7, #28]
 80018a0:	fb02 f303 	mul.w	r3, r2, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	2300      	movs	r3, #0
 80018a8:	4690      	mov	r8, r2
 80018aa:	4699      	mov	r9, r3
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018c0:	7ffb      	ldrb	r3, [r7, #31]
 80018c2:	7f3a      	ldrb	r2, [r7, #28]
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	2300      	movs	r3, #0
 80018cc:	4614      	mov	r4, r2
 80018ce:	461d      	mov	r5, r3
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	00eb      	lsls	r3, r5, #3
 80018da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018de:	00e2      	lsls	r2, r4, #3
 80018e0:	7ffb      	ldrb	r3, [r7, #31]
 80018e2:	7f3a      	ldrb	r2, [r7, #28]
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	3307      	adds	r3, #7
 80018ea:	08db      	lsrs	r3, r3, #3
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	ebad 0d03 	sub.w	sp, sp, r3
 80018f2:	466b      	mov	r3, sp
 80018f4:	3300      	adds	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
#endif

	if (reg == 0)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 8087 	bne.w	8001a0e <rdaux+0x1b0>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 8001900:	2301      	movs	r3, #1
 8001902:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001906:	e07c      	b.n	8001a02 <rdaux+0x1a4>
		{
			data_counter = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 800190e:	79b9      	ldrb	r1, [r7, #6]
 8001910:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f8fa 	bl	8001b10 <rdaux_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 800191c:	2300      	movs	r3, #0
 800191e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001922:	e064      	b.n	80019ee <rdaux+0x190>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 8001924:	2300      	movs	r3, #0
 8001926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800192a:	e02d      	b.n	8001988 <rdaux+0x12a>
				{
					// loops once for each of the 3 gpio voltage codes in the register

					parsed_aux = data[data_counter] + (data[data_counter+1]<<8);              //Each gpio codes is received as two bytes and is combined to
 800192c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	b29a      	uxth	r2, r3
 8001936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800193a:	3301      	adds	r3, #1
 800193c:	6979      	ldr	r1, [r7, #20]
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	b29b      	uxth	r3, r3
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	b29b      	uxth	r3, r3
 8001946:	4413      	add	r3, r2
 8001948:	81fb      	strh	r3, [r7, #14]
					// create the parsed gpio voltage code

					//aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
					aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 800194a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	461a      	mov	r2, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8001960:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001964:	3a01      	subs	r2, #1
 8001966:	7f78      	ldrb	r0, [r7, #29]
 8001968:	fb00 f202 	mul.w	r2, r0, r2
 800196c:	440a      	add	r2, r1
 800196e:	89f9      	ldrh	r1, [r7, #14]
 8001970:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
					data_counter=data_counter+2;                        //Because gpio voltage codes are two bytes the data counter
 8001974:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001978:	3302      	adds	r3, #2
 800197a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 800197e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001982:	3301      	adds	r3, #1
 8001984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001988:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800198c:	7f7b      	ldrb	r3, [r7, #29]
 800198e:	429a      	cmp	r2, r3
 8001990:	d3cc      	bcc.n	800192c <rdaux+0xce>
					//must increment by two for each parsed gpio voltage code
				}
				received_pec = (data[data_counter]<<8)+ data[data_counter+1];          //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	b29b      	uxth	r3, r3
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	b29a      	uxth	r2, r3
 80019a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019a4:	3301      	adds	r3, #1
 80019a6:	6979      	ldr	r1, [r7, #20]
 80019a8:	5ccb      	ldrb	r3, [r1, r3]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	827b      	strh	r3, [r7, #18]
				//after the 6 gpio voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 80019b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019b4:	7ffa      	ldrb	r2, [r7, #31]
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	441a      	add	r2, r3
 80019be:	7fbb      	ldrb	r3, [r7, #30]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fae8 	bl	8000f98 <pec15_calc>
 80019c8:	4603      	mov	r3, r0
 80019ca:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 80019cc:	8a7a      	ldrh	r2, [r7, #18]
 80019ce:	8a3b      	ldrh	r3, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d002      	beq.n	80019da <rdaux+0x17c>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 80019d4:	23ff      	movs	r3, #255	; 0xff
 80019d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					//are detected in the received serial data
				}

				data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 80019da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019de:	3302      	adds	r3, #2
 80019e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80019e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019e8:	3301      	adds	r3, #1
 80019ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80019ee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d395      	bcc.n	8001924 <rdaux+0xc6>
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 80019f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019fc:	3301      	adds	r3, #1
 80019fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001a02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	f67f af7e 	bls.w	8001908 <rdaux+0xaa>
 8001a0c:	e067      	b.n	8001ade <rdaux+0x280>
		}

	}
	else
	{
		rdaux_reg(reg, total_ic, data);
 8001a0e:	79b9      	ldrb	r1, [r7, #6]
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f87b 	bl	8001b10 <rdaux_reg>
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1e:	e05a      	b.n	8001ad6 <rdaux+0x278>
		{
			// current_ic is used as an IC counter

			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	e028      	b.n	8001a78 <rdaux+0x21a>
			{
				// once for each aux voltage in the register

				parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));        //Each gpio codes is received as two bytes and is combined to
 8001a26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	5cd3      	ldrb	r3, [r2, r3]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a34:	3301      	adds	r3, #1
 8001a36:	6979      	ldr	r1, [r7, #20]
 8001a38:	5ccb      	ldrb	r3, [r1, r3]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	81fb      	strh	r3, [r7, #14]
				// create the parsed gpio voltage code
				//aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
				aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	461a      	mov	r2, r3
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	79fa      	ldrb	r2, [r7, #7]
 8001a56:	3a01      	subs	r2, #1
 8001a58:	7f79      	ldrb	r1, [r7, #29]
 8001a5a:	fb02 f101 	mul.w	r1, r2, r1
 8001a5e:	6a3a      	ldr	r2, [r7, #32]
 8001a60:	440a      	add	r2, r1
 8001a62:	89f9      	ldrh	r1, [r7, #14]
 8001a64:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
				data_counter=data_counter+2;                      //Because gpio voltage codes are two bytes the data counter
 8001a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	3301      	adds	r3, #1
 8001a76:	623b      	str	r3, [r7, #32]
 8001a78:	7f7b      	ldrb	r3, [r7, #29]
 8001a7a:	6a3a      	ldr	r2, [r7, #32]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbd2      	blt.n	8001a26 <rdaux+0x1c8>
				//must increment by two for each parsed gpio voltage code
			}
			received_pec = (data[data_counter]<<8) + data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001a80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a92:	3301      	adds	r3, #1
 8001a94:	6979      	ldr	r1, [r7, #20]
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	827b      	strh	r3, [r7, #18]
			//after the 6 gpio voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8001a9e:	7ffb      	ldrb	r3, [r7, #31]
 8001aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	441a      	add	r2, r3
 8001aaa:	7fbb      	ldrb	r3, [r7, #30]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fa72 	bl	8000f98 <pec15_calc>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 8001ab8:	8a7a      	ldrh	r2, [r7, #18]
 8001aba:	8a3b      	ldrh	r3, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d002      	beq.n	8001ac6 <rdaux+0x268>
			{
				pec_error = -1;                               //The pec_error variable is simply set negative if any PEC errors
 8001ac0:	23ff      	movs	r3, #255	; 0xff
 8001ac2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				//are detected in the received serial data
			}

			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8001ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aca:	3302      	adds	r3, #2
 8001acc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dba0      	blt.n	8001a20 <rdaux+0x1c2>
	}

#if DYNAMIC_MEM
	free(data);
#endif
	return (pec_error);
 8001ade:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8001ae2:	46b5      	mov	sp, r6
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3734      	adds	r7, #52	; 0x34
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001aee <adcv_delay>:

	free(data);
	return (pec_error);
}

adcv_delay(void){
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001af2:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8001af6:	f000 fd49 	bl	800258c <delay_u>
}
 8001afa:	bf00      	nop
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <adax_delay>:

void adax_delay(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001b04:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8001b08:	f000 fd40 	bl	800258c <delay_u>

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <rdaux_reg>:
*/
void rdaux_reg(uint8_t reg,			//Determines which GPIO voltage register is read back
                       uint8_t total_ic,	//The number of ICs in the system
                       uint8_t *data		//Array of the unparsed auxiliary codes
                      )
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	603a      	str	r2, [r7, #0]
 8001b1a:	71fb      	strb	r3, [r7, #7]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001b20:	2308      	movs	r3, #8
 8001b22:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d104      	bne.n	8001b34 <rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 8001b2a:	230c      	movs	r3, #12
 8001b2c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	723b      	strb	r3, [r7, #8]
 8001b32:	e01b      	b.n	8001b6c <rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d104      	bne.n	8001b44 <rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 8001b3a:	230e      	movs	r3, #14
 8001b3c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	723b      	strb	r3, [r7, #8]
 8001b42:	e013      	b.n	8001b6c <rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d104      	bne.n	8001b54 <rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8001b4a:	230d      	movs	r3, #13
 8001b4c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	723b      	strb	r3, [r7, #8]
 8001b52:	e00b      	b.n	8001b6c <rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d104      	bne.n	8001b64 <rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8001b5a:	230f      	movs	r3, #15
 8001b5c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	723b      	strb	r3, [r7, #8]
 8001b62:	e003      	b.n	8001b6c <rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8001b64:	230c      	movs	r3, #12
 8001b66:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	4619      	mov	r1, r3
 8001b72:	2002      	movs	r0, #2
 8001b74:	f7ff fa10 	bl	8000f98 <pec15_calc>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001b7c:	89bb      	ldrh	r3, [r7, #12]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001b86:	89bb      	ldrh	r3, [r7, #12]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001b8c:	f7ff f97e 	bl	8000e8c <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	79ba      	ldrb	r2, [r7, #6]
 8001b94:	fb03 f202 	mul.w	r2, r3, r2
 8001b98:	f107 0108 	add.w	r1, r7, #8
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2004      	movs	r0, #4
 8001ba0:	f000 fd6c 	bl	800267c <spi_write_then_read_array_ltc>
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <adcv>:

/*!
	\brief Starts cell voltage conversion.
*/
void adcv(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADCV[0];
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <adcv+0x44>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <adcv+0x44>)
 8001bba:	785b      	ldrb	r3, [r3, #1]
 8001bbc:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADCV);
 8001bbe:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <adcv+0x44>)
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f7ff f9e9 	bl	8000f98 <pec15_calc>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001bda:	f7ff f957 	bl	8000e8c <WakeIdle>
	spi_write_array(4, cmd);
 8001bde:	463b      	mov	r3, r7
 8001be0:	4619      	mov	r1, r3
 8001be2:	2004      	movs	r0, #4
 8001be4:	f000 fd28 	bl	8002638 <spi_write_array>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200000a8 	.word	0x200000a8

08001bf4 <adax>:

/*!
	\brief Start an GPIO Conversion.
*/
void adax(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADAX[0];
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <adax+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <adax+0x44>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADAX);
 8001c06:	490c      	ldr	r1, [pc, #48]	; (8001c38 <adax+0x44>)
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f7ff f9c5 	bl	8000f98 <pec15_calc>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001c22:	f7ff f933 	bl	8000e8c <WakeIdle>
	spi_write_array(4, cmd);
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	2004      	movs	r0, #4
 8001c2c:	f000 fd04 	bl	8002638 <spi_write_array>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200000ac 	.word	0x200000ac

08001c3c <calc_sum_of_cells>:


}

void calc_sum_of_cells(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	73fb      	strb	r3, [r7, #15]

	uint16_t soc = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	82fb      	strh	r3, [r7, #22]

	for(uint8_t i = 0; i < total_ic; i++){
 8001c4e:	2300      	movs	r3, #0
 8001c50:	757b      	strb	r3, [r7, #21]
 8001c52:	e01e      	b.n	8001c92 <calc_sum_of_cells+0x56>
		for(uint8_t j = 0; j < CELL_NUM; j++){
 8001c54:	2300      	movs	r3, #0
 8001c56:	753b      	strb	r3, [r7, #20]
 8001c58:	e015      	b.n	8001c86 <calc_sum_of_cells+0x4a>
			soc += (cell_data[i][j].voltage / 100);
 8001c5a:	7d7a      	ldrb	r2, [r7, #21]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	461a      	mov	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	4413      	add	r3, r2
 8001c6a:	7d3a      	ldrb	r2, [r7, #20]
 8001c6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <calc_sum_of_cells+0x84>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	8afb      	ldrh	r3, [r7, #22]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	82fb      	strh	r3, [r7, #22]
		for(uint8_t j = 0; j < CELL_NUM; j++){
 8001c80:	7d3b      	ldrb	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	753b      	strb	r3, [r7, #20]
 8001c86:	7d3b      	ldrb	r3, [r7, #20]
 8001c88:	2b11      	cmp	r3, #17
 8001c8a:	d9e6      	bls.n	8001c5a <calc_sum_of_cells+0x1e>
	for(uint8_t i = 0; i < total_ic; i++){
 8001c8c:	7d7b      	ldrb	r3, [r7, #21]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	757b      	strb	r3, [r7, #21]
 8001c92:	7d7a      	ldrb	r2, [r7, #21]
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3dc      	bcc.n	8001c54 <calc_sum_of_cells+0x18>
		}
	}
	status_data->sum_of_cells = (float)soc /100;
 8001c9a:	8afb      	ldrh	r3, [r7, #22]
 8001c9c:	ee07 3a90 	vmov	s15, r3
 8001ca0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ca4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001cc4 <calc_sum_of_cells+0x88>
 8001ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001cb2:	bf00      	nop
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	51eb851f 	.word	0x51eb851f
 8001cc4:	42c80000 	.word	0x42c80000

08001cc8 <calculate_soc>:

		int32_t power = status_data->IVT_I * (int32_t)voltage;
		status_data->power = power;
}

void calculate_soc(status_data_t *status_data){
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

	//float consumed = status_data->IVT_I * FREQUENCY/3600;

	status_data->soc = 100 - (status_data->IVT_Wh / ACCU_Wh)*100;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <calculate_soc+0x3c>)
 8001cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cda:	441a      	add	r2, r3
 8001cdc:	1312      	asrs	r2, r2, #12
 8001cde:	17db      	asrs	r3, r3, #31
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	2264      	movs	r2, #100	; 0x64
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	edc3 7a04 	vstr	s15, [r3, #16]

}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	9ee009ef 	.word	0x9ee009ef

08001d08 <get_minmax_temperature>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][12]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_temperature(uint8_t total_ic, temp_data_t temp_data[][GPIO_NUM], status_data_t *status_data)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	73fb      	strb	r3, [r7, #15]
	int32_t min = temp_data[0][0].temp;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d1c:	61fb      	str	r3, [r7, #28]
	int32_t max = temp_data[0][0].temp;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d24:	61bb      	str	r3, [r7, #24]
	uint8_t min_id = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
	uint8_t max_id = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0; i < total_ic; i++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	757b      	strb	r3, [r7, #21]
 8001d32:	e062      	b.n	8001dfa <get_minmax_temperature+0xf2>
	{
		for (uint8_t j = 0; j < 5; j++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	753b      	strb	r3, [r7, #20]
 8001d38:	e059      	b.n	8001dee <get_minmax_temperature+0xe6>
		{

			if (temp_data[i][j].temp > max)
 8001d3a:	7d7a      	ldrb	r2, [r7, #21]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	461a      	mov	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	441a      	add	r2, r3
 8001d4a:	7d3b      	ldrb	r3, [r7, #20]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d54:	461a      	mov	r2, r3
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	da18      	bge.n	8001d8e <get_minmax_temperature+0x86>
			{

				max = temp_data[i][j].temp;
 8001d5c:	7d7a      	ldrb	r2, [r7, #21]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	461a      	mov	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	441a      	add	r2, r3
 8001d6c:	7d3b      	ldrb	r3, [r7, #20]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d76:	61bb      	str	r3, [r7, #24]
				max_id = (i << 4) | (j & 0x0f);
 8001d78:	7d7b      	ldrb	r3, [r7, #21]
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	b25a      	sxtb	r2, r3
 8001d7e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	75bb      	strb	r3, [r7, #22]

			}
			if (temp_data[i][j].temp < min && j != 5)
 8001d8e:	7d7a      	ldrb	r2, [r7, #21]
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	441a      	add	r2, r3
 8001d9e:	7d3b      	ldrb	r3, [r7, #20]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001da8:	461a      	mov	r2, r3
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4293      	cmp	r3, r2
 8001dae:	dd1b      	ble.n	8001de8 <get_minmax_temperature+0xe0>
 8001db0:	7d3b      	ldrb	r3, [r7, #20]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d018      	beq.n	8001de8 <get_minmax_temperature+0xe0>
			{

				min = temp_data[i][j].temp;
 8001db6:	7d7a      	ldrb	r2, [r7, #21]
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	441a      	add	r2, r3
 8001dc6:	7d3b      	ldrb	r3, [r7, #20]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dd0:	61fb      	str	r3, [r7, #28]
				min_id = (i << 4) | (j & 0x0f);
 8001dd2:	7d7b      	ldrb	r3, [r7, #21]
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	b25a      	sxtb	r2, r3
 8001dd8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	75fb      	strb	r3, [r7, #23]
		for (uint8_t j = 0; j < 5; j++)
 8001de8:	7d3b      	ldrb	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	753b      	strb	r3, [r7, #20]
 8001dee:	7d3b      	ldrb	r3, [r7, #20]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d9a2      	bls.n	8001d3a <get_minmax_temperature+0x32>
	for (uint8_t i = 0; i < total_ic; i++)
 8001df4:	7d7b      	ldrb	r3, [r7, #21]
 8001df6:	3301      	adds	r3, #1
 8001df8:	757b      	strb	r3, [r7, #21]
 8001dfa:	7d7a      	ldrb	r2, [r7, #21]
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d398      	bcc.n	8001d34 <get_minmax_temperature+0x2c>

			}
		}
	}
	status_data->min_temp = min;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	b21a      	sxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	84da      	strh	r2, [r3, #38]	; 0x26
	status_data->max_temp = max;
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	851a      	strh	r2, [r3, #40]	; 0x28

	status_data->min_temp_id = min_id;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7dfa      	ldrb	r2, [r7, #23]
 8001e16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	status_data->max_temp_id = max_id;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7dba      	ldrb	r2, [r7, #22]
 8001e1e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <get_minmax_voltage>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][CELL_NUM]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_voltage(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b087      	sub	sp, #28
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
	uint16_t min = cell_data[0][0].voltage;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	82fb      	strh	r3, [r7, #22]
	uint16_t max = cell_data[0][0].voltage;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	82bb      	strh	r3, [r7, #20]
	uint8_t min_id = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	74fb      	strb	r3, [r7, #19]
	uint8_t max_id = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	74bb      	strb	r3, [r7, #18]





	for (uint8_t i = 0; i < total_ic; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	747b      	strb	r3, [r7, #17]
 8001e54:	e064      	b.n	8001f20 <get_minmax_voltage+0xf2>
	{
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	743b      	strb	r3, [r7, #16]
 8001e5a:	e05b      	b.n	8001f14 <get_minmax_voltage+0xe6>
		{
			if (cell_data[i][j].voltage > max)
 8001e5c:	7c7a      	ldrb	r2, [r7, #17]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	461a      	mov	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	7c3a      	ldrb	r2, [r7, #16]
 8001e6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e72:	8aba      	ldrh	r2, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d216      	bcs.n	8001ea6 <get_minmax_voltage+0x78>
			{
				max = cell_data[i][j].voltage;
 8001e78:	7c7a      	ldrb	r2, [r7, #17]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	461a      	mov	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4413      	add	r3, r2
 8001e88:	7c3a      	ldrb	r2, [r7, #16]
 8001e8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e8e:	82bb      	strh	r3, [r7, #20]
				max_id = (i << 4) | (j & 0x0f);
 8001e90:	7c7b      	ldrb	r3, [r7, #17]
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	b25a      	sxtb	r2, r3
 8001e96:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	74bb      	strb	r3, [r7, #18]
			}
			if (cell_data[i][j].voltage < min && cell_data[i][j].voltage > 5000) //ignore cells under .5V
 8001ea6:	7c7a      	ldrb	r2, [r7, #17]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	7c3a      	ldrb	r2, [r7, #16]
 8001eb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ebc:	8afa      	ldrh	r2, [r7, #22]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d925      	bls.n	8001f0e <get_minmax_voltage+0xe0>
 8001ec2:	7c7a      	ldrb	r2, [r7, #17]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	7c3a      	ldrb	r2, [r7, #16]
 8001ed4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d916      	bls.n	8001f0e <get_minmax_voltage+0xe0>
			{
				min = cell_data[i][j].voltage;
 8001ee0:	7c7a      	ldrb	r2, [r7, #17]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4413      	add	r3, r2
 8001ef0:	7c3a      	ldrb	r2, [r7, #16]
 8001ef2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ef6:	82fb      	strh	r3, [r7, #22]
				min_id = (i << 4) | (j & 0x0f);
 8001ef8:	7c7b      	ldrb	r3, [r7, #17]
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	b25a      	sxtb	r2, r3
 8001efe:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	b25b      	sxtb	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b25b      	sxtb	r3, r3
 8001f0c:	74fb      	strb	r3, [r7, #19]
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001f0e:	7c3b      	ldrb	r3, [r7, #16]
 8001f10:	3301      	adds	r3, #1
 8001f12:	743b      	strb	r3, [r7, #16]
 8001f14:	7c3b      	ldrb	r3, [r7, #16]
 8001f16:	2b11      	cmp	r3, #17
 8001f18:	d9a0      	bls.n	8001e5c <get_minmax_voltage+0x2e>
	for (uint8_t i = 0; i < total_ic; i++)
 8001f1a:	7c7b      	ldrb	r3, [r7, #17]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	747b      	strb	r3, [r7, #17]
 8001f20:	7c7a      	ldrb	r2, [r7, #17]
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d396      	bcc.n	8001e56 <get_minmax_voltage+0x28>
			}
		}
	}
	status_data->min_voltage = min;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	8afa      	ldrh	r2, [r7, #22]
 8001f2c:	859a      	strh	r2, [r3, #44]	; 0x2c
	status_data->max_voltage = max;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8aba      	ldrh	r2, [r7, #20]
 8001f32:	85da      	strh	r2, [r3, #46]	; 0x2e
	status_data->delta = max - min;
 8001f34:	8aba      	ldrh	r2, [r7, #20]
 8001f36:	8afb      	ldrh	r3, [r7, #22]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	849a      	strh	r2, [r3, #36]	; 0x24
	status_data->min_voltage_id = min_id;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7cfa      	ldrb	r2, [r7, #19]
 8001f46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	status_data->max_voltage_id = max_id;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7cba      	ldrb	r2, [r7, #18]
 8001f4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001f52:	bf00      	nop
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <build_disch_cfg>:




void build_disch_cfg(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], uint8_t tx_config[][6],\
					 status_data_t *status_data, limit_t *limit){
 8001f5e:	b480      	push	{r7}
 8001f60:	b087      	sub	sp, #28
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	73fb      	strb	r3, [r7, #15]
	uint16_t DCCx = 0x0000;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	82fb      	strh	r3, [r7, #22]
	//discharge all cells

	for (uint8_t i = 0; i < total_ic; i++){
 8001f72:	2300      	movs	r3, #0
 8001f74:	757b      	strb	r3, [r7, #21]
 8001f76:	e051      	b.n	800201c <build_disch_cfg+0xbe>
		for (uint8_t j = 0; j < 12; j++){
 8001f78:	2300      	movs	r3, #0
 8001f7a:	753b      	strb	r3, [r7, #20]
 8001f7c:	e02d      	b.n	8001fda <build_disch_cfg+0x7c>
			if (cell_data[i][j].voltage > (status_data->min_voltage + limit->tolerance)){
 8001f7e:	7d7a      	ldrb	r2, [r7, #21]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	7d3a      	ldrb	r2, [r7, #20]
 8001f90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f94:	461a      	mov	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	8b9b      	ldrh	r3, [r3, #28]
 8001fa0:	440b      	add	r3, r1
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	dd0a      	ble.n	8001fbc <build_disch_cfg+0x5e>
				DCCx |= (1<<j);
 8001fa6:	7d3b      	ldrb	r3, [r7, #20]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	82fb      	strh	r3, [r7, #22]
 8001fba:	e00b      	b.n	8001fd4 <build_disch_cfg+0x76>
			}
			else{
				DCCx &= ~(1<<j);
 8001fbc:	7d3b      	ldrb	r3, [r7, #20]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	82fb      	strh	r3, [r7, #22]
		for (uint8_t j = 0; j < 12; j++){
 8001fd4:	7d3b      	ldrb	r3, [r7, #20]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	753b      	strb	r3, [r7, #20]
 8001fda:	7d3b      	ldrb	r3, [r7, #20]
 8001fdc:	2b0b      	cmp	r3, #11
 8001fde:	d9ce      	bls.n	8001f7e <build_disch_cfg+0x20>
			}
		}
		tx_config[i][4] = (DCCx & 0x00ff);
 8001fe0:	7d7a      	ldrb	r2, [r7, #21]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	461a      	mov	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	8afa      	ldrh	r2, [r7, #22]
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	711a      	strb	r2, [r3, #4]
		tx_config[i][5] = ((DCCx >> 8) & 0x0f);
 8001ff6:	8afb      	ldrh	r3, [r7, #22]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b2d9      	uxtb	r1, r3
 8001ffe:	7d7a      	ldrb	r2, [r7, #21]
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	461a      	mov	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	f001 020f 	and.w	r2, r1, #15
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < total_ic; i++){
 8002016:	7d7b      	ldrb	r3, [r7, #21]
 8002018:	3301      	adds	r3, #1
 800201a:	757b      	strb	r3, [r7, #21]
 800201c:	7d7a      	ldrb	r2, [r7, #21]
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3a9      	bcc.n	8001f78 <build_disch_cfg+0x1a>
	tx_config[0][2] = 0;
	tx_config[0][3] = 0;
	tx_config[0][4] = 255;
	tx_config[0][5] =15;*/

}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <build_disch_cfgb>:

void build_disch_cfgb(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], uint8_t tx_config[][6],\
status_data_t *status_data, limit_t *limit)
{
 8002032:	b480      	push	{r7}
 8002034:	b087      	sub	sp, #28
 8002036:	af00      	add	r7, sp, #0
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4603      	mov	r3, r0
 8002040:	73fb      	strb	r3, [r7, #15]
	uint16_t DCCx = 0x0000;
 8002042:	2300      	movs	r3, #0
 8002044:	82fb      	strh	r3, [r7, #22]
		//discharge all cells

	for (uint8_t i = 0; i < total_ic; i++){
 8002046:	2300      	movs	r3, #0
 8002048:	757b      	strb	r3, [r7, #21]
 800204a:	e051      	b.n	80020f0 <build_disch_cfgb+0xbe>
			for (uint8_t j = 12; j < CELL_NUM; j++){
 800204c:	230c      	movs	r3, #12
 800204e:	753b      	strb	r3, [r7, #20]
 8002050:	e02f      	b.n	80020b2 <build_disch_cfgb+0x80>
				if (cell_data[i][j].voltage > (status_data->min_voltage + limit->tolerance)){
 8002052:	7d7a      	ldrb	r2, [r7, #21]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	461a      	mov	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4413      	add	r3, r2
 8002062:	7d3a      	ldrb	r2, [r7, #20]
 8002064:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002068:	461a      	mov	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800206e:	4619      	mov	r1, r3
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	8b9b      	ldrh	r3, [r3, #28]
 8002074:	440b      	add	r3, r1
 8002076:	429a      	cmp	r2, r3
 8002078:	dd0b      	ble.n	8002092 <build_disch_cfgb+0x60>
					DCCx |= (1<<(j - 12));
 800207a:	7d3b      	ldrb	r3, [r7, #20]
 800207c:	3b0c      	subs	r3, #12
 800207e:	2201      	movs	r2, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	b21a      	sxth	r2, r3
 8002086:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800208a:	4313      	orrs	r3, r2
 800208c:	b21b      	sxth	r3, r3
 800208e:	82fb      	strh	r3, [r7, #22]
 8002090:	e00c      	b.n	80020ac <build_disch_cfgb+0x7a>
				}
				else{
					DCCx &= ~(1<<(j - 12));
 8002092:	7d3b      	ldrb	r3, [r7, #20]
 8002094:	3b0c      	subs	r3, #12
 8002096:	2201      	movs	r2, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	b21b      	sxth	r3, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	b21a      	sxth	r2, r3
 80020a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020a6:	4013      	ands	r3, r2
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	82fb      	strh	r3, [r7, #22]
			for (uint8_t j = 12; j < CELL_NUM; j++){
 80020ac:	7d3b      	ldrb	r3, [r7, #20]
 80020ae:	3301      	adds	r3, #1
 80020b0:	753b      	strb	r3, [r7, #20]
 80020b2:	7d3b      	ldrb	r3, [r7, #20]
 80020b4:	2b11      	cmp	r3, #17
 80020b6:	d9cc      	bls.n	8002052 <build_disch_cfgb+0x20>
				}
			}
			tx_config[i][0] = (DCCx & 0x0f) << 4 ;
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	0119      	lsls	r1, r3, #4
 80020bc:	7d7a      	ldrb	r2, [r7, #21]
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	b2ca      	uxtb	r2, r1
 80020ce:	701a      	strb	r2, [r3, #0]
			tx_config[i][1] = (DCCx >> 4);
 80020d0:	8afb      	ldrh	r3, [r7, #22]
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	b299      	uxth	r1, r3
 80020d6:	7d7a      	ldrb	r2, [r7, #21]
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	461a      	mov	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	b2ca      	uxtb	r2, r1
 80020e8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < total_ic; i++){
 80020ea:	7d7b      	ldrb	r3, [r7, #21]
 80020ec:	3301      	adds	r3, #1
 80020ee:	757b      	strb	r3, [r7, #21]
 80020f0:	7d7a      	ldrb	r2, [r7, #21]
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d3a9      	bcc.n	800204c <build_disch_cfgb+0x1a>
		}
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <CanSend>:
	}

	return offcan;
}

void CanSend(uint8_t *TxData, uint32_t identifier ){
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier = identifier;
 8002112:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <CanSend+0x3c>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6013      	str	r3, [r2, #0]


	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8002118:	e002      	b.n	8002120 <CanSend+0x18>
		delay_u(10);
 800211a:	200a      	movs	r0, #10
 800211c:	f000 fa36 	bl	800258c <delay_u>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8002120:	4809      	ldr	r0, [pc, #36]	; (8002148 <CanSend+0x40>)
 8002122:	f002 fbcd 	bl	80048c0 <HAL_FDCAN_GetTxFifoFreeLevel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <CanSend+0x34>
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4905      	ldr	r1, [pc, #20]	; (8002144 <CanSend+0x3c>)
 8002130:	4805      	ldr	r0, [pc, #20]	; (8002148 <CanSend+0x40>)
 8002132:	f002 faa7 	bl	8004684 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ee      	bne.n	800211a <CanSend+0x12>
	}

}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000258 	.word	0x20000258
 8002148:	200000b4 	.word	0x200000b4

0800214c <ReadCANBusMessage>:

int ReadCANBusMessage(uint32_t messageIdentifier, uint8_t* RxData1)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
    /* Infinite loop to keep trying to read the message */
	uint32_t t = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]

    while(t < 4294967295)
 800215a:	e015      	b.n	8002188 <ReadCANBusMessage+0x3c>
    {
    	t++;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3301      	adds	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
        /* Check if a new message is available in RX FIFO 0 */
        if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData1) == HAL_OK)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	4a0d      	ldr	r2, [pc, #52]	; (800219c <ReadCANBusMessage+0x50>)
 8002166:	2140      	movs	r1, #64	; 0x40
 8002168:	480d      	ldr	r0, [pc, #52]	; (80021a0 <ReadCANBusMessage+0x54>)
 800216a:	f002 facf 	bl	800470c <HAL_FDCAN_GetRxMessage>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <ReadCANBusMessage+0x3c>
        {
            /* Validate the Identifier */
            if(RxHeader.Identifier == messageIdentifier)
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <ReadCANBusMessage+0x50>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	d101      	bne.n	8002182 <ReadCANBusMessage+0x36>
            {
                return 0; // Message successfully read and validated
 800217e:	2300      	movs	r3, #0
 8002180:	e007      	b.n	8002192 <ReadCANBusMessage+0x46>
            }
            delay_u(10);
 8002182:	200a      	movs	r0, #10
 8002184:	f000 fa02 	bl	800258c <delay_u>
    while(t < 4294967295)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800218e:	d1e5      	bne.n	800215c <ReadCANBusMessage+0x10>
        }
        // Else, ignore the error and try again
    }
    return 1;
 8002190:	2301      	movs	r3, #1
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	2000027c 	.word	0x2000027c
 80021a0:	200000b4 	.word	0x200000b4

080021a4 <Send_cell_data>:



void Send_cell_data(cell_data_t cell_data[][CELL_NUM]){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	; 0x30
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

	uint8_t cell_id = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i = 0; i < IC_NUM; i++){
 80021b2:	2300      	movs	r3, #0
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b6:	e061      	b.n	800227c <Send_cell_data+0xd8>
		for(int j = 0; j < CELL_NUM; j += 3){
 80021b8:	2300      	movs	r3, #0
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80021bc:	e058      	b.n	8002270 <Send_cell_data+0xcc>
			uint16_t buf = cell_data[i][j].voltage;
 80021be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	461a      	mov	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			uint16_t buf2 = cell_data[i][j+1].voltage;
 80021d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	461a      	mov	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021e8:	3201      	adds	r2, #1
 80021ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021ee:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t buf3 = cell_data[i][j+2].voltage;
 80021f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	461a      	mov	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002202:	3202      	adds	r2, #2
 8002204:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002208:	843b      	strh	r3, [r7, #32]

			uint8_t c1_1 = buf;
 800220a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800220c:	77fb      	strb	r3, [r7, #31]
			uint8_t c2_1 = buf >> 8;
 800220e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	b29b      	uxth	r3, r3
 8002214:	77bb      	strb	r3, [r7, #30]

			uint8_t c1_2 = buf2;
 8002216:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002218:	777b      	strb	r3, [r7, #29]
			uint8_t c2_2 = buf2 >> 8;
 800221a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	b29b      	uxth	r3, r3
 8002220:	773b      	strb	r3, [r7, #28]

			uint8_t c1_3 = buf3;
 8002222:	8c3b      	ldrh	r3, [r7, #32]
 8002224:	76fb      	strb	r3, [r7, #27]
			uint8_t c2_3 = buf3 >> 8;
 8002226:	8c3b      	ldrh	r3, [r7, #32]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	b29b      	uxth	r3, r3
 800222c:	76bb      	strb	r3, [r7, #26]


			uint8_t TxData[8] = { c1_1, c2_1, c1_2, c2_2 ,c1_3, c2_3, i, j};
 800222e:	7ffb      	ldrb	r3, [r7, #31]
 8002230:	733b      	strb	r3, [r7, #12]
 8002232:	7fbb      	ldrb	r3, [r7, #30]
 8002234:	737b      	strb	r3, [r7, #13]
 8002236:	7f7b      	ldrb	r3, [r7, #29]
 8002238:	73bb      	strb	r3, [r7, #14]
 800223a:	7f3b      	ldrb	r3, [r7, #28]
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	7efb      	ldrb	r3, [r7, #27]
 8002240:	743b      	strb	r3, [r7, #16]
 8002242:	7ebb      	ldrb	r3, [r7, #26]
 8002244:	747b      	strb	r3, [r7, #17]
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	b2db      	uxtb	r3, r3
 800224a:	74bb      	strb	r3, [r7, #18]
 800224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224e:	b2db      	uxtb	r3, r3
 8002250:	74fb      	strb	r3, [r7, #19]

			uint32_t id_c = 0x778;
 8002252:	f44f 63ef 	mov.w	r3, #1912	; 0x778
 8002256:	617b      	str	r3, [r7, #20]
			CanSend(TxData, id_c);
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	6979      	ldr	r1, [r7, #20]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff52 	bl	8002108 <CanSend>
			delay_u(100);
 8002264:	2064      	movs	r0, #100	; 0x64
 8002266:	f000 f991 	bl	800258c <delay_u>
		for(int j = 0; j < CELL_NUM; j += 3){
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	3303      	adds	r3, #3
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	2b11      	cmp	r3, #17
 8002274:	dda3      	ble.n	80021be <Send_cell_data+0x1a>
	for(int i = 0; i < IC_NUM; i++){
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	3301      	adds	r3, #1
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	2b07      	cmp	r3, #7
 8002280:	dd9a      	ble.n	80021b8 <Send_cell_data+0x14>
		}
	}
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	3730      	adds	r7, #48	; 0x30
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <Send_temp_data>:

#define TEMP_FIXED 0
void Send_temp_data(temp_data_t temp_data[][GPIO_NUM]){
 800228c:	b580      	push	{r7, lr}
 800228e:	b094      	sub	sp, #80	; 0x50
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
						CanSend(TxData2, id_t);
						delay_u(100);
		}
#else

	for(int i = 0; i < IC_NUM; i++){
 8002294:	2300      	movs	r3, #0
 8002296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002298:	e11d      	b.n	80024d6 <Send_temp_data+0x24a>

			uint32_t id_t = 1960;
 800229a:	f44f 63f5 	mov.w	r3, #1960	; 0x7a8
 800229e:	64bb      	str	r3, [r7, #72]	; 0x48

			uint16_t buf = temp_data[i][0].temp;
 80022a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022a2:	4613      	mov	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4413      	add	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	461a      	mov	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			uint16_t buf2 = temp_data[i][1].temp;
 80022b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	461a      	mov	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			uint16_t buf3 = temp_data[i][2].temp;
 80022d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	461a      	mov	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			uint8_t c1_1 = buf;
 80022e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80022ec:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			uint8_t c2_1 = buf >> 8;
 80022f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

			uint8_t c1_2 = buf2;
 80022fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002300:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			uint8_t c2_2 = buf2 >> 8;
 8002304:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	b29b      	uxth	r3, r3
 800230c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

			uint8_t c1_3 = buf3;
 8002310:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002314:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			uint8_t c2_3 = buf3 >> 8;
 8002318:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	b29b      	uxth	r3, r3
 8002320:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

			uint8_t TxData[8] = { c1_1, c2_1, c1_2, c2_2 ,c1_3, c2_3, i, 0};
 8002324:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002328:	773b      	strb	r3, [r7, #28]
 800232a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800232e:	777b      	strb	r3, [r7, #29]
 8002330:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002334:	77bb      	strb	r3, [r7, #30]
 8002336:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800233a:	77fb      	strb	r3, [r7, #31]
 800233c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002340:	f887 3020 	strb.w	r3, [r7, #32]
 8002344:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002348:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800234c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002354:	2300      	movs	r3, #0
 8002356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			CanSend(TxData, id_t);
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fed1 	bl	8002108 <CanSend>
			delay_u(100);
 8002366:	2064      	movs	r0, #100	; 0x64
 8002368:	f000 f910 	bl	800258c <delay_u>

			uint16_t buf4 = temp_data[i][3].temp;
 800236c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002380:	877b      	strh	r3, [r7, #58]	; 0x3a
			uint16_t buf5 = temp_data[i][4].temp;
 8002382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	461a      	mov	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002396:	873b      	strh	r3, [r7, #56]	; 0x38
			uint16_t buf6 = temp_data[i][3].temp;
 8002398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800239a:	4613      	mov	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80023ac:	86fb      	strh	r3, [r7, #54]	; 0x36

			uint8_t c1_4 = buf4;
 80023ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80023b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			uint8_t c2_4 = buf4 >> 8;
 80023b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

			uint8_t c1_5 = buf5;
 80023be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80023c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			uint8_t c2_5 = buf5 >> 8;
 80023c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

			uint8_t c1_6 = buf6;
 80023ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			uint8_t c2_6 = buf6 >> 8;
 80023d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

			uint8_t TxData1[8] = { c1_4, c2_4, c1_5, c2_5 ,c1_6, c2_6, i, 1};
 80023de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023e2:	753b      	strb	r3, [r7, #20]
 80023e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023e8:	757b      	strb	r3, [r7, #21]
 80023ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023ee:	75bb      	strb	r3, [r7, #22]
 80023f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80023f4:	75fb      	strb	r3, [r7, #23]
 80023f6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80023fa:	763b      	strb	r3, [r7, #24]
 80023fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002400:	767b      	strb	r3, [r7, #25]
 8002402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002404:	b2db      	uxtb	r3, r3
 8002406:	76bb      	strb	r3, [r7, #26]
 8002408:	2301      	movs	r3, #1
 800240a:	76fb      	strb	r3, [r7, #27]

			CanSend(TxData1, id_t);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fe78 	bl	8002108 <CanSend>
			delay_u(100);
 8002418:	2064      	movs	r0, #100	; 0x64
 800241a:	f000 f8b7 	bl	800258c <delay_u>

			uint16_t buf7 = temp_data[i][2].temp;
 800241e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	461a      	mov	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002432:	85fb      	strh	r3, [r7, #46]	; 0x2e
			uint16_t buf8 = temp_data[i][1].temp;
 8002434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002448:	85bb      	strh	r3, [r7, #44]	; 0x2c
			uint16_t buf9 = temp_data[i][0].temp;
 800244a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	461a      	mov	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800245e:	857b      	strh	r3, [r7, #42]	; 0x2a

			uint8_t c1_7 = buf7;
 8002460:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002462:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			uint8_t c2_7 = buf7 >> 8;
 8002466:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	b29b      	uxth	r3, r3
 800246c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			uint8_t c1_8 = buf8;
 8002470:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint8_t c2_8 = buf8 >> 8;
 8002476:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	b29b      	uxth	r3, r3
 800247c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			uint8_t c1_9 = buf9;
 8002480:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002482:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			uint8_t c2_9 = buf9 >> 8;
 8002486:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	b29b      	uxth	r3, r3
 800248c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24


			uint8_t TxData2[8] = { c1_7, c2_7, c1_8, c2_8 ,c1_9, c2_9, i, 2};
 8002490:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002494:	733b      	strb	r3, [r7, #12]
 8002496:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800249a:	737b      	strb	r3, [r7, #13]
 800249c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a0:	73bb      	strb	r3, [r7, #14]
 80024a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80024ac:	743b      	strb	r3, [r7, #16]
 80024ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024b2:	747b      	strb	r3, [r7, #17]
 80024b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	74bb      	strb	r3, [r7, #18]
 80024ba:	2302      	movs	r3, #2
 80024bc:	74fb      	strb	r3, [r7, #19]
			CanSend(TxData2, id_t);
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fe1f 	bl	8002108 <CanSend>
			delay_u(100);
 80024ca:	2064      	movs	r0, #100	; 0x64
 80024cc:	f000 f85e 	bl	800258c <delay_u>
	for(int i = 0; i < IC_NUM; i++){
 80024d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d2:	3301      	adds	r3, #1
 80024d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	2b07      	cmp	r3, #7
 80024da:	f77f aede 	ble.w	800229a <Send_temp_data+0xe>
		}
#endif



}
 80024de:	bf00      	nop
 80024e0:	bf00      	nop
 80024e2:	3750      	adds	r7, #80	; 0x50
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <Send_Soc>:



void Send_Soc(status_data_t *status_data){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Data[8];

	Tx_Data[0] = (uint8_t)status_data->soc;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80024f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024fa:	edc7 7a00 	vstr	s15, [r7]
 80024fe:	783b      	ldrb	r3, [r7, #0]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	723b      	strb	r3, [r7, #8]
	uint16_t buf = status_data->max_voltage / 10;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002508:	4a1f      	ldr	r2, [pc, #124]	; (8002588 <Send_Soc+0xa0>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	08db      	lsrs	r3, r3, #3
 8002510:	82fb      	strh	r3, [r7, #22]
	uint8_t c1 = buf;
 8002512:	8afb      	ldrh	r3, [r7, #22]
 8002514:	757b      	strb	r3, [r7, #21]
	uint8_t c2 = buf >> 8;
 8002516:	8afb      	ldrh	r3, [r7, #22]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	b29b      	uxth	r3, r3
 800251c:	753b      	strb	r3, [r7, #20]
	Tx_Data[1] = c1;
 800251e:	7d7b      	ldrb	r3, [r7, #21]
 8002520:	727b      	strb	r3, [r7, #9]
	Tx_Data[2] = c2;
 8002522:	7d3b      	ldrb	r3, [r7, #20]
 8002524:	72bb      	strb	r3, [r7, #10]
	if(status_data->air_s == true)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <Send_Soc+0x4e>
	Tx_Data[3] = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	72fb      	strb	r3, [r7, #11]
 8002534:	e001      	b.n	800253a <Send_Soc+0x52>
	else
	Tx_Data[3] = 1;
 8002536:	2301      	movs	r3, #1
 8002538:	72fb      	strb	r3, [r7, #11]

	uint16_t buf1 = (uint16_t)status_data->sum_of_cells;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002544:	ee17 3a90 	vmov	r3, s15
 8002548:	827b      	strh	r3, [r7, #18]

	Tx_Data[4]= (uint8_t)(buf1);
 800254a:	8a7b      	ldrh	r3, [r7, #18]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	733b      	strb	r3, [r7, #12]
	Tx_Data[5]= (uint8_t)(buf1 >> 8);
 8002550:	8a7b      	ldrh	r3, [r7, #18]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	b29b      	uxth	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	737b      	strb	r3, [r7, #13]

	uint16_t buf2 = (uint16_t)status_data->max_temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002560:	823b      	strh	r3, [r7, #16]

	Tx_Data[6]= (uint8_t)(buf1);
 8002562:	8a7b      	ldrh	r3, [r7, #18]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	73bb      	strb	r3, [r7, #14]
	Tx_Data[7]= (uint8_t)(buf1 >> 8);
 8002568:	8a7b      	ldrh	r3, [r7, #18]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	b29b      	uxth	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	73fb      	strb	r3, [r7, #15]

	CanSend(Tx_Data, CAN_SOC);
 8002572:	f107 0308 	add.w	r3, r7, #8
 8002576:	2197      	movs	r1, #151	; 0x97
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fdc5 	bl	8002108 <CanSend>

}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	cccccccd 	.word	0xcccccccd

0800258c <delay_u>:
#include "conf.h"

extern SPI_HandleTypeDef hspi1;


void delay_u(uint32_t us){
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <delay_u+0x58>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <delay_u+0x58>)
 800259a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259e:	60d3      	str	r3, [r2, #12]
		    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <delay_u+0x5c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <delay_u+0x5c>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6013      	str	r3, [r2, #0]
		    // Get the current number of clock cycles
		    uint32_t const startTicks = DWT->CYCCNT;
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <delay_u+0x5c>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	60fb      	str	r3, [r7, #12]
		    // Calculate the number of clock cycles for the desired delay
		    uint32_t const delayTicks = (SystemCoreClock / 1000000) * us;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <delay_u+0x60>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <delay_u+0x64>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	0c9a      	lsrs	r2, r3, #18
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	60bb      	str	r3, [r7, #8]
		    // Wait until the number of clock cycles has elapsed
		    while (DWT->CYCCNT - startTicks < delayTicks);
 80025c6:	bf00      	nop
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <delay_u+0x5c>)
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d8f8      	bhi.n	80025c8 <delay_u+0x3c>
}
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000edf0 	.word	0xe000edf0
 80025e8:	e0001000 	.word	0xe0001000
 80025ec:	20000030 	.word	0x20000030
 80025f0:	431bde83 	.word	0x431bde83

080025f4 <spi_write_read_byte>:

void delay_m(uint32_t ms){
	HAL_Delay(ms);
}

uint8_t spi_write_read_byte(uint8_t wbyte){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]

	uint8_t rxByte;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2110      	movs	r1, #16
 8002602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002606:	f002 fcbf 	bl	8004f88 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &wbyte, &rxByte, 1, SPI_TIMEOUT);
 800260a:	f107 020f 	add.w	r2, r7, #15
 800260e:	1df9      	adds	r1, r7, #7
 8002610:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2301      	movs	r3, #1
 8002618:	4806      	ldr	r0, [pc, #24]	; (8002634 <spi_write_read_byte+0x40>)
 800261a:	f003 ffde 	bl	80065da <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800261e:	2201      	movs	r2, #1
 8002620:	2110      	movs	r1, #16
 8002622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002626:	f002 fcaf 	bl	8004f88 <HAL_GPIO_WritePin>

	return rxByte;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000118 	.word	0x20000118

08002638 <spi_write_array>:

uint32_t spi_write_array(uint8_t len, uint8_t *data){
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002644:	2200      	movs	r2, #0
 8002646:	2110      	movs	r1, #16
 8002648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264c:	f002 fc9c 	bl	8004f88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, len, SPI_TIMEOUT);
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	b29a      	uxth	r2, r3
 8002654:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002658:	6839      	ldr	r1, [r7, #0]
 800265a:	4807      	ldr	r0, [pc, #28]	; (8002678 <spi_write_array+0x40>)
 800265c:	f003 fd1f 	bl	800609e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002660:	2201      	movs	r2, #1
 8002662:	2110      	movs	r1, #16
 8002664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002668:	f002 fc8e 	bl	8004f88 <HAL_GPIO_WritePin>

	return 0;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000118 	.word	0x20000118

0800267c <spi_write_then_read_array_ltc>:

uint32_t spi_write_then_read_array_ltc(uint8_t wlen, uint8_t *wbuffer, uint8_t rlen, uint8_t *rbuffer){
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	4603      	mov	r3, r0
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	4613      	mov	r3, r2
 800268c:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2110      	movs	r1, #16
 8002692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002696:	f002 fc77 	bl	8004f88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wbuffer, wlen, SPI_TIMEOUT);
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	b29a      	uxth	r2, r3
 800269e:	f643 2398 	movw	r3, #15000	; 0x3a98
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	480a      	ldr	r0, [pc, #40]	; (80026d0 <spi_write_then_read_array_ltc+0x54>)
 80026a6:	f003 fcfa 	bl	800609e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rbuffer, rlen, SPI_TIMEOUT);
 80026aa:	7bbb      	ldrb	r3, [r7, #14]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	f643 2398 	movw	r3, #15000	; 0x3a98
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4806      	ldr	r0, [pc, #24]	; (80026d0 <spi_write_then_read_array_ltc+0x54>)
 80026b6:	f003 fe60 	bl	800637a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80026ba:	2201      	movs	r2, #1
 80026bc:	2110      	movs	r1, #16
 80026be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c2:	f002 fc61 	bl	8004f88 <HAL_GPIO_WritePin>

	return 0;
 80026c6:	2300      	movs	r3, #0

}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000118 	.word	0x20000118

080026d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026da:	f001 fc16 	bl	8003f0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026de:	f000 f815 	bl	800270c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026e2:	f000 fa6f 	bl	8002bc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80026e6:	f000 fa21 	bl	8002b2c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80026ea:	f000 f931 	bl	8002950 <MX_SPI1_Init>
  MX_TIM8_Init();
 80026ee:	f000 f96d 	bl	80029cc <MX_TIM8_Init>
  MX_FDCAN1_Init();
 80026f2:	f000 f84b 	bl	800278c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80026f6:	2108      	movs	r1, #8
 80026f8:	4803      	ldr	r0, [pc, #12]	; (8002708 <main+0x34>)
 80026fa:	f005 fa25 	bl	8007b48 <HAL_TIMEx_PWMN_Start>
  uint16_t pulse = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      // Here we create a FDCAN message

	 operation_main();
 8002702:	f000 fabf 	bl	8002c84 <operation_main>
 8002706:	e7fc      	b.n	8002702 <main+0x2e>
 8002708:	2000017c 	.word	0x2000017c

0800270c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b094      	sub	sp, #80	; 0x50
 8002710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002712:	f107 0318 	add.w	r3, r7, #24
 8002716:	2238      	movs	r2, #56	; 0x38
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f006 f9e4 	bl	8008ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800272e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002732:	f002 fc41 	bl	8004fb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002736:	2302      	movs	r3, #2
 8002738:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800273a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002740:	2340      	movs	r3, #64	; 0x40
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002744:	2300      	movs	r3, #0
 8002746:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002748:	f107 0318 	add.w	r3, r7, #24
 800274c:	4618      	mov	r0, r3
 800274e:	f002 fcd7 	bl	8005100 <HAL_RCC_OscConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002758:	f000 fa8e 	bl	8002c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800275c:	230f      	movs	r3, #15
 800275e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002760:	2301      	movs	r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f002 ffdb 	bl	8005730 <HAL_RCC_ClockConfig>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002780:	f000 fa7a 	bl	8002c78 <Error_Handler>
  }
}
 8002784:	bf00      	nop
 8002786:	3750      	adds	r7, #80	; 0x50
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002792:	4b6c      	ldr	r3, [pc, #432]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 8002794:	4a6c      	ldr	r2, [pc, #432]	; (8002948 <MX_FDCAN1_Init+0x1bc>)
 8002796:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002798:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 800279a:	2200      	movs	r2, #0
 800279c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800279e:	4b69      	ldr	r3, [pc, #420]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80027a4:	4b67      	ldr	r3, [pc, #412]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80027aa:	4b66      	ldr	r3, [pc, #408]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80027b0:	4b64      	ldr	r3, [pc, #400]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80027bc:	4b61      	ldr	r3, [pc, #388]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027be:	2201      	movs	r2, #1
 80027c0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80027c2:	4b60      	ldr	r3, [pc, #384]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80027c8:	4b5e      	ldr	r3, [pc, #376]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027ca:	220d      	movs	r2, #13
 80027cc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80027ce:	4b5d      	ldr	r3, [pc, #372]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027d0:	2202      	movs	r2, #2
 80027d2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80027d4:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80027da:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027dc:	2201      	movs	r2, #1
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80027e0:	4b58      	ldr	r3, [pc, #352]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80027e6:	4b57      	ldr	r3, [pc, #348]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 29;
 80027ec:	4b55      	ldr	r3, [pc, #340]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027ee:	221d      	movs	r2, #29
 80027f0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80027f2:	4b54      	ldr	r3, [pc, #336]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80027f8:	4b52      	ldr	r3, [pc, #328]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80027fe:	4851      	ldr	r0, [pc, #324]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 8002800:	f001 fcfa 	bl	80041f8 <HAL_FDCAN_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800280a:	f000 fa35 	bl	8002c78 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan1, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 800280e:	2201      	movs	r2, #1
 8002810:	2140      	movs	r1, #64	; 0x40
 8002812:	484c      	ldr	r0, [pc, #304]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 8002814:	f001 fed5 	bl	80045c2 <HAL_FDCAN_ConfigRxFifoOverwrite>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_FDCAN1_Init+0x96>
    {
      Error_Handler();
 800281e:	f000 fa2b 	bl	8002c78 <Error_Handler>
    }
  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan1, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8002822:	2201      	movs	r2, #1
 8002824:	2141      	movs	r1, #65	; 0x41
 8002826:	4847      	ldr	r0, [pc, #284]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 8002828:	f001 fecb 	bl	80045c2 <HAL_FDCAN_ConfigRxFifoOverwrite>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_FDCAN1_Init+0xaa>
    {
      Error_Handler();
 8002832:	f000 fa21 	bl	8002c78 <Error_Handler>
    }

  //only accept config/request can messages and sync can messages
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002836:	2300      	movs	r3, #0
 8002838:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800283e:	2302      	movs	r3, #2
 8002840:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002842:	2301      	movs	r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 1900; //CANID_CONFIG;
 8002846:	f240 736c 	movw	r3, #1900	; 0x76c
 800284a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 800284c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002850:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002852:	463b      	mov	r3, r7
 8002854:	4619      	mov	r1, r3
 8002856:	483b      	ldr	r0, [pc, #236]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 8002858:	f001 fe28 	bl	80044ac <HAL_FDCAN_ConfigFilter>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_FDCAN1_Init+0xda>
    {
      Error_Handler();
 8002862:	f000 fa09 	bl	8002c78 <Error_Handler>
    }

  // Additional filter configuration for 0x52x messages
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800286e:	2302      	movs	r3, #2
 8002870:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002872:	2301      	movs	r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x520;   // Start of the range
 8002876:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800287a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x700;   // Mask for the filter. This will allow IDs 0x520 - 0x52F
 800287c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002880:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002882:	463b      	mov	r3, r7
 8002884:	4619      	mov	r1, r3
 8002886:	482f      	ldr	r0, [pc, #188]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 8002888:	f001 fe10 	bl	80044ac <HAL_FDCAN_ConfigFilter>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_FDCAN1_Init+0x10a>
  {
      Error_Handler();
 8002892:	f000 f9f1 	bl	8002c78 <Error_Handler>
  }

  // Filter configuration for message ID 150
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002896:	2300      	movs	r3, #0
 8002898:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 2; // Different index for this filter
 800289a:	2302      	movs	r3, #2
 800289c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800289e:	2302      	movs	r3, #2
 80028a0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80028a2:	2301      	movs	r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 150;   // Specific ID
 80028a6:	2396      	movs	r3, #150	; 0x96
 80028a8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;   // Mask for the filter. This will allow only ID 150
 80028aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80028ae:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80028b0:	463b      	mov	r3, r7
 80028b2:	4619      	mov	r1, r3
 80028b4:	4823      	ldr	r0, [pc, #140]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80028b6:	f001 fdf9 	bl	80044ac <HAL_FDCAN_ConfigFilter>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_FDCAN1_Init+0x138>
  {
      Error_Handler();
 80028c0:	f000 f9da 	bl	8002c78 <Error_Handler>
  }

  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 80028c4:	2301      	movs	r3, #1
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2301      	movs	r3, #1
 80028ca:	2202      	movs	r2, #2
 80028cc:	2102      	movs	r1, #2
 80028ce:	481d      	ldr	r0, [pc, #116]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80028d0:	f001 fe46 	bl	8004560 <HAL_FDCAN_ConfigGlobalFilter>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_FDCAN1_Init+0x152>
    {
      Error_Handler();
 80028da:	f000 f9cd 	bl	8002c78 <Error_Handler>
    }

  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80028de:	4819      	ldr	r0, [pc, #100]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80028e0:	f001 fea8 	bl	8004634 <HAL_FDCAN_Start>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_FDCAN1_Init+0x162>
    {
      Error_Handler();
 80028ea:	f000 f9c5 	bl	8002c78 <Error_Handler>
    }
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80028ee:	2200      	movs	r2, #0
 80028f0:	2101      	movs	r1, #1
 80028f2:	4814      	ldr	r0, [pc, #80]	; (8002944 <MX_FDCAN1_Init+0x1b8>)
 80028f4:	f001 fff6 	bl	80048e4 <HAL_FDCAN_ActivateNotification>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_FDCAN1_Init+0x176>
    {
      Error_Handler();
 80028fe:	f000 f9bb 	bl	8002c78 <Error_Handler>
    }

  TxHeader.Identifier = 0x123; // Modify this with your identifier
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <MX_FDCAN1_Init+0x1c0>)
 8002904:	f240 1223 	movw	r2, #291	; 0x123
 8002908:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <MX_FDCAN1_Init+0x1c0>)
 800290c:	2200      	movs	r2, #0
 800290e:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <MX_FDCAN1_Init+0x1c0>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <MX_FDCAN1_Init+0x1c0>)
 8002918:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800291c:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <MX_FDCAN1_Init+0x1c0>)
 8002920:	2200      	movs	r2, #0
 8002922:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <MX_FDCAN1_Init+0x1c0>)
 8002926:	2200      	movs	r2, #0
 8002928:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <MX_FDCAN1_Init+0x1c0>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <MX_FDCAN1_Init+0x1c0>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <MX_FDCAN1_Init+0x1c0>)
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 800293c:	bf00      	nop
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200000b4 	.word	0x200000b4
 8002948:	40006400 	.word	0x40006400
 800294c:	20000258 	.word	0x20000258

08002950 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <MX_SPI1_Init+0x74>)
 8002956:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <MX_SPI1_Init+0x78>)
 8002958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <MX_SPI1_Init+0x74>)
 800295c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <MX_SPI1_Init+0x74>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002968:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <MX_SPI1_Init+0x74>)
 800296a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800296e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002970:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <MX_SPI1_Init+0x74>)
 8002972:	2202      	movs	r2, #2
 8002974:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <MX_SPI1_Init+0x74>)
 8002978:	2201      	movs	r2, #1
 800297a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_SPI1_Init+0x74>)
 800297e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002982:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <MX_SPI1_Init+0x74>)
 8002986:	2238      	movs	r2, #56	; 0x38
 8002988:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_SPI1_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <MX_SPI1_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <MX_SPI1_Init+0x74>)
 8002998:	2200      	movs	r2, #0
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_SPI1_Init+0x74>)
 800299e:	2207      	movs	r2, #7
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <MX_SPI1_Init+0x74>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_SPI1_Init+0x74>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029ae:	4805      	ldr	r0, [pc, #20]	; (80029c4 <MX_SPI1_Init+0x74>)
 80029b0:	f003 faca 	bl	8005f48 <HAL_SPI_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80029ba:	f000 f95d 	bl	8002c78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000118 	.word	0x20000118
 80029c8:	40013000 	.word	0x40013000

080029cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b09c      	sub	sp, #112	; 0x70
 80029d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
 80029fc:	615a      	str	r2, [r3, #20]
 80029fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	2234      	movs	r2, #52	; 0x34
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f006 f86e 	bl	8008ae8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002a0c:	4b45      	ldr	r3, [pc, #276]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002a0e:	4a46      	ldr	r2, [pc, #280]	; (8002b28 <MX_TIM8_Init+0x15c>)
 8002a10:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 8002a12:	4b44      	ldr	r3, [pc, #272]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002a14:	220f      	movs	r2, #15
 8002a16:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a18:	4b42      	ldr	r3, [pc, #264]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 39;
 8002a1e:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002a20:	2227      	movs	r2, #39	; 0x27
 8002a22:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a24:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a2a:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a30:	4b3c      	ldr	r3, [pc, #240]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002a36:	483b      	ldr	r0, [pc, #236]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002a38:	f004 f99e 	bl	8006d78 <HAL_TIM_Base_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002a42:	f000 f919 	bl	8002c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002a4c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a50:	4619      	mov	r1, r3
 8002a52:	4834      	ldr	r0, [pc, #208]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002a54:	f004 fb5c 	bl	8007110 <HAL_TIM_ConfigClockSource>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002a5e:	f000 f90b 	bl	8002c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002a62:	4830      	ldr	r0, [pc, #192]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002a64:	f004 f9df 	bl	8006e26 <HAL_TIM_PWM_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002a6e:	f000 f903 	bl	8002c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a82:	4619      	mov	r1, r3
 8002a84:	4827      	ldr	r0, [pc, #156]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002a86:	f005 f913 	bl	8007cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8002a90:	f000 f8f2 	bl	8002c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a94:	2360      	movs	r3, #96	; 0x60
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 19;
 8002a98:	2313      	movs	r3, #19
 8002a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002aac:	2300      	movs	r3, #0
 8002aae:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ab0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	481a      	ldr	r0, [pc, #104]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002aba:	f004 fa15 	bl	8006ee8 <HAL_TIM_PWM_ConfigChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8002ac4:	f000 f8d8 	bl	8002c78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ae0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002af8:	2300      	movs	r3, #0
 8002afa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	4619      	mov	r1, r3
 8002b04:	4807      	ldr	r0, [pc, #28]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002b06:	f005 f955 	bl	8007db4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8002b10:	f000 f8b2 	bl	8002c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002b14:	4803      	ldr	r0, [pc, #12]	; (8002b24 <MX_TIM8_Init+0x158>)
 8002b16:	f000 ff97 	bl	8003a48 <HAL_TIM_MspPostInit>

}
 8002b1a:	bf00      	nop
 8002b1c:	3770      	adds	r7, #112	; 0x70
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	2000017c 	.word	0x2000017c
 8002b28:	40013400 	.word	0x40013400

08002b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b30:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b32:	4a23      	ldr	r2, [pc, #140]	; (8002bc0 <MX_USART2_UART_Init+0x94>)
 8002b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b36:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b50:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b52:	220c      	movs	r2, #12
 8002b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b56:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b5c:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b74:	4811      	ldr	r0, [pc, #68]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b76:	f005 f9e2 	bl	8007f3e <HAL_UART_Init>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b80:	f000 f87a 	bl	8002c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b84:	2100      	movs	r1, #0
 8002b86:	480d      	ldr	r0, [pc, #52]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b88:	f005 fee4 	bl	8008954 <HAL_UARTEx_SetTxFifoThreshold>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b92:	f000 f871 	bl	8002c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b96:	2100      	movs	r1, #0
 8002b98:	4808      	ldr	r0, [pc, #32]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002b9a:	f005 ff19 	bl	80089d0 <HAL_UARTEx_SetRxFifoThreshold>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002ba4:	f000 f868 	bl	8002c78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ba8:	4804      	ldr	r0, [pc, #16]	; (8002bbc <MX_USART2_UART_Init+0x90>)
 8002baa:	f005 fe9a 	bl	80088e2 <HAL_UARTEx_DisableFifoMode>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002bb4:	f000 f860 	bl	8002c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	200001c8 	.word	0x200001c8
 8002bc0:	40004400 	.word	0x40004400

08002bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bca:	f107 030c 	add.w	r3, r7, #12
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
 8002bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bda:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <MX_GPIO_Init+0xac>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	4a24      	ldr	r2, [pc, #144]	; (8002c70 <MX_GPIO_Init+0xac>)
 8002be0:	f043 0320 	orr.w	r3, r3, #32
 8002be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <MX_GPIO_Init+0xac>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <MX_GPIO_Init+0xac>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	4a1e      	ldr	r2, [pc, #120]	; (8002c70 <MX_GPIO_Init+0xac>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <MX_GPIO_Init+0xac>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <MX_GPIO_Init+0xac>)
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <MX_GPIO_Init+0xac>)
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <MX_GPIO_Init+0xac>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8002c22:	2200      	movs	r2, #0
 8002c24:	f248 7110 	movw	r1, #34576	; 0x8710
 8002c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2c:	f002 f9ac 	bl	8004f88 <HAL_GPIO_WritePin>
                          |FAN_control_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_Pin Led_debug_Pin PRE_Done_Pin AMS_Ok_Pin
                           FAN_control_Pin */
  GPIO_InitStruct.Pin = CS_Pin|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8002c30:	f248 7310 	movw	r3, #34576	; 0x8710
 8002c34:	60fb      	str	r3, [r7, #12]
                          |FAN_control_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c36:	2301      	movs	r3, #1
 8002c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	4619      	mov	r1, r3
 8002c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c4c:	f002 f802 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_PRE_Pin AIR__Pin AIR_B7_Pin */
  GPIO_InitStruct.Pin = AIR_PRE_Pin|AIR__Pin|AIR_B7_Pin;
 8002c50:	23d0      	movs	r3, #208	; 0xd0
 8002c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	4619      	mov	r1, r3
 8002c62:	4804      	ldr	r0, [pc, #16]	; (8002c74 <MX_GPIO_Init+0xb0>)
 8002c64:	f001 fff6 	bl	8004c54 <HAL_GPIO_Init>

}
 8002c68:	bf00      	nop
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000
 8002c74:	48000400 	.word	0x48000400

08002c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c7c:	b672      	cpsid	i
}
 8002c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	open_AIR();
		open_PRE();
 8002c80:	e7fe      	b.n	8002c80 <Error_Handler+0x8>
	...

08002c84 <operation_main>:

int charger_event_flag;
static uint8_t charger_event_counter;

#define MODE_CAN 0
void operation_main(void){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0

	open_AIR();
 8002c8a:	f000 f891 	bl	8002db0 <open_AIR>
	open_PRE();
 8002c8e:	f000 f8c5 	bl	8002e1c <open_PRE>



	initialize();
 8002c92:	f7fe f910 	bl	8000eb6 <initialize>
	//fan_energize();
	init_slave_cfg();
 8002c96:	f000 fc59 	bl	800354c <init_slave_cfg>
	uint32_t timer = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	603b      	str	r3, [r7, #0]
	for(uint32_t i=0; i<NUMB_REASON_CODES; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
 8002ca2:	e008      	b.n	8002cb6 <operation_main+0x32>
		{
			status_data.error_counters[i]=0;
 8002ca4:	4a3e      	ldr	r2, [pc, #248]	; (8002da0 <operation_main+0x11c>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	331e      	adds	r3, #30
 8002caa:	2100      	movs	r1, #0
 8002cac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint32_t i=0; i<NUMB_REASON_CODES; i++)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	d9f3      	bls.n	8002ca4 <operation_main+0x20>
		}

		status_data.soc = 100;
 8002cbc:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <operation_main+0x11c>)
 8002cbe:	4a39      	ldr	r2, [pc, #228]	; (8002da4 <operation_main+0x120>)
 8002cc0:	611a      	str	r2, [r3, #16]
		status_data.pec_error_counter = 0;
 8002cc2:	4b37      	ldr	r3, [pc, #220]	; (8002da0 <operation_main+0x11c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	66da      	str	r2, [r3, #108]	; 0x6c
		status_data.pec_error_counter_last = 0;
 8002cc8:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <operation_main+0x11c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	671a      	str	r2, [r3, #112]	; 0x70

		status_data.limping = 0;
 8002cce:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <operation_main+0x11c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		status_data.recieved_IVT = 0;
 8002cd6:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <operation_main+0x11c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

		status_data.opmode = 0;
 8002cde:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <operation_main+0x11c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		status_data.opmode = (1 << 0)|(1 << 4);
 8002ce6:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <operation_main+0x11c>)
 8002ce8:	2211      	movs	r2, #17
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		status_data.mode = 0;
 8002cee:	4b2c      	ldr	r3, [pc, #176]	; (8002da0 <operation_main+0x11c>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	711a      	strb	r2, [r3, #4]

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfe:	f002 f943 	bl	8004f88 <HAL_GPIO_WritePin>
#endif

	while(1){


		switch (status_data.mode){
 8002d02:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <operation_main+0x11c>)
 8002d04:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d846      	bhi.n	8002d9a <operation_main+0x116>
 8002d0c:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <operation_main+0x90>)
 8002d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d12:	bf00      	nop
 8002d14:	08002d25 	.word	0x08002d25
 8002d18:	08002d3d 	.word	0x08002d3d
 8002d1c:	08002d71 	.word	0x08002d71
 8002d20:	08002d77 	.word	0x08002d77
			case 0:
				core_routine(RETEST_YES);
 8002d24:	2001      	movs	r0, #1
 8002d26:	f000 f935 	bl	8002f94 <core_routine>
				status_data.uptime++;
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <operation_main+0x11c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <operation_main+0x11c>)
 8002d32:	6013      	str	r3, [r2, #0]
				//if(status_data.uptime % 10 == 0)
					//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
			    HAL_Delay(100);
 8002d34:	2064      	movs	r0, #100	; 0x64
 8002d36:	f001 f959 	bl	8003fec <HAL_Delay>

				break;
 8002d3a:	e02f      	b.n	8002d9c <operation_main+0x118>
			case 1:
				read_cell_voltage();
 8002d3c:	f000 fb84 	bl	8003448 <read_cell_voltage>
				read_temp_measurement();
 8002d40:	f000 fbd2 	bl	80034e8 <read_temp_measurement>
				get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002d44:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <operation_main+0x11c>)
 8002d46:	4918      	ldr	r1, [pc, #96]	; (8002da8 <operation_main+0x124>)
 8002d48:	2008      	movs	r0, #8
 8002d4a:	f7ff f870 	bl	8001e2e <get_minmax_voltage>
				get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8002d4e:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <operation_main+0x11c>)
 8002d50:	4916      	ldr	r1, [pc, #88]	; (8002dac <operation_main+0x128>)
 8002d52:	2008      	movs	r0, #8
 8002d54:	f7fe ffd8 	bl	8001d08 <get_minmax_temperature>
				calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 8002d58:	4a11      	ldr	r2, [pc, #68]	; (8002da0 <operation_main+0x11c>)
 8002d5a:	4913      	ldr	r1, [pc, #76]	; (8002da8 <operation_main+0x124>)
 8002d5c:	2008      	movs	r0, #8
 8002d5e:	f7fe ff6d 	bl	8001c3c <calc_sum_of_cells>
				balance_routine();
 8002d62:	f000 fb0f 	bl	8003384 <balance_routine>

				HAL_Delay(1900);
 8002d66:	f240 706c 	movw	r0, #1900	; 0x76c
 8002d6a:	f001 f93f 	bl	8003fec <HAL_Delay>

				break;
 8002d6e:	e015      	b.n	8002d9c <operation_main+0x118>
			case 2:

				charge_routine();
 8002d70:	f000 f898 	bl	8002ea4 <charge_routine>
				break;
 8002d74:	e012      	b.n	8002d9c <operation_main+0x118>
			case 3:
				//debug_routine();
				read_cell_voltage();
 8002d76:	f000 fb67 	bl	8003448 <read_cell_voltage>
				read_temp_measurement();
 8002d7a:	f000 fbb5 	bl	80034e8 <read_temp_measurement>
				get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <operation_main+0x11c>)
 8002d80:	490a      	ldr	r1, [pc, #40]	; (8002dac <operation_main+0x128>)
 8002d82:	2008      	movs	r0, #8
 8002d84:	f7fe ffc0 	bl	8001d08 <get_minmax_temperature>
				get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002d88:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <operation_main+0x11c>)
 8002d8a:	4907      	ldr	r1, [pc, #28]	; (8002da8 <operation_main+0x124>)
 8002d8c:	2008      	movs	r0, #8
 8002d8e:	f7ff f84e 	bl	8001e2e <get_minmax_voltage>
				HAL_Delay(100);
 8002d92:	2064      	movs	r0, #100	; 0x64
 8002d94:	f001 f92a 	bl	8003fec <HAL_Delay>

				break;
 8002d98:	e000      	b.n	8002d9c <operation_main+0x118>
			default:
				break;
 8002d9a:	bf00      	nop
		switch (status_data.mode){
 8002d9c:	e7b1      	b.n	8002d02 <operation_main+0x7e>
 8002d9e:	bf00      	nop
 8002da0:	20000624 	.word	0x20000624
 8002da4:	42c80000 	.word	0x42c80000
 8002da8:	200002a4 	.word	0x200002a4
 8002dac:	200003c4 	.word	0x200003c4

08002db0 <open_AIR>:
		Data is checked against limits and a return value is generated.

	\return status of test_limits function (0: OK, -1 FAIL).
*/

void open_AIR(void){
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8002db4:	2200      	movs	r2, #0
 8002db6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dbe:	f002 f8e3 	bl	8004f88 <HAL_GPIO_WritePin>
	status_data.air_s = false;
 8002dc2:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <open_AIR+0x20>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000624 	.word	0x20000624

08002dd4 <close_AIR>:

void close_AIR(void){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de2:	f002 f8d1 	bl	8004f88 <HAL_GPIO_WritePin>
	status_data.air_s = true;
 8002de6:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <close_AIR+0x20>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000624 	.word	0x20000624

08002df8 <close_PRE>:

void close_PRE(void){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e06:	f002 f8bf 	bl	8004f88 <HAL_GPIO_WritePin>
	status_data.pre_s = true;
 8002e0a:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <close_PRE+0x20>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000624 	.word	0x20000624

08002e1c <open_PRE>:

void open_PRE(void){
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e2a:	f002 f8ad 	bl	8004f88 <HAL_GPIO_WritePin>
	status_data.pre_s = false;
 8002e2e:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <open_PRE+0x20>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000624 	.word	0x20000624

08002e40 <AMS_OK>:

int AMS_OK(status_data_t *status_data, limit_t *limit){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
	if(status_data->min_voltage > limit->min_voltage && status_data->max_voltage < limit->max_voltage){
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	885b      	ldrh	r3, [r3, #2]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d91e      	bls.n	8002e94 <AMS_OK+0x54>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d218      	bcs.n	8002e94 <AMS_OK+0x54>
		if(status_data->min_temp > limit->min_temp && status_data->max_temp < limit->max_temp){
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	dd10      	ble.n	8002e94 <AMS_OK+0x54>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	da08      	bge.n	8002e94 <AMS_OK+0x54>
			if(status_data->recieved_IVT)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <AMS_OK+0x50>
				close_AIR();
 8002e8c:	f7ff ffa2 	bl	8002dd4 <close_AIR>
			return 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e002      	b.n	8002e9a <AMS_OK+0x5a>
		}
	}
	open_AIR();
 8002e94:	f7ff ff8c 	bl	8002db0 <open_AIR>
	return 1;
 8002e98:	2301      	movs	r3, #1
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <charge_routine>:




int8_t charge_routine(void){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0


	uint8_t flag = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]


	uint8_t RxData2[8];
		while(ReadCANBusMessage(0x96, &RxData2)){
 8002eae:	e002      	b.n	8002eb6 <charge_routine+0x12>
			delay_u(200);
 8002eb0:	20c8      	movs	r0, #200	; 0xc8
 8002eb2:	f7ff fb6b 	bl	800258c <delay_u>
		while(ReadCANBusMessage(0x96, &RxData2)){
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	2096      	movs	r0, #150	; 0x96
 8002ebc:	f7ff f946 	bl	800214c <ReadCANBusMessage>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f4      	bne.n	8002eb0 <charge_routine+0xc>
		}

	while(1){
		status_data.air_m = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002ec6:	2140      	movs	r1, #64	; 0x40
 8002ec8:	482d      	ldr	r0, [pc, #180]	; (8002f80 <charge_routine+0xdc>)
 8002eca:	f002 f845 	bl	8004f58 <HAL_GPIO_ReadPin>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf14      	ite	ne
 8002ed4:	2301      	movne	r3, #1
 8002ed6:	2300      	moveq	r3, #0
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <charge_routine+0xe0>)
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		status_data.air_p = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	4827      	ldr	r0, [pc, #156]	; (8002f80 <charge_routine+0xdc>)
 8002ee4:	f002 f838 	bl	8004f58 <HAL_GPIO_ReadPin>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bf14      	ite	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	2300      	moveq	r3, #0
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <charge_routine+0xe0>)
 8002ef6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		status_data.air_pre = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8002efa:	2110      	movs	r1, #16
 8002efc:	4820      	ldr	r0, [pc, #128]	; (8002f80 <charge_routine+0xdc>)
 8002efe:	f002 f82b 	bl	8004f58 <HAL_GPIO_ReadPin>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf14      	ite	ne
 8002f08:	2301      	movne	r3, #1
 8002f0a:	2300      	moveq	r3, #0
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <charge_routine+0xe0>)
 8002f10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

		empty_disch_cfg();
 8002f14:	f000 fa58 	bl	80033c8 <empty_disch_cfg>
		read_cell_voltage();
 8002f18:	f000 fa96 	bl	8003448 <read_cell_voltage>
		read_temp_measurement();
 8002f1c:	f000 fae4 	bl	80034e8 <read_temp_measurement>
		get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002f20:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <charge_routine+0xe0>)
 8002f22:	4919      	ldr	r1, [pc, #100]	; (8002f88 <charge_routine+0xe4>)
 8002f24:	2008      	movs	r0, #8
 8002f26:	f7fe ff82 	bl	8001e2e <get_minmax_voltage>
		get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8002f2a:	4a16      	ldr	r2, [pc, #88]	; (8002f84 <charge_routine+0xe0>)
 8002f2c:	4917      	ldr	r1, [pc, #92]	; (8002f8c <charge_routine+0xe8>)
 8002f2e:	2008      	movs	r0, #8
 8002f30:	f7fe feea 	bl	8001d08 <get_minmax_temperature>
		calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <charge_routine+0xe0>)
 8002f36:	4914      	ldr	r1, [pc, #80]	; (8002f88 <charge_routine+0xe4>)
 8002f38:	2008      	movs	r0, #8
 8002f3a:	f7fe fe7f 	bl	8001c3c <calc_sum_of_cells>
		AMS_OK(&status_data, &limits);
 8002f3e:	4914      	ldr	r1, [pc, #80]	; (8002f90 <charge_routine+0xec>)
 8002f40:	4810      	ldr	r0, [pc, #64]	; (8002f84 <charge_routine+0xe0>)
 8002f42:	f7ff ff7d 	bl	8002e40 <AMS_OK>
		//fan_control(&status_data);
		set_fan_duty_cycle(&status_data);
 8002f46:	480f      	ldr	r0, [pc, #60]	; (8002f84 <charge_routine+0xe0>)
 8002f48:	f000 fc84 	bl	8003854 <set_fan_duty_cycle>

	#if IVT
		read_IVT(&status_data);
 8002f4c:	480d      	ldr	r0, [pc, #52]	; (8002f84 <charge_routine+0xe0>)
 8002f4e:	f000 f895 	bl	800307c <read_IVT>
		calculate_soc(&status_data);
 8002f52:	480c      	ldr	r0, [pc, #48]	; (8002f84 <charge_routine+0xe0>)
 8002f54:	f7fe feb8 	bl	8001cc8 <calculate_soc>
		precharge_compare();
 8002f58:	f000 f970 	bl	800323c <precharge_compare>
		calculate_soc(&status_data);
 8002f5c:	4809      	ldr	r0, [pc, #36]	; (8002f84 <charge_routine+0xe0>)
 8002f5e:	f7fe feb3 	bl	8001cc8 <calculate_soc>
	#endif

	#if CAN_ENABLED

		Send_cell_data(cell_data);
 8002f62:	4809      	ldr	r0, [pc, #36]	; (8002f88 <charge_routine+0xe4>)
 8002f64:	f7ff f91e 	bl	80021a4 <Send_cell_data>

		Send_temp_data(temp_data);
 8002f68:	4808      	ldr	r0, [pc, #32]	; (8002f8c <charge_routine+0xe8>)
 8002f6a:	f7ff f98f 	bl	800228c <Send_temp_data>
		Send_Soc(&status_data);
 8002f6e:	4805      	ldr	r0, [pc, #20]	; (8002f84 <charge_routine+0xe0>)
 8002f70:	f7ff faba 	bl	80024e8 <Send_Soc>
	#endif

		balance_routine();
 8002f74:	f000 fa06 	bl	8003384 <balance_routine>
		HAL_Delay(100);
 8002f78:	2064      	movs	r0, #100	; 0x64
 8002f7a:	f001 f837 	bl	8003fec <HAL_Delay>
	while(1){
 8002f7e:	e7a2      	b.n	8002ec6 <charge_routine+0x22>
 8002f80:	48000400 	.word	0x48000400
 8002f84:	20000624 	.word	0x20000624
 8002f88:	200002a4 	.word	0x200002a4
 8002f8c:	200003c4 	.word	0x200003c4
 8002f90:	20000000 	.word	0x20000000

08002f94 <core_routine>:
}




int8_t core_routine(int32_t retest){
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

	status_data.air_m = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002f9c:	2140      	movs	r1, #64	; 0x40
 8002f9e:	4832      	ldr	r0, [pc, #200]	; (8003068 <core_routine+0xd4>)
 8002fa0:	f001 ffda 	bl	8004f58 <HAL_GPIO_ReadPin>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	4b2e      	ldr	r3, [pc, #184]	; (800306c <core_routine+0xd8>)
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	status_data.air_p = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8002fb6:	2180      	movs	r1, #128	; 0x80
 8002fb8:	482b      	ldr	r0, [pc, #172]	; (8003068 <core_routine+0xd4>)
 8002fba:	f001 ffcd 	bl	8004f58 <HAL_GPIO_ReadPin>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4b28      	ldr	r3, [pc, #160]	; (800306c <core_routine+0xd8>)
 8002fcc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	status_data.air_pre = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8002fd0:	2110      	movs	r1, #16
 8002fd2:	4825      	ldr	r0, [pc, #148]	; (8003068 <core_routine+0xd4>)
 8002fd4:	f001 ffc0 	bl	8004f58 <HAL_GPIO_ReadPin>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf14      	ite	ne
 8002fde:	2301      	movne	r3, #1
 8002fe0:	2300      	moveq	r3, #0
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b21      	ldr	r3, [pc, #132]	; (800306c <core_routine+0xd8>)
 8002fe6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	empty_disch_cfg();
 8002fea:	f000 f9ed 	bl	80033c8 <empty_disch_cfg>
	read_cell_voltage();
 8002fee:	f000 fa2b 	bl	8003448 <read_cell_voltage>
	read_temp_measurement();
 8002ff2:	f000 fa79 	bl	80034e8 <read_temp_measurement>
	get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <core_routine+0xd8>)
 8002ff8:	491d      	ldr	r1, [pc, #116]	; (8003070 <core_routine+0xdc>)
 8002ffa:	2008      	movs	r0, #8
 8002ffc:	f7fe ff17 	bl	8001e2e <get_minmax_voltage>
	get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8003000:	4a1a      	ldr	r2, [pc, #104]	; (800306c <core_routine+0xd8>)
 8003002:	491c      	ldr	r1, [pc, #112]	; (8003074 <core_routine+0xe0>)
 8003004:	2008      	movs	r0, #8
 8003006:	f7fe fe7f 	bl	8001d08 <get_minmax_temperature>
	calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 800300a:	4a18      	ldr	r2, [pc, #96]	; (800306c <core_routine+0xd8>)
 800300c:	4918      	ldr	r1, [pc, #96]	; (8003070 <core_routine+0xdc>)
 800300e:	2008      	movs	r0, #8
 8003010:	f7fe fe14 	bl	8001c3c <calc_sum_of_cells>
	AMS_OK(&status_data, &limits);
 8003014:	4918      	ldr	r1, [pc, #96]	; (8003078 <core_routine+0xe4>)
 8003016:	4815      	ldr	r0, [pc, #84]	; (800306c <core_routine+0xd8>)
 8003018:	f7ff ff12 	bl	8002e40 <AMS_OK>
	set_fan_duty_cycle(&status_data);

 800301c:	4813      	ldr	r0, [pc, #76]	; (800306c <core_routine+0xd8>)
 800301e:	f000 fc19 	bl	8003854 <set_fan_duty_cycle>
#if IVT
	read_IVT(&status_data);
	calculate_soc(&status_data);
 8003022:	4812      	ldr	r0, [pc, #72]	; (800306c <core_routine+0xd8>)
 8003024:	f000 f82a 	bl	800307c <read_IVT>
	precharge_compare();
 8003028:	4810      	ldr	r0, [pc, #64]	; (800306c <core_routine+0xd8>)
 800302a:	f7fe fe4d 	bl	8001cc8 <calculate_soc>
	calculate_soc(&status_data);
 800302e:	f000 f905 	bl	800323c <precharge_compare>
#endif
 8003032:	480e      	ldr	r0, [pc, #56]	; (800306c <core_routine+0xd8>)
 8003034:	f7fe fe48 	bl	8001cc8 <calculate_soc>

#if CAN_ENABLED

	Send_cell_data(cell_data);
	Send_temp_data(temp_data);
 8003038:	480d      	ldr	r0, [pc, #52]	; (8003070 <core_routine+0xdc>)
 800303a:	f7ff f8b3 	bl	80021a4 <Send_cell_data>
	Send_Soc(&status_data);
 800303e:	480d      	ldr	r0, [pc, #52]	; (8003074 <core_routine+0xe0>)
 8003040:	f7ff f924 	bl	800228c <Send_temp_data>
	test_limp(&status_data, &limits);
 8003044:	4809      	ldr	r0, [pc, #36]	; (800306c <core_routine+0xd8>)
 8003046:	f7ff fa4f 	bl	80024e8 <Send_Soc>
#endif


 800304a:	490b      	ldr	r1, [pc, #44]	; (8003078 <core_routine+0xe4>)
 800304c:	4807      	ldr	r0, [pc, #28]	; (800306c <core_routine+0xd8>)
 800304e:	f000 fb1e 	bl	800368e <test_limp>


	return test_limits(&status_data, &limits, retest);
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4908      	ldr	r1, [pc, #32]	; (8003078 <core_routine+0xe4>)
 8003056:	4805      	ldr	r0, [pc, #20]	; (800306c <core_routine+0xd8>)
 8003058:	f000 fb53 	bl	8003702 <test_limits>
 800305c:	4603      	mov	r3, r0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	48000400 	.word	0x48000400
 800306c:	20000624 	.word	0x20000624
 8003070:	200002a4 	.word	0x200002a4
 8003074:	200003c4 	.word	0x200003c4
 8003078:	20000000 	.word	0x20000000

0800307c <read_IVT>:

void read_IVT(status_data_t *status_data){
 800307c:	b580      	push	{r7, lr}
 800307e:	b08c      	sub	sp, #48	; 0x30
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

	uint8_t RxData1[8];

	uint8_t check = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for(int i = 0; i < 5000; i++){
 800308a:	2300      	movs	r3, #0
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
 800308e:	e013      	b.n	80030b8 <read_IVT+0x3c>

		check = ReadCANBusMessage(0x522, &RxData1);
 8003090:	f107 0320 	add.w	r3, r7, #32
 8003094:	4619      	mov	r1, r3
 8003096:	f240 5022 	movw	r0, #1314	; 0x522
 800309a:	f7ff f857 	bl	800214c <ReadCANBusMessage>
 800309e:	4603      	mov	r3, r0
 80030a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(check == 0)
 80030a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <read_IVT+0x48>
			break;
		delay_u(200);
 80030ac:	20c8      	movs	r0, #200	; 0xc8
 80030ae:	f7ff fa6d 	bl	800258c <delay_u>
	for(int i = 0; i < 5000; i++){
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	3301      	adds	r3, #1
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	f241 3287 	movw	r2, #4999	; 0x1387
 80030be:	4293      	cmp	r3, r2
 80030c0:	dde6      	ble.n	8003090 <read_IVT+0x14>
 80030c2:	e000      	b.n	80030c6 <read_IVT+0x4a>
			break;
 80030c4:	bf00      	nop
	}

	if(check){
 80030c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <read_IVT+0x66>
		status_data->recieved_IVT = 0;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		AMS_OK(&status_data, &limits); //TODO check if it works
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	4956      	ldr	r1, [pc, #344]	; (8003234 <read_IVT+0x1b8>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff feb0 	bl	8002e40 <AMS_OK>
 80030e0:	e003      	b.n	80030ea <read_IVT+0x6e>
	}
	else{
		status_data->recieved_IVT = 1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	}
	//delay_u(500);

	if(status_data->recieved_IVT){
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 809a 	beq.w	800322a <read_IVT+0x1ae>
		status_data->IVT_U1 = (uint32_t)(RxData1[5] | (RxData1[4] << 8) | (RxData1[3] << 16) | (RxData1[2] << 24) );
 80030f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80030fa:	461a      	mov	r2, r3
 80030fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	431a      	orrs	r2, r3
 8003104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	ea42 0103 	orr.w	r1, r2, r3
 800310e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003112:	061a      	lsls	r2, r3, #24
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	430a      	orrs	r2, r1
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
		status_data->IVT_U1_f = status_data->IVT_U1 / 1000.0f;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003238 <read_IVT+0x1bc>
 800312c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003130:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		uint8_t RxData2[8];
		while(ReadCANBusMessage(0x523, &RxData2)){
 8003134:	e002      	b.n	800313c <read_IVT+0xc0>
			delay_u(200);
 8003136:	20c8      	movs	r0, #200	; 0xc8
 8003138:	f7ff fa28 	bl	800258c <delay_u>
		while(ReadCANBusMessage(0x523, &RxData2)){
 800313c:	f107 0318 	add.w	r3, r7, #24
 8003140:	4619      	mov	r1, r3
 8003142:	f240 5023 	movw	r0, #1315	; 0x523
 8003146:	f7ff f801 	bl	800214c <ReadCANBusMessage>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f2      	bne.n	8003136 <read_IVT+0xba>
		}
		//delay_u(500);
		status_data->IVT_U2 = (uint32_t)(RxData2[5] | (RxData2[4] << 8) | (RxData2[3] << 16) | (RxData2[2] << 24) );
 8003150:	7f7b      	ldrb	r3, [r7, #29]
 8003152:	461a      	mov	r2, r3
 8003154:	7f3b      	ldrb	r3, [r7, #28]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	431a      	orrs	r2, r3
 800315a:	7efb      	ldrb	r3, [r7, #27]
 800315c:	041b      	lsls	r3, r3, #16
 800315e:	ea42 0103 	orr.w	r1, r2, r3
 8003162:	7ebb      	ldrb	r3, [r7, #26]
 8003164:	061a      	lsls	r2, r3, #24
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	430a      	orrs	r2, r1
 800316a:	64da      	str	r2, [r3, #76]	; 0x4c
		status_data->IVT_U2_f = status_data->IVT_U2 / 1000.0f;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003238 <read_IVT+0x1bc>
 800317e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003182:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		uint8_t RxData3[8];
		while(ReadCANBusMessage(0x528, &RxData3)){
 8003186:	e002      	b.n	800318e <read_IVT+0x112>
			delay_u(200);
 8003188:	20c8      	movs	r0, #200	; 0xc8
 800318a:	f7ff f9ff 	bl	800258c <delay_u>
		while(ReadCANBusMessage(0x528, &RxData3)){
 800318e:	f107 0310 	add.w	r3, r7, #16
 8003192:	4619      	mov	r1, r3
 8003194:	f44f 60a5 	mov.w	r0, #1320	; 0x528
 8003198:	f7fe ffd8 	bl	800214c <ReadCANBusMessage>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f2      	bne.n	8003188 <read_IVT+0x10c>
		}
		//delay_u(500);
		status_data->IVT_Wh = (uint32_t)(RxData3[5] | (RxData3[4] << 8) | (RxData3[3] << 16) | (RxData3[2] << 24) );
 80031a2:	7d7b      	ldrb	r3, [r7, #21]
 80031a4:	461a      	mov	r2, r3
 80031a6:	7d3b      	ldrb	r3, [r7, #20]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	431a      	orrs	r2, r3
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	ea42 0103 	orr.w	r1, r2, r3
 80031b4:	7cbb      	ldrb	r3, [r7, #18]
 80031b6:	061a      	lsls	r2, r3, #24
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
		status_data->IVT_Wh_f = status_data->IVT_Wh / 1000.0f;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003238 <read_IVT+0x1bc>
 80031d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031d4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

		uint8_t RxData4[8];
			while(ReadCANBusMessage(0x521, &RxData4)){
 80031d8:	e002      	b.n	80031e0 <read_IVT+0x164>
				delay_u(200);
 80031da:	20c8      	movs	r0, #200	; 0xc8
 80031dc:	f7ff f9d6 	bl	800258c <delay_u>
			while(ReadCANBusMessage(0x521, &RxData4)){
 80031e0:	f107 0308 	add.w	r3, r7, #8
 80031e4:	4619      	mov	r1, r3
 80031e6:	f240 5021 	movw	r0, #1313	; 0x521
 80031ea:	f7fe ffaf 	bl	800214c <ReadCANBusMessage>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f2      	bne.n	80031da <read_IVT+0x15e>
			}
		status_data->IVT_I = (uint32_t)(RxData4[5] | (RxData4[4] << 8) | (RxData4[3] << 16) | (RxData4[2] << 24) );
 80031f4:	7b7b      	ldrb	r3, [r7, #13]
 80031f6:	461a      	mov	r2, r3
 80031f8:	7b3b      	ldrb	r3, [r7, #12]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	431a      	orrs	r2, r3
 80031fe:	7afb      	ldrb	r3, [r7, #11]
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	ea42 0103 	orr.w	r1, r2, r3
 8003206:	7abb      	ldrb	r3, [r7, #10]
 8003208:	061a      	lsls	r2, r3, #24
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	430a      	orrs	r2, r1
 800320e:	665a      	str	r2, [r3, #100]	; 0x64
		status_data->IVT_I_f = status_data->IVT_I / 1000.0f;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003238 <read_IVT+0x1bc>
 8003222:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003226:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	}


}
 800322a:	bf00      	nop
 800322c:	3730      	adds	r7, #48	; 0x30
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000000 	.word	0x20000000
 8003238:	447a0000 	.word	0x447a0000

0800323c <precharge_compare>:

void precharge_compare(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0

//TODO

	float percentage;
	float pre = status_data.IVT_U1_f;
 8003242:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <precharge_compare+0xc0>)
 8003244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003246:	60fb      	str	r3, [r7, #12]
	float air_p = status_data.IVT_U2_f;
 8003248:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <precharge_compare+0xc0>)
 800324a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324c:	60bb      	str	r3, [r7, #8]
	percentage = (air_p * 100) / pre;
 800324e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003252:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003300 <precharge_compare+0xc4>
 8003256:	ee67 6a87 	vmul.f32	s13, s15, s14
 800325a:	ed97 7a03 	vldr	s14, [r7, #12]
 800325e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003262:	edc7 7a01 	vstr	s15, [r7, #4]
	status_data.pre_percentage = percentage;
 8003266:	4a25      	ldr	r2, [pc, #148]	; (80032fc <precharge_compare+0xc0>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6613      	str	r3, [r2, #96]	; 0x60
	if (status_data.safe_state_executed == 0) {
 800326c:	4b23      	ldr	r3, [pc, #140]	; (80032fc <precharge_compare+0xc0>)
 800326e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003272:	f083 0301 	eor.w	r3, r3, #1
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d03b      	beq.n	80032f4 <precharge_compare+0xb8>
		if ((percentage >= 95) && (check_voltage_match() == true) && status_data.IVT_U1_f > limits.precharge_min_start_voltage) {
 800327c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003280:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003304 <precharge_compare+0xc8>
 8003284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	db30      	blt.n	80032f0 <precharge_compare+0xb4>
 800328e:	f000 f83d 	bl	800330c <check_voltage_match>
 8003292:	4603      	mov	r3, r0
 8003294:	2b01      	cmp	r3, #1
 8003296:	d12b      	bne.n	80032f0 <precharge_compare+0xb4>
 8003298:	4b18      	ldr	r3, [pc, #96]	; (80032fc <precharge_compare+0xc0>)
 800329a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <precharge_compare+0xcc>)
 80032a0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80032a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ac:	dd20      	ble.n	80032f0 <precharge_compare+0xb4>
			if(status_data.pre_s == false)
 80032ae:	4b13      	ldr	r3, [pc, #76]	; (80032fc <precharge_compare+0xc0>)
 80032b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032b4:	f083 0301 	eor.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d015      	beq.n	80032ea <precharge_compare+0xae>
			{
				uint32_t starttick = HAL_GetTick();
 80032be:	f000 fe89 	bl	8003fd4 <HAL_GetTick>
 80032c2:	6038      	str	r0, [r7, #0]
				while ( HAL_GetTick() - starttick < 5000 )
 80032c4:	e008      	b.n	80032d8 <precharge_compare+0x9c>
				{
					calculate_soc(&status_data);
 80032c6:	480d      	ldr	r0, [pc, #52]	; (80032fc <precharge_compare+0xc0>)
 80032c8:	f7fe fcfe 	bl	8001cc8 <calculate_soc>
					Send_Soc(&status_data);
 80032cc:	480b      	ldr	r0, [pc, #44]	; (80032fc <precharge_compare+0xc0>)
 80032ce:	f7ff f90b 	bl	80024e8 <Send_Soc>
					HAL_Delay(100);
 80032d2:	2064      	movs	r0, #100	; 0x64
 80032d4:	f000 fe8a 	bl	8003fec <HAL_Delay>
				while ( HAL_GetTick() - starttick < 5000 )
 80032d8:	f000 fe7c 	bl	8003fd4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3287 	movw	r2, #4999	; 0x1387
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d9ed      	bls.n	80032c6 <precharge_compare+0x8a>
				}
			}
			close_PRE();
 80032ea:	f7ff fd85 	bl	8002df8 <close_PRE>
			open_PRE(); //it is maybe not a great idea to actively open the precharge without opening all the contactors
		}*/
	} /*else {
		goto_safe_state(IVT_LOST);
	}*/ //this was maybe not working as intended
}
 80032ee:	e001      	b.n	80032f4 <precharge_compare+0xb8>
			open_PRE();
 80032f0:	f7ff fd94 	bl	8002e1c <open_PRE>
}
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20000624 	.word	0x20000624
 8003300:	42c80000 	.word	0x42c80000
 8003304:	42be0000 	.word	0x42be0000
 8003308:	20000000 	.word	0x20000000

0800330c <check_voltage_match>:

int check_voltage_match(void)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
	float percentage;
	float accu_volt = (float)status_data.sum_of_cells;
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <check_voltage_match+0x70>)
 8003314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003316:	60fb      	str	r3, [r7, #12]
	float post_volt = (float)status_data.IVT_U2_f;
 8003318:	4b18      	ldr	r3, [pc, #96]	; (800337c <check_voltage_match+0x70>)
 800331a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331c:	60bb      	str	r3, [r7, #8]
	percentage = (post_volt * 100) / accu_volt;
 800331e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003322:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003380 <check_voltage_match+0x74>
 8003326:	ee67 6a87 	vmul.f32	s13, s15, s14
 800332a:	ed97 7a03 	vldr	s14, [r7, #12]
 800332e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003332:	edc7 7a01 	vstr	s15, [r7, #4]
	percentage = percentage - 100;
 8003336:	edd7 7a01 	vldr	s15, [r7, #4]
 800333a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003380 <check_voltage_match+0x74>
 800333e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003342:	edc7 7a01 	vstr	s15, [r7, #4]

	if ((percentage < 10) && (percentage > -10)) {
 8003346:	edd7 7a01 	vldr	s15, [r7, #4]
 800334a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800334e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003356:	d50a      	bpl.n	800336e <check_voltage_match+0x62>
 8003358:	edd7 7a01 	vldr	s15, [r7, #4]
 800335c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8003360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	dd01      	ble.n	800336e <check_voltage_match+0x62>
		return 1;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <check_voltage_match+0x64>
	}
	return 0;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	20000624 	.word	0x20000624
 8003380:	42c80000 	.word	0x42c80000

08003384 <balance_routine>:
	Discharge configuration bytes in slave_cfg_tx array are written, and
	configuration is sent to LTC-6811s. After some delay configuration is
	read back to slave_cfg_rx array.
*/
void balance_routine(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af02      	add	r7, sp, #8
	// TODO build_disch_cfg(IC_NUM, cell_data, slave_cfg_tx, &status_data, &limits);
	build_disch_cfg(IC_NUM, cell_data, slave_cfg_tx, &status_data, &limits);
 800338a:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <balance_routine+0x30>)
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <balance_routine+0x34>)
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <balance_routine+0x38>)
 8003392:	490b      	ldr	r1, [pc, #44]	; (80033c0 <balance_routine+0x3c>)
 8003394:	2008      	movs	r0, #8
 8003396:	f7fe fde2 	bl	8001f5e <build_disch_cfg>
	build_disch_cfgb(IC_NUM, cell_data, slave_cfgb_tx, &status_data, &limits);
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <balance_routine+0x30>)
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <balance_routine+0x34>)
 80033a0:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <balance_routine+0x40>)
 80033a2:	4907      	ldr	r1, [pc, #28]	; (80033c0 <balance_routine+0x3c>)
 80033a4:	2008      	movs	r0, #8
 80033a6:	f7fe fe44 	bl	8002032 <build_disch_cfgb>

	cfg_slaves();
 80033aa:	f000 f91f 	bl	80035ec <cfg_slaves>

}
 80033ae:	bf00      	nop
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000000 	.word	0x20000000
 80033b8:	20000624 	.word	0x20000624
 80033bc:	20000544 	.word	0x20000544
 80033c0:	200002a4 	.word	0x200002a4
 80033c4:	20000574 	.word	0x20000574

080033c8 <empty_disch_cfg>:

void empty_disch_cfg(void){
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
	WakeUp();
 80033ce:	f7fd fd67 	bl	8000ea0 <WakeUp>

	for(int i = 0; i < IC_NUM; i++){
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	e02a      	b.n	800342e <empty_disch_cfg+0x66>
		slave_cfg_tx[i][4] = 0x00 ;
 80033d8:	4919      	ldr	r1, [pc, #100]	; (8003440 <empty_disch_cfg+0x78>)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	440b      	add	r3, r1
 80033e6:	3304      	adds	r3, #4
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 80033ec:	4914      	ldr	r1, [pc, #80]	; (8003440 <empty_disch_cfg+0x78>)
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4413      	add	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	440b      	add	r3, r1
 80033fa:	3305      	adds	r3, #5
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]

		slave_cfgb_tx[i][4] = 0x00 ;
 8003400:	4910      	ldr	r1, [pc, #64]	; (8003444 <empty_disch_cfg+0x7c>)
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4413      	add	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	440b      	add	r3, r1
 800340e:	3304      	adds	r3, #4
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
		slave_cfgb_tx[i][5] = 0x00;
 8003414:	490b      	ldr	r1, [pc, #44]	; (8003444 <empty_disch_cfg+0x7c>)
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	440b      	add	r3, r1
 8003422:	3305      	adds	r3, #5
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < IC_NUM; i++){
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3301      	adds	r3, #1
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b07      	cmp	r3, #7
 8003432:	ddd1      	ble.n	80033d8 <empty_disch_cfg+0x10>
	}

	cfg_slaves();
 8003434:	f000 f8da 	bl	80035ec <cfg_slaves>
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000544 	.word	0x20000544
 8003444:	20000574 	.word	0x20000574

08003448 <read_cell_voltage>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_cell_voltage(void){
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 800344e:	f7fd fd27 	bl	8000ea0 <WakeUp>
	adcv();
 8003452:	f7fe fbab 	bl	8001bac <adcv>
	adcv_delay();
 8003456:	f7fe fb4a 	bl	8001aee <adcv_delay>

	WakeIdle();
 800345a:	f7fd fd17 	bl	8000e8c <WakeIdle>

	for(uint8_t reg = 0; reg < 5; reg++){
 800345e:	2300      	movs	r3, #0
 8003460:	71fb      	strb	r3, [r7, #7]
 8003462:	e033      	b.n	80034cc <read_cell_voltage+0x84>
		pec = rdcv(0, IC_NUM, cell_data);
 8003464:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <read_cell_voltage+0x9c>)
 8003466:	2108      	movs	r1, #8
 8003468:	2000      	movs	r0, #0
 800346a:	f7fe f843 	bl	80014f4 <rdcv>
 800346e:	4603      	mov	r3, r0
 8003470:	71bb      	strb	r3, [r7, #6]
#if 1 // put 0 if cells are fixed
		if(IC_NUM == 8){

			float avg = (float)(cell_data[1][8].voltage + cell_data[1][9].voltage) / 2;
 8003472:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <read_cell_voltage+0x9c>)
 8003474:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003476:	461a      	mov	r2, r3
 8003478:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <read_cell_voltage+0x9c>)
 800347a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347c:	4413      	add	r3, r2
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003486:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800348a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800348e:	edc7 7a00 	vstr	s15, [r7]

			cell_data[1][8].voltage = (uint16_t)avg;
 8003492:	edd7 7a00 	vldr	s15, [r7]
 8003496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800349a:	ee17 3a90 	vmov	r3, s15
 800349e:	b29a      	uxth	r2, r3
 80034a0:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <read_cell_voltage+0x9c>)
 80034a2:	869a      	strh	r2, [r3, #52]	; 0x34
			cell_data[1][9].voltage = (uint16_t)avg;
 80034a4:	edd7 7a00 	vldr	s15, [r7]
 80034a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ac:	ee17 3a90 	vmov	r3, s15
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <read_cell_voltage+0x9c>)
 80034b4:	86da      	strh	r2, [r3, #54]	; 0x36
		}
#endif

		if (pec == 0) {
 80034b6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <read_cell_voltage+0x7a>
			return 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	e00b      	b.n	80034da <read_cell_voltage+0x92>
		}
		else increase_pec_counter();
 80034c2:	f000 f8b7 	bl	8003634 <increase_pec_counter>
	for(uint8_t reg = 0; reg < 5; reg++){
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	3301      	adds	r3, #1
 80034ca:	71fb      	strb	r3, [r7, #7]
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d9c8      	bls.n	8003464 <read_cell_voltage+0x1c>
	}
	goto_safe_state(PEC_ERROR);
 80034d2:	2008      	movs	r0, #8
 80034d4:	f000 f8ce 	bl	8003674 <goto_safe_state>
	return -1;
 80034d8:	23ff      	movs	r3, #255	; 0xff

}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200002a4 	.word	0x200002a4

080034e8 <read_temp_measurement>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_temp_measurement(void){
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 80034ee:	f7fd fcd7 	bl	8000ea0 <WakeUp>
	adax();
 80034f2:	f7fe fb7f 	bl	8001bf4 <adax>
	adax_delay();
 80034f6:	f7fe fb03 	bl	8001b00 <adax_delay>
	WakeIdle();
 80034fa:	f7fd fcc7 	bl	8000e8c <WakeIdle>

	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 80034fe:	2300      	movs	r3, #0
 8003500:	71fb      	strb	r3, [r7, #7]
 8003502:	e015      	b.n	8003530 <read_temp_measurement+0x48>
			 pec = rdaux(0, IC_NUM, temp_data);  // pec = ltc6804_rdaux(0, IC_NUM, temp_data);
 8003504:	4a10      	ldr	r2, [pc, #64]	; (8003548 <read_temp_measurement+0x60>)
 8003506:	2108      	movs	r1, #8
 8003508:	2000      	movs	r0, #0
 800350a:	f7fe f9a8 	bl	800185e <rdaux>
 800350e:	4603      	mov	r3, r0
 8003510:	71bb      	strb	r3, [r7, #6]
			 temp_calc(IC_NUM, temp_data); // Moved out of 'if' to execute even on pec error
 8003512:	490d      	ldr	r1, [pc, #52]	; (8003548 <read_temp_measurement+0x60>)
 8003514:	2008      	movs	r0, #8
 8003516:	f000 fb63 	bl	8003be0 <temp_calc>
			if (pec == 0) {
 800351a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <read_temp_measurement+0x3e>
				return 0;
 8003522:	2300      	movs	r3, #0
 8003524:	e00b      	b.n	800353e <read_temp_measurement+0x56>
			} else {
				increase_pec_counter();
 8003526:	f000 f885 	bl	8003634 <increase_pec_counter>
	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	3301      	adds	r3, #1
 800352e:	71fb      	strb	r3, [r7, #7]
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	2b04      	cmp	r3, #4
 8003534:	d9e6      	bls.n	8003504 <read_temp_measurement+0x1c>
			}
		}
		goto_safe_state(PEC_ERROR);
 8003536:	2008      	movs	r0, #8
 8003538:	f000 f89c 	bl	8003674 <goto_safe_state>
		return -1;
 800353c:	23ff      	movs	r3, #255	; 0xff

}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200003c4 	.word	0x200003c4

0800354c <init_slave_cfg>:


void init_slave_cfg(void)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < IC_NUM; i++)
 8003552:	2300      	movs	r3, #0
 8003554:	71fb      	strb	r3, [r7, #7]
 8003556:	e03d      	b.n	80035d4 <init_slave_cfg+0x88>
	{
		slave_cfg_tx[i][0] = 0xfe;
 8003558:	79fa      	ldrb	r2, [r7, #7]
 800355a:	4923      	ldr	r1, [pc, #140]	; (80035e8 <init_slave_cfg+0x9c>)
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	440b      	add	r3, r1
 8003566:	22fe      	movs	r2, #254	; 0xfe
 8003568:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][1] = 0x00;
 800356a:	79fa      	ldrb	r2, [r7, #7]
 800356c:	491e      	ldr	r1, [pc, #120]	; (80035e8 <init_slave_cfg+0x9c>)
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	440b      	add	r3, r1
 8003578:	3301      	adds	r3, #1
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][2] = 0x00;
 800357e:	79fa      	ldrb	r2, [r7, #7]
 8003580:	4919      	ldr	r1, [pc, #100]	; (80035e8 <init_slave_cfg+0x9c>)
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	440b      	add	r3, r1
 800358c:	3302      	adds	r3, #2
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][3] = 0x00;
 8003592:	79fa      	ldrb	r2, [r7, #7]
 8003594:	4914      	ldr	r1, [pc, #80]	; (80035e8 <init_slave_cfg+0x9c>)
 8003596:	4613      	mov	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	440b      	add	r3, r1
 80035a0:	3303      	adds	r3, #3
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][4] = 0x00;
 80035a6:	79fa      	ldrb	r2, [r7, #7]
 80035a8:	490f      	ldr	r1, [pc, #60]	; (80035e8 <init_slave_cfg+0x9c>)
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	440b      	add	r3, r1
 80035b4:	3304      	adds	r3, #4
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 80035ba:	79fa      	ldrb	r2, [r7, #7]
 80035bc:	490a      	ldr	r1, [pc, #40]	; (80035e8 <init_slave_cfg+0x9c>)
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	440b      	add	r3, r1
 80035c8:	3305      	adds	r3, #5
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < IC_NUM; i++)
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	3301      	adds	r3, #1
 80035d2:	71fb      	strb	r3, [r7, #7]
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	2b07      	cmp	r3, #7
 80035d8:	d9be      	bls.n	8003558 <init_slave_cfg+0xc>
	}
}
 80035da:	bf00      	nop
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	20000544 	.word	0x20000544

080035ec <cfg_slaves>:

void cfg_slaves(void){
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	WakeUp();
 80035f0:	f7fd fc56 	bl	8000ea0 <WakeUp>
	wrcfg(IC_NUM, slave_cfg_tx);
 80035f4:	490b      	ldr	r1, [pc, #44]	; (8003624 <cfg_slaves+0x38>)
 80035f6:	2008      	movs	r0, #8
 80035f8:	f7fd fd02 	bl	8001000 <wrcfg>
	WakeUp();
 80035fc:	f7fd fc50 	bl	8000ea0 <WakeUp>
	wrcfgb(IC_NUM, slave_cfgb_tx);
 8003600:	4909      	ldr	r1, [pc, #36]	; (8003628 <cfg_slaves+0x3c>)
 8003602:	2008      	movs	r0, #8
 8003604:	f7fd fe2b 	bl	800125e <wrcfgb>
	delay_u(500);
 8003608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800360c:	f7fe ffbe 	bl	800258c <delay_u>
	rdcfg(IC_NUM, slave_cfg_rx);
 8003610:	4906      	ldr	r1, [pc, #24]	; (800362c <cfg_slaves+0x40>)
 8003612:	2008      	movs	r0, #8
 8003614:	f7fd fd8a 	bl	800112c <rdcfg>
	rdcfgb(IC_NUM, slave_cfgb_rx);
 8003618:	4905      	ldr	r1, [pc, #20]	; (8003630 <cfg_slaves+0x44>)
 800361a:	2008      	movs	r0, #8
 800361c:	f7fd fec1 	bl	80013a2 <rdcfgb>
}
 8003620:	bf00      	nop
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20000544 	.word	0x20000544
 8003628:	20000574 	.word	0x20000574
 800362c:	200005a4 	.word	0x200005a4
 8003630:	200005e4 	.word	0x200005e4

08003634 <increase_pec_counter>:

void increase_pec_counter(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
	status_data.pec_error_counter++;
 8003638:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <increase_pec_counter+0x3c>)
 800363a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363c:	3301      	adds	r3, #1
 800363e:	4a0c      	ldr	r2, [pc, #48]	; (8003670 <increase_pec_counter+0x3c>)
 8003640:	66d3      	str	r3, [r2, #108]	; 0x6c
	status_data.pec_error_average = (float)status_data.pec_error_counter / status_data.uptime;
 8003642:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <increase_pec_counter+0x3c>)
 8003644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <increase_pec_counter+0x3c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800365a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800365e:	4b04      	ldr	r3, [pc, #16]	; (8003670 <increase_pec_counter+0x3c>)
 8003660:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000624 	.word	0x20000624

08003674 <goto_safe_state>:

void goto_safe_state(uint8_t reason)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]

	open_AIR();
 800367e:	f7ff fb97 	bl	8002db0 <open_AIR>
	open_PRE();
 8003682:	f7ff fbcb 	bl	8002e1c <open_PRE>

}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <test_limp>:

int32_t test_limp(status_data_t *status_data, limit_t *limit)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]

	if(status_data->min_voltage < limit->limp_min_voltage){
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d225      	bcs.n	80036f0 <test_limp+0x62>
		status_data->limping = 1;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

		uint8_t data[8];

		data[0]=8;
 80036ac:	2308      	movs	r3, #8
 80036ae:	743b      	strb	r3, [r7, #16]
		data[1]=0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	747b      	strb	r3, [r7, #17]
		data[2]=0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	74bb      	strb	r3, [r7, #18]
		data[3]=(uint8_t)status_data->sum_of_cells;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80036be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80036c6:	793b      	ldrb	r3, [r7, #4]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	74fb      	strb	r3, [r7, #19]

		data[4]=status_data->limping;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	753b      	strb	r3, [r7, #20]
		data[5]=0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	757b      	strb	r3, [r7, #21]
		data[6]=0xAB;
 80036da:	23ab      	movs	r3, #171	; 0xab
 80036dc:	75bb      	strb	r3, [r7, #22]
		data[7]=0xCD;
 80036de:	23cd      	movs	r3, #205	; 0xcd
 80036e0:	75fb      	strb	r3, [r7, #23]

		CanSend(data, 0x08);
 80036e2:	f107 0310 	add.w	r3, r7, #16
 80036e6:	2108      	movs	r1, #8
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fd0d 	bl	8002108 <CanSend>
 80036ee:	e003      	b.n	80036f8 <test_limp+0x6a>
		}
	else{
		status_data->limping = 0;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		{
			status_data->limping = 0;
		}
	}
#endif*/
}
 80036f8:	bf00      	nop
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <test_limits>:
}
*/


int8_t test_limits(status_data_t *status_data, limit_t *limit, int32_t retest)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
		//MAYBE WE DON'T WANT 50% ERRORS TO BE ALLOWED
#if TEST_OVERVOLTAGE
	if (status_data->max_voltage > limit->max_voltage)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d912      	bls.n	8003740 <test_limits+0x3e>
	{
		if(!(status_data->error_counters[OVERVOLTAGE]<=ERROR_COUNT_LIMIT && retest))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800371e:	2b02      	cmp	r3, #2
 8003720:	d802      	bhi.n	8003728 <test_limits+0x26>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <test_limits+0x32>
		{
			goto_safe_state(OVERVOLTAGE);
 8003728:	2001      	movs	r0, #1
 800372a:	f7ff ffa3 	bl	8003674 <goto_safe_state>
			return -1;
 800372e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003732:	e08b      	b.n	800384c <test_limits+0x14a>
		}
		else
		{
			status_data->error_counters[OVERVOLTAGE]++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	67da      	str	r2, [r3, #124]	; 0x7c
 800373e:	e008      	b.n	8003752 <test_limits+0x50>
		}
	}
	else if (status_data->error_counters[OVERVOLTAGE]>0)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <test_limits+0x50>
	{
		status_data->error_counters[OVERVOLTAGE]--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374c:	1e5a      	subs	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	67da      	str	r2, [r3, #124]	; 0x7c
	}
#endif

#if TEST_UNDERVOLTAGE
	if (status_data->min_voltage < limit->min_voltage)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	885b      	ldrh	r3, [r3, #2]
 800375a:	429a      	cmp	r2, r3
 800375c:	d215      	bcs.n	800378a <test_limits+0x88>
	{
		if(!(status_data->error_counters[UNDERVOLTAGE]<=ERROR_COUNT_LIMIT && retest))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003764:	2b02      	cmp	r3, #2
 8003766:	d802      	bhi.n	800376e <test_limits+0x6c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <test_limits+0x78>
		{
			goto_safe_state(UNDERVOLTAGE);
 800376e:	2002      	movs	r0, #2
 8003770:	f7ff ff80 	bl	8003674 <goto_safe_state>
			return -1;
 8003774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003778:	e068      	b.n	800384c <test_limits+0x14a>
		}
		else
		{
			status_data->error_counters[UNDERVOLTAGE]++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003788:	e00b      	b.n	80037a2 <test_limits+0xa0>
		}
	}
	else if (status_data->error_counters[UNDERVOLTAGE]>0)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d006      	beq.n	80037a2 <test_limits+0xa0>
	{
		status_data->error_counters[UNDERVOLTAGE]--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379a:	1e5a      	subs	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#endif

#if TEST_OVERTEMPERATURE
	if (status_data->max_temp > limit->max_temp)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	dd15      	ble.n	80037de <test_limits+0xdc>
	{
		if(!(status_data->error_counters[OVERTEMP]<=ERROR_COUNT_LIMIT && retest))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d802      	bhi.n	80037c2 <test_limits+0xc0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d105      	bne.n	80037ce <test_limits+0xcc>
		{
			goto_safe_state(OVERTEMP);
 80037c2:	2003      	movs	r0, #3
 80037c4:	f7ff ff56 	bl	8003674 <goto_safe_state>
			return -1;
 80037c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037cc:	e03e      	b.n	800384c <test_limits+0x14a>
		}
		else
		{
			status_data->error_counters[OVERTEMP]++;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80037dc:	e00b      	b.n	80037f6 <test_limits+0xf4>
		}
	}
	else if (status_data->error_counters[OVERTEMP]>0)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d006      	beq.n	80037f6 <test_limits+0xf4>
	{
		status_data->error_counters[OVERTEMP]--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ee:	1e5a      	subs	r2, r3, #1
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		status_data->error_counters[OVERTEMP_CHARGING]--;
	}
#endif

#if TEST_UNDERTEMPERATURE
	if (status_data->min_temp < limit->min_temp)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	da15      	bge.n	8003832 <test_limits+0x130>
	{
		if(!(status_data->error_counters[UNDERTEMP]<=ERROR_COUNT_LIMIT && retest))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	2b02      	cmp	r3, #2
 800380e:	d802      	bhi.n	8003816 <test_limits+0x114>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d105      	bne.n	8003822 <test_limits+0x120>
		{
			goto_safe_state(UNDERTEMP);
 8003816:	2004      	movs	r0, #4
 8003818:	f7ff ff2c 	bl	8003674 <goto_safe_state>
			return -1;
 800381c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003820:	e014      	b.n	800384c <test_limits+0x14a>
		}
		else
		{
			status_data->error_counters[UNDERTEMP]++;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003830:	e00b      	b.n	800384a <test_limits+0x148>
		}
	}
	else if (status_data->error_counters[UNDERTEMP]>0)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	2b00      	cmp	r3, #0
 800383a:	d006      	beq.n	800384a <test_limits+0x148>
	{
		status_data->error_counters[UNDERTEMP]--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	1e5a      	subs	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	return 0;
}
 800384a:	2300      	movs	r3, #0
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <set_fan_duty_cycle>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
}

void set_fan_duty_cycle(status_data_t *status_data){
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

	if(status_data->max_temp > 39){
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003862:	2b27      	cmp	r3, #39	; 0x27
 8003864:	dd04      	ble.n	8003870 <set_fan_duty_cycle+0x1c>
		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_PWM);
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <set_fan_duty_cycle+0x30>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2228      	movs	r2, #40	; 0x28
 800386c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	else{
		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 8);
	}
}
 800386e:	e003      	b.n	8003878 <set_fan_duty_cycle+0x24>
		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 8);
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <set_fan_duty_cycle+0x30>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2212      	movs	r2, #18
 8003876:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	2000017c 	.word	0x2000017c

08003888 <HAL_MspInit>:
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_MspInit+0x44>)
 8003890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003892:	4a0e      	ldr	r2, [pc, #56]	; (80038cc <HAL_MspInit+0x44>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	6613      	str	r3, [r2, #96]	; 0x60
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <HAL_MspInit+0x44>)
 800389c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	607b      	str	r3, [r7, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_MspInit+0x44>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038aa:	4a08      	ldr	r2, [pc, #32]	; (80038cc <HAL_MspInit+0x44>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b0:	6593      	str	r3, [r2, #88]	; 0x58
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_MspInit+0x44>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000

080038d0 <HAL_FDCAN_MspInit>:
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b09a      	sub	sp, #104	; 0x68
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	611a      	str	r2, [r3, #16]
 80038e8:	f107 0310 	add.w	r3, r7, #16
 80038ec:	2244      	movs	r2, #68	; 0x44
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f005 f8f9 	bl	8008ae8 <memset>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a20      	ldr	r2, [pc, #128]	; (800397c <HAL_FDCAN_MspInit+0xac>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d139      	bne.n	8003974 <HAL_FDCAN_MspInit+0xa4>
 8003900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390a:	643b      	str	r3, [r7, #64]	; 0x40
 800390c:	f107 0310 	add.w	r3, r7, #16
 8003910:	4618      	mov	r0, r3
 8003912:	f002 f929 	bl	8005b68 <HAL_RCCEx_PeriphCLKConfig>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_FDCAN_MspInit+0x50>
 800391c:	f7ff f9ac 	bl	8002c78 <Error_Handler>
 8003920:	4b17      	ldr	r3, [pc, #92]	; (8003980 <HAL_FDCAN_MspInit+0xb0>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	4a16      	ldr	r2, [pc, #88]	; (8003980 <HAL_FDCAN_MspInit+0xb0>)
 8003926:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800392a:	6593      	str	r3, [r2, #88]	; 0x58
 800392c:	4b14      	ldr	r3, [pc, #80]	; (8003980 <HAL_FDCAN_MspInit+0xb0>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4b11      	ldr	r3, [pc, #68]	; (8003980 <HAL_FDCAN_MspInit+0xb0>)
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	4a10      	ldr	r2, [pc, #64]	; (8003980 <HAL_FDCAN_MspInit+0xb0>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <HAL_FDCAN_MspInit+0xb0>)
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003954:	657b      	str	r3, [r7, #84]	; 0x54
 8003956:	2302      	movs	r3, #2
 8003958:	65bb      	str	r3, [r7, #88]	; 0x58
 800395a:	2300      	movs	r3, #0
 800395c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800395e:	2300      	movs	r3, #0
 8003960:	663b      	str	r3, [r7, #96]	; 0x60
 8003962:	2309      	movs	r3, #9
 8003964:	667b      	str	r3, [r7, #100]	; 0x64
 8003966:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800396a:	4619      	mov	r1, r3
 800396c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003970:	f001 f970 	bl	8004c54 <HAL_GPIO_Init>
 8003974:	bf00      	nop
 8003976:	3768      	adds	r7, #104	; 0x68
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40006400 	.word	0x40006400
 8003980:	40021000 	.word	0x40021000

08003984 <HAL_SPI_MspInit>:
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a17      	ldr	r2, [pc, #92]	; (8003a00 <HAL_SPI_MspInit+0x7c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d128      	bne.n	80039f8 <HAL_SPI_MspInit+0x74>
 80039a6:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <HAL_SPI_MspInit+0x80>)
 80039a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039aa:	4a16      	ldr	r2, [pc, #88]	; (8003a04 <HAL_SPI_MspInit+0x80>)
 80039ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039b0:	6613      	str	r3, [r2, #96]	; 0x60
 80039b2:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <HAL_SPI_MspInit+0x80>)
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <HAL_SPI_MspInit+0x80>)
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	4a10      	ldr	r2, [pc, #64]	; (8003a04 <HAL_SPI_MspInit+0x80>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_SPI_MspInit+0x80>)
 80039cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	23e0      	movs	r3, #224	; 0xe0
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	2302      	movs	r3, #2
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
 80039e6:	2305      	movs	r3, #5
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ea:	f107 0314 	add.w	r3, r7, #20
 80039ee:	4619      	mov	r1, r3
 80039f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039f4:	f001 f92e 	bl	8004c54 <HAL_GPIO_Init>
 80039f8:	bf00      	nop
 80039fa:	3728      	adds	r7, #40	; 0x28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40013000 	.word	0x40013000
 8003a04:	40021000 	.word	0x40021000

08003a08 <HAL_TIM_Base_MspInit>:
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <HAL_TIM_Base_MspInit+0x38>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10b      	bne.n	8003a32 <HAL_TIM_Base_MspInit+0x2a>
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_TIM_Base_MspInit+0x3c>)
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_TIM_Base_MspInit+0x3c>)
 8003a20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a24:	6613      	str	r3, [r2, #96]	; 0x60
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_TIM_Base_MspInit+0x3c>)
 8003a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40013400 	.word	0x40013400
 8003a44:	40021000 	.word	0x40021000

08003a48 <HAL_TIM_MspPostInit>:
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a11      	ldr	r2, [pc, #68]	; (8003aac <HAL_TIM_MspPostInit+0x64>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d11b      	bne.n	8003aa2 <HAL_TIM_MspPostInit+0x5a>
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <HAL_TIM_MspPostInit+0x68>)
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6e:	4a10      	ldr	r2, [pc, #64]	; (8003ab0 <HAL_TIM_MspPostInit+0x68>)
 8003a70:	f043 0302 	orr.w	r3, r3, #2
 8003a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_TIM_MspPostInit+0x68>)
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2320      	movs	r3, #32
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	2302      	movs	r3, #2
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	2303      	movs	r3, #3
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	f107 030c 	add.w	r3, r7, #12
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4805      	ldr	r0, [pc, #20]	; (8003ab4 <HAL_TIM_MspPostInit+0x6c>)
 8003a9e:	f001 f8d9 	bl	8004c54 <HAL_GPIO_Init>
 8003aa2:	bf00      	nop
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40013400 	.word	0x40013400
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	48000400 	.word	0x48000400

08003ab8 <HAL_UART_MspInit>:
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b09a      	sub	sp, #104	; 0x68
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	611a      	str	r2, [r3, #16]
 8003ad0:	f107 0310 	add.w	r3, r7, #16
 8003ad4:	2244      	movs	r2, #68	; 0x44
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f005 f805 	bl	8008ae8 <memset>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <HAL_UART_MspInit+0xa8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d136      	bne.n	8003b56 <HAL_UART_MspInit+0x9e>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	f107 0310 	add.w	r3, r7, #16
 8003af4:	4618      	mov	r0, r3
 8003af6:	f002 f837 	bl	8005b68 <HAL_RCCEx_PeriphCLKConfig>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_UART_MspInit+0x4c>
 8003b00:	f7ff f8ba 	bl	8002c78 <Error_Handler>
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <HAL_UART_MspInit+0xac>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <HAL_UART_MspInit+0xac>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <HAL_UART_MspInit+0xac>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <HAL_UART_MspInit+0xac>)
 8003b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b20:	4a10      	ldr	r2, [pc, #64]	; (8003b64 <HAL_UART_MspInit+0xac>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <HAL_UART_MspInit+0xac>)
 8003b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	230c      	movs	r3, #12
 8003b36:	657b      	str	r3, [r7, #84]	; 0x54
 8003b38:	2302      	movs	r3, #2
 8003b3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b40:	2300      	movs	r3, #0
 8003b42:	663b      	str	r3, [r7, #96]	; 0x60
 8003b44:	2307      	movs	r3, #7
 8003b46:	667b      	str	r3, [r7, #100]	; 0x64
 8003b48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b52:	f001 f87f 	bl	8004c54 <HAL_GPIO_Init>
 8003b56:	bf00      	nop
 8003b58:	3768      	adds	r7, #104	; 0x68
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40004400 	.word	0x40004400
 8003b64:	40021000 	.word	0x40021000

08003b68 <NMI_Handler>:
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	e7fe      	b.n	8003b6c <NMI_Handler+0x4>

08003b6e <HardFault_Handler>:
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	e7fe      	b.n	8003b72 <HardFault_Handler+0x4>

08003b74 <MemManage_Handler>:
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	e7fe      	b.n	8003b78 <MemManage_Handler+0x4>

08003b7a <BusFault_Handler>:
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	e7fe      	b.n	8003b7e <BusFault_Handler+0x4>

08003b80 <UsageFault_Handler>:
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	e7fe      	b.n	8003b84 <UsageFault_Handler+0x4>

08003b86 <SVC_Handler>:
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <DebugMon_Handler>:
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <PendSV_Handler>:
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	bf00      	nop
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <SysTick_Handler>:
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	f000 f9fc 	bl	8003fb0 <HAL_IncTick>
 8003bb8:	bf00      	nop
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <SystemInit>:
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <SystemInit+0x20>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <SystemInit+0x20>)
 8003bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	e000ed00 	.word	0xe000ed00

08003be0 <temp_calc>:





void temp_calc(uint8_t total_ic,  temp_data_t temp_data[][GPIO_NUM]){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b090      	sub	sp, #64	; 0x40
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	6039      	str	r1, [r7, #0]
 8003bea:	71fb      	strb	r3, [r7, #7]
    float v, r, t;
    float B = 3730; // B-parameter from CSV file
 8003bec:	4bae      	ldr	r3, [pc, #696]	; (8003ea8 <temp_calc+0x2c8>)
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    float R0 = 2700; // Reference resistance at 25 degrees Celsius
 8003bf0:	4bae      	ldr	r3, [pc, #696]	; (8003eac <temp_calc+0x2cc>)
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    float T0 = 298.15; // Reference temperature in Kelvin (25 degrees Celsius)
 8003bf4:	4bae      	ldr	r3, [pc, #696]	; (8003eb0 <temp_calc+0x2d0>)
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24

    float R1 = 2700; // Resistance of the voltage divider in ohms
 8003bf8:	4bac      	ldr	r3, [pc, #688]	; (8003eac <temp_calc+0x2cc>)
 8003bfa:	623b      	str	r3, [r7, #32]

    for(int i = 0; i < total_ic; i++){
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c00:	e09c      	b.n	8003d3c <temp_calc+0x15c>
        for(int j = 0; j < 6; j++){
 8003c02:	2300      	movs	r3, #0
 8003c04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c06:	e092      	b.n	8003d2e <temp_calc+0x14e>
        	float Vs = (float)temp_data[i][5].raw / 10000; // Source voltage in volts Vref2
 8003c08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	461a      	mov	r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	4413      	add	r3, r2
 8003c18:	8a9b      	ldrh	r3, [r3, #20]
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c22:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8003eb4 <temp_calc+0x2d4>
 8003c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c2a:	edc7 7a03 	vstr	s15, [r7, #12]
            v = (float)temp_data[i][j].raw / 10000; // Convert raw reading to volts
 8003c2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	461a      	mov	r2, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c40:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c4c:	eddf 6a99 	vldr	s13, [pc, #612]	; 8003eb4 <temp_calc+0x2d4>
 8003c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c54:	edc7 7a06 	vstr	s15, [r7, #24]
            r = (v * R1) / (Vs - v); // Calculate resistance of the thermistor
 8003c58:	ed97 7a06 	vldr	s14, [r7, #24]
 8003c5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c60:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003c64:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c68:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c74:	edc7 7a05 	vstr	s15, [r7, #20]
            t = log(r/R0);
 8003c78:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c84:	ee16 0a90 	vmov	r0, s13
 8003c88:	f7fc fc2a 	bl	80004e0 <__aeabi_f2d>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	ec43 2b10 	vmov	d0, r2, r3
 8003c94:	f004 ff5c 	bl	8008b50 <log>
 8003c98:	ec53 2b10 	vmov	r2, r3, d0
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f7fc ff26 	bl	8000af0 <__aeabi_d2f>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	613b      	str	r3, [r7, #16]
            t = t / B;
 8003ca8:	edd7 6a04 	vldr	s13, [r7, #16]
 8003cac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cb4:	edc7 7a04 	vstr	s15, [r7, #16]
            t = t + 1/T0;
 8003cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cbc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ccc:	edc7 7a04 	vstr	s15, [r7, #16]
            t = 1/t;
 8003cd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cd4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cdc:	edc7 7a04 	vstr	s15, [r7, #16]
            t -= 273.15; // Convert from Kelvin to Celsius
 8003ce0:	6938      	ldr	r0, [r7, #16]
 8003ce2:	f7fc fbfd 	bl	80004e0 <__aeabi_f2d>
 8003ce6:	a36e      	add	r3, pc, #440	; (adr r3, 8003ea0 <temp_calc+0x2c0>)
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f7fc fa98 	bl	8000220 <__aeabi_dsub>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	f7fc fefa 	bl	8000af0 <__aeabi_d2f>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	613b      	str	r3, [r7, #16]
            temp_data[i][j].temp = (int)t;
 8003d00:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	461a      	mov	r2, r3
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	441a      	add	r2, r3
 8003d18:	ee17 3a90 	vmov	r3, s15
 8003d1c:	b219      	sxth	r1, r3
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	460a      	mov	r2, r1
 8003d26:	805a      	strh	r2, [r3, #2]
        for(int j = 0; j < 6; j++){
 8003d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	f77f af69 	ble.w	8003c08 <temp_calc+0x28>
    for(int i = 0; i < total_ic; i++){
 8003d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d38:	3301      	adds	r3, #1
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d40:	429a      	cmp	r2, r3
 8003d42:	f6ff af5e 	blt.w	8003c02 <temp_calc+0x22>
        }
    }

    for(int i = 0; i < total_ic; i++){
 8003d46:	2300      	movs	r3, #0
 8003d48:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4a:	e09c      	b.n	8003e86 <temp_calc+0x2a6>
    	for(int j = 6; j < 10; j++){
 8003d4c:	2306      	movs	r3, #6
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d50:	e092      	b.n	8003e78 <temp_calc+0x298>
    		float Vs = (float)temp_data[i][5].raw / 10000; // Source voltage in volts Vref2
 8003d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d54:	4613      	mov	r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	4413      	add	r3, r2
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	4413      	add	r3, r2
 8003d62:	8a9b      	ldrh	r3, [r3, #20]
 8003d64:	ee07 3a90 	vmov	s15, r3
 8003d68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d6c:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003eb4 <temp_calc+0x2d4>
 8003d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d74:	edc7 7a07 	vstr	s15, [r7, #28]
    		v = (float)temp_data[i][j].raw / 10000; // Convert raw reading to volts
 8003d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4413      	add	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	461a      	mov	r2, r3
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4413      	add	r3, r2
 8003d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8a:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d96:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003eb4 <temp_calc+0x2d4>
 8003d9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d9e:	edc7 7a06 	vstr	s15, [r7, #24]
    		r = (v * R1) / (Vs - v); // Calculate resistance of the thermistor
 8003da2:	ed97 7a06 	vldr	s14, [r7, #24]
 8003da6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003daa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003dae:	ed97 7a07 	vldr	s14, [r7, #28]
 8003db2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003db6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dbe:	edc7 7a05 	vstr	s15, [r7, #20]
    		t = log(r/R0);
 8003dc2:	ed97 7a05 	vldr	s14, [r7, #20]
 8003dc6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003dca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dce:	ee16 0a90 	vmov	r0, s13
 8003dd2:	f7fc fb85 	bl	80004e0 <__aeabi_f2d>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	ec43 2b10 	vmov	d0, r2, r3
 8003dde:	f004 feb7 	bl	8008b50 <log>
 8003de2:	ec53 2b10 	vmov	r2, r3, d0
 8003de6:	4610      	mov	r0, r2
 8003de8:	4619      	mov	r1, r3
 8003dea:	f7fc fe81 	bl	8000af0 <__aeabi_d2f>
 8003dee:	4603      	mov	r3, r0
 8003df0:	613b      	str	r3, [r7, #16]
    		t = t / B;
 8003df2:	edd7 6a04 	vldr	s13, [r7, #16]
 8003df6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dfe:	edc7 7a04 	vstr	s15, [r7, #16]
    		t = t + 1/T0;
 8003e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e06:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e16:	edc7 7a04 	vstr	s15, [r7, #16]
    		t = 1/t;
 8003e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e26:	edc7 7a04 	vstr	s15, [r7, #16]
    		t -= 273.15; // Convert from Kelvin to Celsius
 8003e2a:	6938      	ldr	r0, [r7, #16]
 8003e2c:	f7fc fb58 	bl	80004e0 <__aeabi_f2d>
 8003e30:	a31b      	add	r3, pc, #108	; (adr r3, 8003ea0 <temp_calc+0x2c0>)
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	f7fc f9f3 	bl	8000220 <__aeabi_dsub>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4610      	mov	r0, r2
 8003e40:	4619      	mov	r1, r3
 8003e42:	f7fc fe55 	bl	8000af0 <__aeabi_d2f>
 8003e46:	4603      	mov	r3, r0
 8003e48:	613b      	str	r3, [r7, #16]
    		temp_data[i][j].temp = (int)t;
 8003e4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e54:	4613      	mov	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	441a      	add	r2, r3
 8003e62:	ee17 3a90 	vmov	r3, s15
 8003e66:	b219      	sxth	r1, r3
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	460a      	mov	r2, r1
 8003e70:	805a      	strh	r2, [r3, #2]
    	for(int j = 6; j < 10; j++){
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	3301      	adds	r3, #1
 8003e76:	633b      	str	r3, [r7, #48]	; 0x30
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	2b09      	cmp	r3, #9
 8003e7c:	f77f af69 	ble.w	8003d52 <temp_calc+0x172>
    for(int i = 0; i < total_ic; i++){
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e82:	3301      	adds	r3, #1
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	f6ff af5e 	blt.w	8003d4c <temp_calc+0x16c>
    	}
    }



}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	3740      	adds	r7, #64	; 0x40
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	f3af 8000 	nop.w
 8003ea0:	66666666 	.word	0x66666666
 8003ea4:	40711266 	.word	0x40711266
 8003ea8:	45692000 	.word	0x45692000
 8003eac:	4528c000 	.word	0x4528c000
 8003eb0:	43951333 	.word	0x43951333
 8003eb4:	461c4000 	.word	0x461c4000

08003eb8 <Reset_Handler>:
 8003eb8:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <LoopForever+0x2>)
 8003eba:	4685      	mov	sp, r0
 8003ebc:	480d      	ldr	r0, [pc, #52]	; (8003ef4 <LoopForever+0x6>)
 8003ebe:	490e      	ldr	r1, [pc, #56]	; (8003ef8 <LoopForever+0xa>)
 8003ec0:	4a0e      	ldr	r2, [pc, #56]	; (8003efc <LoopForever+0xe>)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e002      	b.n	8003ecc <LoopCopyDataInit>

08003ec6 <CopyDataInit>:
 8003ec6:	58d4      	ldr	r4, [r2, r3]
 8003ec8:	50c4      	str	r4, [r0, r3]
 8003eca:	3304      	adds	r3, #4

08003ecc <LoopCopyDataInit>:
 8003ecc:	18c4      	adds	r4, r0, r3
 8003ece:	428c      	cmp	r4, r1
 8003ed0:	d3f9      	bcc.n	8003ec6 <CopyDataInit>
 8003ed2:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <LoopForever+0x12>)
 8003ed4:	4c0b      	ldr	r4, [pc, #44]	; (8003f04 <LoopForever+0x16>)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e001      	b.n	8003ede <LoopFillZerobss>

08003eda <FillZerobss>:
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	3204      	adds	r2, #4

08003ede <LoopFillZerobss>:
 8003ede:	42a2      	cmp	r2, r4
 8003ee0:	d3fb      	bcc.n	8003eda <FillZerobss>
 8003ee2:	f7ff fe6b 	bl	8003bbc <SystemInit>
 8003ee6:	f004 fe0d 	bl	8008b04 <__libc_init_array>
 8003eea:	f7fe fbf3 	bl	80026d4 <main>

08003eee <LoopForever>:
 8003eee:	e7fe      	b.n	8003eee <LoopForever>
 8003ef0:	20008000 	.word	0x20008000
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	2000008c 	.word	0x2000008c
 8003efc:	080093d0 	.word	0x080093d0
 8003f00:	2000008c 	.word	0x2000008c
 8003f04:	2000083c 	.word	0x2000083c

08003f08 <ADC1_2_IRQHandler>:
 8003f08:	e7fe      	b.n	8003f08 <ADC1_2_IRQHandler>

08003f0a <HAL_Init>:
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	2300      	movs	r3, #0
 8003f12:	71fb      	strb	r3, [r7, #7]
 8003f14:	2003      	movs	r0, #3
 8003f16:	f000 f93d 	bl	8004194 <HAL_NVIC_SetPriorityGrouping>
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	f000 f80e 	bl	8003f3c <HAL_InitTick>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_Init+0x22>
 8003f26:	2301      	movs	r3, #1
 8003f28:	71fb      	strb	r3, [r7, #7]
 8003f2a:	e001      	b.n	8003f30 <HAL_Init+0x26>
 8003f2c:	f7ff fcac 	bl	8003888 <HAL_MspInit>
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_InitTick>:
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	2300      	movs	r3, #0
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <HAL_InitTick+0x68>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d022      	beq.n	8003f96 <HAL_InitTick+0x5a>
 8003f50:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <HAL_InitTick+0x6c>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <HAL_InitTick+0x68>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 f93a 	bl	80041de <HAL_SYSTICK_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10f      	bne.n	8003f90 <HAL_InitTick+0x54>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b0f      	cmp	r3, #15
 8003f74:	d809      	bhi.n	8003f8a <HAL_InitTick+0x4e>
 8003f76:	2200      	movs	r2, #0
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f7e:	f000 f914 	bl	80041aa <HAL_NVIC_SetPriority>
 8003f82:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <HAL_InitTick+0x70>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	e007      	b.n	8003f9a <HAL_InitTick+0x5e>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	e004      	b.n	8003f9a <HAL_InitTick+0x5e>
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
 8003f94:	e001      	b.n	8003f9a <HAL_InitTick+0x5e>
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000038 	.word	0x20000038
 8003fa8:	20000030 	.word	0x20000030
 8003fac:	20000034 	.word	0x20000034

08003fb0 <HAL_IncTick>:
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_IncTick+0x1c>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_IncTick+0x20>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	4a03      	ldr	r2, [pc, #12]	; (8003fcc <HAL_IncTick+0x1c>)
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	bf00      	nop
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	20000700 	.word	0x20000700
 8003fd0:	20000038 	.word	0x20000038

08003fd4 <HAL_GetTick>:
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <HAL_GetTick+0x14>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000700 	.word	0x20000700

08003fec <HAL_Delay>:
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	f7ff ffee 	bl	8003fd4 <HAL_GetTick>
 8003ff8:	60b8      	str	r0, [r7, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004004:	d004      	beq.n	8004010 <HAL_Delay+0x24>
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_Delay+0x40>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4413      	add	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	bf00      	nop
 8004012:	f7ff ffdf 	bl	8003fd4 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	429a      	cmp	r2, r3
 8004020:	d8f7      	bhi.n	8004012 <HAL_Delay+0x26>
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000038 	.word	0x20000038

08004030 <__NVIC_SetPriorityGrouping>:
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <__NVIC_SetPriorityGrouping+0x44>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800404c:	4013      	ands	r3, r2
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	021a      	lsls	r2, r3, #8
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4313      	orrs	r3, r2
 8004058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800405c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	4a04      	ldr	r2, [pc, #16]	; (8004074 <__NVIC_SetPriorityGrouping+0x44>)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	60d3      	str	r3, [r2, #12]
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <__NVIC_GetPriorityGrouping>:
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <__NVIC_GetPriorityGrouping+0x18>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	0a1b      	lsrs	r3, r3, #8
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	4618      	mov	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	e000ed00 	.word	0xe000ed00

08004094 <__NVIC_SetPriority>:
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	6039      	str	r1, [r7, #0]
 800409e:	71fb      	strb	r3, [r7, #7]
 80040a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	db0a      	blt.n	80040be <__NVIC_SetPriority+0x2a>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	490c      	ldr	r1, [pc, #48]	; (80040e0 <__NVIC_SetPriority+0x4c>)
 80040ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b2:	0112      	lsls	r2, r2, #4
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	440b      	add	r3, r1
 80040b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80040bc:	e00a      	b.n	80040d4 <__NVIC_SetPriority+0x40>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	4908      	ldr	r1, [pc, #32]	; (80040e4 <__NVIC_SetPriority+0x50>)
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	3b04      	subs	r3, #4
 80040cc:	0112      	lsls	r2, r2, #4
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	440b      	add	r3, r1
 80040d2:	761a      	strb	r2, [r3, #24]
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	e000e100 	.word	0xe000e100
 80040e4:	e000ed00 	.word	0xe000ed00

080040e8 <NVIC_EncodePriority>:
 80040e8:	b480      	push	{r7}
 80040ea:	b089      	sub	sp, #36	; 0x24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f1c3 0307 	rsb	r3, r3, #7
 8004102:	2b04      	cmp	r3, #4
 8004104:	bf28      	it	cs
 8004106:	2304      	movcs	r3, #4
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	3304      	adds	r3, #4
 800410e:	2b06      	cmp	r3, #6
 8004110:	d902      	bls.n	8004118 <NVIC_EncodePriority+0x30>
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	3b03      	subs	r3, #3
 8004116:	e000      	b.n	800411a <NVIC_EncodePriority+0x32>
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43da      	mvns	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	401a      	ands	r2, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	409a      	lsls	r2, r3
 8004130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fa01 f303 	lsl.w	r3, r1, r3
 800413a:	43d9      	mvns	r1, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	400b      	ands	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	4618      	mov	r0, r3
 8004144:	3724      	adds	r7, #36	; 0x24
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
	...

08004150 <SysTick_Config>:
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3b01      	subs	r3, #1
 800415c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004160:	d301      	bcc.n	8004166 <SysTick_Config+0x16>
 8004162:	2301      	movs	r3, #1
 8004164:	e00f      	b.n	8004186 <SysTick_Config+0x36>
 8004166:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <SysTick_Config+0x40>)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3b01      	subs	r3, #1
 800416c:	6053      	str	r3, [r2, #4]
 800416e:	210f      	movs	r1, #15
 8004170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004174:	f7ff ff8e 	bl	8004094 <__NVIC_SetPriority>
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <SysTick_Config+0x40>)
 800417a:	2200      	movs	r2, #0
 800417c:	609a      	str	r2, [r3, #8]
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <SysTick_Config+0x40>)
 8004180:	2207      	movs	r2, #7
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	2300      	movs	r3, #0
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	e000e010 	.word	0xe000e010

08004194 <HAL_NVIC_SetPriorityGrouping>:
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ff47 	bl	8004030 <__NVIC_SetPriorityGrouping>
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_NVIC_SetPriority>:
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	4603      	mov	r3, r0
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	f7ff ff5e 	bl	8004078 <__NVIC_GetPriorityGrouping>
 80041bc:	6178      	str	r0, [r7, #20]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	6978      	ldr	r0, [r7, #20]
 80041c4:	f7ff ff90 	bl	80040e8 <NVIC_EncodePriority>
 80041c8:	4602      	mov	r2, r0
 80041ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ce:	4611      	mov	r1, r2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff5f 	bl	8004094 <__NVIC_SetPriority>
 80041d6:	bf00      	nop
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_SYSTICK_Config>:
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ffb2 	bl	8004150 <SysTick_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_FDCAN_Init>:
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_FDCAN_Init+0x12>
 8004206:	2301      	movs	r3, #1
 8004208:	e147      	b.n	800449a <HAL_FDCAN_Init+0x2a2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_FDCAN_Init+0x2c>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fb56 	bl	80038d0 <HAL_FDCAN_MspInit>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0210 	bic.w	r2, r2, #16
 8004232:	619a      	str	r2, [r3, #24]
 8004234:	f7ff fece 	bl	8003fd4 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	e012      	b.n	8004262 <HAL_FDCAN_Init+0x6a>
 800423c:	f7ff feca 	bl	8003fd4 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b0a      	cmp	r3, #10
 8004248:	d90b      	bls.n	8004262 <HAL_FDCAN_Init+0x6a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424e:	f043 0201 	orr.w	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	661a      	str	r2, [r3, #96]	; 0x60
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2203      	movs	r2, #3
 800425a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800425e:	2301      	movs	r3, #1
 8004260:	e11b      	b.n	800449a <HAL_FDCAN_Init+0x2a2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b08      	cmp	r3, #8
 800426e:	d0e5      	beq.n	800423c <HAL_FDCAN_Init+0x44>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	619a      	str	r2, [r3, #24]
 8004280:	f7ff fea8 	bl	8003fd4 <HAL_GetTick>
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	e012      	b.n	80042ae <HAL_FDCAN_Init+0xb6>
 8004288:	f7ff fea4 	bl	8003fd4 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b0a      	cmp	r3, #10
 8004294:	d90b      	bls.n	80042ae <HAL_FDCAN_Init+0xb6>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429a:	f043 0201 	orr.w	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	661a      	str	r2, [r3, #96]	; 0x60
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2203      	movs	r2, #3
 80042a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80042aa:	2301      	movs	r3, #1
 80042ac:	e0f5      	b.n	800449a <HAL_FDCAN_Init+0x2a2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0e5      	beq.n	8004288 <HAL_FDCAN_Init+0x90>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0202 	orr.w	r2, r2, #2
 80042ca:	619a      	str	r2, [r3, #24]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a74      	ldr	r2, [pc, #464]	; (80044a4 <HAL_FDCAN_Init+0x2ac>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d103      	bne.n	80042de <HAL_FDCAN_Init+0xe6>
 80042d6:	4a74      	ldr	r2, [pc, #464]	; (80044a8 <HAL_FDCAN_Init+0x2b0>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7c1b      	ldrb	r3, [r3, #16]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d108      	bne.n	80042f8 <HAL_FDCAN_Init+0x100>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699a      	ldr	r2, [r3, #24]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f4:	619a      	str	r2, [r3, #24]
 80042f6:	e007      	b.n	8004308 <HAL_FDCAN_Init+0x110>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004306:	619a      	str	r2, [r3, #24]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	7c5b      	ldrb	r3, [r3, #17]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d108      	bne.n	8004322 <HAL_FDCAN_Init+0x12a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800431e:	619a      	str	r2, [r3, #24]
 8004320:	e007      	b.n	8004332 <HAL_FDCAN_Init+0x13a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699a      	ldr	r2, [r3, #24]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004330:	619a      	str	r2, [r3, #24]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	7c9b      	ldrb	r3, [r3, #18]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d108      	bne.n	800434c <HAL_FDCAN_Init+0x154>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004348:	619a      	str	r2, [r3, #24]
 800434a:	e007      	b.n	800435c <HAL_FDCAN_Init+0x164>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800435a:	619a      	str	r2, [r3, #24]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	619a      	str	r2, [r3, #24]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699a      	ldr	r2, [r3, #24]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004380:	619a      	str	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0210 	bic.w	r2, r2, #16
 8004390:	611a      	str	r2, [r3, #16]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d108      	bne.n	80043ac <HAL_FDCAN_Init+0x1b4>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0204 	orr.w	r2, r2, #4
 80043a8:	619a      	str	r2, [r3, #24]
 80043aa:	e02c      	b.n	8004406 <HAL_FDCAN_Init+0x20e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d028      	beq.n	8004406 <HAL_FDCAN_Init+0x20e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d01c      	beq.n	80043f6 <HAL_FDCAN_Init+0x1fe>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043ca:	619a      	str	r2, [r3, #24]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0210 	orr.w	r2, r2, #16
 80043da:	611a      	str	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d110      	bne.n	8004406 <HAL_FDCAN_Init+0x20e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0220 	orr.w	r2, r2, #32
 80043f2:	619a      	str	r2, [r3, #24]
 80043f4:	e007      	b.n	8004406 <HAL_FDCAN_Init+0x20e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699a      	ldr	r2, [r3, #24]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0220 	orr.w	r2, r2, #32
 8004404:	619a      	str	r2, [r3, #24]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	3b01      	subs	r3, #1
 800440c:	065a      	lsls	r2, r3, #25
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	3b01      	subs	r3, #1
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	3b01      	subs	r3, #1
 800441e:	ea42 0103 	orr.w	r1, r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	3b01      	subs	r3, #1
 8004428:	041a      	lsls	r2, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	61da      	str	r2, [r3, #28]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800443a:	d115      	bne.n	8004468 <HAL_FDCAN_Init+0x270>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	1e5a      	subs	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	3b01      	subs	r3, #1
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	3b01      	subs	r3, #1
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	ea42 0103 	orr.w	r1, r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	3b01      	subs	r3, #1
 800445e:	041a      	lsls	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	60da      	str	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fb16 	bl	8004ab0 <FDCAN_CalcultateRamBlockAddresses>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	659a      	str	r2, [r3, #88]	; 0x58
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	661a      	str	r2, [r3, #96]	; 0x60
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004498:	2300      	movs	r3, #0
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40006400 	.word	0x40006400
 80044a8:	40006500 	.word	0x40006500

080044ac <HAL_FDCAN_ConfigFilter>:
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044bc:	75fb      	strb	r3, [r7, #23]
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d002      	beq.n	80044ca <HAL_FDCAN_ConfigFilter+0x1e>
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d13d      	bne.n	8004546 <HAL_FDCAN_ConfigFilter+0x9a>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d119      	bne.n	8004506 <HAL_FDCAN_ConfigFilter+0x5a>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	079a      	lsls	r2, r3, #30
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	06db      	lsls	r3, r3, #27
 80044de:	431a      	orrs	r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	041b      	lsls	r3, r3, #16
 80044e6:	431a      	orrs	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e01d      	b.n	8004542 <HAL_FDCAN_ConfigFilter+0x96>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	075a      	lsls	r2, r3, #29
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	079a      	lsls	r2, r3, #30
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4413      	add	r3, r2
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	3304      	adds	r3, #4
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	2300      	movs	r3, #0
 8004544:	e006      	b.n	8004554 <HAL_FDCAN_ConfigFilter+0xa8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454a:	f043 0202 	orr.w	r2, r3, #2
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	661a      	str	r2, [r3, #96]	; 0x60
 8004552:	2301      	movs	r3, #1
 8004554:	4618      	mov	r0, r3
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_FDCAN_ConfigGlobalFilter>:
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b01      	cmp	r3, #1
 8004578:	d116      	bne.n	80045a8 <HAL_FDCAN_ConfigGlobalFilter+0x48>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004582:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	011a      	lsls	r2, r3, #4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	431a      	orrs	r2, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	431a      	orrs	r2, r3
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80045a4:	2300      	movs	r3, #0
 80045a6:	e006      	b.n	80045b6 <HAL_FDCAN_ConfigGlobalFilter+0x56>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ac:	f043 0204 	orr.w	r2, r3, #4
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	661a      	str	r2, [r3, #96]	; 0x60
 80045b4:	2301      	movs	r3, #1
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_FDCAN_ConfigRxFifoOverwrite>:
 80045c2:	b480      	push	{r7}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d11f      	bne.n	800461a <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d10d      	bne.n	80045fc <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e8:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	025a      	lsls	r2, r3, #9
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80045fa:	e00c      	b.n	8004616 <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004604:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	021a      	lsls	r2, r3, #8
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004616:	2300      	movs	r3, #0
 8004618:	e006      	b.n	8004628 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461e:	f043 0204 	orr.w	r2, r3, #4
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	661a      	str	r2, [r3, #96]	; 0x60
 8004626:	2301      	movs	r3, #1
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_FDCAN_Start>:
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	d110      	bne.n	800466a <HAL_FDCAN_Start+0x36>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	619a      	str	r2, [r3, #24]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	661a      	str	r2, [r3, #96]	; 0x60
 8004666:	2300      	movs	r3, #0
 8004668:	e006      	b.n	8004678 <HAL_FDCAN_Start+0x44>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466e:	f043 0204 	orr.w	r2, r3, #4
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	661a      	str	r2, [r3, #96]	; 0x60
 8004676:	2301      	movs	r3, #1
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_FDCAN_AddMessageToTxFifoQ>:
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d12c      	bne.n	80046f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80046a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d007      	beq.n	80046bc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	661a      	str	r2, [r3, #96]	; 0x60
 80046b8:	2301      	movs	r3, #1
 80046ba:	e023      	b.n	8004704 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fa42 	bl	8004b5c <FDCAN_CopyMessageToRAM>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2101      	movs	r1, #1
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	fa01 f202 	lsl.w	r2, r1, r2
 80046e4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80046e8:	2201      	movs	r2, #1
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	409a      	lsls	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	659a      	str	r2, [r3, #88]	; 0x58
 80046f2:	2300      	movs	r3, #0
 80046f4:	e006      	b.n	8004704 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fa:	f043 0208 	orr.w	r2, r3, #8
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	661a      	str	r2, [r3, #96]	; 0x60
 8004702:	2301      	movs	r3, #1
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_FDCAN_GetRxMessage>:
 800470c:	b480      	push	{r7}
 800470e:	b08b      	sub	sp, #44	; 0x2c
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004720:	76fb      	strb	r3, [r7, #27]
 8004722:	7efb      	ldrb	r3, [r7, #27]
 8004724:	2b02      	cmp	r3, #2
 8004726:	f040 80bc 	bne.w	80048a2 <HAL_FDCAN_GetRxMessage+0x196>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b40      	cmp	r3, #64	; 0x40
 800472e:	d121      	bne.n	8004774 <HAL_FDCAN_GetRxMessage+0x68>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	2b00      	cmp	r3, #0
 800473e:	d107      	bne.n	8004750 <HAL_FDCAN_GetRxMessage+0x44>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004744:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	661a      	str	r2, [r3, #96]	; 0x60
 800474c:	2301      	movs	r3, #1
 800474e:	e0af      	b.n	80048b0 <HAL_FDCAN_GetRxMessage+0x1a4>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	0a1b      	lsrs	r3, r3, #8
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	4613      	mov	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	440b      	add	r3, r1
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
 8004772:	e020      	b.n	80047b6 <HAL_FDCAN_GetRxMessage+0xaa>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <HAL_FDCAN_GetRxMessage+0x88>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004788:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	661a      	str	r2, [r3, #96]	; 0x60
 8004790:	2301      	movs	r3, #1
 8004792:	e08d      	b.n	80048b0 <HAL_FDCAN_GetRxMessage+0x1a4>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	61fb      	str	r3, [r7, #28]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	440b      	add	r3, r1
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d107      	bne.n	80047da <HAL_FDCAN_GetRxMessage+0xce>
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	0c9b      	lsrs	r3, r3, #18
 80047d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e005      	b.n	80047e6 <HAL_FDCAN_GetRxMessage+0xda>
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	609a      	str	r2, [r3, #8]
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	611a      	str	r2, [r3, #16]
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	3304      	adds	r3, #4
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	61da      	str	r2, [r3, #28]
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	615a      	str	r2, [r3, #20]
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	619a      	str	r2, [r3, #24]
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	0e1b      	lsrs	r3, r3, #24
 8004838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	621a      	str	r2, [r3, #32]
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	0fda      	lsrs	r2, r3, #31
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	3304      	adds	r3, #4
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	2300      	movs	r3, #0
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	e00a      	b.n	8004870 <HAL_FDCAN_GetRxMessage+0x164>
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	441a      	add	r2, r3
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	440b      	add	r3, r1
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	3301      	adds	r3, #1
 800486e:	623b      	str	r3, [r7, #32]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	4a11      	ldr	r2, [pc, #68]	; (80048bc <HAL_FDCAN_GetRxMessage+0x1b0>)
 8004878:	5cd3      	ldrb	r3, [r2, r3]
 800487a:	461a      	mov	r2, r3
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	4293      	cmp	r3, r2
 8004880:	d3eb      	bcc.n	800485a <HAL_FDCAN_GetRxMessage+0x14e>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d105      	bne.n	8004894 <HAL_FDCAN_GetRxMessage+0x188>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004892:	e004      	b.n	800489e <HAL_FDCAN_GetRxMessage+0x192>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800489e:	2300      	movs	r3, #0
 80048a0:	e006      	b.n	80048b0 <HAL_FDCAN_GetRxMessage+0x1a4>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	f043 0208 	orr.w	r2, r3, #8
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	661a      	str	r2, [r3, #96]	; 0x60
 80048ae:	2301      	movs	r3, #1
 80048b0:	4618      	mov	r0, r3
 80048b2:	372c      	adds	r7, #44	; 0x2c
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	08009384 	.word	0x08009384

080048c0 <HAL_FDCAN_GetTxFifoFreeLevel>:
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_FDCAN_ActivateNotification>:
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048f6:	75fb      	strb	r3, [r7, #23]
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d003      	beq.n	8004906 <HAL_FDCAN_ActivateNotification+0x22>
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	2b02      	cmp	r3, #2
 8004902:	f040 80c8 	bne.w	8004a96 <HAL_FDCAN_ActivateNotification+0x1b2>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <HAL_FDCAN_ActivateNotification+0x3e>
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d03b      	beq.n	800499a <HAL_FDCAN_ActivateNotification+0xb6>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <HAL_FDCAN_ActivateNotification+0x52>
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d031      	beq.n	800499a <HAL_FDCAN_ActivateNotification+0xb6>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d004      	beq.n	800494a <HAL_FDCAN_ActivateNotification+0x66>
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	d027      	beq.n	800499a <HAL_FDCAN_ActivateNotification+0xb6>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
 8004950:	2b00      	cmp	r3, #0
 8004952:	d004      	beq.n	800495e <HAL_FDCAN_ActivateNotification+0x7a>
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01d      	beq.n	800499a <HAL_FDCAN_ActivateNotification+0xb6>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d004      	beq.n	8004972 <HAL_FDCAN_ActivateNotification+0x8e>
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b00      	cmp	r3, #0
 8004970:	d013      	beq.n	800499a <HAL_FDCAN_ActivateNotification+0xb6>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <HAL_FDCAN_ActivateNotification+0xa2>
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_FDCAN_ActivateNotification+0xb6>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00c      	beq.n	80049aa <HAL_FDCAN_ActivateNotification+0xc6>
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d107      	bne.n	80049aa <HAL_FDCAN_ActivateNotification+0xc6>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0201 	orr.w	r2, r2, #1
 80049a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <HAL_FDCAN_ActivateNotification+0xda>
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d13b      	bne.n	8004a36 <HAL_FDCAN_ActivateNotification+0x152>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d004      	beq.n	80049d2 <HAL_FDCAN_ActivateNotification+0xee>
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d131      	bne.n	8004a36 <HAL_FDCAN_ActivateNotification+0x152>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d004      	beq.n	80049e6 <HAL_FDCAN_ActivateNotification+0x102>
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d127      	bne.n	8004a36 <HAL_FDCAN_ActivateNotification+0x152>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <HAL_FDCAN_ActivateNotification+0x116>
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d11d      	bne.n	8004a36 <HAL_FDCAN_ActivateNotification+0x152>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d004      	beq.n	8004a0e <HAL_FDCAN_ActivateNotification+0x12a>
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d113      	bne.n	8004a36 <HAL_FDCAN_ActivateNotification+0x152>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d004      	beq.n	8004a22 <HAL_FDCAN_ActivateNotification+0x13e>
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d109      	bne.n	8004a36 <HAL_FDCAN_ActivateNotification+0x152>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00c      	beq.n	8004a46 <HAL_FDCAN_ActivateNotification+0x162>
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <HAL_FDCAN_ActivateNotification+0x162>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0202 	orr.w	r2, r2, #2
 8004a44:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d009      	beq.n	8004a64 <HAL_FDCAN_ActivateNotification+0x180>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_FDCAN_ActivateNotification+0x19e>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
 8004a92:	2300      	movs	r3, #0
 8004a94:	e006      	b.n	8004aa4 <HAL_FDCAN_ActivateNotification+0x1c0>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a9a:	f043 0202 	orr.w	r2, r3, #2
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	661a      	str	r2, [r3, #96]	; 0x60
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <FDCAN_CalcultateRamBlockAddresses>:
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004aba:	60bb      	str	r3, [r7, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aca:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad2:	041a      	lsls	r2, r3, #16
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	645a      	str	r2, [r3, #68]	; 0x44
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004af0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	061a      	lsls	r2, r3, #24
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	649a      	str	r2, [r3, #72]	; 0x48
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	651a      	str	r2, [r3, #80]	; 0x50
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e005      	b.n	8004b3e <FDCAN_CalcultateRamBlockAddresses+0x8e>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d3f3      	bcc.n	8004b32 <FDCAN_CalcultateRamBlockAddresses+0x82>
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	4000a400 	.word	0x4000a400

08004b5c <FDCAN_CopyMessageToRAM>:
 8004b5c:	b480      	push	{r7}
 8004b5e:	b089      	sub	sp, #36	; 0x24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <FDCAN_CopyMessageToRAM+0x2c>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	049b      	lsls	r3, r3, #18
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	e00a      	b.n	8004b9e <FDCAN_CopyMessageToRAM+0x42>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	061a      	lsls	r2, r3, #24
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4413      	add	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	440b      	add	r3, r1
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	61bb      	str	r3, [r7, #24]
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	3304      	adds	r3, #4
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	e020      	b.n	8004c30 <FDCAN_CopyMessageToRAM+0xd4>
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	3303      	adds	r3, #3
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	061a      	lsls	r2, r3, #24
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	3302      	adds	r3, #2
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	440b      	add	r3, r1
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	431a      	orrs	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	440b      	add	r3, r1
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	4313      	orrs	r3, r2
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	7812      	ldrb	r2, [r2, #0]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	3304      	adds	r3, #4
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	4a06      	ldr	r2, [pc, #24]	; (8004c50 <FDCAN_CopyMessageToRAM+0xf4>)
 8004c38:	5cd3      	ldrb	r3, [r2, r3]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d3d5      	bcc.n	8004bee <FDCAN_CopyMessageToRAM+0x92>
 8004c42:	bf00      	nop
 8004c44:	bf00      	nop
 8004c46:	3724      	adds	r7, #36	; 0x24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	08009384 	.word	0x08009384

08004c54 <HAL_GPIO_Init>:
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e15a      	b.n	8004f1a <HAL_GPIO_Init+0x2c6>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	2101      	movs	r1, #1
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c70:	4013      	ands	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 814c 	beq.w	8004f14 <HAL_GPIO_Init+0x2c0>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d005      	beq.n	8004c94 <HAL_GPIO_Init+0x40>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d130      	bne.n	8004cf6 <HAL_GPIO_Init+0xa2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	091b      	lsrs	r3, r3, #4
 8004ce0:	f003 0201 	and.w	r2, r3, #1
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	605a      	str	r2, [r3, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d017      	beq.n	8004d32 <HAL_GPIO_Init+0xde>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	60da      	str	r2, [r3, #12]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d123      	bne.n	8004d86 <HAL_GPIO_Init+0x132>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	08da      	lsrs	r2, r3, #3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3208      	adds	r2, #8
 8004d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	220f      	movs	r2, #15
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	08da      	lsrs	r2, r3, #3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3208      	adds	r2, #8
 8004d80:	6939      	ldr	r1, [r7, #16]
 8004d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	2203      	movs	r2, #3
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 0203 	and.w	r2, r3, #3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80a6 	beq.w	8004f14 <HAL_GPIO_Init+0x2c0>
 8004dc8:	4b5b      	ldr	r3, [pc, #364]	; (8004f38 <HAL_GPIO_Init+0x2e4>)
 8004dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dcc:	4a5a      	ldr	r2, [pc, #360]	; (8004f38 <HAL_GPIO_Init+0x2e4>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6613      	str	r3, [r2, #96]	; 0x60
 8004dd4:	4b58      	ldr	r3, [pc, #352]	; (8004f38 <HAL_GPIO_Init+0x2e4>)
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4a56      	ldr	r2, [pc, #344]	; (8004f3c <HAL_GPIO_Init+0x2e8>)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	089b      	lsrs	r3, r3, #2
 8004de6:	3302      	adds	r3, #2
 8004de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	220f      	movs	r2, #15
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4013      	ands	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e0a:	d01f      	beq.n	8004e4c <HAL_GPIO_Init+0x1f8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a4c      	ldr	r2, [pc, #304]	; (8004f40 <HAL_GPIO_Init+0x2ec>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d019      	beq.n	8004e48 <HAL_GPIO_Init+0x1f4>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a4b      	ldr	r2, [pc, #300]	; (8004f44 <HAL_GPIO_Init+0x2f0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d013      	beq.n	8004e44 <HAL_GPIO_Init+0x1f0>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a4a      	ldr	r2, [pc, #296]	; (8004f48 <HAL_GPIO_Init+0x2f4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00d      	beq.n	8004e40 <HAL_GPIO_Init+0x1ec>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a49      	ldr	r2, [pc, #292]	; (8004f4c <HAL_GPIO_Init+0x2f8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d007      	beq.n	8004e3c <HAL_GPIO_Init+0x1e8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a48      	ldr	r2, [pc, #288]	; (8004f50 <HAL_GPIO_Init+0x2fc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d101      	bne.n	8004e38 <HAL_GPIO_Init+0x1e4>
 8004e34:	2305      	movs	r3, #5
 8004e36:	e00a      	b.n	8004e4e <HAL_GPIO_Init+0x1fa>
 8004e38:	2306      	movs	r3, #6
 8004e3a:	e008      	b.n	8004e4e <HAL_GPIO_Init+0x1fa>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	e006      	b.n	8004e4e <HAL_GPIO_Init+0x1fa>
 8004e40:	2303      	movs	r3, #3
 8004e42:	e004      	b.n	8004e4e <HAL_GPIO_Init+0x1fa>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e002      	b.n	8004e4e <HAL_GPIO_Init+0x1fa>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <HAL_GPIO_Init+0x1fa>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	f002 0203 	and.w	r2, r2, #3
 8004e54:	0092      	lsls	r2, r2, #2
 8004e56:	4093      	lsls	r3, r2
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	4937      	ldr	r1, [pc, #220]	; (8004f3c <HAL_GPIO_Init+0x2e8>)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	3302      	adds	r3, #2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004e6c:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <HAL_GPIO_Init+0x300>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	43db      	mvns	r3, r3
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_GPIO_Init+0x23c>
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	4a30      	ldr	r2, [pc, #192]	; (8004f54 <HAL_GPIO_Init+0x300>)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	6093      	str	r3, [r2, #8]
 8004e96:	4b2f      	ldr	r3, [pc, #188]	; (8004f54 <HAL_GPIO_Init+0x300>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_GPIO_Init+0x266>
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	4a26      	ldr	r2, [pc, #152]	; (8004f54 <HAL_GPIO_Init+0x300>)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	60d3      	str	r3, [r2, #12]
 8004ec0:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <HAL_GPIO_Init+0x300>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_GPIO_Init+0x290>
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	4a1b      	ldr	r2, [pc, #108]	; (8004f54 <HAL_GPIO_Init+0x300>)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	6053      	str	r3, [r2, #4]
 8004eea:	4b1a      	ldr	r3, [pc, #104]	; (8004f54 <HAL_GPIO_Init+0x300>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_GPIO_Init+0x2ba>
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	4a11      	ldr	r2, [pc, #68]	; (8004f54 <HAL_GPIO_Init+0x300>)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	3301      	adds	r3, #1
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f47f ae9d 	bne.w	8004c64 <HAL_GPIO_Init+0x10>
 8004f2a:	bf00      	nop
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	48000400 	.word	0x48000400
 8004f44:	48000800 	.word	0x48000800
 8004f48:	48000c00 	.word	0x48000c00
 8004f4c:	48001000 	.word	0x48001000
 8004f50:	48001400 	.word	0x48001400
 8004f54:	40010400 	.word	0x40010400

08004f58 <HAL_GPIO_ReadPin>:
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	807b      	strh	r3, [r7, #2]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	887b      	ldrh	r3, [r7, #2]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <HAL_GPIO_ReadPin+0x1e>
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
 8004f74:	e001      	b.n	8004f7a <HAL_GPIO_ReadPin+0x22>
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_GPIO_WritePin>:
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	807b      	strh	r3, [r7, #2]
 8004f94:	4613      	mov	r3, r2
 8004f96:	707b      	strb	r3, [r7, #1]
 8004f98:	787b      	ldrb	r3, [r7, #1]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_GPIO_WritePin+0x1e>
 8004f9e:	887a      	ldrh	r2, [r7, #2]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	619a      	str	r2, [r3, #24]
 8004fa4:	e002      	b.n	8004fac <HAL_GPIO_WritePin+0x24>
 8004fa6:	887a      	ldrh	r2, [r7, #2]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	629a      	str	r2, [r3, #40]	; 0x28
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_PWREx_ControlVoltageScaling>:
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d141      	bne.n	800504a <HAL_PWREx_ControlVoltageScaling+0x92>
 8004fc6:	4b4b      	ldr	r3, [pc, #300]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd2:	d131      	bne.n	8005038 <HAL_PWREx_ControlVoltageScaling+0x80>
 8004fd4:	4b47      	ldr	r3, [pc, #284]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fda:	4a46      	ldr	r2, [pc, #280]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004fe4:	4b43      	ldr	r3, [pc, #268]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fec:	4a41      	ldr	r2, [pc, #260]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	4b40      	ldr	r3, [pc, #256]	; (80050f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2232      	movs	r2, #50	; 0x32
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	4a3f      	ldr	r2, [pc, #252]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005000:	fba2 2303 	umull	r2, r3, r2, r3
 8005004:	0c9b      	lsrs	r3, r3, #18
 8005006:	3301      	adds	r3, #1
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e002      	b.n	8005012 <HAL_PWREx_ControlVoltageScaling+0x5a>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3b01      	subs	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	4b38      	ldr	r3, [pc, #224]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800501e:	d102      	bne.n	8005026 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f2      	bne.n	800500c <HAL_PWREx_ControlVoltageScaling+0x54>
 8005026:	4b33      	ldr	r3, [pc, #204]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005032:	d158      	bne.n	80050e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
 8005034:	2303      	movs	r3, #3
 8005036:	e057      	b.n	80050e8 <HAL_PWREx_ControlVoltageScaling+0x130>
 8005038:	4b2e      	ldr	r3, [pc, #184]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800503e:	4a2d      	ldr	r2, [pc, #180]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005044:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005048:	e04d      	b.n	80050e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005050:	d141      	bne.n	80050d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
 8005052:	4b28      	ldr	r3, [pc, #160]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800505a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505e:	d131      	bne.n	80050c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
 8005060:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005066:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800506c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005070:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005078:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2232      	movs	r2, #50	; 0x32
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	4a1c      	ldr	r2, [pc, #112]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800508c:	fba2 2303 	umull	r2, r3, r2, r3
 8005090:	0c9b      	lsrs	r3, r3, #18
 8005092:	3301      	adds	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	e002      	b.n	800509e <HAL_PWREx_ControlVoltageScaling+0xe6>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3b01      	subs	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050aa:	d102      	bne.n	80050b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f2      	bne.n	8005098 <HAL_PWREx_ControlVoltageScaling+0xe0>
 80050b2:	4b10      	ldr	r3, [pc, #64]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050be:	d112      	bne.n	80050e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
 80050c0:	2303      	movs	r3, #3
 80050c2:	e011      	b.n	80050e8 <HAL_PWREx_ControlVoltageScaling+0x130>
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ca:	4a0a      	ldr	r2, [pc, #40]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050d4:	e007      	b.n	80050e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
 80050d6:	4b07      	ldr	r3, [pc, #28]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050de:	4a05      	ldr	r2, [pc, #20]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	2300      	movs	r3, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40007000 	.word	0x40007000
 80050f8:	20000030 	.word	0x20000030
 80050fc:	431bde83 	.word	0x431bde83

08005100 <HAL_RCC_OscConfig>:
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_OscConfig+0x12>
 800510e:	2301      	movs	r3, #1
 8005110:	e306      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d075      	beq.n	800520a <HAL_RCC_OscConfig+0x10a>
 800511e:	4b97      	ldr	r3, [pc, #604]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	61bb      	str	r3, [r7, #24]
 8005128:	4b94      	ldr	r3, [pc, #592]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	d102      	bne.n	800513e <HAL_RCC_OscConfig+0x3e>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d002      	beq.n	8005144 <HAL_RCC_OscConfig+0x44>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d10b      	bne.n	800515c <HAL_RCC_OscConfig+0x5c>
 8005144:	4b8d      	ldr	r3, [pc, #564]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d05b      	beq.n	8005208 <HAL_RCC_OscConfig+0x108>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d157      	bne.n	8005208 <HAL_RCC_OscConfig+0x108>
 8005158:	2301      	movs	r3, #1
 800515a:	e2e1      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005164:	d106      	bne.n	8005174 <HAL_RCC_OscConfig+0x74>
 8005166:	4b85      	ldr	r3, [pc, #532]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a84      	ldr	r2, [pc, #528]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800516c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e01d      	b.n	80051b0 <HAL_RCC_OscConfig+0xb0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x98>
 800517e:	4b7f      	ldr	r3, [pc, #508]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a7e      	ldr	r2, [pc, #504]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	4b7c      	ldr	r3, [pc, #496]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a7b      	ldr	r2, [pc, #492]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e00b      	b.n	80051b0 <HAL_RCC_OscConfig+0xb0>
 8005198:	4b78      	ldr	r3, [pc, #480]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a77      	ldr	r2, [pc, #476]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800519e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	4b75      	ldr	r3, [pc, #468]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a74      	ldr	r2, [pc, #464]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80051aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d013      	beq.n	80051e0 <HAL_RCC_OscConfig+0xe0>
 80051b8:	f7fe ff0c 	bl	8003fd4 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0xd2>
 80051c0:	f7fe ff08 	bl	8003fd4 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	; 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0xd2>
 80051ce:	2303      	movs	r3, #3
 80051d0:	e2a6      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 80051d2:	4b6a      	ldr	r3, [pc, #424]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0xc0>
 80051de:	e014      	b.n	800520a <HAL_RCC_OscConfig+0x10a>
 80051e0:	f7fe fef8 	bl	8003fd4 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0xfa>
 80051e8:	f7fe fef4 	bl	8003fd4 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	; 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0xfa>
 80051f6:	2303      	movs	r3, #3
 80051f8:	e292      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 80051fa:	4b60      	ldr	r3, [pc, #384]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0xe8>
 8005206:	e000      	b.n	800520a <HAL_RCC_OscConfig+0x10a>
 8005208:	bf00      	nop
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d075      	beq.n	8005302 <HAL_RCC_OscConfig+0x202>
 8005216:	4b59      	ldr	r3, [pc, #356]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	4b56      	ldr	r3, [pc, #344]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b0c      	cmp	r3, #12
 800522e:	d102      	bne.n	8005236 <HAL_RCC_OscConfig+0x136>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d002      	beq.n	800523c <HAL_RCC_OscConfig+0x13c>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d11f      	bne.n	800527c <HAL_RCC_OscConfig+0x17c>
 800523c:	4b4f      	ldr	r3, [pc, #316]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_OscConfig+0x154>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_OscConfig+0x154>
 8005250:	2301      	movs	r3, #1
 8005252:	e265      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 8005254:	4b49      	ldr	r3, [pc, #292]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	4946      	ldr	r1, [pc, #280]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]
 8005268:	4b45      	ldr	r3, [pc, #276]	; (8005380 <HAL_RCC_OscConfig+0x280>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe fe65 	bl	8003f3c <HAL_InitTick>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d043      	beq.n	8005300 <HAL_RCC_OscConfig+0x200>
 8005278:	2301      	movs	r3, #1
 800527a:	e251      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d023      	beq.n	80052cc <HAL_RCC_OscConfig+0x1cc>
 8005284:	4b3d      	ldr	r3, [pc, #244]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a3c      	ldr	r2, [pc, #240]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800528a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	f7fe fea0 	bl	8003fd4 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x1aa>
 8005298:	f7fe fe9c 	bl	8003fd4 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x1aa>
 80052a6:	2303      	movs	r3, #3
 80052a8:	e23a      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 80052aa:	4b34      	ldr	r3, [pc, #208]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0x198>
 80052b6:	4b31      	ldr	r3, [pc, #196]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	492d      	ldr	r1, [pc, #180]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	604b      	str	r3, [r1, #4]
 80052ca:	e01a      	b.n	8005302 <HAL_RCC_OscConfig+0x202>
 80052cc:	4b2b      	ldr	r3, [pc, #172]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a2a      	ldr	r2, [pc, #168]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	f7fe fe7c 	bl	8003fd4 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x1f2>
 80052e0:	f7fe fe78 	bl	8003fd4 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x1f2>
 80052ee:	2303      	movs	r3, #3
 80052f0:	e216      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 80052f2:	4b22      	ldr	r3, [pc, #136]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x1e0>
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x202>
 8005300:	bf00      	nop
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d041      	beq.n	8005392 <HAL_RCC_OscConfig+0x292>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01c      	beq.n	8005350 <HAL_RCC_OscConfig+0x250>
 8005316:	4b19      	ldr	r3, [pc, #100]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531c:	4a17      	ldr	r2, [pc, #92]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005326:	f7fe fe55 	bl	8003fd4 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x240>
 800532e:	f7fe fe51 	bl	8003fd4 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x240>
 800533c:	2303      	movs	r3, #3
 800533e:	e1ef      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0ef      	beq.n	800532e <HAL_RCC_OscConfig+0x22e>
 800534e:	e020      	b.n	8005392 <HAL_RCC_OscConfig+0x292>
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005360:	f7fe fe38 	bl	8003fd4 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]
 8005366:	e00d      	b.n	8005384 <HAL_RCC_OscConfig+0x284>
 8005368:	f7fe fe34 	bl	8003fd4 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d906      	bls.n	8005384 <HAL_RCC_OscConfig+0x284>
 8005376:	2303      	movs	r3, #3
 8005378:	e1d2      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 800537a:	bf00      	nop
 800537c:	40021000 	.word	0x40021000
 8005380:	20000034 	.word	0x20000034
 8005384:	4b8c      	ldr	r3, [pc, #560]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1ea      	bne.n	8005368 <HAL_RCC_OscConfig+0x268>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80a6 	beq.w	80054ec <HAL_RCC_OscConfig+0x3ec>
 80053a0:	2300      	movs	r3, #0
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	4b84      	ldr	r3, [pc, #528]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_RCC_OscConfig+0x2b4>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <HAL_RCC_OscConfig+0x2b6>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <HAL_RCC_OscConfig+0x2d6>
 80053ba:	4b7f      	ldr	r3, [pc, #508]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	4a7e      	ldr	r2, [pc, #504]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80053c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c4:	6593      	str	r3, [r2, #88]	; 0x58
 80053c6:	4b7c      	ldr	r3, [pc, #496]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2301      	movs	r3, #1
 80053d4:	77fb      	strb	r3, [r7, #31]
 80053d6:	4b79      	ldr	r3, [pc, #484]	; (80055bc <HAL_RCC_OscConfig+0x4bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d118      	bne.n	8005414 <HAL_RCC_OscConfig+0x314>
 80053e2:	4b76      	ldr	r3, [pc, #472]	; (80055bc <HAL_RCC_OscConfig+0x4bc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a75      	ldr	r2, [pc, #468]	; (80055bc <HAL_RCC_OscConfig+0x4bc>)
 80053e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	f7fe fdf1 	bl	8003fd4 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x308>
 80053f6:	f7fe fded 	bl	8003fd4 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x308>
 8005404:	2303      	movs	r3, #3
 8005406:	e18b      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 8005408:	4b6c      	ldr	r3, [pc, #432]	; (80055bc <HAL_RCC_OscConfig+0x4bc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x2f6>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d108      	bne.n	800542e <HAL_RCC_OscConfig+0x32e>
 800541c:	4b66      	ldr	r3, [pc, #408]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005422:	4a65      	ldr	r2, [pc, #404]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800542c:	e024      	b.n	8005478 <HAL_RCC_OscConfig+0x378>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b05      	cmp	r3, #5
 8005434:	d110      	bne.n	8005458 <HAL_RCC_OscConfig+0x358>
 8005436:	4b60      	ldr	r3, [pc, #384]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	4a5e      	ldr	r2, [pc, #376]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800543e:	f043 0304 	orr.w	r3, r3, #4
 8005442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005446:	4b5c      	ldr	r3, [pc, #368]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544c:	4a5a      	ldr	r2, [pc, #360]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005456:	e00f      	b.n	8005478 <HAL_RCC_OscConfig+0x378>
 8005458:	4b57      	ldr	r3, [pc, #348]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	4a56      	ldr	r2, [pc, #344]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005468:	4b53      	ldr	r3, [pc, #332]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	4a52      	ldr	r2, [pc, #328]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d016      	beq.n	80054ae <HAL_RCC_OscConfig+0x3ae>
 8005480:	f7fe fda8 	bl	8003fd4 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]
 8005486:	e00a      	b.n	800549e <HAL_RCC_OscConfig+0x39e>
 8005488:	f7fe fda4 	bl	8003fd4 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f241 3288 	movw	r2, #5000	; 0x1388
 8005496:	4293      	cmp	r3, r2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x39e>
 800549a:	2303      	movs	r3, #3
 800549c:	e140      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 800549e:	4b46      	ldr	r3, [pc, #280]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0ed      	beq.n	8005488 <HAL_RCC_OscConfig+0x388>
 80054ac:	e015      	b.n	80054da <HAL_RCC_OscConfig+0x3da>
 80054ae:	f7fe fd91 	bl	8003fd4 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]
 80054b4:	e00a      	b.n	80054cc <HAL_RCC_OscConfig+0x3cc>
 80054b6:	f7fe fd8d 	bl	8003fd4 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x3cc>
 80054c8:	2303      	movs	r3, #3
 80054ca:	e129      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 80054cc:	4b3a      	ldr	r3, [pc, #232]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1ed      	bne.n	80054b6 <HAL_RCC_OscConfig+0x3b6>
 80054da:	7ffb      	ldrb	r3, [r7, #31]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d105      	bne.n	80054ec <HAL_RCC_OscConfig+0x3ec>
 80054e0:	4b35      	ldr	r3, [pc, #212]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80054e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e4:	4a34      	ldr	r2, [pc, #208]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80054e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ea:	6593      	str	r3, [r2, #88]	; 0x58
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d03c      	beq.n	8005572 <HAL_RCC_OscConfig+0x472>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01c      	beq.n	800553a <HAL_RCC_OscConfig+0x43a>
 8005500:	4b2d      	ldr	r3, [pc, #180]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005506:	4a2c      	ldr	r2, [pc, #176]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8005510:	f7fe fd60 	bl	8003fd4 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x42a>
 8005518:	f7fe fd5c 	bl	8003fd4 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x42a>
 8005526:	2303      	movs	r3, #3
 8005528:	e0fa      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 800552a:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800552c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ef      	beq.n	8005518 <HAL_RCC_OscConfig+0x418>
 8005538:	e01b      	b.n	8005572 <HAL_RCC_OscConfig+0x472>
 800553a:	4b1f      	ldr	r3, [pc, #124]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800553c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005540:	4a1d      	ldr	r2, [pc, #116]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800554a:	f7fe fd43 	bl	8003fd4 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x464>
 8005552:	f7fe fd3f 	bl	8003fd4 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x464>
 8005560:	2303      	movs	r3, #3
 8005562:	e0dd      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 8005564:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ef      	bne.n	8005552 <HAL_RCC_OscConfig+0x452>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80d1 	beq.w	800571e <HAL_RCC_OscConfig+0x61e>
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 030c 	and.w	r3, r3, #12
 8005584:	2b0c      	cmp	r3, #12
 8005586:	f000 808b 	beq.w	80056a0 <HAL_RCC_OscConfig+0x5a0>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d15e      	bne.n	8005650 <HAL_RCC_OscConfig+0x550>
 8005592:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a08      	ldr	r2, [pc, #32]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	f7fe fd19 	bl	8003fd4 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]
 80055a4:	e00c      	b.n	80055c0 <HAL_RCC_OscConfig+0x4c0>
 80055a6:	f7fe fd15 	bl	8003fd4 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d905      	bls.n	80055c0 <HAL_RCC_OscConfig+0x4c0>
 80055b4:	2303      	movs	r3, #3
 80055b6:	e0b3      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 80055b8:	40021000 	.word	0x40021000
 80055bc:	40007000 	.word	0x40007000
 80055c0:	4b59      	ldr	r3, [pc, #356]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1ec      	bne.n	80055a6 <HAL_RCC_OscConfig+0x4a6>
 80055cc:	4b56      	ldr	r3, [pc, #344]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	4b56      	ldr	r3, [pc, #344]	; (800572c <HAL_RCC_OscConfig+0x62c>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6a11      	ldr	r1, [r2, #32]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055dc:	3a01      	subs	r2, #1
 80055de:	0112      	lsls	r2, r2, #4
 80055e0:	4311      	orrs	r1, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80055e6:	0212      	lsls	r2, r2, #8
 80055e8:	4311      	orrs	r1, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055ee:	0852      	lsrs	r2, r2, #1
 80055f0:	3a01      	subs	r2, #1
 80055f2:	0552      	lsls	r2, r2, #21
 80055f4:	4311      	orrs	r1, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055fa:	0852      	lsrs	r2, r2, #1
 80055fc:	3a01      	subs	r2, #1
 80055fe:	0652      	lsls	r2, r2, #25
 8005600:	4311      	orrs	r1, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005606:	06d2      	lsls	r2, r2, #27
 8005608:	430a      	orrs	r2, r1
 800560a:	4947      	ldr	r1, [pc, #284]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 800560c:	4313      	orrs	r3, r2
 800560e:	60cb      	str	r3, [r1, #12]
 8005610:	4b45      	ldr	r3, [pc, #276]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a44      	ldr	r2, [pc, #272]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	4b42      	ldr	r3, [pc, #264]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4a41      	ldr	r2, [pc, #260]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005626:	60d3      	str	r3, [r2, #12]
 8005628:	f7fe fcd4 	bl	8003fd4 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x542>
 8005630:	f7fe fcd0 	bl	8003fd4 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x542>
 800563e:	2303      	movs	r3, #3
 8005640:	e06e      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 8005642:	4b39      	ldr	r3, [pc, #228]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0f0      	beq.n	8005630 <HAL_RCC_OscConfig+0x530>
 800564e:	e066      	b.n	800571e <HAL_RCC_OscConfig+0x61e>
 8005650:	4b35      	ldr	r3, [pc, #212]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a34      	ldr	r2, [pc, #208]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	4b32      	ldr	r3, [pc, #200]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4a31      	ldr	r2, [pc, #196]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	60d3      	str	r3, [r2, #12]
 8005668:	4b2f      	ldr	r3, [pc, #188]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a2e      	ldr	r2, [pc, #184]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 800566e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005676:	60d3      	str	r3, [r2, #12]
 8005678:	f7fe fcac 	bl	8003fd4 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x592>
 8005680:	f7fe fca8 	bl	8003fd4 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x592>
 800568e:	2303      	movs	r3, #3
 8005690:	e046      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 8005692:	4b25      	ldr	r3, [pc, #148]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f0      	bne.n	8005680 <HAL_RCC_OscConfig+0x580>
 800569e:	e03e      	b.n	800571e <HAL_RCC_OscConfig+0x61e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_RCC_OscConfig+0x5ac>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e039      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 80056ac:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f003 0203 	and.w	r2, r3, #3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d12c      	bne.n	800571a <HAL_RCC_OscConfig+0x61a>
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	3b01      	subs	r3, #1
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d123      	bne.n	800571a <HAL_RCC_OscConfig+0x61a>
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	429a      	cmp	r2, r3
 80056e0:	d11b      	bne.n	800571a <HAL_RCC_OscConfig+0x61a>
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	06db      	lsls	r3, r3, #27
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d113      	bne.n	800571a <HAL_RCC_OscConfig+0x61a>
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	085b      	lsrs	r3, r3, #1
 80056fe:	3b01      	subs	r3, #1
 8005700:	055b      	lsls	r3, r3, #21
 8005702:	429a      	cmp	r2, r3
 8005704:	d109      	bne.n	800571a <HAL_RCC_OscConfig+0x61a>
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	3b01      	subs	r3, #1
 8005714:	065b      	lsls	r3, r3, #25
 8005716:	429a      	cmp	r2, r3
 8005718:	d001      	beq.n	800571e <HAL_RCC_OscConfig+0x61e>
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 800571e:	2300      	movs	r3, #0
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40021000 	.word	0x40021000
 800572c:	019f800c 	.word	0x019f800c

08005730 <HAL_RCC_ClockConfig>:
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_RCC_ClockConfig+0x18>
 8005744:	2301      	movs	r3, #1
 8005746:	e11e      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
 8005748:	4b91      	ldr	r3, [pc, #580]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d910      	bls.n	8005778 <HAL_RCC_ClockConfig+0x48>
 8005756:	4b8e      	ldr	r3, [pc, #568]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f023 020f 	bic.w	r2, r3, #15
 800575e:	498c      	ldr	r1, [pc, #560]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]
 8005766:	4b8a      	ldr	r3, [pc, #552]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_ClockConfig+0x48>
 8005774:	2301      	movs	r3, #1
 8005776:	e106      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d073      	beq.n	800586c <HAL_RCC_ClockConfig+0x13c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b03      	cmp	r3, #3
 800578a:	d129      	bne.n	80057e0 <HAL_RCC_ClockConfig+0xb0>
 800578c:	4b81      	ldr	r3, [pc, #516]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x6c>
 8005798:	2301      	movs	r3, #1
 800579a:	e0f4      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
 800579c:	f000 f99e 	bl	8005adc <RCC_GetSysClockFreqFromPLLSource>
 80057a0:	6138      	str	r0, [r7, #16]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4a7c      	ldr	r2, [pc, #496]	; (8005998 <HAL_RCC_ClockConfig+0x268>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d93f      	bls.n	800582a <HAL_RCC_ClockConfig+0xfa>
 80057aa:	4b7a      	ldr	r3, [pc, #488]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <HAL_RCC_ClockConfig+0x9a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d033      	beq.n	800582a <HAL_RCC_ClockConfig+0xfa>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d12f      	bne.n	800582a <HAL_RCC_ClockConfig+0xfa>
 80057ca:	4b72      	ldr	r3, [pc, #456]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057d2:	4a70      	ldr	r2, [pc, #448]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80057d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d8:	6093      	str	r3, [r2, #8]
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e024      	b.n	800582a <HAL_RCC_ClockConfig+0xfa>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d107      	bne.n	80057f8 <HAL_RCC_ClockConfig+0xc8>
 80057e8:	4b6a      	ldr	r3, [pc, #424]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d109      	bne.n	8005808 <HAL_RCC_ClockConfig+0xd8>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0c6      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
 80057f8:	4b66      	ldr	r3, [pc, #408]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_RCC_ClockConfig+0xd8>
 8005804:	2301      	movs	r3, #1
 8005806:	e0be      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
 8005808:	f000 f8ce 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 800580c:	6138      	str	r0, [r7, #16]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4a61      	ldr	r2, [pc, #388]	; (8005998 <HAL_RCC_ClockConfig+0x268>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d909      	bls.n	800582a <HAL_RCC_ClockConfig+0xfa>
 8005816:	4b5f      	ldr	r3, [pc, #380]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800581e:	4a5d      	ldr	r2, [pc, #372]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005824:	6093      	str	r3, [r2, #8]
 8005826:	2380      	movs	r3, #128	; 0x80
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	4b5a      	ldr	r3, [pc, #360]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f023 0203 	bic.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4957      	ldr	r1, [pc, #348]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005838:	4313      	orrs	r3, r2
 800583a:	608b      	str	r3, [r1, #8]
 800583c:	f7fe fbca 	bl	8003fd4 <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	e00a      	b.n	800585a <HAL_RCC_ClockConfig+0x12a>
 8005844:	f7fe fbc6 	bl	8003fd4 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_ClockConfig+0x12a>
 8005856:	2303      	movs	r3, #3
 8005858:	e095      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
 800585a:	4b4e      	ldr	r3, [pc, #312]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 020c 	and.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	429a      	cmp	r2, r3
 800586a:	d1eb      	bne.n	8005844 <HAL_RCC_ClockConfig+0x114>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d023      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x190>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <HAL_RCC_ClockConfig+0x160>
 8005884:	4b43      	ldr	r3, [pc, #268]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	4a42      	ldr	r2, [pc, #264]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 800588a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800588e:	6093      	str	r3, [r2, #8]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <HAL_RCC_ClockConfig+0x17c>
 800589c:	4b3d      	ldr	r3, [pc, #244]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80058a4:	4a3b      	ldr	r2, [pc, #236]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80058a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058aa:	6093      	str	r3, [r2, #8]
 80058ac:	4b39      	ldr	r3, [pc, #228]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4936      	ldr	r1, [pc, #216]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]
 80058be:	e008      	b.n	80058d2 <HAL_RCC_ClockConfig+0x1a2>
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b80      	cmp	r3, #128	; 0x80
 80058c4:	d105      	bne.n	80058d2 <HAL_RCC_ClockConfig+0x1a2>
 80058c6:	4b33      	ldr	r3, [pc, #204]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4a32      	ldr	r2, [pc, #200]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80058cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058d0:	6093      	str	r3, [r2, #8]
 80058d2:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d21d      	bcs.n	800591c <HAL_RCC_ClockConfig+0x1ec>
 80058e0:	4b2b      	ldr	r3, [pc, #172]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f023 020f 	bic.w	r2, r3, #15
 80058e8:	4929      	ldr	r1, [pc, #164]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	600b      	str	r3, [r1, #0]
 80058f0:	f7fe fb70 	bl	8003fd4 <HAL_GetTick>
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	e00a      	b.n	800590e <HAL_RCC_ClockConfig+0x1de>
 80058f8:	f7fe fb6c 	bl	8003fd4 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	; 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCC_ClockConfig+0x1de>
 800590a:	2303      	movs	r3, #3
 800590c:	e03b      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
 800590e:	4b20      	ldr	r3, [pc, #128]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	429a      	cmp	r2, r3
 800591a:	d1ed      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x1c8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_RCC_ClockConfig+0x20a>
 8005928:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4917      	ldr	r1, [pc, #92]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005936:	4313      	orrs	r3, r2
 8005938:	608b      	str	r3, [r1, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <HAL_RCC_ClockConfig+0x22a>
 8005946:	4b13      	ldr	r3, [pc, #76]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	490f      	ldr	r1, [pc, #60]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005956:	4313      	orrs	r3, r2
 8005958:	608b      	str	r3, [r1, #8]
 800595a:	f000 f825 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 800595e:	4602      	mov	r2, r0
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	091b      	lsrs	r3, r3, #4
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	490c      	ldr	r1, [pc, #48]	; (800599c <HAL_RCC_ClockConfig+0x26c>)
 800596c:	5ccb      	ldrb	r3, [r1, r3]
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	fa22 f303 	lsr.w	r3, r2, r3
 8005976:	4a0a      	ldr	r2, [pc, #40]	; (80059a0 <HAL_RCC_ClockConfig+0x270>)
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <HAL_RCC_ClockConfig+0x274>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fadc 	bl	8003f3c <HAL_InitTick>
 8005984:	4603      	mov	r3, r0
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40022000 	.word	0x40022000
 8005994:	40021000 	.word	0x40021000
 8005998:	04c4b400 	.word	0x04c4b400
 800599c:	0800936c 	.word	0x0800936c
 80059a0:	20000030 	.word	0x20000030
 80059a4:	20000034 	.word	0x20000034

080059a8 <HAL_RCC_GetSysClockFreq>:
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4b2c      	ldr	r3, [pc, #176]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 030c 	and.w	r3, r3, #12
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d102      	bne.n	80059c0 <HAL_RCC_GetSysClockFreq+0x18>
 80059ba:	4b2a      	ldr	r3, [pc, #168]	; (8005a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	e047      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0xa8>
 80059c0:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 030c 	and.w	r3, r3, #12
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d102      	bne.n	80059d2 <HAL_RCC_GetSysClockFreq+0x2a>
 80059cc:	4b26      	ldr	r3, [pc, #152]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	e03e      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0xa8>
 80059d2:	4b23      	ldr	r3, [pc, #140]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 030c 	and.w	r3, r3, #12
 80059da:	2b0c      	cmp	r3, #12
 80059dc:	d136      	bne.n	8005a4c <HAL_RCC_GetSysClockFreq+0xa4>
 80059de:	4b20      	ldr	r3, [pc, #128]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	3301      	adds	r3, #1
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d10c      	bne.n	8005a16 <HAL_RCC_GetSysClockFreq+0x6e>
 80059fc:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a06:	68d2      	ldr	r2, [r2, #12]
 8005a08:	0a12      	lsrs	r2, r2, #8
 8005a0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e00c      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x88>
 8005a16:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	4a10      	ldr	r2, [pc, #64]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a20:	68d2      	ldr	r2, [r2, #12]
 8005a22:	0a12      	lsrs	r2, r2, #8
 8005a24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	bf00      	nop
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	0e5b      	lsrs	r3, r3, #25
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	607b      	str	r3, [r7, #4]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	e001      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0xa8>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	4618      	mov	r0, r3
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40021000 	.word	0x40021000
 8005a64:	00f42400 	.word	0x00f42400
 8005a68:	007a1200 	.word	0x007a1200

08005a6c <HAL_RCC_GetHCLKFreq>:
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000030 	.word	0x20000030

08005a84 <HAL_RCC_GetPCLK1Freq>:
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	f7ff fff0 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	4904      	ldr	r1, [pc, #16]	; (8005aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a9a:	5ccb      	ldrb	r3, [r1, r3]
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	0800937c 	.word	0x0800937c

08005ab0 <HAL_RCC_GetPCLK2Freq>:
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	f7ff ffda 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	0adb      	lsrs	r3, r3, #11
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	4904      	ldr	r1, [pc, #16]	; (8005ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ac6:	5ccb      	ldrb	r3, [r1, r3]
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	0800937c 	.word	0x0800937c

08005adc <RCC_GetSysClockFreqFromPLLSource>:
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4b1e      	ldr	r3, [pc, #120]	; (8005b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	091b      	lsrs	r3, r3, #4
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	3301      	adds	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d10c      	bne.n	8005b1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
 8005b00:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b0a:	68d2      	ldr	r2, [r2, #12]
 8005b0c:	0a12      	lsrs	r2, r2, #8
 8005b0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e00c      	b.n	8005b34 <RCC_GetSysClockFreqFromPLLSource+0x58>
 8005b1a:	4a12      	ldr	r2, [pc, #72]	; (8005b64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	4a0e      	ldr	r2, [pc, #56]	; (8005b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b24:	68d2      	ldr	r2, [r2, #12]
 8005b26:	0a12      	lsrs	r2, r2, #8
 8005b28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b2c:	fb02 f303 	mul.w	r3, r2, r3
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	bf00      	nop
 8005b34:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	0e5b      	lsrs	r3, r3, #25
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	3301      	adds	r3, #1
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	60bb      	str	r3, [r7, #8]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4c:	607b      	str	r3, [r7, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4618      	mov	r0, r3
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	007a1200 	.word	0x007a1200
 8005b64:	00f42400 	.word	0x00f42400

08005b68 <HAL_RCCEx_PeriphCLKConfig>:
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	2300      	movs	r3, #0
 8005b72:	74fb      	strb	r3, [r7, #19]
 8005b74:	2300      	movs	r3, #0
 8005b76:	74bb      	strb	r3, [r7, #18]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8098 	beq.w	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005b86:	2300      	movs	r3, #0
 8005b88:	747b      	strb	r3, [r7, #17]
 8005b8a:	4b43      	ldr	r3, [pc, #268]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10d      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005b96:	4b40      	ldr	r3, [pc, #256]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9a:	4a3f      	ldr	r2, [pc, #252]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ba2:	4b3d      	ldr	r3, [pc, #244]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005baa:	60bb      	str	r3, [r7, #8]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2301      	movs	r3, #1
 8005bb0:	747b      	strb	r3, [r7, #17]
 8005bb2:	4b3a      	ldr	r3, [pc, #232]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a39      	ldr	r2, [pc, #228]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	f7fe fa09 	bl	8003fd4 <HAL_GetTick>
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	e009      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005bc6:	f7fe fa05 	bl	8003fd4 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d902      	bls.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	74fb      	strb	r3, [r7, #19]
 8005bd8:	e005      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8005bda:	4b30      	ldr	r3, [pc, #192]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0ef      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8005be6:	7cfb      	ldrb	r3, [r7, #19]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d159      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8005bec:	4b2a      	ldr	r3, [pc, #168]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01e      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d019      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c08:	4b23      	ldr	r3, [pc, #140]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	4b20      	ldr	r3, [pc, #128]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	4a1f      	ldr	r2, [pc, #124]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c24:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2a:	4a1b      	ldr	r2, [pc, #108]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c34:	4a18      	ldr	r2, [pc, #96]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d016      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005c46:	f7fe f9c5 	bl	8003fd4 <HAL_GetTick>
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	e00b      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c4e:	f7fe f9c1 	bl	8003fd4 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d902      	bls.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c60:	2303      	movs	r3, #3
 8005c62:	74fb      	strb	r3, [r7, #19]
 8005c64:	e006      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005c66:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0ec      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8005c74:	7cfb      	ldrb	r3, [r7, #19]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	4903      	ldr	r1, [pc, #12]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c90:	e008      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c92:	7cfb      	ldrb	r3, [r7, #19]
 8005c94:	74bb      	strb	r3, [r7, #18]
 8005c96:	e005      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40007000 	.word	0x40007000
 8005ca0:	7cfb      	ldrb	r3, [r7, #19]
 8005ca2:	74bb      	strb	r3, [r7, #18]
 8005ca4:	7c7b      	ldrb	r3, [r7, #17]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d105      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005caa:	4ba6      	ldr	r3, [pc, #664]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cae:	4aa5      	ldr	r2, [pc, #660]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8005cc2:	4ba0      	ldr	r3, [pc, #640]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc8:	f023 0203 	bic.w	r2, r3, #3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	499c      	ldr	r1, [pc, #624]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005ce4:	4b97      	ldr	r3, [pc, #604]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	f023 020c 	bic.w	r2, r3, #12
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	4994      	ldr	r1, [pc, #592]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005d06:	4b8f      	ldr	r3, [pc, #572]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	498b      	ldr	r1, [pc, #556]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8005d28:	4b86      	ldr	r3, [pc, #536]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	4983      	ldr	r1, [pc, #524]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005d4a:	4b7e      	ldr	r3, [pc, #504]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	497a      	ldr	r1, [pc, #488]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005d6c:	4b75      	ldr	r3, [pc, #468]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	4972      	ldr	r1, [pc, #456]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8005d8e:	4b6d      	ldr	r3, [pc, #436]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	4969      	ldr	r1, [pc, #420]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005db0:	4b64      	ldr	r3, [pc, #400]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	4961      	ldr	r1, [pc, #388]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8005dd2:	4b5c      	ldr	r3, [pc, #368]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	4958      	ldr	r1, [pc, #352]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d015      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005df4:	4b53      	ldr	r3, [pc, #332]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	4950      	ldr	r1, [pc, #320]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e12:	d105      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005e14:	4b4b      	ldr	r3, [pc, #300]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a4a      	ldr	r2, [pc, #296]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e1e:	60d3      	str	r3, [r2, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8005e2c:	4b45      	ldr	r3, [pc, #276]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	4942      	ldr	r1, [pc, #264]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e4a:	d105      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8005e4c:	4b3d      	ldr	r3, [pc, #244]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a3c      	ldr	r2, [pc, #240]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e56:	60d3      	str	r3, [r2, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d015      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005e64:	4b37      	ldr	r3, [pc, #220]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	4934      	ldr	r1, [pc, #208]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e82:	d105      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005e84:	4b2f      	ldr	r3, [pc, #188]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4a2e      	ldr	r2, [pc, #184]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e8e:	60d3      	str	r3, [r2, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d015      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005e9c:	4b29      	ldr	r3, [pc, #164]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eaa:	4926      	ldr	r1, [pc, #152]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eba:	d105      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005ebc:	4b21      	ldr	r3, [pc, #132]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4a20      	ldr	r2, [pc, #128]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ec6:	60d3      	str	r3, [r2, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d015      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	4918      	ldr	r1, [pc, #96]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ef2:	d105      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8005ef4:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	4a12      	ldr	r2, [pc, #72]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005efe:	60d3      	str	r3, [r2, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d015      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005f0c:	4b0d      	ldr	r3, [pc, #52]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	490a      	ldr	r1, [pc, #40]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f2a:	d105      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005f2c:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f36:	60d3      	str	r3, [r2, #12]
 8005f38:	7cbb      	ldrb	r3, [r7, #18]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40021000 	.word	0x40021000

08005f48 <HAL_SPI_Init>:
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_SPI_Init+0x12>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e09d      	b.n	8006096 <HAL_SPI_Init+0x14e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d108      	bne.n	8005f74 <HAL_SPI_Init+0x2c>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f6a:	d009      	beq.n	8005f80 <HAL_SPI_Init+0x38>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	61da      	str	r2, [r3, #28]
 8005f72:	e005      	b.n	8005f80 <HAL_SPI_Init+0x38>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	611a      	str	r2, [r3, #16]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	615a      	str	r2, [r3, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	629a      	str	r2, [r3, #40]	; 0x28
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <HAL_SPI_Init+0x58>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fd fcf2 	bl	8003984 <HAL_SPI_MspInit>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fc0:	d902      	bls.n	8005fc8 <HAL_SPI_Init+0x80>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e002      	b.n	8005fce <HAL_SPI_Init+0x86>
 8005fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005fd6:	d007      	beq.n	8005fe8 <HAL_SPI_Init+0xa0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fe0:	d002      	beq.n	8005fe8 <HAL_SPI_Init+0xa0>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602a:	ea42 0103 	orr.w	r1, r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	0c1b      	lsrs	r3, r3, #16
 8006044:	f003 0204 	and.w	r2, r3, #4
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006064:	ea42 0103 	orr.w	r1, r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006084:	61da      	str	r2, [r3, #28]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	661a      	str	r2, [r3, #96]	; 0x60
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006094:	2300      	movs	r3, #0
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_SPI_Transmit>:
 800609e:	b580      	push	{r7, lr}
 80060a0:	b088      	sub	sp, #32
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	603b      	str	r3, [r7, #0]
 80060aa:	4613      	mov	r3, r2
 80060ac:	80fb      	strh	r3, [r7, #6]
 80060ae:	2300      	movs	r3, #0
 80060b0:	77fb      	strb	r3, [r7, #31]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d101      	bne.n	80060c0 <HAL_SPI_Transmit+0x22>
 80060bc:	2302      	movs	r3, #2
 80060be:	e158      	b.n	8006372 <HAL_SPI_Transmit+0x2d4>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80060c8:	f7fd ff84 	bl	8003fd4 <HAL_GetTick>
 80060cc:	61b8      	str	r0, [r7, #24]
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	82fb      	strh	r3, [r7, #22]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d002      	beq.n	80060e4 <HAL_SPI_Transmit+0x46>
 80060de:	2302      	movs	r3, #2
 80060e0:	77fb      	strb	r3, [r7, #31]
 80060e2:	e13d      	b.n	8006360 <HAL_SPI_Transmit+0x2c2>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <HAL_SPI_Transmit+0x52>
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <HAL_SPI_Transmit+0x58>
 80060f0:	2301      	movs	r3, #1
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e134      	b.n	8006360 <HAL_SPI_Transmit+0x2c2>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2203      	movs	r2, #3
 80060fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	661a      	str	r2, [r3, #96]	; 0x60
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	639a      	str	r2, [r3, #56]	; 0x38
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	88fa      	ldrh	r2, [r7, #6]
 800610e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	641a      	str	r2, [r3, #64]	; 0x40
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	651a      	str	r2, [r3, #80]	; 0x50
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	64da      	str	r2, [r3, #76]	; 0x4c
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006140:	d10f      	bne.n	8006162 <HAL_SPI_Transmit+0xc4>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d007      	beq.n	8006180 <HAL_SPI_Transmit+0xe2>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006188:	d94b      	bls.n	8006222 <HAL_SPI_Transmit+0x184>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <HAL_SPI_Transmit+0xfa>
 8006192:	8afb      	ldrh	r3, [r7, #22]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d13e      	bne.n	8006216 <HAL_SPI_Transmit+0x178>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	881a      	ldrh	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60da      	str	r2, [r3, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	1c9a      	adds	r2, r3, #2
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061bc:	e02b      	b.n	8006216 <HAL_SPI_Transmit+0x178>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d112      	bne.n	80061f2 <HAL_SPI_Transmit+0x154>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	881a      	ldrh	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60da      	str	r2, [r3, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	1c9a      	adds	r2, r3, #2
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061f0:	e011      	b.n	8006216 <HAL_SPI_Transmit+0x178>
 80061f2:	f7fd feef 	bl	8003fd4 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d803      	bhi.n	800620a <HAL_SPI_Transmit+0x16c>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006208:	d102      	bne.n	8006210 <HAL_SPI_Transmit+0x172>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <HAL_SPI_Transmit+0x178>
 8006210:	2303      	movs	r3, #3
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e0a4      	b.n	8006360 <HAL_SPI_Transmit+0x2c2>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621a:	b29b      	uxth	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1ce      	bne.n	80061be <HAL_SPI_Transmit+0x120>
 8006220:	e07c      	b.n	800631c <HAL_SPI_Transmit+0x27e>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_SPI_Transmit+0x192>
 800622a:	8afb      	ldrh	r3, [r7, #22]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d170      	bne.n	8006312 <HAL_SPI_Transmit+0x274>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b01      	cmp	r3, #1
 8006238:	d912      	bls.n	8006260 <HAL_SPI_Transmit+0x1c2>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	881a      	ldrh	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60da      	str	r2, [r3, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	1c9a      	adds	r2, r3, #2
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	639a      	str	r2, [r3, #56]	; 0x38
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b02      	subs	r3, #2
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800625e:	e058      	b.n	8006312 <HAL_SPI_Transmit+0x274>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	7812      	ldrb	r2, [r2, #0]
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006286:	e044      	b.n	8006312 <HAL_SPI_Transmit+0x274>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b02      	cmp	r3, #2
 8006294:	d12b      	bne.n	80062ee <HAL_SPI_Transmit+0x250>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	d912      	bls.n	80062c6 <HAL_SPI_Transmit+0x228>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	881a      	ldrh	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60da      	str	r2, [r3, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	1c9a      	adds	r2, r3, #2
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	3b02      	subs	r3, #2
 80062be:	b29a      	uxth	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062c4:	e025      	b.n	8006312 <HAL_SPI_Transmit+0x274>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	330c      	adds	r3, #12
 80062d0:	7812      	ldrb	r2, [r2, #0]
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	639a      	str	r2, [r3, #56]	; 0x38
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062ec:	e011      	b.n	8006312 <HAL_SPI_Transmit+0x274>
 80062ee:	f7fd fe71 	bl	8003fd4 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d803      	bhi.n	8006306 <HAL_SPI_Transmit+0x268>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006304:	d102      	bne.n	800630c <HAL_SPI_Transmit+0x26e>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <HAL_SPI_Transmit+0x274>
 800630c:	2303      	movs	r3, #3
 800630e:	77fb      	strb	r3, [r7, #31]
 8006310:	e026      	b.n	8006360 <HAL_SPI_Transmit+0x2c2>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006316:	b29b      	uxth	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1b5      	bne.n	8006288 <HAL_SPI_Transmit+0x1ea>
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fce3 	bl	8006cec <SPI_EndRxTxTransaction>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <HAL_SPI_Transmit+0x294>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2220      	movs	r2, #32
 8006330:	661a      	str	r2, [r3, #96]	; 0x60
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10a      	bne.n	8006350 <HAL_SPI_Transmit+0x2b2>
 800633a:	2300      	movs	r3, #0
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <HAL_SPI_Transmit+0x2c0>
 8006358:	2301      	movs	r3, #1
 800635a:	77fb      	strb	r3, [r7, #31]
 800635c:	e000      	b.n	8006360 <HAL_SPI_Transmit+0x2c2>
 800635e:	bf00      	nop
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8006370:	7ffb      	ldrb	r3, [r7, #31]
 8006372:	4618      	mov	r0, r3
 8006374:	3720      	adds	r7, #32
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <HAL_SPI_Receive>:
 800637a:	b580      	push	{r7, lr}
 800637c:	b088      	sub	sp, #32
 800637e:	af02      	add	r7, sp, #8
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
 800638a:	2300      	movs	r3, #0
 800638c:	75fb      	strb	r3, [r7, #23]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006396:	d112      	bne.n	80063be <HAL_SPI_Receive+0x44>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10e      	bne.n	80063be <HAL_SPI_Receive+0x44>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2204      	movs	r2, #4
 80063a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80063a8:	88fa      	ldrh	r2, [r7, #6]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	4613      	mov	r3, r2
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f910 	bl	80065da <HAL_SPI_TransmitReceive>
 80063ba:	4603      	mov	r3, r0
 80063bc:	e109      	b.n	80065d2 <HAL_SPI_Receive+0x258>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_SPI_Receive+0x52>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e102      	b.n	80065d2 <HAL_SPI_Receive+0x258>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80063d4:	f7fd fdfe 	bl	8003fd4 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d002      	beq.n	80063ec <HAL_SPI_Receive+0x72>
 80063e6:	2302      	movs	r3, #2
 80063e8:	75fb      	strb	r3, [r7, #23]
 80063ea:	e0e9      	b.n	80065c0 <HAL_SPI_Receive+0x246>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_SPI_Receive+0x7e>
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d102      	bne.n	80063fe <HAL_SPI_Receive+0x84>
 80063f8:	2301      	movs	r3, #1
 80063fa:	75fb      	strb	r3, [r7, #23]
 80063fc:	e0e0      	b.n	80065c0 <HAL_SPI_Receive+0x246>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2204      	movs	r2, #4
 8006402:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	661a      	str	r2, [r3, #96]	; 0x60
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	641a      	str	r2, [r3, #64]	; 0x40
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	88fa      	ldrh	r2, [r7, #6]
 800641e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	639a      	str	r2, [r3, #56]	; 0x38
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	879a      	strh	r2, [r3, #60]	; 0x3c
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	64da      	str	r2, [r3, #76]	; 0x4c
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	651a      	str	r2, [r3, #80]	; 0x50
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006448:	d908      	bls.n	800645c <HAL_SPI_Receive+0xe2>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006458:	605a      	str	r2, [r3, #4]
 800645a:	e007      	b.n	800646c <HAL_SPI_Receive+0xf2>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800646a:	605a      	str	r2, [r3, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006474:	d10f      	bne.n	8006496 <HAL_SPI_Receive+0x11c>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a0:	2b40      	cmp	r3, #64	; 0x40
 80064a2:	d007      	beq.n	80064b4 <HAL_SPI_Receive+0x13a>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064bc:	d867      	bhi.n	800658e <HAL_SPI_Receive+0x214>
 80064be:	e030      	b.n	8006522 <HAL_SPI_Receive+0x1a8>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d117      	bne.n	80064fe <HAL_SPI_Receive+0x184>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f103 020c 	add.w	r2, r3, #12
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	7812      	ldrb	r2, [r2, #0]
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	641a      	str	r2, [r3, #64]	; 0x40
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80064fc:	e011      	b.n	8006522 <HAL_SPI_Receive+0x1a8>
 80064fe:	f7fd fd69 	bl	8003fd4 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d803      	bhi.n	8006516 <HAL_SPI_Receive+0x19c>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006514:	d102      	bne.n	800651c <HAL_SPI_Receive+0x1a2>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d102      	bne.n	8006522 <HAL_SPI_Receive+0x1a8>
 800651c:	2303      	movs	r3, #3
 800651e:	75fb      	strb	r3, [r7, #23]
 8006520:	e04e      	b.n	80065c0 <HAL_SPI_Receive+0x246>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1c8      	bne.n	80064c0 <HAL_SPI_Receive+0x146>
 800652e:	e034      	b.n	800659a <HAL_SPI_Receive+0x220>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b01      	cmp	r3, #1
 800653c:	d115      	bne.n	800656a <HAL_SPI_Receive+0x1f0>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	b292      	uxth	r2, r2
 800654a:	801a      	strh	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	1c9a      	adds	r2, r3, #2
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	641a      	str	r2, [r3, #64]	; 0x40
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006568:	e011      	b.n	800658e <HAL_SPI_Receive+0x214>
 800656a:	f7fd fd33 	bl	8003fd4 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d803      	bhi.n	8006582 <HAL_SPI_Receive+0x208>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006580:	d102      	bne.n	8006588 <HAL_SPI_Receive+0x20e>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <HAL_SPI_Receive+0x214>
 8006588:	2303      	movs	r3, #3
 800658a:	75fb      	strb	r3, [r7, #23]
 800658c:	e018      	b.n	80065c0 <HAL_SPI_Receive+0x246>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1ca      	bne.n	8006530 <HAL_SPI_Receive+0x1b6>
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fb4c 	bl	8006c3c <SPI_EndRxTransaction>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <HAL_SPI_Receive+0x236>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2220      	movs	r2, #32
 80065ae:	661a      	str	r2, [r3, #96]	; 0x60
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_SPI_Receive+0x244>
 80065b8:	2301      	movs	r3, #1
 80065ba:	75fb      	strb	r3, [r7, #23]
 80065bc:	e000      	b.n	80065c0 <HAL_SPI_Receive+0x246>
 80065be:	bf00      	nop
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <HAL_SPI_TransmitReceive>:
 80065da:	b580      	push	{r7, lr}
 80065dc:	b08a      	sub	sp, #40	; 0x28
 80065de:	af00      	add	r7, sp, #0
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	607a      	str	r2, [r7, #4]
 80065e6:	807b      	strh	r3, [r7, #2]
 80065e8:	2301      	movs	r3, #1
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_SPI_TransmitReceive+0x26>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e1fb      	b.n	80069f8 <HAL_SPI_TransmitReceive+0x41e>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8006608:	f7fd fce4 	bl	8003fd4 <HAL_GetTick>
 800660c:	61f8      	str	r0, [r7, #28]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006614:	76fb      	strb	r3, [r7, #27]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	887b      	ldrh	r3, [r7, #2]
 800661e:	827b      	strh	r3, [r7, #18]
 8006620:	887b      	ldrh	r3, [r7, #2]
 8006622:	823b      	strh	r3, [r7, #16]
 8006624:	7efb      	ldrb	r3, [r7, #27]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d00e      	beq.n	8006648 <HAL_SPI_TransmitReceive+0x6e>
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006630:	d106      	bne.n	8006640 <HAL_SPI_TransmitReceive+0x66>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d102      	bne.n	8006640 <HAL_SPI_TransmitReceive+0x66>
 800663a:	7efb      	ldrb	r3, [r7, #27]
 800663c:	2b04      	cmp	r3, #4
 800663e:	d003      	beq.n	8006648 <HAL_SPI_TransmitReceive+0x6e>
 8006640:	2302      	movs	r3, #2
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006646:	e1cd      	b.n	80069e4 <HAL_SPI_TransmitReceive+0x40a>
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <HAL_SPI_TransmitReceive+0x80>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_SPI_TransmitReceive+0x80>
 8006654:	887b      	ldrh	r3, [r7, #2]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d103      	bne.n	8006662 <HAL_SPI_TransmitReceive+0x88>
 800665a:	2301      	movs	r3, #1
 800665c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006660:	e1c0      	b.n	80069e4 <HAL_SPI_TransmitReceive+0x40a>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b04      	cmp	r3, #4
 800666c:	d003      	beq.n	8006676 <HAL_SPI_TransmitReceive+0x9c>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2205      	movs	r2, #5
 8006672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	661a      	str	r2, [r3, #96]	; 0x60
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	641a      	str	r2, [r3, #64]	; 0x40
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	887a      	ldrh	r2, [r7, #2]
 8006686:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	887a      	ldrh	r2, [r7, #2]
 800668e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	639a      	str	r2, [r3, #56]	; 0x38
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	887a      	ldrh	r2, [r7, #2]
 800669c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	887a      	ldrh	r2, [r7, #2]
 80066a2:	879a      	strh	r2, [r3, #60]	; 0x3c
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	651a      	str	r2, [r3, #80]	; 0x50
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066b8:	d802      	bhi.n	80066c0 <HAL_SPI_TransmitReceive+0xe6>
 80066ba:	8a3b      	ldrh	r3, [r7, #16]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d908      	bls.n	80066d2 <HAL_SPI_TransmitReceive+0xf8>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066ce:	605a      	str	r2, [r3, #4]
 80066d0:	e007      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x108>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066e0:	605a      	str	r2, [r3, #4]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	d007      	beq.n	8006700 <HAL_SPI_TransmitReceive+0x126>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006708:	d97c      	bls.n	8006804 <HAL_SPI_TransmitReceive+0x22a>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_SPI_TransmitReceive+0x13e>
 8006712:	8a7b      	ldrh	r3, [r7, #18]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d169      	bne.n	80067ec <HAL_SPI_TransmitReceive+0x212>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	881a      	ldrh	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	60da      	str	r2, [r3, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	1c9a      	adds	r2, r3, #2
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	639a      	str	r2, [r3, #56]	; 0x38
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b01      	subs	r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800673c:	e056      	b.n	80067ec <HAL_SPI_TransmitReceive+0x212>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b02      	cmp	r3, #2
 800674a:	d11b      	bne.n	8006784 <HAL_SPI_TransmitReceive+0x1aa>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006750:	b29b      	uxth	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d016      	beq.n	8006784 <HAL_SPI_TransmitReceive+0x1aa>
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	2b01      	cmp	r3, #1
 800675a:	d113      	bne.n	8006784 <HAL_SPI_TransmitReceive+0x1aa>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	881a      	ldrh	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60da      	str	r2, [r3, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	1c9a      	adds	r2, r3, #2
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	639a      	str	r2, [r3, #56]	; 0x38
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006780:	2300      	movs	r3, #0
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b01      	cmp	r3, #1
 8006790:	d11c      	bne.n	80067cc <HAL_SPI_TransmitReceive+0x1f2>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d016      	beq.n	80067cc <HAL_SPI_TransmitReceive+0x1f2>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	b292      	uxth	r2, r2
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	1c9a      	adds	r2, r3, #2
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80067c8:	2301      	movs	r3, #1
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
 80067cc:	f7fd fc02 	bl	8003fd4 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d8:	429a      	cmp	r2, r3
 80067da:	d807      	bhi.n	80067ec <HAL_SPI_TransmitReceive+0x212>
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067e2:	d003      	beq.n	80067ec <HAL_SPI_TransmitReceive+0x212>
 80067e4:	2303      	movs	r3, #3
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ea:	e0fb      	b.n	80069e4 <HAL_SPI_TransmitReceive+0x40a>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1a3      	bne.n	800673e <HAL_SPI_TransmitReceive+0x164>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d19d      	bne.n	800673e <HAL_SPI_TransmitReceive+0x164>
 8006802:	e0df      	b.n	80069c4 <HAL_SPI_TransmitReceive+0x3ea>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <HAL_SPI_TransmitReceive+0x23a>
 800680c:	8a7b      	ldrh	r3, [r7, #18]
 800680e:	2b01      	cmp	r3, #1
 8006810:	f040 80cb 	bne.w	80069aa <HAL_SPI_TransmitReceive+0x3d0>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b01      	cmp	r3, #1
 800681c:	d912      	bls.n	8006844 <HAL_SPI_TransmitReceive+0x26a>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	881a      	ldrh	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60da      	str	r2, [r3, #12]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	1c9a      	adds	r2, r3, #2
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006838:	b29b      	uxth	r3, r3
 800683a:	3b02      	subs	r3, #2
 800683c:	b29a      	uxth	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006842:	e0b2      	b.n	80069aa <HAL_SPI_TransmitReceive+0x3d0>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	7812      	ldrb	r2, [r2, #0]
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	639a      	str	r2, [r3, #56]	; 0x38
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	87da      	strh	r2, [r3, #62]	; 0x3e
 800686a:	e09e      	b.n	80069aa <HAL_SPI_TransmitReceive+0x3d0>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b02      	cmp	r3, #2
 8006878:	d134      	bne.n	80068e4 <HAL_SPI_TransmitReceive+0x30a>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d02f      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x30a>
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	2b01      	cmp	r3, #1
 8006888:	d12c      	bne.n	80068e4 <HAL_SPI_TransmitReceive+0x30a>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800688e:	b29b      	uxth	r3, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	d912      	bls.n	80068ba <HAL_SPI_TransmitReceive+0x2e0>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	881a      	ldrh	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60da      	str	r2, [r3, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	1c9a      	adds	r2, r3, #2
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b02      	subs	r3, #2
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068b8:	e012      	b.n	80068e0 <HAL_SPI_TransmitReceive+0x306>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	330c      	adds	r3, #12
 80068c4:	7812      	ldrb	r2, [r2, #0]
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068e0:	2300      	movs	r3, #0
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d148      	bne.n	8006984 <HAL_SPI_TransmitReceive+0x3aa>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d042      	beq.n	8006984 <HAL_SPI_TransmitReceive+0x3aa>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	d923      	bls.n	8006952 <HAL_SPI_TransmitReceive+0x378>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006914:	b292      	uxth	r2, r2
 8006916:	801a      	strh	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	1c9a      	adds	r2, r3, #2
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	641a      	str	r2, [r3, #64]	; 0x40
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b02      	subs	r3, #2
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b01      	cmp	r3, #1
 800693e:	d81f      	bhi.n	8006980 <HAL_SPI_TransmitReceive+0x3a6>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800694e:	605a      	str	r2, [r3, #4]
 8006950:	e016      	b.n	8006980 <HAL_SPI_TransmitReceive+0x3a6>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f103 020c 	add.w	r2, r3, #12
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	7812      	ldrb	r2, [r2, #0]
 8006960:	b2d2      	uxtb	r2, r2
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	641a      	str	r2, [r3, #64]	; 0x40
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006980:	2301      	movs	r3, #1
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
 8006984:	f7fd fb26 	bl	8003fd4 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006990:	429a      	cmp	r2, r3
 8006992:	d803      	bhi.n	800699c <HAL_SPI_TransmitReceive+0x3c2>
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800699a:	d102      	bne.n	80069a2 <HAL_SPI_TransmitReceive+0x3c8>
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d103      	bne.n	80069aa <HAL_SPI_TransmitReceive+0x3d0>
 80069a2:	2303      	movs	r3, #3
 80069a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a8:	e01c      	b.n	80069e4 <HAL_SPI_TransmitReceive+0x40a>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f47f af5b 	bne.w	800686c <HAL_SPI_TransmitReceive+0x292>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f47f af54 	bne.w	800686c <HAL_SPI_TransmitReceive+0x292>
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f98f 	bl	8006cec <SPI_EndRxTxTransaction>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <HAL_SPI_TransmitReceive+0x408>
 80069d4:	2301      	movs	r3, #1
 80069d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	661a      	str	r2, [r3, #96]	; 0x60
 80069e0:	e000      	b.n	80069e4 <HAL_SPI_TransmitReceive+0x40a>
 80069e2:	bf00      	nop
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80069f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069f8:	4618      	mov	r0, r3
 80069fa:	3728      	adds	r7, #40	; 0x28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <SPI_WaitFlagStateUntilTimeout>:
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	71fb      	strb	r3, [r7, #7]
 8006a10:	f7fd fae0 	bl	8003fd4 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	1a9b      	subs	r3, r3, r2
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	61fb      	str	r3, [r7, #28]
 8006a20:	f7fd fad8 	bl	8003fd4 <HAL_GetTick>
 8006a24:	61b8      	str	r0, [r7, #24]
 8006a26:	4b39      	ldr	r3, [pc, #228]	; (8006b0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	015b      	lsls	r3, r3, #5
 8006a2c:	0d1b      	lsrs	r3, r3, #20
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	fb02 f303 	mul.w	r3, r2, r3
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	e054      	b.n	8006ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a3e:	d050      	beq.n	8006ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006a40:	f7fd fac8 	bl	8003fd4 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	69fa      	ldr	r2, [r7, #28]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d902      	bls.n	8006a56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d13d      	bne.n	8006ad2 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a64:	605a      	str	r2, [r3, #4]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a6e:	d111      	bne.n	8006a94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a78:	d004      	beq.n	8006a84 <SPI_WaitFlagStateUntilTimeout+0x84>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a82:	d107      	bne.n	8006a94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a9c:	d10f      	bne.n	8006abe <SPI_WaitFlagStateUntilTimeout+0xbe>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e017      	b.n	8006b02 <SPI_WaitFlagStateUntilTimeout+0x102>
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61fb      	str	r3, [r7, #28]
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4013      	ands	r3, r2
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	bf0c      	ite	eq
 8006af2:	2301      	moveq	r3, #1
 8006af4:	2300      	movne	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d19b      	bne.n	8006a38 <SPI_WaitFlagStateUntilTimeout+0x38>
 8006b00:	2300      	movs	r3, #0
 8006b02:	4618      	mov	r0, r3
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000030 	.word	0x20000030

08006b10 <SPI_WaitFifoStateUntilTimeout>:
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	75fb      	strb	r3, [r7, #23]
 8006b22:	f7fd fa57 	bl	8003fd4 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	4413      	add	r3, r2
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
 8006b32:	f7fd fa4f 	bl	8003fd4 <HAL_GetTick>
 8006b36:	6238      	str	r0, [r7, #32]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	4b3d      	ldr	r3, [pc, #244]	; (8006c38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	00da      	lsls	r2, r3, #3
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	0d1b      	lsrs	r3, r3, #20
 8006b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b52:	fb02 f303 	mul.w	r3, r2, r3
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	e060      	b.n	8006c1c <SPI_WaitFifoStateUntilTimeout+0x10c>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b60:	d107      	bne.n	8006b72 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	75fb      	strb	r3, [r7, #23]
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b78:	d050      	beq.n	8006c1c <SPI_WaitFifoStateUntilTimeout+0x10c>
 8006b7a:	f7fd fa2b 	bl	8003fd4 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d902      	bls.n	8006b90 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d13d      	bne.n	8006c0c <SPI_WaitFifoStateUntilTimeout+0xfc>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b9e:	605a      	str	r2, [r3, #4]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ba8:	d111      	bne.n	8006bce <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb2:	d004      	beq.n	8006bbe <SPI_WaitFifoStateUntilTimeout+0xae>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bbc:	d107      	bne.n	8006bce <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd6:	d10f      	bne.n	8006bf8 <SPI_WaitFifoStateUntilTimeout+0xe8>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e010      	b.n	8006c2e <SPI_WaitFifoStateUntilTimeout+0x11e>
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <SPI_WaitFifoStateUntilTimeout+0x106>
 8006c12:	2300      	movs	r3, #0
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	4013      	ands	r3, r2
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d196      	bne.n	8006b5a <SPI_WaitFifoStateUntilTimeout+0x4a>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3728      	adds	r7, #40	; 0x28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000030 	.word	0x20000030

08006c3c <SPI_EndRxTransaction>:
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c50:	d111      	bne.n	8006c76 <SPI_EndRxTransaction+0x3a>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c5a:	d004      	beq.n	8006c66 <SPI_EndRxTransaction+0x2a>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c64:	d107      	bne.n	8006c76 <SPI_EndRxTransaction+0x3a>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2180      	movs	r1, #128	; 0x80
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f7ff febd 	bl	8006a00 <SPI_WaitFlagStateUntilTimeout>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d007      	beq.n	8006c9c <SPI_EndRxTransaction+0x60>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c90:	f043 0220 	orr.w	r2, r3, #32
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	661a      	str	r2, [r3, #96]	; 0x60
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e023      	b.n	8006ce4 <SPI_EndRxTransaction+0xa8>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ca4:	d11d      	bne.n	8006ce2 <SPI_EndRxTransaction+0xa6>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cae:	d004      	beq.n	8006cba <SPI_EndRxTransaction+0x7e>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb8:	d113      	bne.n	8006ce2 <SPI_EndRxTransaction+0xa6>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff ff22 	bl	8006b10 <SPI_WaitFifoStateUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d007      	beq.n	8006ce2 <SPI_EndRxTransaction+0xa6>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd6:	f043 0220 	orr.w	r2, r3, #32
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	661a      	str	r2, [r3, #96]	; 0x60
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e000      	b.n	8006ce4 <SPI_EndRxTransaction+0xa8>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <SPI_EndRxTxTransaction>:
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af02      	add	r7, sp, #8
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f7ff ff03 	bl	8006b10 <SPI_WaitFifoStateUntilTimeout>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <SPI_EndRxTxTransaction+0x34>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d14:	f043 0220 	orr.w	r2, r3, #32
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	661a      	str	r2, [r3, #96]	; 0x60
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e027      	b.n	8006d70 <SPI_EndRxTxTransaction+0x84>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2200      	movs	r2, #0
 8006d28:	2180      	movs	r1, #128	; 0x80
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fe68 	bl	8006a00 <SPI_WaitFlagStateUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <SPI_EndRxTxTransaction+0x5a>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3a:	f043 0220 	orr.w	r2, r3, #32
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	661a      	str	r2, [r3, #96]	; 0x60
 8006d42:	2303      	movs	r3, #3
 8006d44:	e014      	b.n	8006d70 <SPI_EndRxTxTransaction+0x84>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7ff fedc 	bl	8006b10 <SPI_WaitFifoStateUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <SPI_EndRxTxTransaction+0x82>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	661a      	str	r2, [r3, #96]	; 0x60
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e000      	b.n	8006d70 <SPI_EndRxTxTransaction+0x84>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_TIM_Base_Init>:
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_TIM_Base_Init+0x12>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e049      	b.n	8006e1e <HAL_TIM_Base_Init+0xa6>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_TIM_Base_Init+0x2c>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fc fe32 	bl	8003a08 <HAL_TIM_Base_MspInit>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3304      	adds	r3, #4
 8006db4:	4619      	mov	r1, r3
 8006db6:	4610      	mov	r0, r2
 8006db8:	f000 faa4 	bl	8007304 <TIM_Base_SetConfig>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_TIM_PWM_Init>:
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_TIM_PWM_Init+0x12>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e049      	b.n	8006ecc <HAL_TIM_PWM_Init+0xa6>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d106      	bne.n	8006e52 <HAL_TIM_PWM_Init+0x2c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f841 	bl	8006ed4 <HAL_TIM_PWM_MspInit>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2202      	movs	r2, #2
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3304      	adds	r3, #4
 8006e62:	4619      	mov	r1, r3
 8006e64:	4610      	mov	r0, r2
 8006e66:	f000 fa4d 	bl	8007304 <TIM_Base_SetConfig>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006eca:	2300      	movs	r3, #0
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_TIM_PWM_MspInit>:
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_TIM_PWM_ConfigChannel>:
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	75fb      	strb	r3, [r7, #23]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e0ff      	b.n	8007106 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b14      	cmp	r3, #20
 8006f12:	f200 80f0 	bhi.w	80070f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f71 	.word	0x08006f71
 8006f20:	080070f7 	.word	0x080070f7
 8006f24:	080070f7 	.word	0x080070f7
 8006f28:	080070f7 	.word	0x080070f7
 8006f2c:	08006fb1 	.word	0x08006fb1
 8006f30:	080070f7 	.word	0x080070f7
 8006f34:	080070f7 	.word	0x080070f7
 8006f38:	080070f7 	.word	0x080070f7
 8006f3c:	08006ff3 	.word	0x08006ff3
 8006f40:	080070f7 	.word	0x080070f7
 8006f44:	080070f7 	.word	0x080070f7
 8006f48:	080070f7 	.word	0x080070f7
 8006f4c:	08007033 	.word	0x08007033
 8006f50:	080070f7 	.word	0x080070f7
 8006f54:	080070f7 	.word	0x080070f7
 8006f58:	080070f7 	.word	0x080070f7
 8006f5c:	08007075 	.word	0x08007075
 8006f60:	080070f7 	.word	0x080070f7
 8006f64:	080070f7 	.word	0x080070f7
 8006f68:	080070f7 	.word	0x080070f7
 8006f6c:	080070b5 	.word	0x080070b5
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68b9      	ldr	r1, [r7, #8]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fa54 	bl	8007424 <TIM_OC1_SetConfig>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0208 	orr.w	r2, r2, #8
 8006f8a:	619a      	str	r2, [r3, #24]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0204 	bic.w	r2, r2, #4
 8006f9a:	619a      	str	r2, [r3, #24]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6999      	ldr	r1, [r3, #24]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	691a      	ldr	r2, [r3, #16]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	619a      	str	r2, [r3, #24]
 8006fae:	e0a5      	b.n	80070fc <HAL_TIM_PWM_ConfigChannel+0x214>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fac4 	bl	8007544 <TIM_OC2_SetConfig>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fca:	619a      	str	r2, [r3, #24]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fda:	619a      	str	r2, [r3, #24]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6999      	ldr	r1, [r3, #24]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	021a      	lsls	r2, r3, #8
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	619a      	str	r2, [r3, #24]
 8006ff0:	e084      	b.n	80070fc <HAL_TIM_PWM_ConfigChannel+0x214>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fb2d 	bl	8007658 <TIM_OC3_SetConfig>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69da      	ldr	r2, [r3, #28]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0208 	orr.w	r2, r2, #8
 800700c:	61da      	str	r2, [r3, #28]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69da      	ldr	r2, [r3, #28]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0204 	bic.w	r2, r2, #4
 800701c:	61da      	str	r2, [r3, #28]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69d9      	ldr	r1, [r3, #28]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	691a      	ldr	r2, [r3, #16]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	61da      	str	r2, [r3, #28]
 8007030:	e064      	b.n	80070fc <HAL_TIM_PWM_ConfigChannel+0x214>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fb95 	bl	8007768 <TIM_OC4_SetConfig>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800704c:	61da      	str	r2, [r3, #28]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800705c:	61da      	str	r2, [r3, #28]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69d9      	ldr	r1, [r3, #28]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	021a      	lsls	r2, r3, #8
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	61da      	str	r2, [r3, #28]
 8007072:	e043      	b.n	80070fc <HAL_TIM_PWM_ConfigChannel+0x214>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68b9      	ldr	r1, [r7, #8]
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fbfe 	bl	800787c <TIM_OC5_SetConfig>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0208 	orr.w	r2, r2, #8
 800708e:	651a      	str	r2, [r3, #80]	; 0x50
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0204 	bic.w	r2, r2, #4
 800709e:	651a      	str	r2, [r3, #80]	; 0x50
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	651a      	str	r2, [r3, #80]	; 0x50
 80070b2:	e023      	b.n	80070fc <HAL_TIM_PWM_ConfigChannel+0x214>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68b9      	ldr	r1, [r7, #8]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fc42 	bl	8007944 <TIM_OC6_SetConfig>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070ce:	651a      	str	r2, [r3, #80]	; 0x50
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070de:	651a      	str	r2, [r3, #80]	; 0x50
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	021a      	lsls	r2, r3, #8
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	651a      	str	r2, [r3, #80]	; 0x50
 80070f4:	e002      	b.n	80070fc <HAL_TIM_PWM_ConfigChannel+0x214>
 80070f6:	2301      	movs	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]
 80070fa:	bf00      	nop
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop

08007110 <HAL_TIM_ConfigClockSource>:
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_TIM_ConfigClockSource+0x1c>
 8007128:	2302      	movs	r3, #2
 800712a:	e0de      	b.n	80072ea <HAL_TIM_ConfigClockSource+0x1da>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	60bb      	str	r3, [r7, #8]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800714a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800714e:	60bb      	str	r3, [r7, #8]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007156:	60bb      	str	r3, [r7, #8]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	609a      	str	r2, [r3, #8]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a63      	ldr	r2, [pc, #396]	; (80072f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007166:	4293      	cmp	r3, r2
 8007168:	f000 80a9 	beq.w	80072be <HAL_TIM_ConfigClockSource+0x1ae>
 800716c:	4a61      	ldr	r2, [pc, #388]	; (80072f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800716e:	4293      	cmp	r3, r2
 8007170:	f200 80ae 	bhi.w	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007174:	4a60      	ldr	r2, [pc, #384]	; (80072f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	f000 80a1 	beq.w	80072be <HAL_TIM_ConfigClockSource+0x1ae>
 800717c:	4a5e      	ldr	r2, [pc, #376]	; (80072f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	f200 80a6 	bhi.w	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007184:	4a5d      	ldr	r2, [pc, #372]	; (80072fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007186:	4293      	cmp	r3, r2
 8007188:	f000 8099 	beq.w	80072be <HAL_TIM_ConfigClockSource+0x1ae>
 800718c:	4a5b      	ldr	r2, [pc, #364]	; (80072fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800718e:	4293      	cmp	r3, r2
 8007190:	f200 809e 	bhi.w	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007194:	4a5a      	ldr	r2, [pc, #360]	; (8007300 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	f000 8091 	beq.w	80072be <HAL_TIM_ConfigClockSource+0x1ae>
 800719c:	4a58      	ldr	r2, [pc, #352]	; (8007300 <HAL_TIM_ConfigClockSource+0x1f0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	f200 8096 	bhi.w	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80071a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071a8:	f000 8089 	beq.w	80072be <HAL_TIM_ConfigClockSource+0x1ae>
 80071ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071b0:	f200 808e 	bhi.w	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80071b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b8:	d03e      	beq.n	8007238 <HAL_TIM_ConfigClockSource+0x128>
 80071ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071be:	f200 8087 	bhi.w	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80071c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c6:	f000 8086 	beq.w	80072d6 <HAL_TIM_ConfigClockSource+0x1c6>
 80071ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ce:	d87f      	bhi.n	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80071d0:	2b70      	cmp	r3, #112	; 0x70
 80071d2:	d01a      	beq.n	800720a <HAL_TIM_ConfigClockSource+0xfa>
 80071d4:	2b70      	cmp	r3, #112	; 0x70
 80071d6:	d87b      	bhi.n	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80071d8:	2b60      	cmp	r3, #96	; 0x60
 80071da:	d050      	beq.n	800727e <HAL_TIM_ConfigClockSource+0x16e>
 80071dc:	2b60      	cmp	r3, #96	; 0x60
 80071de:	d877      	bhi.n	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80071e0:	2b50      	cmp	r3, #80	; 0x50
 80071e2:	d03c      	beq.n	800725e <HAL_TIM_ConfigClockSource+0x14e>
 80071e4:	2b50      	cmp	r3, #80	; 0x50
 80071e6:	d873      	bhi.n	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80071e8:	2b40      	cmp	r3, #64	; 0x40
 80071ea:	d058      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x18e>
 80071ec:	2b40      	cmp	r3, #64	; 0x40
 80071ee:	d86f      	bhi.n	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80071f0:	2b30      	cmp	r3, #48	; 0x30
 80071f2:	d064      	beq.n	80072be <HAL_TIM_ConfigClockSource+0x1ae>
 80071f4:	2b30      	cmp	r3, #48	; 0x30
 80071f6:	d86b      	bhi.n	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	d060      	beq.n	80072be <HAL_TIM_ConfigClockSource+0x1ae>
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d867      	bhi.n	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d05c      	beq.n	80072be <HAL_TIM_ConfigClockSource+0x1ae>
 8007204:	2b10      	cmp	r3, #16
 8007206:	d05a      	beq.n	80072be <HAL_TIM_ConfigClockSource+0x1ae>
 8007208:	e062      	b.n	80072d0 <HAL_TIM_ConfigClockSource+0x1c0>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	6899      	ldr	r1, [r3, #8]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f000 fc75 	bl	8007b08 <TIM_ETR_SetConfig>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	60bb      	str	r3, [r7, #8]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	609a      	str	r2, [r3, #8]
 8007236:	e04f      	b.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	6899      	ldr	r1, [r3, #8]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f000 fc5e 	bl	8007b08 <TIM_ETR_SetConfig>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800725a:	609a      	str	r2, [r3, #8]
 800725c:	e03c      	b.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c8>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	6859      	ldr	r1, [r3, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	461a      	mov	r2, r3
 800726c:	f000 fbd0 	bl	8007a10 <TIM_TI1_ConfigInputStage>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2150      	movs	r1, #80	; 0x50
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fc29 	bl	8007ace <TIM_ITRx_SetConfig>
 800727c:	e02c      	b.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6818      	ldr	r0, [r3, #0]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	6859      	ldr	r1, [r3, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	461a      	mov	r2, r3
 800728c:	f000 fbef 	bl	8007a6e <TIM_TI2_ConfigInputStage>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2160      	movs	r1, #96	; 0x60
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fc19 	bl	8007ace <TIM_ITRx_SetConfig>
 800729c:	e01c      	b.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c8>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	6859      	ldr	r1, [r3, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f000 fbb0 	bl	8007a10 <TIM_TI1_ConfigInputStage>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2140      	movs	r1, #64	; 0x40
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fc09 	bl	8007ace <TIM_ITRx_SetConfig>
 80072bc:	e00c      	b.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c8>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4619      	mov	r1, r3
 80072c8:	4610      	mov	r0, r2
 80072ca:	f000 fc00 	bl	8007ace <TIM_ITRx_SetConfig>
 80072ce:	e003      	b.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c8>
 80072d0:	2301      	movs	r3, #1
 80072d2:	73fb      	strb	r3, [r7, #15]
 80072d4:	e000      	b.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c8>
 80072d6:	bf00      	nop
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	00100070 	.word	0x00100070
 80072f8:	00100040 	.word	0x00100040
 80072fc:	00100030 	.word	0x00100030
 8007300:	00100020 	.word	0x00100020

08007304 <TIM_Base_SetConfig>:
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a3c      	ldr	r2, [pc, #240]	; (8007408 <TIM_Base_SetConfig+0x104>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00f      	beq.n	800733c <TIM_Base_SetConfig+0x38>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007322:	d00b      	beq.n	800733c <TIM_Base_SetConfig+0x38>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a39      	ldr	r2, [pc, #228]	; (800740c <TIM_Base_SetConfig+0x108>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d007      	beq.n	800733c <TIM_Base_SetConfig+0x38>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a38      	ldr	r2, [pc, #224]	; (8007410 <TIM_Base_SetConfig+0x10c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d003      	beq.n	800733c <TIM_Base_SetConfig+0x38>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a37      	ldr	r2, [pc, #220]	; (8007414 <TIM_Base_SetConfig+0x110>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d108      	bne.n	800734e <TIM_Base_SetConfig+0x4a>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a2d      	ldr	r2, [pc, #180]	; (8007408 <TIM_Base_SetConfig+0x104>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d01b      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735c:	d017      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a2a      	ldr	r2, [pc, #168]	; (800740c <TIM_Base_SetConfig+0x108>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d013      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a29      	ldr	r2, [pc, #164]	; (8007410 <TIM_Base_SetConfig+0x10c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00f      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a28      	ldr	r2, [pc, #160]	; (8007414 <TIM_Base_SetConfig+0x110>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00b      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a27      	ldr	r2, [pc, #156]	; (8007418 <TIM_Base_SetConfig+0x114>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d007      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a26      	ldr	r2, [pc, #152]	; (800741c <TIM_Base_SetConfig+0x118>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d003      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a25      	ldr	r2, [pc, #148]	; (8007420 <TIM_Base_SetConfig+0x11c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d108      	bne.n	80073a0 <TIM_Base_SetConfig+0x9c>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	629a      	str	r2, [r3, #40]	; 0x28
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a10      	ldr	r2, [pc, #64]	; (8007408 <TIM_Base_SetConfig+0x104>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00f      	beq.n	80073ec <TIM_Base_SetConfig+0xe8>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a11      	ldr	r2, [pc, #68]	; (8007414 <TIM_Base_SetConfig+0x110>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d00b      	beq.n	80073ec <TIM_Base_SetConfig+0xe8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a10      	ldr	r2, [pc, #64]	; (8007418 <TIM_Base_SetConfig+0x114>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d007      	beq.n	80073ec <TIM_Base_SetConfig+0xe8>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a0f      	ldr	r2, [pc, #60]	; (800741c <TIM_Base_SetConfig+0x118>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d003      	beq.n	80073ec <TIM_Base_SetConfig+0xe8>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a0e      	ldr	r2, [pc, #56]	; (8007420 <TIM_Base_SetConfig+0x11c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d103      	bne.n	80073f4 <TIM_Base_SetConfig+0xf0>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	631a      	str	r2, [r3, #48]	; 0x30
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	615a      	str	r2, [r3, #20]
 80073fa:	bf00      	nop
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40000400 	.word	0x40000400
 8007410:	40000800 	.word	0x40000800
 8007414:	40013400 	.word	0x40013400
 8007418:	40014000 	.word	0x40014000
 800741c:	40014400 	.word	0x40014400
 8007420:	40014800 	.word	0x40014800

08007424 <TIM_OC1_SetConfig>:
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f023 0201 	bic.w	r2, r3, #1
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	621a      	str	r2, [r3, #32]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0303 	bic.w	r3, r3, #3
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f023 0302 	bic.w	r3, r3, #2
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a2c      	ldr	r2, [pc, #176]	; (8007530 <TIM_OC1_SetConfig+0x10c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00f      	beq.n	80074a4 <TIM_OC1_SetConfig+0x80>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a2b      	ldr	r2, [pc, #172]	; (8007534 <TIM_OC1_SetConfig+0x110>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00b      	beq.n	80074a4 <TIM_OC1_SetConfig+0x80>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a2a      	ldr	r2, [pc, #168]	; (8007538 <TIM_OC1_SetConfig+0x114>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d007      	beq.n	80074a4 <TIM_OC1_SetConfig+0x80>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a29      	ldr	r2, [pc, #164]	; (800753c <TIM_OC1_SetConfig+0x118>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d003      	beq.n	80074a4 <TIM_OC1_SetConfig+0x80>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a28      	ldr	r2, [pc, #160]	; (8007540 <TIM_OC1_SetConfig+0x11c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d10c      	bne.n	80074be <TIM_OC1_SetConfig+0x9a>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f023 0308 	bic.w	r3, r3, #8
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	617b      	str	r3, [r7, #20]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f023 0304 	bic.w	r3, r3, #4
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a1b      	ldr	r2, [pc, #108]	; (8007530 <TIM_OC1_SetConfig+0x10c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00f      	beq.n	80074e6 <TIM_OC1_SetConfig+0xc2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a1a      	ldr	r2, [pc, #104]	; (8007534 <TIM_OC1_SetConfig+0x110>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00b      	beq.n	80074e6 <TIM_OC1_SetConfig+0xc2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a19      	ldr	r2, [pc, #100]	; (8007538 <TIM_OC1_SetConfig+0x114>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d007      	beq.n	80074e6 <TIM_OC1_SetConfig+0xc2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a18      	ldr	r2, [pc, #96]	; (800753c <TIM_OC1_SetConfig+0x118>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d003      	beq.n	80074e6 <TIM_OC1_SetConfig+0xc2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a17      	ldr	r2, [pc, #92]	; (8007540 <TIM_OC1_SetConfig+0x11c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d111      	bne.n	800750a <TIM_OC1_SetConfig+0xe6>
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	613b      	str	r3, [r7, #16]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	4313      	orrs	r3, r2
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	605a      	str	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	619a      	str	r2, [r3, #24]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	635a      	str	r2, [r3, #52]	; 0x34
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	621a      	str	r2, [r3, #32]
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	40012c00 	.word	0x40012c00
 8007534:	40013400 	.word	0x40013400
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400
 8007540:	40014800 	.word	0x40014800

08007544 <TIM_OC2_SetConfig>:
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	f023 0210 	bic.w	r2, r3, #16
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	621a      	str	r2, [r3, #32]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f023 0320 	bic.w	r3, r3, #32
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a28      	ldr	r2, [pc, #160]	; (8007644 <TIM_OC2_SetConfig+0x100>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d003      	beq.n	80075b0 <TIM_OC2_SetConfig+0x6c>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a27      	ldr	r2, [pc, #156]	; (8007648 <TIM_OC2_SetConfig+0x104>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d10d      	bne.n	80075cc <TIM_OC2_SetConfig+0x88>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a1d      	ldr	r2, [pc, #116]	; (8007644 <TIM_OC2_SetConfig+0x100>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00f      	beq.n	80075f4 <TIM_OC2_SetConfig+0xb0>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a1c      	ldr	r2, [pc, #112]	; (8007648 <TIM_OC2_SetConfig+0x104>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00b      	beq.n	80075f4 <TIM_OC2_SetConfig+0xb0>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a1b      	ldr	r2, [pc, #108]	; (800764c <TIM_OC2_SetConfig+0x108>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d007      	beq.n	80075f4 <TIM_OC2_SetConfig+0xb0>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a1a      	ldr	r2, [pc, #104]	; (8007650 <TIM_OC2_SetConfig+0x10c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d003      	beq.n	80075f4 <TIM_OC2_SetConfig+0xb0>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a19      	ldr	r2, [pc, #100]	; (8007654 <TIM_OC2_SetConfig+0x110>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d113      	bne.n	800761c <TIM_OC2_SetConfig+0xd8>
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075fa:	613b      	str	r3, [r7, #16]
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	605a      	str	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	619a      	str	r2, [r3, #24]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	639a      	str	r2, [r3, #56]	; 0x38
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	621a      	str	r2, [r3, #32]
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40012c00 	.word	0x40012c00
 8007648:	40013400 	.word	0x40013400
 800764c:	40014000 	.word	0x40014000
 8007650:	40014400 	.word	0x40014400
 8007654:	40014800 	.word	0x40014800

08007658 <TIM_OC3_SetConfig>:
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	621a      	str	r2, [r3, #32]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	613b      	str	r3, [r7, #16]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 0303 	bic.w	r3, r3, #3
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076a4:	617b      	str	r3, [r7, #20]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a27      	ldr	r2, [pc, #156]	; (8007754 <TIM_OC3_SetConfig+0xfc>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d003      	beq.n	80076c2 <TIM_OC3_SetConfig+0x6a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a26      	ldr	r2, [pc, #152]	; (8007758 <TIM_OC3_SetConfig+0x100>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d10d      	bne.n	80076de <TIM_OC3_SetConfig+0x86>
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	021b      	lsls	r3, r3, #8
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a1c      	ldr	r2, [pc, #112]	; (8007754 <TIM_OC3_SetConfig+0xfc>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00f      	beq.n	8007706 <TIM_OC3_SetConfig+0xae>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a1b      	ldr	r2, [pc, #108]	; (8007758 <TIM_OC3_SetConfig+0x100>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00b      	beq.n	8007706 <TIM_OC3_SetConfig+0xae>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a1a      	ldr	r2, [pc, #104]	; (800775c <TIM_OC3_SetConfig+0x104>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d007      	beq.n	8007706 <TIM_OC3_SetConfig+0xae>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a19      	ldr	r2, [pc, #100]	; (8007760 <TIM_OC3_SetConfig+0x108>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_OC3_SetConfig+0xae>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a18      	ldr	r2, [pc, #96]	; (8007764 <TIM_OC3_SetConfig+0x10c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d113      	bne.n	800772e <TIM_OC3_SetConfig+0xd6>
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800770c:	613b      	str	r3, [r7, #16]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007714:	613b      	str	r3, [r7, #16]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4313      	orrs	r3, r2
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	011b      	lsls	r3, r3, #4
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	4313      	orrs	r3, r2
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	605a      	str	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	61da      	str	r2, [r3, #28]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	63da      	str	r2, [r3, #60]	; 0x3c
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	621a      	str	r2, [r3, #32]
 8007748:	bf00      	nop
 800774a:	371c      	adds	r7, #28
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	40012c00 	.word	0x40012c00
 8007758:	40013400 	.word	0x40013400
 800775c:	40014000 	.word	0x40014000
 8007760:	40014400 	.word	0x40014400
 8007764:	40014800 	.word	0x40014800

08007768 <TIM_OC4_SetConfig>:
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	621a      	str	r2, [r3, #32]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	613b      	str	r3, [r7, #16]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	021b      	lsls	r3, r3, #8
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	031b      	lsls	r3, r3, #12
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a28      	ldr	r2, [pc, #160]	; (8007868 <TIM_OC4_SetConfig+0x100>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d003      	beq.n	80077d4 <TIM_OC4_SetConfig+0x6c>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a27      	ldr	r2, [pc, #156]	; (800786c <TIM_OC4_SetConfig+0x104>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d10d      	bne.n	80077f0 <TIM_OC4_SetConfig+0x88>
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	031b      	lsls	r3, r3, #12
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a1d      	ldr	r2, [pc, #116]	; (8007868 <TIM_OC4_SetConfig+0x100>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00f      	beq.n	8007818 <TIM_OC4_SetConfig+0xb0>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a1c      	ldr	r2, [pc, #112]	; (800786c <TIM_OC4_SetConfig+0x104>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00b      	beq.n	8007818 <TIM_OC4_SetConfig+0xb0>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a1b      	ldr	r2, [pc, #108]	; (8007870 <TIM_OC4_SetConfig+0x108>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d007      	beq.n	8007818 <TIM_OC4_SetConfig+0xb0>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a1a      	ldr	r2, [pc, #104]	; (8007874 <TIM_OC4_SetConfig+0x10c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d003      	beq.n	8007818 <TIM_OC4_SetConfig+0xb0>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a19      	ldr	r2, [pc, #100]	; (8007878 <TIM_OC4_SetConfig+0x110>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d113      	bne.n	8007840 <TIM_OC4_SetConfig+0xd8>
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800781e:	613b      	str	r3, [r7, #16]
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007826:	613b      	str	r3, [r7, #16]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	019b      	lsls	r3, r3, #6
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	019b      	lsls	r3, r3, #6
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	605a      	str	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	61da      	str	r2, [r3, #28]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	641a      	str	r2, [r3, #64]	; 0x40
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	621a      	str	r2, [r3, #32]
 800785a:	bf00      	nop
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	40012c00 	.word	0x40012c00
 800786c:	40013400 	.word	0x40013400
 8007870:	40014000 	.word	0x40014000
 8007874:	40014400 	.word	0x40014400
 8007878:	40014800 	.word	0x40014800

0800787c <TIM_OC5_SetConfig>:
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	621a      	str	r2, [r3, #32]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	613b      	str	r3, [r7, #16]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078c0:	613b      	str	r3, [r7, #16]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	041b      	lsls	r3, r3, #16
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a17      	ldr	r2, [pc, #92]	; (8007930 <TIM_OC5_SetConfig+0xb4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00f      	beq.n	80078f6 <TIM_OC5_SetConfig+0x7a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a16      	ldr	r2, [pc, #88]	; (8007934 <TIM_OC5_SetConfig+0xb8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d00b      	beq.n	80078f6 <TIM_OC5_SetConfig+0x7a>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a15      	ldr	r2, [pc, #84]	; (8007938 <TIM_OC5_SetConfig+0xbc>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d007      	beq.n	80078f6 <TIM_OC5_SetConfig+0x7a>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a14      	ldr	r2, [pc, #80]	; (800793c <TIM_OC5_SetConfig+0xc0>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d003      	beq.n	80078f6 <TIM_OC5_SetConfig+0x7a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a13      	ldr	r2, [pc, #76]	; (8007940 <TIM_OC5_SetConfig+0xc4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d109      	bne.n	800790a <TIM_OC5_SetConfig+0x8e>
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	021b      	lsls	r3, r3, #8
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	4313      	orrs	r3, r2
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	605a      	str	r2, [r3, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	651a      	str	r2, [r3, #80]	; 0x50
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	649a      	str	r2, [r3, #72]	; 0x48
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	621a      	str	r2, [r3, #32]
 8007924:	bf00      	nop
 8007926:	371c      	adds	r7, #28
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	40012c00 	.word	0x40012c00
 8007934:	40013400 	.word	0x40013400
 8007938:	40014000 	.word	0x40014000
 800793c:	40014400 	.word	0x40014400
 8007940:	40014800 	.word	0x40014800

08007944 <TIM_OC6_SetConfig>:
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	621a      	str	r2, [r3, #32]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	617b      	str	r3, [r7, #20]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	051b      	lsls	r3, r3, #20
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a18      	ldr	r2, [pc, #96]	; (80079fc <TIM_OC6_SetConfig+0xb8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00f      	beq.n	80079c0 <TIM_OC6_SetConfig+0x7c>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a17      	ldr	r2, [pc, #92]	; (8007a00 <TIM_OC6_SetConfig+0xbc>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00b      	beq.n	80079c0 <TIM_OC6_SetConfig+0x7c>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a16      	ldr	r2, [pc, #88]	; (8007a04 <TIM_OC6_SetConfig+0xc0>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d007      	beq.n	80079c0 <TIM_OC6_SetConfig+0x7c>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a15      	ldr	r2, [pc, #84]	; (8007a08 <TIM_OC6_SetConfig+0xc4>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d003      	beq.n	80079c0 <TIM_OC6_SetConfig+0x7c>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a14      	ldr	r2, [pc, #80]	; (8007a0c <TIM_OC6_SetConfig+0xc8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d109      	bne.n	80079d4 <TIM_OC6_SetConfig+0x90>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	605a      	str	r2, [r3, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	651a      	str	r2, [r3, #80]	; 0x50
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	621a      	str	r2, [r3, #32]
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	40012c00 	.word	0x40012c00
 8007a00:	40013400 	.word	0x40013400
 8007a04:	40014000 	.word	0x40014000
 8007a08:	40014400 	.word	0x40014400
 8007a0c:	40014800 	.word	0x40014800

08007a10 <TIM_TI1_ConfigInputStage>:
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f023 0201 	bic.w	r2, r3, #1
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	621a      	str	r2, [r3, #32]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 030a 	bic.w	r3, r3, #10
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	619a      	str	r2, [r3, #24]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	621a      	str	r2, [r3, #32]
 8007a62:	bf00      	nop
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <TIM_TI2_ConfigInputStage>:
 8007a6e:	b480      	push	{r7}
 8007a70:	b087      	sub	sp, #28
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	607a      	str	r2, [r7, #4]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	f023 0210 	bic.w	r2, r3, #16
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	621a      	str	r2, [r3, #32]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	613b      	str	r3, [r7, #16]
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a98:	617b      	str	r3, [r7, #20]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	031b      	lsls	r3, r3, #12
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007aaa:	613b      	str	r3, [r7, #16]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	619a      	str	r2, [r3, #24]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	621a      	str	r2, [r3, #32]
 8007ac2:	bf00      	nop
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <TIM_ITRx_SetConfig>:
 8007ace:	b480      	push	{r7}
 8007ad0:	b085      	sub	sp, #20
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	60fb      	str	r3, [r7, #12]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	f043 0307 	orr.w	r3, r3, #7
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	609a      	str	r2, [r3, #8]
 8007afc:	bf00      	nop
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <TIM_ETR_SetConfig>:
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b22:	617b      	str	r3, [r7, #20]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	021a      	lsls	r2, r3, #8
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	609a      	str	r2, [r3, #8]
 8007b3c:	bf00      	nop
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_TIMEx_PWMN_Start>:
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d109      	bne.n	8007b6c <HAL_TIMEx_PWMN_Start+0x24>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	bf14      	ite	ne
 8007b64:	2301      	movne	r3, #1
 8007b66:	2300      	moveq	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	e022      	b.n	8007bb2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d109      	bne.n	8007b86 <HAL_TIMEx_PWMN_Start+0x3e>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	bf14      	ite	ne
 8007b7e:	2301      	movne	r3, #1
 8007b80:	2300      	moveq	r3, #0
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	e015      	b.n	8007bb2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d109      	bne.n	8007ba0 <HAL_TIMEx_PWMN_Start+0x58>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	bf14      	ite	ne
 8007b98:	2301      	movne	r3, #1
 8007b9a:	2300      	moveq	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	e008      	b.n	8007bb2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	bf14      	ite	ne
 8007bac:	2301      	movne	r3, #1
 8007bae:	2300      	moveq	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_TIMEx_PWMN_Start+0x72>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e069      	b.n	8007c8e <HAL_TIMEx_PWMN_Start+0x146>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <HAL_TIMEx_PWMN_Start+0x82>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bc8:	e013      	b.n	8007bf2 <HAL_TIMEx_PWMN_Start+0xaa>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	d104      	bne.n	8007bda <HAL_TIMEx_PWMN_Start+0x92>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bd8:	e00b      	b.n	8007bf2 <HAL_TIMEx_PWMN_Start+0xaa>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d104      	bne.n	8007bea <HAL_TIMEx_PWMN_Start+0xa2>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007be8:	e003      	b.n	8007bf2 <HAL_TIMEx_PWMN_Start+0xaa>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2202      	movs	r2, #2
 8007bee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2204      	movs	r2, #4
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 f97a 	bl	8007ef4 <TIM_CCxNChannelCmd>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c0e:	645a      	str	r2, [r3, #68]	; 0x44
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a20      	ldr	r2, [pc, #128]	; (8007c98 <HAL_TIMEx_PWMN_Start+0x150>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d018      	beq.n	8007c4c <HAL_TIMEx_PWMN_Start+0x104>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c22:	d013      	beq.n	8007c4c <HAL_TIMEx_PWMN_Start+0x104>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a1c      	ldr	r2, [pc, #112]	; (8007c9c <HAL_TIMEx_PWMN_Start+0x154>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00e      	beq.n	8007c4c <HAL_TIMEx_PWMN_Start+0x104>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a1b      	ldr	r2, [pc, #108]	; (8007ca0 <HAL_TIMEx_PWMN_Start+0x158>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d009      	beq.n	8007c4c <HAL_TIMEx_PWMN_Start+0x104>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a19      	ldr	r2, [pc, #100]	; (8007ca4 <HAL_TIMEx_PWMN_Start+0x15c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d004      	beq.n	8007c4c <HAL_TIMEx_PWMN_Start+0x104>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a18      	ldr	r2, [pc, #96]	; (8007ca8 <HAL_TIMEx_PWMN_Start+0x160>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d115      	bne.n	8007c78 <HAL_TIMEx_PWMN_Start+0x130>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689a      	ldr	r2, [r3, #8]
 8007c52:	4b16      	ldr	r3, [pc, #88]	; (8007cac <HAL_TIMEx_PWMN_Start+0x164>)
 8007c54:	4013      	ands	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b06      	cmp	r3, #6
 8007c5c:	d015      	beq.n	8007c8a <HAL_TIMEx_PWMN_Start+0x142>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c64:	d011      	beq.n	8007c8a <HAL_TIMEx_PWMN_Start+0x142>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f042 0201 	orr.w	r2, r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	e008      	b.n	8007c8a <HAL_TIMEx_PWMN_Start+0x142>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0201 	orr.w	r2, r2, #1
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	e000      	b.n	8007c8c <HAL_TIMEx_PWMN_Start+0x144>
 8007c8a:	bf00      	nop
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40012c00 	.word	0x40012c00
 8007c9c:	40000400 	.word	0x40000400
 8007ca0:	40000800 	.word	0x40000800
 8007ca4:	40013400 	.word	0x40013400
 8007ca8:	40014000 	.word	0x40014000
 8007cac:	00010007 	.word	0x00010007

08007cb0 <HAL_TIMEx_MasterConfigSynchronization>:
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e065      	b.n	8007d94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	60bb      	str	r3, [r7, #8]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a2c      	ldr	r2, [pc, #176]	; (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a2b      	ldr	r2, [pc, #172]	; (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d108      	bne.n	8007d0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	605a      	str	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a1b      	ldr	r2, [pc, #108]	; (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d018      	beq.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d3e:	d013      	beq.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a18      	ldr	r2, [pc, #96]	; (8007da8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00e      	beq.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a17      	ldr	r2, [pc, #92]	; (8007dac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d009      	beq.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a12      	ldr	r2, [pc, #72]	; (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d004      	beq.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a13      	ldr	r2, [pc, #76]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d10c      	bne.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d6e:	60bb      	str	r3, [r7, #8]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	609a      	str	r2, [r3, #8]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007d92:	2300      	movs	r3, #0
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	40012c00 	.word	0x40012c00
 8007da4:	40013400 	.word	0x40013400
 8007da8:	40000400 	.word	0x40000400
 8007dac:	40000800 	.word	0x40000800
 8007db0:	40014000 	.word	0x40014000

08007db4 <HAL_TIMEx_ConfigBreakDeadTime>:
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d101      	bne.n	8007dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	e087      	b.n	8007ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	041b      	lsls	r3, r3, #16
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a27      	ldr	r2, [pc, #156]	; (8007eec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a25      	ldr	r2, [pc, #148]	; (8007ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d106      	bne.n	8007e6c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a1e      	ldr	r2, [pc, #120]	; (8007eec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d004      	beq.n	8007e80 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a1d      	ldr	r2, [pc, #116]	; (8007ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d126      	bne.n	8007ece <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8a:	051b      	lsls	r3, r3, #20
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0e      	ldr	r2, [pc, #56]	; (8007eec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a0d      	ldr	r2, [pc, #52]	; (8007ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d106      	bne.n	8007ece <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	645a      	str	r2, [r3, #68]	; 0x44
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007ede:	2300      	movs	r3, #0
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	40012c00 	.word	0x40012c00
 8007ef0:	40013400 	.word	0x40013400

08007ef4 <TIM_CCxNChannelCmd>:
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f003 031f 	and.w	r3, r3, #31
 8007f06:	2204      	movs	r2, #4
 8007f08:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0c:	617b      	str	r3, [r7, #20]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a1a      	ldr	r2, [r3, #32]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	43db      	mvns	r3, r3
 8007f16:	401a      	ands	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	621a      	str	r2, [r3, #32]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1a      	ldr	r2, [r3, #32]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	621a      	str	r2, [r3, #32]
 8007f32:	bf00      	nop
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <HAL_UART_Init>:
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <HAL_UART_Init+0x12>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e042      	b.n	8007fd6 <HAL_UART_Init+0x98>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d106      	bne.n	8007f68 <HAL_UART_Init+0x2a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7fb fda8 	bl	8003ab8 <HAL_UART_MspInit>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2224      	movs	r2, #36	; 0x24
 8007f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 0201 	bic.w	r2, r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f82d 	bl	8007fe0 <UART_SetConfig>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d101      	bne.n	8007f90 <HAL_UART_Init+0x52>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e022      	b.n	8007fd6 <HAL_UART_Init+0x98>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <HAL_UART_Init+0x60>
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 faed 	bl	8008578 <UART_AdvFeatureConfig>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fac:	605a      	str	r2, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fbc:	609a      	str	r2, [r3, #8]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0201 	orr.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fb74 	bl	80086bc <UART_CheckIdleState>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <UART_SetConfig>:
 8007fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fe4:	b08c      	sub	sp, #48	; 0x30
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6178      	str	r0, [r7, #20]
 8007fea:	2300      	movs	r3, #0
 8007fec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	431a      	orrs	r2, r3
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	4313      	orrs	r3, r2
 8008006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4bab      	ldr	r3, [pc, #684]	; (80082bc <UART_SetConfig+0x2dc>)
 8008010:	4013      	ands	r3, r2
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	6812      	ldr	r2, [r2, #0]
 8008016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008018:	430b      	orrs	r3, r1
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4aa0      	ldr	r2, [pc, #640]	; (80082c0 <UART_SetConfig+0x2e0>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d004      	beq.n	800804c <UART_SetConfig+0x6c>
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008048:	4313      	orrs	r3, r2
 800804a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008056:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008060:	430b      	orrs	r3, r1
 8008062:	6093      	str	r3, [r2, #8]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806a:	f023 010f 	bic.w	r1, r3, #15
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	62da      	str	r2, [r3, #44]	; 0x2c
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a91      	ldr	r2, [pc, #580]	; (80082c4 <UART_SetConfig+0x2e4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d125      	bne.n	80080d0 <UART_SetConfig+0xf0>
 8008084:	4b90      	ldr	r3, [pc, #576]	; (80082c8 <UART_SetConfig+0x2e8>)
 8008086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	2b03      	cmp	r3, #3
 8008090:	d81a      	bhi.n	80080c8 <UART_SetConfig+0xe8>
 8008092:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <UART_SetConfig+0xb8>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080a9 	.word	0x080080a9
 800809c:	080080b9 	.word	0x080080b9
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080c1 	.word	0x080080c1
 80080a8:	2301      	movs	r3, #1
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ae:	e0d6      	b.n	800825e <UART_SetConfig+0x27e>
 80080b0:	2302      	movs	r3, #2
 80080b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080b6:	e0d2      	b.n	800825e <UART_SetConfig+0x27e>
 80080b8:	2304      	movs	r3, #4
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080be:	e0ce      	b.n	800825e <UART_SetConfig+0x27e>
 80080c0:	2308      	movs	r3, #8
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c6:	e0ca      	b.n	800825e <UART_SetConfig+0x27e>
 80080c8:	2310      	movs	r3, #16
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ce:	e0c6      	b.n	800825e <UART_SetConfig+0x27e>
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a7d      	ldr	r2, [pc, #500]	; (80082cc <UART_SetConfig+0x2ec>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d138      	bne.n	800814c <UART_SetConfig+0x16c>
 80080da:	4b7b      	ldr	r3, [pc, #492]	; (80082c8 <UART_SetConfig+0x2e8>)
 80080dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e0:	f003 030c 	and.w	r3, r3, #12
 80080e4:	2b0c      	cmp	r3, #12
 80080e6:	d82d      	bhi.n	8008144 <UART_SetConfig+0x164>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <UART_SetConfig+0x110>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008125 	.word	0x08008125
 80080f4:	08008145 	.word	0x08008145
 80080f8:	08008145 	.word	0x08008145
 80080fc:	08008145 	.word	0x08008145
 8008100:	08008135 	.word	0x08008135
 8008104:	08008145 	.word	0x08008145
 8008108:	08008145 	.word	0x08008145
 800810c:	08008145 	.word	0x08008145
 8008110:	0800812d 	.word	0x0800812d
 8008114:	08008145 	.word	0x08008145
 8008118:	08008145 	.word	0x08008145
 800811c:	08008145 	.word	0x08008145
 8008120:	0800813d 	.word	0x0800813d
 8008124:	2300      	movs	r3, #0
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812a:	e098      	b.n	800825e <UART_SetConfig+0x27e>
 800812c:	2302      	movs	r3, #2
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008132:	e094      	b.n	800825e <UART_SetConfig+0x27e>
 8008134:	2304      	movs	r3, #4
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813a:	e090      	b.n	800825e <UART_SetConfig+0x27e>
 800813c:	2308      	movs	r3, #8
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008142:	e08c      	b.n	800825e <UART_SetConfig+0x27e>
 8008144:	2310      	movs	r3, #16
 8008146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800814a:	e088      	b.n	800825e <UART_SetConfig+0x27e>
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a5f      	ldr	r2, [pc, #380]	; (80082d0 <UART_SetConfig+0x2f0>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d125      	bne.n	80081a2 <UART_SetConfig+0x1c2>
 8008156:	4b5c      	ldr	r3, [pc, #368]	; (80082c8 <UART_SetConfig+0x2e8>)
 8008158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008160:	2b30      	cmp	r3, #48	; 0x30
 8008162:	d016      	beq.n	8008192 <UART_SetConfig+0x1b2>
 8008164:	2b30      	cmp	r3, #48	; 0x30
 8008166:	d818      	bhi.n	800819a <UART_SetConfig+0x1ba>
 8008168:	2b20      	cmp	r3, #32
 800816a:	d00a      	beq.n	8008182 <UART_SetConfig+0x1a2>
 800816c:	2b20      	cmp	r3, #32
 800816e:	d814      	bhi.n	800819a <UART_SetConfig+0x1ba>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <UART_SetConfig+0x19a>
 8008174:	2b10      	cmp	r3, #16
 8008176:	d008      	beq.n	800818a <UART_SetConfig+0x1aa>
 8008178:	e00f      	b.n	800819a <UART_SetConfig+0x1ba>
 800817a:	2300      	movs	r3, #0
 800817c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008180:	e06d      	b.n	800825e <UART_SetConfig+0x27e>
 8008182:	2302      	movs	r3, #2
 8008184:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008188:	e069      	b.n	800825e <UART_SetConfig+0x27e>
 800818a:	2304      	movs	r3, #4
 800818c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008190:	e065      	b.n	800825e <UART_SetConfig+0x27e>
 8008192:	2308      	movs	r3, #8
 8008194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008198:	e061      	b.n	800825e <UART_SetConfig+0x27e>
 800819a:	2310      	movs	r3, #16
 800819c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a0:	e05d      	b.n	800825e <UART_SetConfig+0x27e>
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a4b      	ldr	r2, [pc, #300]	; (80082d4 <UART_SetConfig+0x2f4>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d125      	bne.n	80081f8 <UART_SetConfig+0x218>
 80081ac:	4b46      	ldr	r3, [pc, #280]	; (80082c8 <UART_SetConfig+0x2e8>)
 80081ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081b6:	2bc0      	cmp	r3, #192	; 0xc0
 80081b8:	d016      	beq.n	80081e8 <UART_SetConfig+0x208>
 80081ba:	2bc0      	cmp	r3, #192	; 0xc0
 80081bc:	d818      	bhi.n	80081f0 <UART_SetConfig+0x210>
 80081be:	2b80      	cmp	r3, #128	; 0x80
 80081c0:	d00a      	beq.n	80081d8 <UART_SetConfig+0x1f8>
 80081c2:	2b80      	cmp	r3, #128	; 0x80
 80081c4:	d814      	bhi.n	80081f0 <UART_SetConfig+0x210>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <UART_SetConfig+0x1f0>
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	d008      	beq.n	80081e0 <UART_SetConfig+0x200>
 80081ce:	e00f      	b.n	80081f0 <UART_SetConfig+0x210>
 80081d0:	2300      	movs	r3, #0
 80081d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081d6:	e042      	b.n	800825e <UART_SetConfig+0x27e>
 80081d8:	2302      	movs	r3, #2
 80081da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081de:	e03e      	b.n	800825e <UART_SetConfig+0x27e>
 80081e0:	2304      	movs	r3, #4
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e6:	e03a      	b.n	800825e <UART_SetConfig+0x27e>
 80081e8:	2308      	movs	r3, #8
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ee:	e036      	b.n	800825e <UART_SetConfig+0x27e>
 80081f0:	2310      	movs	r3, #16
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f6:	e032      	b.n	800825e <UART_SetConfig+0x27e>
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a30      	ldr	r2, [pc, #192]	; (80082c0 <UART_SetConfig+0x2e0>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d12a      	bne.n	8008258 <UART_SetConfig+0x278>
 8008202:	4b31      	ldr	r3, [pc, #196]	; (80082c8 <UART_SetConfig+0x2e8>)
 8008204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008208:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800820c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008210:	d01a      	beq.n	8008248 <UART_SetConfig+0x268>
 8008212:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008216:	d81b      	bhi.n	8008250 <UART_SetConfig+0x270>
 8008218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800821c:	d00c      	beq.n	8008238 <UART_SetConfig+0x258>
 800821e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008222:	d815      	bhi.n	8008250 <UART_SetConfig+0x270>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <UART_SetConfig+0x250>
 8008228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800822c:	d008      	beq.n	8008240 <UART_SetConfig+0x260>
 800822e:	e00f      	b.n	8008250 <UART_SetConfig+0x270>
 8008230:	2300      	movs	r3, #0
 8008232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008236:	e012      	b.n	800825e <UART_SetConfig+0x27e>
 8008238:	2302      	movs	r3, #2
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800823e:	e00e      	b.n	800825e <UART_SetConfig+0x27e>
 8008240:	2304      	movs	r3, #4
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008246:	e00a      	b.n	800825e <UART_SetConfig+0x27e>
 8008248:	2308      	movs	r3, #8
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824e:	e006      	b.n	800825e <UART_SetConfig+0x27e>
 8008250:	2310      	movs	r3, #16
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008256:	e002      	b.n	800825e <UART_SetConfig+0x27e>
 8008258:	2310      	movs	r3, #16
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a17      	ldr	r2, [pc, #92]	; (80082c0 <UART_SetConfig+0x2e0>)
 8008264:	4293      	cmp	r3, r2
 8008266:	f040 80a8 	bne.w	80083ba <UART_SetConfig+0x3da>
 800826a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800826e:	2b08      	cmp	r3, #8
 8008270:	d834      	bhi.n	80082dc <UART_SetConfig+0x2fc>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <UART_SetConfig+0x298>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	0800829d 	.word	0x0800829d
 800827c:	080082dd 	.word	0x080082dd
 8008280:	080082a5 	.word	0x080082a5
 8008284:	080082dd 	.word	0x080082dd
 8008288:	080082ab 	.word	0x080082ab
 800828c:	080082dd 	.word	0x080082dd
 8008290:	080082dd 	.word	0x080082dd
 8008294:	080082dd 	.word	0x080082dd
 8008298:	080082b3 	.word	0x080082b3
 800829c:	f7fd fbf2 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 80082a0:	6278      	str	r0, [r7, #36]	; 0x24
 80082a2:	e021      	b.n	80082e8 <UART_SetConfig+0x308>
 80082a4:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <UART_SetConfig+0x2f8>)
 80082a6:	627b      	str	r3, [r7, #36]	; 0x24
 80082a8:	e01e      	b.n	80082e8 <UART_SetConfig+0x308>
 80082aa:	f7fd fb7d 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 80082ae:	6278      	str	r0, [r7, #36]	; 0x24
 80082b0:	e01a      	b.n	80082e8 <UART_SetConfig+0x308>
 80082b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
 80082b8:	e016      	b.n	80082e8 <UART_SetConfig+0x308>
 80082ba:	bf00      	nop
 80082bc:	cfff69f3 	.word	0xcfff69f3
 80082c0:	40008000 	.word	0x40008000
 80082c4:	40013800 	.word	0x40013800
 80082c8:	40021000 	.word	0x40021000
 80082cc:	40004400 	.word	0x40004400
 80082d0:	40004800 	.word	0x40004800
 80082d4:	40004c00 	.word	0x40004c00
 80082d8:	00f42400 	.word	0x00f42400
 80082dc:	2300      	movs	r3, #0
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
 80082e0:	2301      	movs	r3, #1
 80082e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082e6:	bf00      	nop
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 812a 	beq.w	8008544 <UART_SetConfig+0x564>
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	4a9e      	ldr	r2, [pc, #632]	; (8008570 <UART_SetConfig+0x590>)
 80082f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082fa:	461a      	mov	r2, r3
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008302:	61bb      	str	r3, [r7, #24]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	4613      	mov	r3, r2
 800830a:	005b      	lsls	r3, r3, #1
 800830c:	4413      	add	r3, r2
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	429a      	cmp	r2, r3
 8008312:	d305      	bcc.n	8008320 <UART_SetConfig+0x340>
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	031b      	lsls	r3, r3, #12
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	429a      	cmp	r2, r3
 800831e:	d903      	bls.n	8008328 <UART_SetConfig+0x348>
 8008320:	2301      	movs	r3, #1
 8008322:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008326:	e10d      	b.n	8008544 <UART_SetConfig+0x564>
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	2200      	movs	r2, #0
 800832c:	60bb      	str	r3, [r7, #8]
 800832e:	60fa      	str	r2, [r7, #12]
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	4a8e      	ldr	r2, [pc, #568]	; (8008570 <UART_SetConfig+0x590>)
 8008336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800833a:	b29b      	uxth	r3, r3
 800833c:	2200      	movs	r2, #0
 800833e:	603b      	str	r3, [r7, #0]
 8008340:	607a      	str	r2, [r7, #4]
 8008342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008346:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800834a:	f7f8 fc21 	bl	8000b90 <__aeabi_uldivmod>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4610      	mov	r0, r2
 8008354:	4619      	mov	r1, r3
 8008356:	f04f 0200 	mov.w	r2, #0
 800835a:	f04f 0300 	mov.w	r3, #0
 800835e:	020b      	lsls	r3, r1, #8
 8008360:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008364:	0202      	lsls	r2, r0, #8
 8008366:	6979      	ldr	r1, [r7, #20]
 8008368:	6849      	ldr	r1, [r1, #4]
 800836a:	0849      	lsrs	r1, r1, #1
 800836c:	2000      	movs	r0, #0
 800836e:	460c      	mov	r4, r1
 8008370:	4605      	mov	r5, r0
 8008372:	eb12 0804 	adds.w	r8, r2, r4
 8008376:	eb43 0905 	adc.w	r9, r3, r5
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	469a      	mov	sl, r3
 8008382:	4693      	mov	fp, r2
 8008384:	4652      	mov	r2, sl
 8008386:	465b      	mov	r3, fp
 8008388:	4640      	mov	r0, r8
 800838a:	4649      	mov	r1, r9
 800838c:	f7f8 fc00 	bl	8000b90 <__aeabi_uldivmod>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	4613      	mov	r3, r2
 8008396:	623b      	str	r3, [r7, #32]
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800839e:	d308      	bcc.n	80083b2 <UART_SetConfig+0x3d2>
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083a6:	d204      	bcs.n	80083b2 <UART_SetConfig+0x3d2>
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6a3a      	ldr	r2, [r7, #32]
 80083ae:	60da      	str	r2, [r3, #12]
 80083b0:	e0c8      	b.n	8008544 <UART_SetConfig+0x564>
 80083b2:	2301      	movs	r3, #1
 80083b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083b8:	e0c4      	b.n	8008544 <UART_SetConfig+0x564>
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c2:	d167      	bne.n	8008494 <UART_SetConfig+0x4b4>
 80083c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d828      	bhi.n	800841e <UART_SetConfig+0x43e>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <UART_SetConfig+0x3f4>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	080083f9 	.word	0x080083f9
 80083d8:	08008401 	.word	0x08008401
 80083dc:	08008409 	.word	0x08008409
 80083e0:	0800841f 	.word	0x0800841f
 80083e4:	0800840f 	.word	0x0800840f
 80083e8:	0800841f 	.word	0x0800841f
 80083ec:	0800841f 	.word	0x0800841f
 80083f0:	0800841f 	.word	0x0800841f
 80083f4:	08008417 	.word	0x08008417
 80083f8:	f7fd fb44 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 80083fc:	6278      	str	r0, [r7, #36]	; 0x24
 80083fe:	e014      	b.n	800842a <UART_SetConfig+0x44a>
 8008400:	f7fd fb56 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 8008404:	6278      	str	r0, [r7, #36]	; 0x24
 8008406:	e010      	b.n	800842a <UART_SetConfig+0x44a>
 8008408:	4b5a      	ldr	r3, [pc, #360]	; (8008574 <UART_SetConfig+0x594>)
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
 800840c:	e00d      	b.n	800842a <UART_SetConfig+0x44a>
 800840e:	f7fd facb 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8008412:	6278      	str	r0, [r7, #36]	; 0x24
 8008414:	e009      	b.n	800842a <UART_SetConfig+0x44a>
 8008416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800841a:	627b      	str	r3, [r7, #36]	; 0x24
 800841c:	e005      	b.n	800842a <UART_SetConfig+0x44a>
 800841e:	2300      	movs	r3, #0
 8008420:	627b      	str	r3, [r7, #36]	; 0x24
 8008422:	2301      	movs	r3, #1
 8008424:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008428:	bf00      	nop
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8089 	beq.w	8008544 <UART_SetConfig+0x564>
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008436:	4a4e      	ldr	r2, [pc, #312]	; (8008570 <UART_SetConfig+0x590>)
 8008438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800843c:	461a      	mov	r2, r3
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	fbb3 f3f2 	udiv	r3, r3, r2
 8008444:	005a      	lsls	r2, r3, #1
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	085b      	lsrs	r3, r3, #1
 800844c:	441a      	add	r2, r3
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	fbb2 f3f3 	udiv	r3, r2, r3
 8008456:	623b      	str	r3, [r7, #32]
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	2b0f      	cmp	r3, #15
 800845c:	d916      	bls.n	800848c <UART_SetConfig+0x4ac>
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008464:	d212      	bcs.n	800848c <UART_SetConfig+0x4ac>
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	b29b      	uxth	r3, r3
 800846a:	f023 030f 	bic.w	r3, r3, #15
 800846e:	83fb      	strh	r3, [r7, #30]
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	085b      	lsrs	r3, r3, #1
 8008474:	b29b      	uxth	r3, r3
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	b29a      	uxth	r2, r3
 800847c:	8bfb      	ldrh	r3, [r7, #30]
 800847e:	4313      	orrs	r3, r2
 8008480:	83fb      	strh	r3, [r7, #30]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	8bfa      	ldrh	r2, [r7, #30]
 8008488:	60da      	str	r2, [r3, #12]
 800848a:	e05b      	b.n	8008544 <UART_SetConfig+0x564>
 800848c:	2301      	movs	r3, #1
 800848e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008492:	e057      	b.n	8008544 <UART_SetConfig+0x564>
 8008494:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008498:	2b08      	cmp	r3, #8
 800849a:	d828      	bhi.n	80084ee <UART_SetConfig+0x50e>
 800849c:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <UART_SetConfig+0x4c4>)
 800849e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a2:	bf00      	nop
 80084a4:	080084c9 	.word	0x080084c9
 80084a8:	080084d1 	.word	0x080084d1
 80084ac:	080084d9 	.word	0x080084d9
 80084b0:	080084ef 	.word	0x080084ef
 80084b4:	080084df 	.word	0x080084df
 80084b8:	080084ef 	.word	0x080084ef
 80084bc:	080084ef 	.word	0x080084ef
 80084c0:	080084ef 	.word	0x080084ef
 80084c4:	080084e7 	.word	0x080084e7
 80084c8:	f7fd fadc 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 80084cc:	6278      	str	r0, [r7, #36]	; 0x24
 80084ce:	e014      	b.n	80084fa <UART_SetConfig+0x51a>
 80084d0:	f7fd faee 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 80084d4:	6278      	str	r0, [r7, #36]	; 0x24
 80084d6:	e010      	b.n	80084fa <UART_SetConfig+0x51a>
 80084d8:	4b26      	ldr	r3, [pc, #152]	; (8008574 <UART_SetConfig+0x594>)
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
 80084dc:	e00d      	b.n	80084fa <UART_SetConfig+0x51a>
 80084de:	f7fd fa63 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 80084e2:	6278      	str	r0, [r7, #36]	; 0x24
 80084e4:	e009      	b.n	80084fa <UART_SetConfig+0x51a>
 80084e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
 80084ec:	e005      	b.n	80084fa <UART_SetConfig+0x51a>
 80084ee:	2300      	movs	r3, #0
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
 80084f2:	2301      	movs	r3, #1
 80084f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084f8:	bf00      	nop
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d021      	beq.n	8008544 <UART_SetConfig+0x564>
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	4a1a      	ldr	r2, [pc, #104]	; (8008570 <UART_SetConfig+0x590>)
 8008506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800850a:	461a      	mov	r2, r3
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	085b      	lsrs	r3, r3, #1
 8008518:	441a      	add	r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008522:	623b      	str	r3, [r7, #32]
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	2b0f      	cmp	r3, #15
 8008528:	d909      	bls.n	800853e <UART_SetConfig+0x55e>
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008530:	d205      	bcs.n	800853e <UART_SetConfig+0x55e>
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	b29a      	uxth	r2, r3
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60da      	str	r2, [r3, #12]
 800853c:	e002      	b.n	8008544 <UART_SetConfig+0x564>
 800853e:	2301      	movs	r3, #1
 8008540:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2201      	movs	r2, #1
 8008548:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	2201      	movs	r2, #1
 8008550:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2200      	movs	r2, #0
 8008558:	671a      	str	r2, [r3, #112]	; 0x70
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2200      	movs	r2, #0
 800855e:	675a      	str	r2, [r3, #116]	; 0x74
 8008560:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008564:	4618      	mov	r0, r3
 8008566:	3730      	adds	r7, #48	; 0x30
 8008568:	46bd      	mov	sp, r7
 800856a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800856e:	bf00      	nop
 8008570:	08009394 	.word	0x08009394
 8008574:	00f42400 	.word	0x00f42400

08008578 <UART_AdvFeatureConfig>:
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <UART_AdvFeatureConfig+0x2a>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <UART_AdvFeatureConfig+0x4c>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	605a      	str	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c8:	f003 0304 	and.w	r3, r3, #4
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <UART_AdvFeatureConfig+0x6e>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	605a      	str	r2, [r3, #4]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	f003 0308 	and.w	r3, r3, #8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <UART_AdvFeatureConfig+0x90>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	430a      	orrs	r2, r1
 8008606:	605a      	str	r2, [r3, #4]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00a      	beq.n	800862a <UART_AdvFeatureConfig+0xb2>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	609a      	str	r2, [r3, #8]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <UART_AdvFeatureConfig+0xd4>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	609a      	str	r2, [r3, #8]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01a      	beq.n	800868e <UART_AdvFeatureConfig+0x116>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	605a      	str	r2, [r3, #4]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008676:	d10a      	bne.n	800868e <UART_AdvFeatureConfig+0x116>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	605a      	str	r2, [r3, #4]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00a      	beq.n	80086b0 <UART_AdvFeatureConfig+0x138>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	430a      	orrs	r2, r1
 80086ae:	605a      	str	r2, [r3, #4]
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <UART_CheckIdleState>:
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80086cc:	f7fb fc82 	bl	8003fd4 <HAL_GetTick>
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0308 	and.w	r3, r3, #8
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d10e      	bne.n	80086fe <UART_CheckIdleState+0x42>
 80086e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f82f 	bl	8008752 <UART_WaitOnFlagUntilTimeout>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <UART_CheckIdleState+0x42>
 80086fa:	2303      	movs	r3, #3
 80086fc:	e025      	b.n	800874a <UART_CheckIdleState+0x8e>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b04      	cmp	r3, #4
 800870a:	d10e      	bne.n	800872a <UART_CheckIdleState+0x6e>
 800870c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f819 	bl	8008752 <UART_WaitOnFlagUntilTimeout>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <UART_CheckIdleState+0x6e>
 8008726:	2303      	movs	r3, #3
 8008728:	e00f      	b.n	800874a <UART_CheckIdleState+0x8e>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2220      	movs	r2, #32
 800872e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2220      	movs	r2, #32
 8008736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	66da      	str	r2, [r3, #108]	; 0x6c
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008748:	2300      	movs	r3, #0
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <UART_WaitOnFlagUntilTimeout>:
 8008752:	b580      	push	{r7, lr}
 8008754:	b09c      	sub	sp, #112	; 0x70
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	603b      	str	r3, [r7, #0]
 800875e:	4613      	mov	r3, r2
 8008760:	71fb      	strb	r3, [r7, #7]
 8008762:	e0a9      	b.n	80088b8 <UART_WaitOnFlagUntilTimeout+0x166>
 8008764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800876a:	f000 80a5 	beq.w	80088b8 <UART_WaitOnFlagUntilTimeout+0x166>
 800876e:	f7fb fc31 	bl	8003fd4 <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800877a:	429a      	cmp	r2, r3
 800877c:	d302      	bcc.n	8008784 <UART_WaitOnFlagUntilTimeout+0x32>
 800877e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008780:	2b00      	cmp	r3, #0
 8008782:	d140      	bne.n	8008806 <UART_WaitOnFlagUntilTimeout+0xb4>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	653b      	str	r3, [r7, #80]	; 0x50
 800878a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008794:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008798:	667b      	str	r3, [r7, #100]	; 0x64
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80087a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	657b      	str	r3, [r7, #84]	; 0x54
 80087b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e6      	bne.n	8008784 <UART_WaitOnFlagUntilTimeout+0x32>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3308      	adds	r3, #8
 80087bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80087c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c8:	f023 0301 	bic.w	r3, r3, #1
 80087cc:	663b      	str	r3, [r7, #96]	; 0x60
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3308      	adds	r3, #8
 80087d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80087d8:	647b      	str	r3, [r7, #68]	; 0x44
 80087da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	643b      	str	r3, [r7, #64]	; 0x40
 80087e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e5      	bne.n	80087b6 <UART_WaitOnFlagUntilTimeout+0x64>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2220      	movs	r2, #32
 80087f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008802:	2303      	movs	r3, #3
 8008804:	e069      	b.n	80088da <UART_WaitOnFlagUntilTimeout+0x188>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	2b00      	cmp	r3, #0
 8008812:	d051      	beq.n	80088b8 <UART_WaitOnFlagUntilTimeout+0x166>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800881e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008822:	d149      	bne.n	80088b8 <UART_WaitOnFlagUntilTimeout+0x166>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800882c:	621a      	str	r2, [r3, #32]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	62bb      	str	r3, [r7, #40]	; 0x28
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	627b      	str	r3, [r7, #36]	; 0x24
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008842:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	461a      	mov	r2, r3
 800884a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800884c:	637b      	str	r3, [r7, #52]	; 0x34
 800884e:	633a      	str	r2, [r7, #48]	; 0x30
 8008850:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e6      	bne.n	800882e <UART_WaitOnFlagUntilTimeout+0xdc>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3308      	adds	r3, #8
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	613b      	str	r3, [r7, #16]
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f023 0301 	bic.w	r3, r3, #1
 8008876:	66bb      	str	r3, [r7, #104]	; 0x68
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3308      	adds	r3, #8
 800887e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008880:	623a      	str	r2, [r7, #32]
 8008882:	61fb      	str	r3, [r7, #28]
 8008884:	69f9      	ldr	r1, [r7, #28]
 8008886:	6a3a      	ldr	r2, [r7, #32]
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e5      	bne.n	8008860 <UART_WaitOnFlagUntilTimeout+0x10e>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2220      	movs	r2, #32
 8008898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2220      	movs	r2, #32
 80088a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2220      	movs	r2, #32
 80088a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80088b4:	2303      	movs	r3, #3
 80088b6:	e010      	b.n	80088da <UART_WaitOnFlagUntilTimeout+0x188>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	69da      	ldr	r2, [r3, #28]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	4013      	ands	r3, r2
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	bf0c      	ite	eq
 80088c8:	2301      	moveq	r3, #1
 80088ca:	2300      	movne	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	461a      	mov	r2, r3
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	f43f af46 	beq.w	8008764 <UART_WaitOnFlagUntilTimeout+0x12>
 80088d8:	2300      	movs	r3, #0
 80088da:	4618      	mov	r0, r3
 80088dc:	3770      	adds	r7, #112	; 0x70
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <HAL_UARTEx_DisableFifoMode>:
 80088e2:	b480      	push	{r7}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e027      	b.n	8008948 <HAL_UARTEx_DisableFifoMode+0x66>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2224      	movs	r2, #36	; 0x24
 8008904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0201 	bic.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	665a      	str	r2, [r3, #100]	; 0x64
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008946:	2300      	movs	r3, #0
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_UARTEx_SetTxFifoThreshold>:
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008964:	2b01      	cmp	r3, #1
 8008966:	d101      	bne.n	800896c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008968:	2302      	movs	r3, #2
 800896a:	e02d      	b.n	80089c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2224      	movs	r2, #36	; 0x24
 8008978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 0201 	bic.w	r2, r2, #1
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	609a      	str	r2, [r3, #8]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f84f 	bl	8008a4c <UARTEx_SetNbDataToProcess>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80089c6:	2300      	movs	r3, #0
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_UARTEx_SetRxFifoThreshold>:
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d101      	bne.n	80089e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089e4:	2302      	movs	r3, #2
 80089e6:	e02d      	b.n	8008a44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2224      	movs	r2, #36	; 0x24
 80089f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0201 	bic.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	609a      	str	r2, [r3, #8]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f811 	bl	8008a4c <UARTEx_SetNbDataToProcess>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008a42:	2300      	movs	r3, #0
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <UARTEx_SetNbDataToProcess>:
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d108      	bne.n	8008a6e <UARTEx_SetNbDataToProcess+0x22>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8008a6c:	e031      	b.n	8008ad2 <UARTEx_SetNbDataToProcess+0x86>
 8008a6e:	2308      	movs	r3, #8
 8008a70:	73fb      	strb	r3, [r7, #15]
 8008a72:	2308      	movs	r3, #8
 8008a74:	73bb      	strb	r3, [r7, #14]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	0e5b      	lsrs	r3, r3, #25
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 0307 	and.w	r3, r3, #7
 8008a84:	737b      	strb	r3, [r7, #13]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	0f5b      	lsrs	r3, r3, #29
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	733b      	strb	r3, [r7, #12]
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	7b3a      	ldrb	r2, [r7, #12]
 8008a9a:	4911      	ldr	r1, [pc, #68]	; (8008ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8008a9c:	5c8a      	ldrb	r2, [r1, r2]
 8008a9e:	fb02 f303 	mul.w	r3, r2, r3
 8008aa2:	7b3a      	ldrb	r2, [r7, #12]
 8008aa4:	490f      	ldr	r1, [pc, #60]	; (8008ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8008aa6:	5c8a      	ldrb	r2, [r1, r2]
 8008aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	7b7a      	ldrb	r2, [r7, #13]
 8008ab8:	4909      	ldr	r1, [pc, #36]	; (8008ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8008aba:	5c8a      	ldrb	r2, [r1, r2]
 8008abc:	fb02 f303 	mul.w	r3, r2, r3
 8008ac0:	7b7a      	ldrb	r2, [r7, #13]
 8008ac2:	4908      	ldr	r1, [pc, #32]	; (8008ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8008ac4:	5c8a      	ldrb	r2, [r1, r2]
 8008ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	080093ac 	.word	0x080093ac
 8008ae4:	080093b4 	.word	0x080093b4

08008ae8 <memset>:
 8008ae8:	4402      	add	r2, r0
 8008aea:	4603      	mov	r3, r0
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d100      	bne.n	8008af2 <memset+0xa>
 8008af0:	4770      	bx	lr
 8008af2:	f803 1b01 	strb.w	r1, [r3], #1
 8008af6:	e7f9      	b.n	8008aec <memset+0x4>

08008af8 <__errno>:
 8008af8:	4b01      	ldr	r3, [pc, #4]	; (8008b00 <__errno+0x8>)
 8008afa:	6818      	ldr	r0, [r3, #0]
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	20000088 	.word	0x20000088

08008b04 <__libc_init_array>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	4d0d      	ldr	r5, [pc, #52]	; (8008b3c <__libc_init_array+0x38>)
 8008b08:	4c0d      	ldr	r4, [pc, #52]	; (8008b40 <__libc_init_array+0x3c>)
 8008b0a:	1b64      	subs	r4, r4, r5
 8008b0c:	10a4      	asrs	r4, r4, #2
 8008b0e:	2600      	movs	r6, #0
 8008b10:	42a6      	cmp	r6, r4
 8008b12:	d109      	bne.n	8008b28 <__libc_init_array+0x24>
 8008b14:	4d0b      	ldr	r5, [pc, #44]	; (8008b44 <__libc_init_array+0x40>)
 8008b16:	4c0c      	ldr	r4, [pc, #48]	; (8008b48 <__libc_init_array+0x44>)
 8008b18:	f000 fa1c 	bl	8008f54 <_init>
 8008b1c:	1b64      	subs	r4, r4, r5
 8008b1e:	10a4      	asrs	r4, r4, #2
 8008b20:	2600      	movs	r6, #0
 8008b22:	42a6      	cmp	r6, r4
 8008b24:	d105      	bne.n	8008b32 <__libc_init_array+0x2e>
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2c:	4798      	blx	r3
 8008b2e:	3601      	adds	r6, #1
 8008b30:	e7ee      	b.n	8008b10 <__libc_init_array+0xc>
 8008b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b36:	4798      	blx	r3
 8008b38:	3601      	adds	r6, #1
 8008b3a:	e7f2      	b.n	8008b22 <__libc_init_array+0x1e>
 8008b3c:	080093c8 	.word	0x080093c8
 8008b40:	080093c8 	.word	0x080093c8
 8008b44:	080093c8 	.word	0x080093c8
 8008b48:	080093cc 	.word	0x080093cc
 8008b4c:	00000000 	.word	0x00000000

08008b50 <log>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	ed2d 8b02 	vpush	{d8}
 8008b56:	ec55 4b10 	vmov	r4, r5, d0
 8008b5a:	f000 f841 	bl	8008be0 <__ieee754_log>
 8008b5e:	4622      	mov	r2, r4
 8008b60:	462b      	mov	r3, r5
 8008b62:	4620      	mov	r0, r4
 8008b64:	4629      	mov	r1, r5
 8008b66:	eeb0 8a40 	vmov.f32	s16, s0
 8008b6a:	eef0 8a60 	vmov.f32	s17, s1
 8008b6e:	f7f7 ffa9 	bl	8000ac4 <__aeabi_dcmpun>
 8008b72:	b998      	cbnz	r0, 8008b9c <log+0x4c>
 8008b74:	2200      	movs	r2, #0
 8008b76:	2300      	movs	r3, #0
 8008b78:	4620      	mov	r0, r4
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	f7f7 ff98 	bl	8000ab0 <__aeabi_dcmpgt>
 8008b80:	b960      	cbnz	r0, 8008b9c <log+0x4c>
 8008b82:	2200      	movs	r2, #0
 8008b84:	2300      	movs	r3, #0
 8008b86:	4620      	mov	r0, r4
 8008b88:	4629      	mov	r1, r5
 8008b8a:	f7f7 ff69 	bl	8000a60 <__aeabi_dcmpeq>
 8008b8e:	b160      	cbz	r0, 8008baa <log+0x5a>
 8008b90:	f7ff ffb2 	bl	8008af8 <__errno>
 8008b94:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8008bc0 <log+0x70>
 8008b98:	2322      	movs	r3, #34	; 0x22
 8008b9a:	6003      	str	r3, [r0, #0]
 8008b9c:	eeb0 0a48 	vmov.f32	s0, s16
 8008ba0:	eef0 0a68 	vmov.f32	s1, s17
 8008ba4:	ecbd 8b02 	vpop	{d8}
 8008ba8:	bd38      	pop	{r3, r4, r5, pc}
 8008baa:	f7ff ffa5 	bl	8008af8 <__errno>
 8008bae:	ecbd 8b02 	vpop	{d8}
 8008bb2:	2321      	movs	r3, #33	; 0x21
 8008bb4:	6003      	str	r3, [r0, #0]
 8008bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bba:	4803      	ldr	r0, [pc, #12]	; (8008bc8 <log+0x78>)
 8008bbc:	f000 b808 	b.w	8008bd0 <nan>
 8008bc0:	00000000 	.word	0x00000000
 8008bc4:	fff00000 	.word	0xfff00000
 8008bc8:	080093bc 	.word	0x080093bc
 8008bcc:	00000000 	.word	0x00000000

08008bd0 <nan>:
 8008bd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008bd8 <nan+0x8>
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	00000000 	.word	0x00000000
 8008bdc:	7ff80000 	.word	0x7ff80000

08008be0 <__ieee754_log>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	ec51 0b10 	vmov	r0, r1, d0
 8008be8:	ed2d 8b04 	vpush	{d8-d9}
 8008bec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008bf0:	b083      	sub	sp, #12
 8008bf2:	460d      	mov	r5, r1
 8008bf4:	da29      	bge.n	8008c4a <__ieee754_log+0x6a>
 8008bf6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008bfa:	4303      	orrs	r3, r0
 8008bfc:	ee10 2a10 	vmov	r2, s0
 8008c00:	d10c      	bne.n	8008c1c <__ieee754_log+0x3c>
 8008c02:	49cf      	ldr	r1, [pc, #828]	; (8008f40 <__ieee754_log+0x360>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	2300      	movs	r3, #0
 8008c08:	2000      	movs	r0, #0
 8008c0a:	f7f7 fdeb 	bl	80007e4 <__aeabi_ddiv>
 8008c0e:	ec41 0b10 	vmov	d0, r0, r1
 8008c12:	b003      	add	sp, #12
 8008c14:	ecbd 8b04 	vpop	{d8-d9}
 8008c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1c:	2900      	cmp	r1, #0
 8008c1e:	da05      	bge.n	8008c2c <__ieee754_log+0x4c>
 8008c20:	460b      	mov	r3, r1
 8008c22:	f7f7 fafd 	bl	8000220 <__aeabi_dsub>
 8008c26:	2200      	movs	r2, #0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e7ee      	b.n	8008c0a <__ieee754_log+0x2a>
 8008c2c:	4bc5      	ldr	r3, [pc, #788]	; (8008f44 <__ieee754_log+0x364>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f7f7 fcae 	bl	8000590 <__aeabi_dmul>
 8008c34:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008c38:	460d      	mov	r5, r1
 8008c3a:	4ac3      	ldr	r2, [pc, #780]	; (8008f48 <__ieee754_log+0x368>)
 8008c3c:	4295      	cmp	r5, r2
 8008c3e:	dd06      	ble.n	8008c4e <__ieee754_log+0x6e>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	f7f7 faee 	bl	8000224 <__adddf3>
 8008c48:	e7e1      	b.n	8008c0e <__ieee754_log+0x2e>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e7f5      	b.n	8008c3a <__ieee754_log+0x5a>
 8008c4e:	152c      	asrs	r4, r5, #20
 8008c50:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008c54:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008c58:	441c      	add	r4, r3
 8008c5a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008c5e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c66:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008c6a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008c6e:	ea42 0105 	orr.w	r1, r2, r5
 8008c72:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008c76:	2200      	movs	r2, #0
 8008c78:	4bb4      	ldr	r3, [pc, #720]	; (8008f4c <__ieee754_log+0x36c>)
 8008c7a:	f7f7 fad1 	bl	8000220 <__aeabi_dsub>
 8008c7e:	1cab      	adds	r3, r5, #2
 8008c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	4682      	mov	sl, r0
 8008c88:	468b      	mov	fp, r1
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	dc53      	bgt.n	8008d38 <__ieee754_log+0x158>
 8008c90:	2300      	movs	r3, #0
 8008c92:	f7f7 fee5 	bl	8000a60 <__aeabi_dcmpeq>
 8008c96:	b1d0      	cbz	r0, 8008cce <__ieee754_log+0xee>
 8008c98:	2c00      	cmp	r4, #0
 8008c9a:	f000 8122 	beq.w	8008ee2 <__ieee754_log+0x302>
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f7f7 fc0c 	bl	80004bc <__aeabi_i2d>
 8008ca4:	a390      	add	r3, pc, #576	; (adr r3, 8008ee8 <__ieee754_log+0x308>)
 8008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008caa:	4606      	mov	r6, r0
 8008cac:	460f      	mov	r7, r1
 8008cae:	f7f7 fc6f 	bl	8000590 <__aeabi_dmul>
 8008cb2:	a38f      	add	r3, pc, #572	; (adr r3, 8008ef0 <__ieee754_log+0x310>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	4604      	mov	r4, r0
 8008cba:	460d      	mov	r5, r1
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	f7f7 fc66 	bl	8000590 <__aeabi_dmul>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4620      	mov	r0, r4
 8008cca:	4629      	mov	r1, r5
 8008ccc:	e7ba      	b.n	8008c44 <__ieee754_log+0x64>
 8008cce:	a38a      	add	r3, pc, #552	; (adr r3, 8008ef8 <__ieee754_log+0x318>)
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	4650      	mov	r0, sl
 8008cd6:	4659      	mov	r1, fp
 8008cd8:	f7f7 fc5a 	bl	8000590 <__aeabi_dmul>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	499b      	ldr	r1, [pc, #620]	; (8008f50 <__ieee754_log+0x370>)
 8008ce4:	f7f7 fa9c 	bl	8000220 <__aeabi_dsub>
 8008ce8:	4652      	mov	r2, sl
 8008cea:	4606      	mov	r6, r0
 8008cec:	460f      	mov	r7, r1
 8008cee:	465b      	mov	r3, fp
 8008cf0:	4650      	mov	r0, sl
 8008cf2:	4659      	mov	r1, fp
 8008cf4:	f7f7 fc4c 	bl	8000590 <__aeabi_dmul>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	4639      	mov	r1, r7
 8008d00:	f7f7 fc46 	bl	8000590 <__aeabi_dmul>
 8008d04:	4606      	mov	r6, r0
 8008d06:	460f      	mov	r7, r1
 8008d08:	b914      	cbnz	r4, 8008d10 <__ieee754_log+0x130>
 8008d0a:	4632      	mov	r2, r6
 8008d0c:	463b      	mov	r3, r7
 8008d0e:	e0a2      	b.n	8008e56 <__ieee754_log+0x276>
 8008d10:	4620      	mov	r0, r4
 8008d12:	f7f7 fbd3 	bl	80004bc <__aeabi_i2d>
 8008d16:	a374      	add	r3, pc, #464	; (adr r3, 8008ee8 <__ieee754_log+0x308>)
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	4689      	mov	r9, r1
 8008d20:	f7f7 fc36 	bl	8000590 <__aeabi_dmul>
 8008d24:	a372      	add	r3, pc, #456	; (adr r3, 8008ef0 <__ieee754_log+0x310>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	460d      	mov	r5, r1
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4649      	mov	r1, r9
 8008d32:	f7f7 fc2d 	bl	8000590 <__aeabi_dmul>
 8008d36:	e0a7      	b.n	8008e88 <__ieee754_log+0x2a8>
 8008d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d3c:	f7f7 fa72 	bl	8000224 <__adddf3>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4650      	mov	r0, sl
 8008d46:	4659      	mov	r1, fp
 8008d48:	f7f7 fd4c 	bl	80007e4 <__aeabi_ddiv>
 8008d4c:	ec41 0b18 	vmov	d8, r0, r1
 8008d50:	4620      	mov	r0, r4
 8008d52:	f7f7 fbb3 	bl	80004bc <__aeabi_i2d>
 8008d56:	ec53 2b18 	vmov	r2, r3, d8
 8008d5a:	ec41 0b19 	vmov	d9, r0, r1
 8008d5e:	ec51 0b18 	vmov	r0, r1, d8
 8008d62:	f7f7 fc15 	bl	8000590 <__aeabi_dmul>
 8008d66:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008d6a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	4680      	mov	r8, r0
 8008d76:	4689      	mov	r9, r1
 8008d78:	f7f7 fc0a 	bl	8000590 <__aeabi_dmul>
 8008d7c:	a360      	add	r3, pc, #384	; (adr r3, 8008f00 <__ieee754_log+0x320>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	f7f7 fc03 	bl	8000590 <__aeabi_dmul>
 8008d8a:	a35f      	add	r3, pc, #380	; (adr r3, 8008f08 <__ieee754_log+0x328>)
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	f7f7 fa48 	bl	8000224 <__adddf3>
 8008d94:	4632      	mov	r2, r6
 8008d96:	463b      	mov	r3, r7
 8008d98:	f7f7 fbfa 	bl	8000590 <__aeabi_dmul>
 8008d9c:	a35c      	add	r3, pc, #368	; (adr r3, 8008f10 <__ieee754_log+0x330>)
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	f7f7 fa3f 	bl	8000224 <__adddf3>
 8008da6:	4632      	mov	r2, r6
 8008da8:	463b      	mov	r3, r7
 8008daa:	f7f7 fbf1 	bl	8000590 <__aeabi_dmul>
 8008dae:	a35a      	add	r3, pc, #360	; (adr r3, 8008f18 <__ieee754_log+0x338>)
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	f7f7 fa36 	bl	8000224 <__adddf3>
 8008db8:	4642      	mov	r2, r8
 8008dba:	464b      	mov	r3, r9
 8008dbc:	f7f7 fbe8 	bl	8000590 <__aeabi_dmul>
 8008dc0:	a357      	add	r3, pc, #348	; (adr r3, 8008f20 <__ieee754_log+0x340>)
 8008dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc6:	4680      	mov	r8, r0
 8008dc8:	4689      	mov	r9, r1
 8008dca:	4630      	mov	r0, r6
 8008dcc:	4639      	mov	r1, r7
 8008dce:	f7f7 fbdf 	bl	8000590 <__aeabi_dmul>
 8008dd2:	a355      	add	r3, pc, #340	; (adr r3, 8008f28 <__ieee754_log+0x348>)
 8008dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd8:	f7f7 fa24 	bl	8000224 <__adddf3>
 8008ddc:	4632      	mov	r2, r6
 8008dde:	463b      	mov	r3, r7
 8008de0:	f7f7 fbd6 	bl	8000590 <__aeabi_dmul>
 8008de4:	a352      	add	r3, pc, #328	; (adr r3, 8008f30 <__ieee754_log+0x350>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7f7 fa1b 	bl	8000224 <__adddf3>
 8008dee:	4632      	mov	r2, r6
 8008df0:	463b      	mov	r3, r7
 8008df2:	f7f7 fbcd 	bl	8000590 <__aeabi_dmul>
 8008df6:	460b      	mov	r3, r1
 8008df8:	4602      	mov	r2, r0
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	f7f7 fa11 	bl	8000224 <__adddf3>
 8008e02:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008e06:	9b01      	ldr	r3, [sp, #4]
 8008e08:	3551      	adds	r5, #81	; 0x51
 8008e0a:	431d      	orrs	r5, r3
 8008e0c:	2d00      	cmp	r5, #0
 8008e0e:	4680      	mov	r8, r0
 8008e10:	4689      	mov	r9, r1
 8008e12:	dd48      	ble.n	8008ea6 <__ieee754_log+0x2c6>
 8008e14:	4b4e      	ldr	r3, [pc, #312]	; (8008f50 <__ieee754_log+0x370>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	4650      	mov	r0, sl
 8008e1a:	4659      	mov	r1, fp
 8008e1c:	f7f7 fbb8 	bl	8000590 <__aeabi_dmul>
 8008e20:	4652      	mov	r2, sl
 8008e22:	465b      	mov	r3, fp
 8008e24:	f7f7 fbb4 	bl	8000590 <__aeabi_dmul>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	460f      	mov	r7, r1
 8008e30:	4640      	mov	r0, r8
 8008e32:	4649      	mov	r1, r9
 8008e34:	f7f7 f9f6 	bl	8000224 <__adddf3>
 8008e38:	ec53 2b18 	vmov	r2, r3, d8
 8008e3c:	f7f7 fba8 	bl	8000590 <__aeabi_dmul>
 8008e40:	4680      	mov	r8, r0
 8008e42:	4689      	mov	r9, r1
 8008e44:	b964      	cbnz	r4, 8008e60 <__ieee754_log+0x280>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	f7f7 f9e7 	bl	8000220 <__aeabi_dsub>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4650      	mov	r0, sl
 8008e58:	4659      	mov	r1, fp
 8008e5a:	f7f7 f9e1 	bl	8000220 <__aeabi_dsub>
 8008e5e:	e6d6      	b.n	8008c0e <__ieee754_log+0x2e>
 8008e60:	a321      	add	r3, pc, #132	; (adr r3, 8008ee8 <__ieee754_log+0x308>)
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	ec51 0b19 	vmov	r0, r1, d9
 8008e6a:	f7f7 fb91 	bl	8000590 <__aeabi_dmul>
 8008e6e:	a320      	add	r3, pc, #128	; (adr r3, 8008ef0 <__ieee754_log+0x310>)
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	4604      	mov	r4, r0
 8008e76:	460d      	mov	r5, r1
 8008e78:	ec51 0b19 	vmov	r0, r1, d9
 8008e7c:	f7f7 fb88 	bl	8000590 <__aeabi_dmul>
 8008e80:	4642      	mov	r2, r8
 8008e82:	464b      	mov	r3, r9
 8008e84:	f7f7 f9ce 	bl	8000224 <__adddf3>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	4639      	mov	r1, r7
 8008e90:	f7f7 f9c6 	bl	8000220 <__aeabi_dsub>
 8008e94:	4652      	mov	r2, sl
 8008e96:	465b      	mov	r3, fp
 8008e98:	f7f7 f9c2 	bl	8000220 <__aeabi_dsub>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	e7d9      	b.n	8008e5a <__ieee754_log+0x27a>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4650      	mov	r0, sl
 8008eac:	4659      	mov	r1, fp
 8008eae:	f7f7 f9b7 	bl	8000220 <__aeabi_dsub>
 8008eb2:	ec53 2b18 	vmov	r2, r3, d8
 8008eb6:	f7f7 fb6b 	bl	8000590 <__aeabi_dmul>
 8008eba:	4606      	mov	r6, r0
 8008ebc:	460f      	mov	r7, r1
 8008ebe:	2c00      	cmp	r4, #0
 8008ec0:	f43f af23 	beq.w	8008d0a <__ieee754_log+0x12a>
 8008ec4:	a308      	add	r3, pc, #32	; (adr r3, 8008ee8 <__ieee754_log+0x308>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	ec51 0b19 	vmov	r0, r1, d9
 8008ece:	f7f7 fb5f 	bl	8000590 <__aeabi_dmul>
 8008ed2:	a307      	add	r3, pc, #28	; (adr r3, 8008ef0 <__ieee754_log+0x310>)
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	4604      	mov	r4, r0
 8008eda:	460d      	mov	r5, r1
 8008edc:	ec51 0b19 	vmov	r0, r1, d9
 8008ee0:	e727      	b.n	8008d32 <__ieee754_log+0x152>
 8008ee2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8008f38 <__ieee754_log+0x358>
 8008ee6:	e694      	b.n	8008c12 <__ieee754_log+0x32>
 8008ee8:	fee00000 	.word	0xfee00000
 8008eec:	3fe62e42 	.word	0x3fe62e42
 8008ef0:	35793c76 	.word	0x35793c76
 8008ef4:	3dea39ef 	.word	0x3dea39ef
 8008ef8:	55555555 	.word	0x55555555
 8008efc:	3fd55555 	.word	0x3fd55555
 8008f00:	df3e5244 	.word	0xdf3e5244
 8008f04:	3fc2f112 	.word	0x3fc2f112
 8008f08:	96cb03de 	.word	0x96cb03de
 8008f0c:	3fc74664 	.word	0x3fc74664
 8008f10:	94229359 	.word	0x94229359
 8008f14:	3fd24924 	.word	0x3fd24924
 8008f18:	55555593 	.word	0x55555593
 8008f1c:	3fe55555 	.word	0x3fe55555
 8008f20:	d078c69f 	.word	0xd078c69f
 8008f24:	3fc39a09 	.word	0x3fc39a09
 8008f28:	1d8e78af 	.word	0x1d8e78af
 8008f2c:	3fcc71c5 	.word	0x3fcc71c5
 8008f30:	9997fa04 	.word	0x9997fa04
 8008f34:	3fd99999 	.word	0x3fd99999
	...
 8008f40:	c3500000 	.word	0xc3500000
 8008f44:	43500000 	.word	0x43500000
 8008f48:	7fefffff 	.word	0x7fefffff
 8008f4c:	3ff00000 	.word	0x3ff00000
 8008f50:	3fe00000 	.word	0x3fe00000

08008f54 <_init>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	bf00      	nop
 8008f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5a:	bc08      	pop	{r3}
 8008f5c:	469e      	mov	lr, r3
 8008f5e:	4770      	bx	lr

08008f60 <_fini>:
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f62:	bf00      	nop
 8008f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f66:	bc08      	pop	{r3}
 8008f68:	469e      	mov	lr, r3
 8008f6a:	4770      	bx	lr
