
dev_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008568  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08008740  08008740  00018740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b94  08008b94  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008b94  08008b94  00018b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b9c  08008b9c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b9c  08008b9c  00018b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ba0  08008ba0  00018ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200000a0  08008c44  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  08008c44  00020718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2fb  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c8  00000000  00000000  0003b3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  0003e698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  0003fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a20  00000000  00000000  00041200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4c3  00000000  00000000  00061c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cef98  00000000  00000000  0007c0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b07b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006230  00000000  00000000  0014b0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a0 	.word	0x200000a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008728 	.word	0x08008728

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a4 	.word	0x200000a4
 8000214:	08008728 	.word	0x08008728

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <WakeIdle>:
#define T_WAKE_MAX		400
#define T_REFUP_MAX		4400
#define T_CYCLE_FAST_MAX	1185	// Measure 12 Cells

void WakeIdle(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000e98:	20ff      	movs	r0, #255	; 0xff
 8000e9a:	f001 f9eb 	bl	8002274 <spi_write_read_byte>
	delay_u(IC_NUM * T_READY);
 8000e9e:	2050      	movs	r0, #80	; 0x50
 8000ea0:	f001 f9b4 	bl	800220c <delay_u>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <WakeUp>:

void WakeUp(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000eac:	20ff      	movs	r0, #255	; 0xff
 8000eae:	f001 f9e1 	bl	8002274 <spi_write_read_byte>
	delay_u(IC_NUM * T_WAKE_MAX);
 8000eb2:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 8000eb6:	f001 f9a9 	bl	800220c <delay_u>

#if ((IC_NUM * T_WAKE_MAX) >= T_IDLE_MIN)
	spi_write_read_byte(0xFF);
	delay_u(IC_NUM * T_READY);
#endif
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <initialize>:
uint8_t ADCV[2]; //!< Cell Voltage conversion command
uint8_t ADAX[2]; //!< GPIO conversion command
uint8_t ADSTAT[2]; //!< STAT conversion command

void initialize(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af02      	add	r7, sp, #8
	init(MD_NORMAL,DCP_DISABLED,CELL_CH_ALL,AUX_CH_ALL,STS_CH_ALL);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f000 f804 	bl	8000edc <init>
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <init>:
				  uint8_t DCP,	//Discharge Permit
				  uint8_t CH,	//Cell Channels to be measured
				  uint8_t CHG,	//GPIO Channels to be measured
				  uint8_t CHST	//Status Channels to be measured
				  )
{
 8000edc:	b490      	push	{r4, r7}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4623      	mov	r3, r4
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71bb      	strb	r3, [r7, #6]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	717b      	strb	r3, [r7, #5]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	713b      	strb	r3, [r7, #4]
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	105b      	asrs	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
	ADCV[0] = md_bits + 0x02;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	3302      	adds	r3, #2
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <init+0xb8>)
 8000f0e:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	01db      	lsls	r3, r3, #7
 8000f14:	73fb      	strb	r3, [r7, #15]
	ADCV[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	797b      	ldrb	r3, [r7, #5]
 8000f24:	4413      	add	r3, r2
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	3360      	adds	r3, #96	; 0x60
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <init+0xb8>)
 8000f2e:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	105b      	asrs	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
	ADAX[0] = md_bits + 0x04;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	3304      	adds	r3, #4
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <init+0xbc>)
 8000f44:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	01db      	lsls	r3, r3, #7
 8000f4a:	73fb      	strb	r3, [r7, #15]
	ADAX[1] = md_bits + 0x60 + CHG;
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3360      	adds	r3, #96	; 0x60
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <init+0xbc>)
 8000f5a:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	105b      	asrs	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
	ADSTAT[0] = md_bits + 0x04;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <init+0xc0>)
 8000f70:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	01db      	lsls	r3, r3, #7
 8000f76:	73fb      	strb	r3, [r7, #15]
	ADSTAT[1] = md_bits + 0x68 + CHST;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	7e3b      	ldrb	r3, [r7, #24]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	3368      	adds	r3, #104	; 0x68
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <init+0xc0>)
 8000f86:	705a      	strb	r2, [r3, #1]
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc90      	pop	{r4, r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200000bc 	.word	0x200000bc
 8000f98:	200000c0 	.word	0x200000c0
 8000f9c:	200000c4 	.word	0x200000c4

08000fa0 <pec15_calc>:

uint16_t pec15_calc(uint8_t len,	//Number of bytes that will be used to calculate a PEC
                    uint8_t *data	//Array of data that will be used to calculate  a PEC
                   )
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder, addr;

  remainder = 16;					//initialize the PEC
 8000fac:	2310      	movs	r3, #16
 8000fae:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	737b      	strb	r3, [r7, #13]
 8000fb4:	e018      	b.n	8000fe8 <pec15_calc+0x48>
  {
    addr = ((remainder>>7)^data[i])&0xff;	//calculate PEC table address
 8000fb6:	89fb      	ldrh	r3, [r7, #14]
 8000fb8:	09db      	lsrs	r3, r3, #7
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	7b7b      	ldrb	r3, [r7, #13]
 8000fbe:	6839      	ldr	r1, [r7, #0]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	817b      	strh	r3, [r7, #10]
    remainder = (remainder<<8)^crc15Table[addr];
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	897b      	ldrh	r3, [r7, #10]
 8000fd6:	490b      	ldr	r1, [pc, #44]	; (8001004 <pec15_calc+0x64>)
 8000fd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	4053      	eors	r3, r2
 8000fe0:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	737b      	strb	r3, [r7, #13]
 8000fe8:	7b7a      	ldrb	r2, [r7, #13]
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d3e2      	bcc.n	8000fb6 <pec15_calc+0x16>
  }
  return(remainder*2);	//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	b29b      	uxth	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	08008740 	.word	0x08008740

08001008 <wrcfg>:

void wrcfg(uint8_t total_ic,
				   uint8_t config[][6]
				  )
{
 8001008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100c:	b089      	sub	sp, #36	; 0x24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	6039      	str	r1, [r7, #0]
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	466b      	mov	r3, sp
 8001018:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 800101a:	2306      	movs	r3, #6
 800101c:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	3304      	adds	r3, #4
 8001026:	76fb      	strb	r3, [r7, #27]

#if DYNAMIC_MEM
	uint8_t *cmd;
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
#else
	uint8_t cmd[CMD_LEN];
 8001028:	7efb      	ldrb	r3, [r7, #27]
 800102a:	3b01      	subs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	7efb      	ldrb	r3, [r7, #27]
 8001030:	2200      	movs	r2, #0
 8001032:	4698      	mov	r8, r3
 8001034:	4691      	mov	r9, r2
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800104a:	7efb      	ldrb	r3, [r7, #27]
 800104c:	2200      	movs	r2, #0
 800104e:	461c      	mov	r4, r3
 8001050:	4615      	mov	r5, r2
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	00eb      	lsls	r3, r5, #3
 800105c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001060:	00e2      	lsls	r2, r4, #3
 8001062:	7efb      	ldrb	r3, [r7, #27]
 8001064:	3307      	adds	r3, #7
 8001066:	08db      	lsrs	r3, r3, #3
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	ebad 0d03 	sub.w	sp, sp, r3
 800106e:	466b      	mov	r3, sp
 8001070:	3300      	adds	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	2201      	movs	r2, #1
 800107e:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x3d;
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	223d      	movs	r2, #61	; 0x3d
 8001084:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6e;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	226e      	movs	r2, #110	; 0x6e
 800108a:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 800108c:	2304      	movs	r3, #4
 800108e:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	77bb      	strb	r3, [r7, #30]
 8001094:	e03c      	b.n	8001110 <wrcfg+0x108>
	{
		/* the last IC on the stack. The first configuration written is */
		/* received by the last IC in the daisy chain */

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 8001096:	2300      	movs	r3, #0
 8001098:	77fb      	strb	r3, [r7, #31]
 800109a:	e012      	b.n	80010c2 <wrcfg+0xba>
		{
			/* current_byte is the byte counter */

			cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 800109c:	7fba      	ldrb	r2, [r7, #30]
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	3b06      	subs	r3, #6
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	18d1      	adds	r1, r2, r3
 80010ac:	7ffa      	ldrb	r2, [r7, #31]
 80010ae:	7f7b      	ldrb	r3, [r7, #29]
 80010b0:	5c89      	ldrb	r1, [r1, r2]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80010b6:	7f7b      	ldrb	r3, [r7, #29]
 80010b8:	3301      	adds	r3, #1
 80010ba:	777b      	strb	r3, [r7, #29]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 80010bc:	7ffb      	ldrb	r3, [r7, #31]
 80010be:	3301      	adds	r3, #1
 80010c0:	77fb      	strb	r3, [r7, #31]
 80010c2:	7ffa      	ldrb	r2, [r7, #31]
 80010c4:	7f3b      	ldrb	r3, [r7, #28]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3e8      	bcc.n	800109c <wrcfg+0x94>
		}
		cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 80010ca:	7fba      	ldrb	r2, [r7, #30]
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	3b06      	subs	r3, #6
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	461a      	mov	r2, r3
 80010dc:	7f3b      	ldrb	r3, [r7, #28]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <pec15_calc>
 80010e6:	4603      	mov	r3, r0
 80010e8:	81fb      	strh	r3, [r7, #14]
		cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	7f7b      	ldrb	r3, [r7, #29]
 80010f2:	b2d1      	uxtb	r1, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	54d1      	strb	r1, [r2, r3]
		cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 80010f8:	7f7b      	ldrb	r3, [r7, #29]
 80010fa:	3301      	adds	r3, #1
 80010fc:	89fa      	ldrh	r2, [r7, #14]
 80010fe:	b2d1      	uxtb	r1, r2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 8001104:	7f7b      	ldrb	r3, [r7, #29]
 8001106:	3302      	adds	r3, #2
 8001108:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 800110a:	7fbb      	ldrb	r3, [r7, #30]
 800110c:	3b01      	subs	r3, #1
 800110e:	77bb      	strb	r3, [r7, #30]
 8001110:	7fbb      	ldrb	r3, [r7, #30]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1bf      	bne.n	8001096 <wrcfg+0x8e>
	}

	uint8_t rx_data;
	WakeIdle();
 8001116:	f7ff febd 	bl	8000e94 <WakeIdle>
	//spi_write_array(CMD_LEN, cmd); //This function causes bad stuff!
	spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 800111a:	7ef8      	ldrb	r0, [r7, #27]
 800111c:	f107 030d 	add.w	r3, r7, #13
 8001120:	2200      	movs	r2, #0
 8001122:	6939      	ldr	r1, [r7, #16]
 8001124:	f001 f8ea 	bl	80022fc <spi_write_then_read_array_ltc>
 8001128:	46b5      	mov	sp, r6

#if DYNAMIC_MEM
	free(cmd);
#endif
}
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001134 <rdcfg>:

int8_t rdcfg(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 8001134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001138:	b089      	sub	sp, #36	; 0x24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	6039      	str	r1, [r7, #0]
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	466b      	mov	r3, sp
 8001144:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 8001146:	2308      	movs	r3, #8
 8001148:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	777b      	strb	r3, [r7, #29]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 800114e:	230c      	movs	r3, #12
 8001150:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 8001152:	7efb      	ldrb	r3, [r7, #27]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	3b01      	subs	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	7efb      	ldrb	r3, [r7, #27]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	461a      	mov	r2, r3
 8001160:	2300      	movs	r3, #0
 8001162:	4690      	mov	r8, r2
 8001164:	4699      	mov	r9, r3
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800117a:	7efb      	ldrb	r3, [r7, #27]
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	461a      	mov	r2, r3
 8001180:	2300      	movs	r3, #0
 8001182:	4614      	mov	r4, r2
 8001184:	461d      	mov	r5, r3
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	00eb      	lsls	r3, r5, #3
 8001190:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001194:	00e2      	lsls	r2, r4, #3
 8001196:	7efb      	ldrb	r3, [r7, #27]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	3307      	adds	r3, #7
 800119c:	08db      	lsrs	r3, r3, #3
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	ebad 0d03 	sub.w	sp, sp, r3
 80011a4:	466b      	mov	r3, sp
 80011a6:	3300      	adds	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 80011aa:	2300      	movs	r3, #0
 80011ac:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x02;
 80011ae:	2302      	movs	r3, #2
 80011b0:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x2b;
 80011b2:	232b      	movs	r3, #43	; 0x2b
 80011b4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = 0x0a;
 80011b6:	230a      	movs	r3, #10
 80011b8:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 80011ba:	f7ff fe6b 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 80011be:	7f3b      	ldrb	r3, [r7, #28]
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	fb03 f202 	mul.w	r2, r3, r2
 80011c6:	f107 0108 	add.w	r1, r7, #8
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	2004      	movs	r0, #4
 80011ce:	f001 f895 	bl	80022fc <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	77bb      	strb	r3, [r7, #30]
 80011d6:	e03a      	b.n	800124e <rdcfg+0x11a>
	{
		// executes for each LTC6804 in the daisy chain and packs the data
		// into the r_config array as well as check the received Config data
		// for any bit errors

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80011d8:	2300      	movs	r3, #0
 80011da:	77fb      	strb	r3, [r7, #31]
 80011dc:	e010      	b.n	8001200 <rdcfg+0xcc>
		{
			r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 80011de:	7ffa      	ldrb	r2, [r7, #31]
 80011e0:	7fbb      	ldrb	r3, [r7, #30]
 80011e2:	7f39      	ldrb	r1, [r7, #28]
 80011e4:	fb01 f303 	mul.w	r3, r1, r3
 80011e8:	18d1      	adds	r1, r2, r3
 80011ea:	7fbb      	ldrb	r3, [r7, #30]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	441a      	add	r2, r3
 80011f2:	7ffb      	ldrb	r3, [r7, #31]
 80011f4:	6938      	ldr	r0, [r7, #16]
 80011f6:	5c41      	ldrb	r1, [r0, r1]
 80011f8:	54d1      	strb	r1, [r2, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80011fa:	7ffb      	ldrb	r3, [r7, #31]
 80011fc:	3301      	adds	r3, #1
 80011fe:	77fb      	strb	r3, [r7, #31]
 8001200:	7ffa      	ldrb	r2, [r7, #31]
 8001202:	7f3b      	ldrb	r3, [r7, #28]
 8001204:	429a      	cmp	r2, r3
 8001206:	d3ea      	bcc.n	80011de <rdcfg+0xaa>
		}

		received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8001208:	7fbb      	ldrb	r3, [r7, #30]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	799b      	ldrb	r3, [r3, #6]
 8001212:	b29b      	uxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b29a      	uxth	r2, r3
 8001218:	7fbb      	ldrb	r3, [r7, #30]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	440b      	add	r3, r1
 8001220:	79db      	ldrb	r3, [r3, #7]
 8001222:	b29b      	uxth	r3, r3
 8001224:	4413      	add	r3, r2
 8001226:	81fb      	strh	r3, [r7, #14]
		data_pec = pec15_calc(6, &r_config[current_ic][0]);
 8001228:	7fbb      	ldrb	r3, [r7, #30]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4619      	mov	r1, r3
 8001232:	2006      	movs	r0, #6
 8001234:	f7ff feb4 	bl	8000fa0 <pec15_calc>
 8001238:	4603      	mov	r3, r0
 800123a:	81bb      	strh	r3, [r7, #12]
		if (received_pec != data_pec)
 800123c:	89fa      	ldrh	r2, [r7, #14]
 800123e:	89bb      	ldrh	r3, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <rdcfg+0x114>
		{
			pec_error = -1;
 8001244:	23ff      	movs	r3, #255	; 0xff
 8001246:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 8001248:	7fbb      	ldrb	r3, [r7, #30]
 800124a:	3301      	adds	r3, #1
 800124c:	77bb      	strb	r3, [r7, #30]
 800124e:	7fba      	ldrb	r2, [r7, #30]
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	429a      	cmp	r2, r3
 8001254:	d3c0      	bcc.n	80011d8 <rdcfg+0xa4>
	}

#if DYNAMIC_MEM
	free(rx_data);
#endif
	return(pec_error);
 8001256:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800125a:	46b5      	mov	sp, r6
}
 800125c:	4618      	mov	r0, r3
 800125e:	3724      	adds	r7, #36	; 0x24
 8001260:	46bd      	mov	sp, r7
 8001262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001266 <wrcfgb>:

void wrcfgb(uint8_t total_ic,
				   uint8_t config[][6]
				  ){
 8001266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	466b      	mov	r3, sp
 8001276:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 8001278:	2306      	movs	r3, #6
 800127a:	773b      	strb	r3, [r7, #28]
		const uint8_t CMD_LEN = 4 + (8 * total_ic);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3304      	adds	r3, #4
 8001284:	76fb      	strb	r3, [r7, #27]

	#if DYNAMIC_MEM
		uint8_t *cmd;
		cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
	#else
		uint8_t cmd[CMD_LEN];
 8001286:	7efb      	ldrb	r3, [r7, #27]
 8001288:	3b01      	subs	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	7efb      	ldrb	r3, [r7, #27]
 800128e:	2200      	movs	r2, #0
 8001290:	4698      	mov	r8, r3
 8001292:	4691      	mov	r9, r2
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012a8:	7efb      	ldrb	r3, [r7, #27]
 80012aa:	2200      	movs	r2, #0
 80012ac:	461c      	mov	r4, r3
 80012ae:	4615      	mov	r5, r2
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	00eb      	lsls	r3, r5, #3
 80012ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012be:	00e2      	lsls	r2, r4, #3
 80012c0:	7efb      	ldrb	r3, [r7, #27]
 80012c2:	3307      	adds	r3, #7
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	ebad 0d03 	sub.w	sp, sp, r3
 80012cc:	466b      	mov	r3, sp
 80012ce:	3300      	adds	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
	#endif

		cmd[0] = 0x00;
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
		cmd[1] = 0x24;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	705a      	strb	r2, [r3, #1]
		//pec15_calc(2, cmd);
		cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 80012de:	6939      	ldr	r1, [r7, #16]
 80012e0:	2002      	movs	r0, #2
 80012e2:	f7ff fe5d 	bl	8000fa0 <pec15_calc>
 80012e6:	4603      	mov	r3, r0
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	709a      	strb	r2, [r3, #2]
		cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 80012f2:	6939      	ldr	r1, [r7, #16]
 80012f4:	2002      	movs	r0, #2
 80012f6:	f7ff fe53 	bl	8000fa0 <pec15_calc>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	70da      	strb	r2, [r3, #3]

		cmd_index = 4;
 8001302:	2304      	movs	r3, #4
 8001304:	777b      	strb	r3, [r7, #29]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	77bb      	strb	r3, [r7, #30]
 800130a:	e03c      	b.n	8001386 <wrcfgb+0x120>
		{
			/* the last IC on the stack. The first configuration written is */
			/* received by the last IC in the daisy chain */

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
 8001310:	e012      	b.n	8001338 <wrcfgb+0xd2>
			{
				/* current_byte is the byte counter */

				cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 8001312:	7fba      	ldrb	r2, [r7, #30]
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	3b06      	subs	r3, #6
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	18d1      	adds	r1, r2, r3
 8001322:	7ffa      	ldrb	r2, [r7, #31]
 8001324:	7f7b      	ldrb	r3, [r7, #29]
 8001326:	5c89      	ldrb	r1, [r1, r2]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	54d1      	strb	r1, [r2, r3]
				cmd_index = cmd_index + 1;
 800132c:	7f7b      	ldrb	r3, [r7, #29]
 800132e:	3301      	adds	r3, #1
 8001330:	777b      	strb	r3, [r7, #29]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	3301      	adds	r3, #1
 8001336:	77fb      	strb	r3, [r7, #31]
 8001338:	7ffa      	ldrb	r2, [r7, #31]
 800133a:	7f3b      	ldrb	r3, [r7, #28]
 800133c:	429a      	cmp	r2, r3
 800133e:	d3e8      	bcc.n	8001312 <wrcfgb+0xac>
			}
			cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 8001340:	7fba      	ldrb	r2, [r7, #30]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	3b06      	subs	r3, #6
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	4413      	add	r3, r2
 8001350:	461a      	mov	r2, r3
 8001352:	7f3b      	ldrb	r3, [r7, #28]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fe22 	bl	8000fa0 <pec15_calc>
 800135c:	4603      	mov	r3, r0
 800135e:	81fb      	strh	r3, [r7, #14]
			cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8001360:	89fb      	ldrh	r3, [r7, #14]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	b29a      	uxth	r2, r3
 8001366:	7f7b      	ldrb	r3, [r7, #29]
 8001368:	b2d1      	uxtb	r1, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	54d1      	strb	r1, [r2, r3]
			cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 800136e:	7f7b      	ldrb	r3, [r7, #29]
 8001370:	3301      	adds	r3, #1
 8001372:	89fa      	ldrh	r2, [r7, #14]
 8001374:	b2d1      	uxtb	r1, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 2;
 800137a:	7f7b      	ldrb	r3, [r7, #29]
 800137c:	3302      	adds	r3, #2
 800137e:	777b      	strb	r3, [r7, #29]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001380:	7fbb      	ldrb	r3, [r7, #30]
 8001382:	3b01      	subs	r3, #1
 8001384:	77bb      	strb	r3, [r7, #30]
 8001386:	7fbb      	ldrb	r3, [r7, #30]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1bf      	bne.n	800130c <wrcfgb+0xa6>
		}

		uint8_t rx_data;

		WakeIdle();
 800138c:	f7ff fd82 	bl	8000e94 <WakeIdle>
		spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 8001390:	7ef8      	ldrb	r0, [r7, #27]
 8001392:	f107 030d 	add.w	r3, r7, #13
 8001396:	2200      	movs	r2, #0
 8001398:	6939      	ldr	r1, [r7, #16]
 800139a:	f000 ffaf 	bl	80022fc <spi_write_then_read_array_ltc>
 800139e:	46b5      	mov	sp, r6
#if DYNAMIC_MEM
	free(cmd);
#endif

}
 80013a0:	bf00      	nop
 80013a2:	3724      	adds	r7, #36	; 0x24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080013aa <rdcfgb>:

int8_t rdcfgb(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 80013aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	466b      	mov	r3, sp
 80013ba:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 80013bc:	2308      	movs	r3, #8
 80013be:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	777b      	strb	r3, [r7, #29]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 80013c4:	230c      	movs	r3, #12
 80013c6:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 80013c8:	7efb      	ldrb	r3, [r7, #27]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	3b01      	subs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	461a      	mov	r2, r3
 80013d6:	2300      	movs	r3, #0
 80013d8:	4690      	mov	r8, r2
 80013da:	4699      	mov	r9, r3
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013f0:	7efb      	ldrb	r3, [r7, #27]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	461a      	mov	r2, r3
 80013f6:	2300      	movs	r3, #0
 80013f8:	4614      	mov	r4, r2
 80013fa:	461d      	mov	r5, r3
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	00eb      	lsls	r3, r5, #3
 8001406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800140a:	00e2      	lsls	r2, r4, #3
 800140c:	7efb      	ldrb	r3, [r7, #27]
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	3307      	adds	r3, #7
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	ebad 0d03 	sub.w	sp, sp, r3
 800141a:	466b      	mov	r3, sp
 800141c:	3300      	adds	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 8001420:	2300      	movs	r3, #0
 8001422:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x26;
 8001424:	2326      	movs	r3, #38	; 0x26
 8001426:	727b      	strb	r3, [r7, #9]
	cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	4619      	mov	r1, r3
 800142e:	2002      	movs	r0, #2
 8001430:	f7ff fdb6 	bl	8000fa0 <pec15_calc>
 8001434:	4603      	mov	r3, r0
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	b29b      	uxth	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4619      	mov	r1, r3
 8001444:	2002      	movs	r0, #2
 8001446:	f7ff fdab 	bl	8000fa0 <pec15_calc>
 800144a:	4603      	mov	r3, r0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001450:	f7ff fd20 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 8001454:	7f3b      	ldrb	r3, [r7, #28]
 8001456:	79fa      	ldrb	r2, [r7, #7]
 8001458:	fb03 f202 	mul.w	r2, r3, r2
 800145c:	f107 0108 	add.w	r1, r7, #8
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2004      	movs	r0, #4
 8001464:	f000 ff4a 	bl	80022fc <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 8001468:	2300      	movs	r3, #0
 800146a:	77bb      	strb	r3, [r7, #30]
 800146c:	e03a      	b.n	80014e4 <rdcfgb+0x13a>
		{
			// executes for each LTC6804 in the daisy chain and packs the data
			// into the r_config array as well as check the received Config data
			// for any bit errors

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800146e:	2300      	movs	r3, #0
 8001470:	77fb      	strb	r3, [r7, #31]
 8001472:	e010      	b.n	8001496 <rdcfgb+0xec>
			{
				r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 8001474:	7ffa      	ldrb	r2, [r7, #31]
 8001476:	7fbb      	ldrb	r3, [r7, #30]
 8001478:	7f39      	ldrb	r1, [r7, #28]
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	18d1      	adds	r1, r2, r3
 8001480:	7fbb      	ldrb	r3, [r7, #30]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	441a      	add	r2, r3
 8001488:	7ffb      	ldrb	r3, [r7, #31]
 800148a:	6938      	ldr	r0, [r7, #16]
 800148c:	5c41      	ldrb	r1, [r0, r1]
 800148e:	54d1      	strb	r1, [r2, r3]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001490:	7ffb      	ldrb	r3, [r7, #31]
 8001492:	3301      	adds	r3, #1
 8001494:	77fb      	strb	r3, [r7, #31]
 8001496:	7ffa      	ldrb	r2, [r7, #31]
 8001498:	7f3b      	ldrb	r3, [r7, #28]
 800149a:	429a      	cmp	r2, r3
 800149c:	d3ea      	bcc.n	8001474 <rdcfgb+0xca>
			}

			received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 800149e:	7fbb      	ldrb	r3, [r7, #30]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	799b      	ldrb	r3, [r3, #6]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	7fbb      	ldrb	r3, [r7, #30]
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	6839      	ldr	r1, [r7, #0]
 80014b4:	440b      	add	r3, r1
 80014b6:	79db      	ldrb	r3, [r3, #7]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	81fb      	strh	r3, [r7, #14]
			data_pec = pec15_calc(6, &r_config[current_ic][0]);
 80014be:	7fbb      	ldrb	r3, [r7, #30]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	2006      	movs	r0, #6
 80014ca:	f7ff fd69 	bl	8000fa0 <pec15_calc>
 80014ce:	4603      	mov	r3, r0
 80014d0:	81bb      	strh	r3, [r7, #12]
			if (received_pec != data_pec)
 80014d2:	89fa      	ldrh	r2, [r7, #14]
 80014d4:	89bb      	ldrh	r3, [r7, #12]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d001      	beq.n	80014de <rdcfgb+0x134>
			{
				pec_error = -1;
 80014da:	23ff      	movs	r3, #255	; 0xff
 80014dc:	777b      	strb	r3, [r7, #29]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80014de:	7fbb      	ldrb	r3, [r7, #30]
 80014e0:	3301      	adds	r3, #1
 80014e2:	77bb      	strb	r3, [r7, #30]
 80014e4:	7fba      	ldrb	r2, [r7, #30]
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d3c0      	bcc.n	800146e <rdcfgb+0xc4>
		}

	#if DYNAMIC_MEM
		free(rx_data);
	#endif
		return(pec_error);
 80014ec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80014f0:	46b5      	mov	sp, r6

}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014fc <rdcv>:

uint8_t rdcv(uint8_t reg,				// Controls which cell voltage register is read back.
                     uint8_t total_ic,			// the number of ICs in the system
                     cell_data_t cell_codes[][18]	// Array of the parsed cell codes
                    )
{
 80014fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001500:	b08b      	sub	sp, #44	; 0x2c
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	603a      	str	r2, [r7, #0]
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	460b      	mov	r3, r1
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	466b      	mov	r3, sp
 8001510:	461e      	mov	r6, r3

	const uint8_t NUM_RX_BYT = 8;
 8001512:	2308      	movs	r3, #8
 8001514:	f887 3020 	strb.w	r3, [r7, #32]
	const uint8_t BYT_IN_REG = 6;
 8001518:	2306      	movs	r3, #6
 800151a:	77fb      	strb	r3, [r7, #31]
	const uint8_t CELL_IN_REG = 3;
 800151c:	2303      	movs	r3, #3
 800151e:	77bb      	strb	r3, [r7, #30]

	uint8_t pec_error = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter=0;	//data counter
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if DYNAMIC_MEM
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 18;
 800152c:	2312      	movs	r3, #18
 800152e:	777b      	strb	r3, [r7, #29]
	uint8_t cell_data[NUM_RX_BYT * max_ic];
 8001530:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001534:	7f7a      	ldrb	r2, [r7, #29]
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001542:	7f7a      	ldrb	r2, [r7, #29]
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	461a      	mov	r2, r3
 800154a:	2300      	movs	r3, #0
 800154c:	4690      	mov	r8, r2
 800154e:	4699      	mov	r9, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800155c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001560:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001564:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001568:	7f7a      	ldrb	r2, [r7, #29]
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	461a      	mov	r2, r3
 8001570:	2300      	movs	r3, #0
 8001572:	4614      	mov	r4, r2
 8001574:	461d      	mov	r5, r3
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	00eb      	lsls	r3, r5, #3
 8001580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001584:	00e2      	lsls	r2, r4, #3
 8001586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800158a:	7f7a      	ldrb	r2, [r7, #29]
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	3307      	adds	r3, #7
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	ebad 0d03 	sub.w	sp, sp, r3
 800159a:	466b      	mov	r3, sp
 800159c:	3300      	adds	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
#endif


	if (reg == 0)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 8088 	bne.w	80016b8 <rdcv+0x1bc>
	{
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 80015a8:	2301      	movs	r3, #1
 80015aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80015ae:	e07d      	b.n	80016ac <rdcv+0x1b0>
		{
			data_counter = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			rdcv_reg(cell_reg, total_ic,cell_data );				 //Reads a single Cell voltage register
 80015b6:	79b9      	ldrb	r1, [r7, #6]
 80015b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f8f6 	bl	80017b0 <rdcv_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80015ca:	e065      	b.n	8001698 <rdcv+0x19c>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015d2:	e02d      	b.n	8001630 <rdcv+0x134>
				{
					// loops once for each of the 3 cell voltage codes in the register

					parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 80015d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015e2:	3301      	adds	r3, #1
 80015e4:	6979      	ldr	r1, [r7, #20]
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	81fb      	strh	r3, [r7, #14]
					// create the parsed cell voltage code
					//cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
					cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)].voltage = parsed_cell;
 80015f2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	461a      	mov	r2, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001608:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800160c:	3a01      	subs	r2, #1
 800160e:	7fb8      	ldrb	r0, [r7, #30]
 8001610:	fb00 f202 	mul.w	r2, r0, r2
 8001614:	440a      	add	r2, r1
 8001616:	89f9      	ldrh	r1, [r7, #14]
 8001618:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 800161c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001620:	3302      	adds	r3, #2
 8001622:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800162a:	3301      	adds	r3, #1
 800162c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001630:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001634:	7fbb      	ldrb	r3, [r7, #30]
 8001636:	429a      	cmp	r2, r3
 8001638:	d3cc      	bcc.n	80015d4 <rdcv+0xd8>
					//must increment by two for each parsed cell code
				}
				received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 800163a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	b29b      	uxth	r3, r3
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b29a      	uxth	r2, r3
 8001648:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800164c:	3301      	adds	r3, #1
 800164e:	6979      	ldr	r1, [r7, #20]
 8001650:	5ccb      	ldrb	r3, [r1, r3]
 8001652:	b29b      	uxth	r3, r3
 8001654:	4413      	add	r3, r2
 8001656:	827b      	strh	r3, [r7, #18]
				//after the 6 cell voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800165c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	441a      	add	r2, r3
 8001668:	7ffb      	ldrb	r3, [r7, #31]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fc97 	bl	8000fa0 <pec15_calc>
 8001672:	4603      	mov	r3, r0
 8001674:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 8001676:	8a7a      	ldrh	r2, [r7, #18]
 8001678:	8a3b      	ldrh	r3, [r7, #16]
 800167a:	429a      	cmp	r2, r3
 800167c:	d002      	beq.n	8001684 <rdcv+0x188>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 800167e:	23ff      	movs	r3, #255	; 0xff
 8001680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					//are detected in the serial data
				}
			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8001684:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001688:	3302      	adds	r3, #2
 800168a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 800168e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001692:	3301      	adds	r3, #1
 8001694:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001698:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800169c:	79bb      	ldrb	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d394      	bcc.n	80015cc <rdcv+0xd0>
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 80016a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016a6:	3301      	adds	r3, #1
 80016a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80016ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016b0:	2b06      	cmp	r3, #6
 80016b2:	f67f af7d 	bls.w	80015b0 <rdcv+0xb4>
 80016b6:	e073      	b.n	80017a0 <rdcv+0x2a4>
		}
	}

	else
	{
		rdcv_reg(reg, total_ic,cell_data);
 80016b8:	79b9      	ldrb	r1, [r7, #6]
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f876 	bl	80017b0 <rdcv_reg>
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80016ca:	e064      	b.n	8001796 <rdcv+0x29a>
		{
			// current_ic is used as the IC counter
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80016d2:	e02c      	b.n	800172e <rdcv+0x232>
			{
				// loops once for each of the 3 cell voltage codes in the register

				parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8); //Each cell code is received as two bytes and is combined to
 80016d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016e2:	3301      	adds	r3, #1
 80016e4:	6979      	ldr	r1, [r7, #20]
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	81fb      	strh	r3, [r7, #14]
				// create the parsed cell voltage code

				//cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
				cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)].voltage = 0x0000FFFF & parsed_cell;
 80016f2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	461a      	mov	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001708:	79fa      	ldrb	r2, [r7, #7]
 800170a:	3a01      	subs	r2, #1
 800170c:	7fb8      	ldrb	r0, [r7, #30]
 800170e:	fb00 f202 	mul.w	r2, r0, r2
 8001712:	440a      	add	r2, r1
 8001714:	89f9      	ldrh	r1, [r7, #14]
 8001716:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter= data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 800171a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800171e:	3302      	adds	r3, #2
 8001720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001724:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001728:	3301      	adds	r3, #1
 800172a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800172e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001732:	7fbb      	ldrb	r3, [r7, #30]
 8001734:	429a      	cmp	r2, r3
 8001736:	d3cd      	bcc.n	80016d4 <rdcv+0x1d8>
				//must increment by two for each parsed cell code
			}
			received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	b29b      	uxth	r3, r3
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b29a      	uxth	r2, r3
 8001746:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800174a:	3301      	adds	r3, #1
 800174c:	6979      	ldr	r1, [r7, #20]
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4413      	add	r3, r2
 8001754:	827b      	strh	r3, [r7, #18]
			//after the 6 cell voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001756:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800175a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	441a      	add	r2, r3
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fc18 	bl	8000fa0 <pec15_calc>
 8001770:	4603      	mov	r3, r0
 8001772:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 8001774:	8a7a      	ldrh	r2, [r7, #18]
 8001776:	8a3b      	ldrh	r3, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d002      	beq.n	8001782 <rdcv+0x286>
			{
				pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 800177c:	23ff      	movs	r3, #255	; 0xff
 800177e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//are detected in the serial data
			}
			data_counter= data_counter + 2;                       //Because the transmitted PEC code is 2 bytes long the data_counter
 8001782:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001786:	3302      	adds	r3, #2
 8001788:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 800178c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001790:	3301      	adds	r3, #1
 8001792:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001796:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800179a:	79bb      	ldrb	r3, [r7, #6]
 800179c:	429a      	cmp	r2, r3
 800179e:	d395      	bcc.n	80016cc <rdcv+0x1d0>
		}
	}
#if DYNAMIC_MEM
	free(cell_data);
#endif
	return(pec_error);
 80017a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a4:	46b5      	mov	sp, r6
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	372c      	adds	r7, #44	; 0x2c
 80017aa:	46bd      	mov	sp, r7
 80017ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080017b0 <rdcv_reg>:
*/
void rdcv_reg(uint8_t reg,			//Determines which cell voltage register is read back
                      uint8_t total_ic,		//the number of ICs in the
                      uint8_t *data			//An array of the unparsed cell codes
                     )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	603a      	str	r2, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	460b      	mov	r3, r1
 80017be:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 80017c0:	2308      	movs	r3, #8
 80017c2:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d104      	bne.n	80017d4 <rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 80017ca:	2304      	movs	r3, #4
 80017cc:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017ce:	2300      	movs	r3, #0
 80017d0:	723b      	strb	r3, [r7, #8]
 80017d2:	e026      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 2)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d104      	bne.n	80017e4 <rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 80017da:	2306      	movs	r3, #6
 80017dc:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	723b      	strb	r3, [r7, #8]
 80017e2:	e01e      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 3)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d104      	bne.n	80017f4 <rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 80017ea:	2308      	movs	r3, #8
 80017ec:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017ee:	2300      	movs	r3, #0
 80017f0:	723b      	strb	r3, [r7, #8]
 80017f2:	e016      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 4)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d104      	bne.n	8001804 <rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 80017fa:	230a      	movs	r3, #10
 80017fc:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017fe:	2300      	movs	r3, #0
 8001800:	723b      	strb	r3, [r7, #8]
 8001802:	e00e      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 5) // LTC6813 - Cell register E
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d104      	bne.n	8001814 <rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 800180a:	2309      	movs	r3, #9
 800180c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800180e:	2300      	movs	r3, #0
 8001810:	723b      	strb	r3, [r7, #8]
 8001812:	e006      	b.n	8001822 <rdcv_reg+0x72>
	}
	else if (reg == 6) // LTC6813 - Cell register F
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2b06      	cmp	r3, #6
 8001818:	d103      	bne.n	8001822 <rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 800181a:	230b      	movs	r3, #11
 800181c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800181e:	2300      	movs	r3, #0
 8001820:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4619      	mov	r1, r3
 8001828:	2002      	movs	r0, #2
 800182a:	f7ff fbb9 	bl	8000fa0 <pec15_calc>
 800182e:	4603      	mov	r3, r0
 8001830:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001832:	89bb      	ldrh	r3, [r7, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800183c:	89bb      	ldrh	r3, [r7, #12]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001842:	f7ff fb27 	bl	8000e94 <WakeIdle>
	WakeIdle();
 8001846:	f7ff fb25 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	79ba      	ldrb	r2, [r7, #6]
 800184e:	fb03 f202 	mul.w	r2, r3, r2
 8001852:	f107 0108 	add.w	r1, r7, #8
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2004      	movs	r0, #4
 800185a:	f000 fd4f 	bl	80022fc <spi_write_then_read_array_ltc>
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <rdaux>:
*/
int8_t rdaux(uint8_t reg,				//Determines which GPIO voltage register is read back.
                     uint8_t total_ic,			//the number of ICs in the system
                     temp_data_t aux_codes[][GPIO_NUM]	//A two dimensional array of the gpio voltage codes.
                    )
{
 8001866:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800186a:	b08d      	sub	sp, #52	; 0x34
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	603a      	str	r2, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	460b      	mov	r3, r1
 8001876:	71bb      	strb	r3, [r7, #6]
 8001878:	466b      	mov	r3, sp
 800187a:	461e      	mov	r6, r3
	const uint8_t NUM_RX_BYT = 8;
 800187c:	2308      	movs	r3, #8
 800187e:	77fb      	strb	r3, [r7, #31]
	const uint8_t BYT_IN_REG = 6;
 8001880:	2306      	movs	r3, #6
 8001882:	77bb      	strb	r3, [r7, #30]
	const uint8_t GPIO_IN_REG = 3;
 8001884:	2303      	movs	r3, #3
 8001886:	777b      	strb	r3, [r7, #29]

	uint8_t data_counter = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int8_t pec_error = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t data_pec;
#if DYNAMIC_MEM
	uint8_t *data;
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 8001894:	230c      	movs	r3, #12
 8001896:	773b      	strb	r3, [r7, #28]
	uint8_t data[NUM_RX_BYT * max_ic];
 8001898:	7ffb      	ldrb	r3, [r7, #31]
 800189a:	7f3a      	ldrb	r2, [r7, #28]
 800189c:	fb02 f303 	mul.w	r3, r2, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	7ffb      	ldrb	r3, [r7, #31]
 80018a6:	7f3a      	ldrb	r2, [r7, #28]
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	2300      	movs	r3, #0
 80018b0:	4690      	mov	r8, r2
 80018b2:	4699      	mov	r9, r3
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018c8:	7ffb      	ldrb	r3, [r7, #31]
 80018ca:	7f3a      	ldrb	r2, [r7, #28]
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	2300      	movs	r3, #0
 80018d4:	4614      	mov	r4, r2
 80018d6:	461d      	mov	r5, r3
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	00eb      	lsls	r3, r5, #3
 80018e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e6:	00e2      	lsls	r2, r4, #3
 80018e8:	7ffb      	ldrb	r3, [r7, #31]
 80018ea:	7f3a      	ldrb	r2, [r7, #28]
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	3307      	adds	r3, #7
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	ebad 0d03 	sub.w	sp, sp, r3
 80018fa:	466b      	mov	r3, sp
 80018fc:	3300      	adds	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
#endif

	if (reg == 0)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 8087 	bne.w	8001a16 <rdaux+0x1b0>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 8001908:	2301      	movs	r3, #1
 800190a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800190e:	e07c      	b.n	8001a0a <rdaux+0x1a4>
		{
			data_counter = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8001916:	79b9      	ldrb	r1, [r7, #6]
 8001918:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f8fa 	bl	8001b18 <rdaux_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 8001924:	2300      	movs	r3, #0
 8001926:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800192a:	e064      	b.n	80019f6 <rdaux+0x190>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 800192c:	2300      	movs	r3, #0
 800192e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001932:	e02d      	b.n	8001990 <rdaux+0x12a>
				{
					// loops once for each of the 3 gpio voltage codes in the register

					parsed_aux = data[data_counter] + (data[data_counter+1]<<8);              //Each gpio codes is received as two bytes and is combined to
 8001934:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	5cd3      	ldrb	r3, [r2, r3]
 800193c:	b29a      	uxth	r2, r3
 800193e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001942:	3301      	adds	r3, #1
 8001944:	6979      	ldr	r1, [r7, #20]
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	b29b      	uxth	r3, r3
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b29b      	uxth	r3, r3
 800194e:	4413      	add	r3, r2
 8001950:	81fb      	strh	r3, [r7, #14]
					// create the parsed gpio voltage code

					//aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
					aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001952:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	461a      	mov	r2, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4413      	add	r3, r2
 8001964:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8001968:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800196c:	3a01      	subs	r2, #1
 800196e:	7f78      	ldrb	r0, [r7, #29]
 8001970:	fb00 f202 	mul.w	r2, r0, r2
 8001974:	440a      	add	r2, r1
 8001976:	89f9      	ldrh	r1, [r7, #14]
 8001978:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
					data_counter=data_counter+2;                        //Because gpio voltage codes are two bytes the data counter
 800197c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001980:	3302      	adds	r3, #2
 8001982:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 8001986:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800198a:	3301      	adds	r3, #1
 800198c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001990:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001994:	7f7b      	ldrb	r3, [r7, #29]
 8001996:	429a      	cmp	r2, r3
 8001998:	d3cc      	bcc.n	8001934 <rdaux+0xce>
					//must increment by two for each parsed gpio voltage code
				}
				received_pec = (data[data_counter]<<8)+ data[data_counter+1];          //The received PEC for the current_ic is transmitted as the 7th and 8th
 800199a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019ac:	3301      	adds	r3, #1
 80019ae:	6979      	ldr	r1, [r7, #20]
 80019b0:	5ccb      	ldrb	r3, [r1, r3]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	827b      	strh	r3, [r7, #18]
				//after the 6 gpio voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 80019b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019bc:	7ffa      	ldrb	r2, [r7, #31]
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	441a      	add	r2, r3
 80019c6:	7fbb      	ldrb	r3, [r7, #30]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fae8 	bl	8000fa0 <pec15_calc>
 80019d0:	4603      	mov	r3, r0
 80019d2:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 80019d4:	8a7a      	ldrh	r2, [r7, #18]
 80019d6:	8a3b      	ldrh	r3, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d002      	beq.n	80019e2 <rdaux+0x17c>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 80019dc:	23ff      	movs	r3, #255	; 0xff
 80019de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					//are detected in the received serial data
				}

				data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 80019e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019e6:	3302      	adds	r3, #2
 80019e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80019ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019f0:	3301      	adds	r3, #1
 80019f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80019f6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d395      	bcc.n	800192c <rdaux+0xc6>
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 8001a00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a04:	3301      	adds	r3, #1
 8001a06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001a0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	f67f af7e 	bls.w	8001910 <rdaux+0xaa>
 8001a14:	e067      	b.n	8001ae6 <rdaux+0x280>
		}

	}
	else
	{
		rdaux_reg(reg, total_ic, data);
 8001a16:	79b9      	ldrb	r1, [r7, #6]
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f87b 	bl	8001b18 <rdaux_reg>
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	e05a      	b.n	8001ade <rdaux+0x278>
		{
			// current_ic is used as an IC counter

			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	e028      	b.n	8001a80 <rdaux+0x21a>
			{
				// once for each aux voltage in the register

				parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));        //Each gpio codes is received as two bytes and is combined to
 8001a2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	6979      	ldr	r1, [r7, #20]
 8001a40:	5ccb      	ldrb	r3, [r1, r3]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	81fb      	strh	r3, [r7, #14]
				// create the parsed gpio voltage code
				//aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
				aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	461a      	mov	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	79fa      	ldrb	r2, [r7, #7]
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	7f79      	ldrb	r1, [r7, #29]
 8001a62:	fb02 f101 	mul.w	r1, r2, r1
 8001a66:	6a3a      	ldr	r2, [r7, #32]
 8001a68:	440a      	add	r2, r1
 8001a6a:	89f9      	ldrh	r1, [r7, #14]
 8001a6c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
				data_counter=data_counter+2;                      //Because gpio voltage codes are two bytes the data counter
 8001a70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a74:	3302      	adds	r3, #2
 8001a76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	7f7b      	ldrb	r3, [r7, #29]
 8001a82:	6a3a      	ldr	r2, [r7, #32]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbd2      	blt.n	8001a2e <rdaux+0x1c8>
				//must increment by two for each parsed gpio voltage code
			}
			received_pec = (data[data_counter]<<8) + data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001a88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	827b      	strh	r3, [r7, #18]
			//after the 6 gpio voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	fb02 f303 	mul.w	r3, r2, r3
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	441a      	add	r2, r3
 8001ab2:	7fbb      	ldrb	r3, [r7, #30]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fa72 	bl	8000fa0 <pec15_calc>
 8001abc:	4603      	mov	r3, r0
 8001abe:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 8001ac0:	8a7a      	ldrh	r2, [r7, #18]
 8001ac2:	8a3b      	ldrh	r3, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d002      	beq.n	8001ace <rdaux+0x268>
			{
				pec_error = -1;                               //The pec_error variable is simply set negative if any PEC errors
 8001ac8:	23ff      	movs	r3, #255	; 0xff
 8001aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				//are detected in the received serial data
			}

			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8001ace:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	3301      	adds	r3, #1
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	79bb      	ldrb	r3, [r7, #6]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	dba0      	blt.n	8001a28 <rdaux+0x1c2>
	}

#if DYNAMIC_MEM
	free(data);
#endif
	return (pec_error);
 8001ae6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001aea:	46b5      	mov	sp, r6
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3734      	adds	r7, #52	; 0x34
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001af6 <adcv_delay>:

	free(data);
	return (pec_error);
}

adcv_delay(void){
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001afa:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8001afe:	f000 fb85 	bl	800220c <delay_u>
}
 8001b02:	bf00      	nop
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <adax_delay>:

void adax_delay(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001b0c:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8001b10:	f000 fb7c 	bl	800220c <delay_u>

}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <rdaux_reg>:
*/
void rdaux_reg(uint8_t reg,			//Determines which GPIO voltage register is read back
                       uint8_t total_ic,	//The number of ICs in the system
                       uint8_t *data		//Array of the unparsed auxiliary codes
                      )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	603a      	str	r2, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	460b      	mov	r3, r1
 8001b26:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001b28:	2308      	movs	r3, #8
 8001b2a:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d104      	bne.n	8001b3c <rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 8001b32:	230c      	movs	r3, #12
 8001b34:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b36:	2300      	movs	r3, #0
 8001b38:	723b      	strb	r3, [r7, #8]
 8001b3a:	e01b      	b.n	8001b74 <rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d104      	bne.n	8001b4c <rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 8001b42:	230e      	movs	r3, #14
 8001b44:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b46:	2300      	movs	r3, #0
 8001b48:	723b      	strb	r3, [r7, #8]
 8001b4a:	e013      	b.n	8001b74 <rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d104      	bne.n	8001b5c <rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8001b52:	230d      	movs	r3, #13
 8001b54:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b56:	2300      	movs	r3, #0
 8001b58:	723b      	strb	r3, [r7, #8]
 8001b5a:	e00b      	b.n	8001b74 <rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d104      	bne.n	8001b6c <rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8001b62:	230f      	movs	r3, #15
 8001b64:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b66:	2300      	movs	r3, #0
 8001b68:	723b      	strb	r3, [r7, #8]
 8001b6a:	e003      	b.n	8001b74 <rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b70:	2300      	movs	r3, #0
 8001b72:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	4619      	mov	r1, r3
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	f7ff fa10 	bl	8000fa0 <pec15_calc>
 8001b80:	4603      	mov	r3, r0
 8001b82:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001b84:	89bb      	ldrh	r3, [r7, #12]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001b8e:	89bb      	ldrh	r3, [r7, #12]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001b94:	f7ff f97e 	bl	8000e94 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	79ba      	ldrb	r2, [r7, #6]
 8001b9c:	fb03 f202 	mul.w	r2, r3, r2
 8001ba0:	f107 0108 	add.w	r1, r7, #8
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2004      	movs	r0, #4
 8001ba8:	f000 fba8 	bl	80022fc <spi_write_then_read_array_ltc>
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <adcv>:

/*!
	\brief Starts cell voltage conversion.
*/
void adcv(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADCV[0];
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <adcv+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <adcv+0x44>)
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADCV);
 8001bc6:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <adcv+0x44>)
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f7ff f9e9 	bl	8000fa0 <pec15_calc>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001be2:	f7ff f957 	bl	8000e94 <WakeIdle>
	spi_write_array(4, cmd);
 8001be6:	463b      	mov	r3, r7
 8001be8:	4619      	mov	r1, r3
 8001bea:	2004      	movs	r0, #4
 8001bec:	f000 fb64 	bl	80022b8 <spi_write_array>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200000bc 	.word	0x200000bc

08001bfc <adax>:

/*!
	\brief Start an GPIO Conversion.
*/
void adax(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADAX[0];
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <adax+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <adax+0x44>)
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADAX);
 8001c0e:	490c      	ldr	r1, [pc, #48]	; (8001c40 <adax+0x44>)
 8001c10:	2002      	movs	r0, #2
 8001c12:	f7ff f9c5 	bl	8000fa0 <pec15_calc>
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001c2a:	f7ff f933 	bl	8000e94 <WakeIdle>
	spi_write_array(4, cmd);
 8001c2e:	463b      	mov	r3, r7
 8001c30:	4619      	mov	r1, r3
 8001c32:	2004      	movs	r0, #4
 8001c34:	f000 fb40 	bl	80022b8 <spi_write_array>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200000c0 	.word	0x200000c0

08001c44 <calc_sum_of_cells>:


}

void calc_sum_of_cells(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	73fb      	strb	r3, [r7, #15]

	uint16_t soc = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	82fb      	strh	r3, [r7, #22]

	for(uint8_t i = 0; i < total_ic; i++){
 8001c56:	2300      	movs	r3, #0
 8001c58:	757b      	strb	r3, [r7, #21]
 8001c5a:	e01e      	b.n	8001c9a <calc_sum_of_cells+0x56>
		for(uint8_t j = 0; j < CELL_NUM; j++){
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	753b      	strb	r3, [r7, #20]
 8001c60:	e015      	b.n	8001c8e <calc_sum_of_cells+0x4a>
			soc += (cell_data[i][j].voltage / 100);
 8001c62:	7d7a      	ldrb	r2, [r7, #21]
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4413      	add	r3, r2
 8001c72:	7d3a      	ldrb	r2, [r7, #20]
 8001c74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <calc_sum_of_cells+0x84>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	8afb      	ldrh	r3, [r7, #22]
 8001c84:	4413      	add	r3, r2
 8001c86:	82fb      	strh	r3, [r7, #22]
		for(uint8_t j = 0; j < CELL_NUM; j++){
 8001c88:	7d3b      	ldrb	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	753b      	strb	r3, [r7, #20]
 8001c8e:	7d3b      	ldrb	r3, [r7, #20]
 8001c90:	2b11      	cmp	r3, #17
 8001c92:	d9e6      	bls.n	8001c62 <calc_sum_of_cells+0x1e>
	for(uint8_t i = 0; i < total_ic; i++){
 8001c94:	7d7b      	ldrb	r3, [r7, #21]
 8001c96:	3301      	adds	r3, #1
 8001c98:	757b      	strb	r3, [r7, #21]
 8001c9a:	7d7a      	ldrb	r2, [r7, #21]
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3dc      	bcc.n	8001c5c <calc_sum_of_cells+0x18>
		}
	}
	status_data->sum_of_cells = (float)soc /100;
 8001ca2:	8afb      	ldrh	r3, [r7, #22]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cac:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001ccc <calc_sum_of_cells+0x88>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001cba:	bf00      	nop
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	51eb851f 	.word	0x51eb851f
 8001ccc:	42c80000 	.word	0x42c80000

08001cd0 <calculate_soc>:

		int32_t power = status_data->IVT_I * (int32_t)voltage;
		status_data->power = power;
}

void calculate_soc(status_data_t *status_data){
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

	//float consumed = status_data->IVT_I * FREQUENCY/3600;

	status_data->soc = 100 - (status_data->IVT_Wh / ACCU_Wh)*100;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <calculate_soc+0x3c>)
 8001cde:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce2:	441a      	add	r2, r3
 8001ce4:	1312      	asrs	r2, r2, #12
 8001ce6:	17db      	asrs	r3, r3, #31
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	3301      	adds	r3, #1
 8001cec:	2264      	movs	r2, #100	; 0x64
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	edc3 7a04 	vstr	s15, [r3, #16]

}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	9ee009ef 	.word	0x9ee009ef

08001d10 <get_minmax_temperature>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][12]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_temperature(uint8_t total_ic, temp_data_t temp_data[][GPIO_NUM], status_data_t *status_data)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	73fb      	strb	r3, [r7, #15]
	int32_t min = temp_data[0][0].temp;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d24:	61fb      	str	r3, [r7, #28]
	int32_t max = temp_data[0][0].temp;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d2c:	61bb      	str	r3, [r7, #24]
	uint8_t min_id = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]
	uint8_t max_id = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0; i < total_ic; i++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	757b      	strb	r3, [r7, #21]
 8001d3a:	e05f      	b.n	8001dfc <get_minmax_temperature+0xec>
	{
		for (uint8_t j = 0; j < GPIO_NUM-7; j++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	753b      	strb	r3, [r7, #20]
 8001d40:	e056      	b.n	8001df0 <get_minmax_temperature+0xe0>
		{

			if (temp_data[i][j].temp > max)
 8001d42:	7d7a      	ldrb	r2, [r7, #21]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	441a      	add	r2, r3
 8001d52:	7d3b      	ldrb	r3, [r7, #20]
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4293      	cmp	r3, r2
 8001d62:	da18      	bge.n	8001d96 <get_minmax_temperature+0x86>
			{

				max = temp_data[i][j].temp;
 8001d64:	7d7a      	ldrb	r2, [r7, #21]
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	441a      	add	r2, r3
 8001d74:	7d3b      	ldrb	r3, [r7, #20]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
				max_id = (i << 4) | (j & 0x0f);
 8001d80:	7d7b      	ldrb	r3, [r7, #21]
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	b25a      	sxtb	r2, r3
 8001d86:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	75bb      	strb	r3, [r7, #22]

			}
			if (temp_data[i][j].temp < min)
 8001d96:	7d7a      	ldrb	r2, [r7, #21]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	461a      	mov	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	441a      	add	r2, r3
 8001da6:	7d3b      	ldrb	r3, [r7, #20]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001db0:	461a      	mov	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	4293      	cmp	r3, r2
 8001db6:	dd18      	ble.n	8001dea <get_minmax_temperature+0xda>
			{

				min = temp_data[i][j].temp;
 8001db8:	7d7a      	ldrb	r2, [r7, #21]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	441a      	add	r2, r3
 8001dc8:	7d3b      	ldrb	r3, [r7, #20]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dd2:	61fb      	str	r3, [r7, #28]
				min_id = (i << 4) | (j & 0x0f);
 8001dd4:	7d7b      	ldrb	r3, [r7, #21]
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	b25a      	sxtb	r2, r3
 8001dda:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	b25b      	sxtb	r3, r3
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b25b      	sxtb	r3, r3
 8001de8:	75fb      	strb	r3, [r7, #23]
		for (uint8_t j = 0; j < GPIO_NUM-7; j++)
 8001dea:	7d3b      	ldrb	r3, [r7, #20]
 8001dec:	3301      	adds	r3, #1
 8001dee:	753b      	strb	r3, [r7, #20]
 8001df0:	7d3b      	ldrb	r3, [r7, #20]
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d9a5      	bls.n	8001d42 <get_minmax_temperature+0x32>
	for (uint8_t i = 0; i < total_ic; i++)
 8001df6:	7d7b      	ldrb	r3, [r7, #21]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	757b      	strb	r3, [r7, #21]
 8001dfc:	7d7a      	ldrb	r2, [r7, #21]
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d39b      	bcc.n	8001d3c <get_minmax_temperature+0x2c>

			}
		}
	}
	status_data->min_temp = min;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	84da      	strh	r2, [r3, #38]	; 0x26
	status_data->max_temp = max;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	b21a      	sxth	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	851a      	strh	r2, [r3, #40]	; 0x28

	status_data->min_temp_id = min_id;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7dfa      	ldrb	r2, [r7, #23]
 8001e18:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	status_data->max_temp_id = max_id;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7dba      	ldrb	r2, [r7, #22]
 8001e20:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8001e24:	bf00      	nop
 8001e26:	3724      	adds	r7, #36	; 0x24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <get_minmax_voltage>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][CELL_NUM]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_voltage(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	73fb      	strb	r3, [r7, #15]
	uint16_t min = cell_data[0][0].voltage;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	82fb      	strh	r3, [r7, #22]
	uint16_t max = cell_data[0][0].voltage;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	82bb      	strh	r3, [r7, #20]
	uint8_t min_id = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	74fb      	strb	r3, [r7, #19]
	uint8_t max_id = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	74bb      	strb	r3, [r7, #18]


	for (uint8_t i = 0; i < total_ic; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	747b      	strb	r3, [r7, #17]
 8001e56:	e064      	b.n	8001f22 <get_minmax_voltage+0xf2>
	{
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	743b      	strb	r3, [r7, #16]
 8001e5c:	e05b      	b.n	8001f16 <get_minmax_voltage+0xe6>
		{
			if (cell_data[i][j].voltage > max)
 8001e5e:	7c7a      	ldrb	r2, [r7, #17]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	7c3a      	ldrb	r2, [r7, #16]
 8001e70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e74:	8aba      	ldrh	r2, [r7, #20]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d216      	bcs.n	8001ea8 <get_minmax_voltage+0x78>
			{
				max = cell_data[i][j].voltage;
 8001e7a:	7c7a      	ldrb	r2, [r7, #17]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	461a      	mov	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4413      	add	r3, r2
 8001e8a:	7c3a      	ldrb	r2, [r7, #16]
 8001e8c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e90:	82bb      	strh	r3, [r7, #20]
				max_id = (i << 4) | (j & 0x0f);
 8001e92:	7c7b      	ldrb	r3, [r7, #17]
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	b25a      	sxtb	r2, r3
 8001e98:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	b25b      	sxtb	r3, r3
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	74bb      	strb	r3, [r7, #18]
			}
			if (cell_data[i][j].voltage < min && cell_data[i][j].voltage > 5000) //ignore cells under .5V
 8001ea8:	7c7a      	ldrb	r2, [r7, #17]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	7c3a      	ldrb	r2, [r7, #16]
 8001eba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ebe:	8afa      	ldrh	r2, [r7, #22]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d925      	bls.n	8001f10 <get_minmax_voltage+0xe0>
 8001ec4:	7c7a      	ldrb	r2, [r7, #17]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	7c3a      	ldrb	r2, [r7, #16]
 8001ed6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d916      	bls.n	8001f10 <get_minmax_voltage+0xe0>
			{
				min = cell_data[i][j].voltage;
 8001ee2:	7c7a      	ldrb	r2, [r7, #17]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	7c3a      	ldrb	r2, [r7, #16]
 8001ef4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ef8:	82fb      	strh	r3, [r7, #22]
				min_id = (i << 4) | (j & 0x0f);
 8001efa:	7c7b      	ldrb	r3, [r7, #17]
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	b25a      	sxtb	r2, r3
 8001f00:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	b25b      	sxtb	r3, r3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	74fb      	strb	r3, [r7, #19]
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001f10:	7c3b      	ldrb	r3, [r7, #16]
 8001f12:	3301      	adds	r3, #1
 8001f14:	743b      	strb	r3, [r7, #16]
 8001f16:	7c3b      	ldrb	r3, [r7, #16]
 8001f18:	2b11      	cmp	r3, #17
 8001f1a:	d9a0      	bls.n	8001e5e <get_minmax_voltage+0x2e>
	for (uint8_t i = 0; i < total_ic; i++)
 8001f1c:	7c7b      	ldrb	r3, [r7, #17]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	747b      	strb	r3, [r7, #17]
 8001f22:	7c7a      	ldrb	r2, [r7, #17]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d396      	bcc.n	8001e58 <get_minmax_voltage+0x28>
			}
		}
	}
	status_data->min_voltage = min;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	8afa      	ldrh	r2, [r7, #22]
 8001f2e:	859a      	strh	r2, [r3, #44]	; 0x2c
	status_data->max_voltage = max;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	8aba      	ldrh	r2, [r7, #20]
 8001f34:	85da      	strh	r2, [r3, #46]	; 0x2e
	status_data->delta = max - min;
 8001f36:	8aba      	ldrh	r2, [r7, #20]
 8001f38:	8afb      	ldrh	r3, [r7, #22]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	849a      	strh	r2, [r3, #36]	; 0x24
	status_data->min_voltage_id = min_id;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7cfa      	ldrb	r2, [r7, #19]
 8001f48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	status_data->max_voltage_id = max_id;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7cba      	ldrb	r2, [r7, #18]
 8001f50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <build_disch_cfg>:




void build_disch_cfg(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], uint8_t tx_config[][6],\
					 status_data_t *status_data, limit_t *limit){
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]
	uint16_t DCCx = 0x0000;
 8001f70:	2300      	movs	r3, #0
 8001f72:	82fb      	strh	r3, [r7, #22]
	//discharge all cells

	for (uint8_t i = 0; i < total_ic; i++){
 8001f74:	2300      	movs	r3, #0
 8001f76:	757b      	strb	r3, [r7, #21]
 8001f78:	e051      	b.n	800201e <build_disch_cfg+0xbe>
		for (uint8_t j = 0; j < 12; j++){
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	753b      	strb	r3, [r7, #20]
 8001f7e:	e02d      	b.n	8001fdc <build_disch_cfg+0x7c>
			if (cell_data[i][j].voltage > (status_data->min_voltage + limit->tolerance)){
 8001f80:	7d7a      	ldrb	r2, [r7, #21]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4413      	add	r3, r2
 8001f90:	7d3a      	ldrb	r2, [r7, #20]
 8001f92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f96:	461a      	mov	r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	8b9b      	ldrh	r3, [r3, #28]
 8001fa2:	440b      	add	r3, r1
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dd0a      	ble.n	8001fbe <build_disch_cfg+0x5e>
				DCCx |= (1<<j);
 8001fa8:	7d3b      	ldrb	r3, [r7, #20]
 8001faa:	2201      	movs	r2, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	b21a      	sxth	r2, r3
 8001fb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	82fb      	strh	r3, [r7, #22]
 8001fbc:	e00b      	b.n	8001fd6 <build_disch_cfg+0x76>
			}
			else{
				DCCx &= ~(1<<j);
 8001fbe:	7d3b      	ldrb	r3, [r7, #20]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	82fb      	strh	r3, [r7, #22]
		for (uint8_t j = 0; j < 12; j++){
 8001fd6:	7d3b      	ldrb	r3, [r7, #20]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	753b      	strb	r3, [r7, #20]
 8001fdc:	7d3b      	ldrb	r3, [r7, #20]
 8001fde:	2b0b      	cmp	r3, #11
 8001fe0:	d9ce      	bls.n	8001f80 <build_disch_cfg+0x20>
			}
		}
		tx_config[i][4] = (DCCx & 0x00ff);
 8001fe2:	7d7a      	ldrb	r2, [r7, #21]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	461a      	mov	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	8afa      	ldrh	r2, [r7, #22]
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	711a      	strb	r2, [r3, #4]
		tx_config[i][5] = ((DCCx >> 8) & 0x0f);
 8001ff8:	8afb      	ldrh	r3, [r7, #22]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	b2d9      	uxtb	r1, r3
 8002000:	7d7a      	ldrb	r2, [r7, #21]
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	461a      	mov	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	f001 020f 	and.w	r2, r1, #15
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < total_ic; i++){
 8002018:	7d7b      	ldrb	r3, [r7, #21]
 800201a:	3301      	adds	r3, #1
 800201c:	757b      	strb	r3, [r7, #21]
 800201e:	7d7a      	ldrb	r2, [r7, #21]
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3a9      	bcc.n	8001f7a <build_disch_cfg+0x1a>
	tx_config[0][2] = 0;
	tx_config[0][3] = 0;
	tx_config[0][4] = 255;
	tx_config[0][5] =15;*/

}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <build_disch_cfgb>:

void build_disch_cfgb(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], uint8_t tx_config[][6],\
status_data_t *status_data, limit_t *limit)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	4603      	mov	r3, r0
 8002042:	73fb      	strb	r3, [r7, #15]
	uint16_t DCCx = 0x0000;
 8002044:	2300      	movs	r3, #0
 8002046:	82fb      	strh	r3, [r7, #22]
		//discharge all cells

	for (uint8_t i = 0; i < total_ic; i++){
 8002048:	2300      	movs	r3, #0
 800204a:	757b      	strb	r3, [r7, #21]
 800204c:	e051      	b.n	80020f2 <build_disch_cfgb+0xbe>
			for (uint8_t j = 12; j < CELL_NUM; j++){
 800204e:	230c      	movs	r3, #12
 8002050:	753b      	strb	r3, [r7, #20]
 8002052:	e02f      	b.n	80020b4 <build_disch_cfgb+0x80>
				if (cell_data[i][j].voltage > (status_data->min_voltage + limit->tolerance)){
 8002054:	7d7a      	ldrb	r2, [r7, #21]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	461a      	mov	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4413      	add	r3, r2
 8002064:	7d3a      	ldrb	r2, [r7, #20]
 8002066:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800206a:	461a      	mov	r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002070:	4619      	mov	r1, r3
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	8b9b      	ldrh	r3, [r3, #28]
 8002076:	440b      	add	r3, r1
 8002078:	429a      	cmp	r2, r3
 800207a:	dd0b      	ble.n	8002094 <build_disch_cfgb+0x60>
					DCCx |= (1<<(j - 12));
 800207c:	7d3b      	ldrb	r3, [r7, #20]
 800207e:	3b0c      	subs	r3, #12
 8002080:	2201      	movs	r2, #1
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	b21a      	sxth	r2, r3
 8002088:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800208c:	4313      	orrs	r3, r2
 800208e:	b21b      	sxth	r3, r3
 8002090:	82fb      	strh	r3, [r7, #22]
 8002092:	e00c      	b.n	80020ae <build_disch_cfgb+0x7a>
				}
				else{
					DCCx &= ~(1<<(j - 12));
 8002094:	7d3b      	ldrb	r3, [r7, #20]
 8002096:	3b0c      	subs	r3, #12
 8002098:	2201      	movs	r2, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	b21b      	sxth	r3, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020a8:	4013      	ands	r3, r2
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	82fb      	strh	r3, [r7, #22]
			for (uint8_t j = 12; j < CELL_NUM; j++){
 80020ae:	7d3b      	ldrb	r3, [r7, #20]
 80020b0:	3301      	adds	r3, #1
 80020b2:	753b      	strb	r3, [r7, #20]
 80020b4:	7d3b      	ldrb	r3, [r7, #20]
 80020b6:	2b11      	cmp	r3, #17
 80020b8:	d9cc      	bls.n	8002054 <build_disch_cfgb+0x20>
				}
			}
			tx_config[i][0] = (DCCx & 0x0f) << 4 ;
 80020ba:	8afb      	ldrh	r3, [r7, #22]
 80020bc:	0119      	lsls	r1, r3, #4
 80020be:	7d7a      	ldrb	r2, [r7, #21]
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	461a      	mov	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	b2ca      	uxtb	r2, r1
 80020d0:	701a      	strb	r2, [r3, #0]
			tx_config[i][1] = (DCCx >> 4);
 80020d2:	8afb      	ldrh	r3, [r7, #22]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	b299      	uxth	r1, r3
 80020d8:	7d7a      	ldrb	r2, [r7, #21]
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	461a      	mov	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4413      	add	r3, r2
 80020e8:	b2ca      	uxtb	r2, r1
 80020ea:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < total_ic; i++){
 80020ec:	7d7b      	ldrb	r3, [r7, #21]
 80020ee:	3301      	adds	r3, #1
 80020f0:	757b      	strb	r3, [r7, #21]
 80020f2:	7d7a      	ldrb	r2, [r7, #21]
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3a9      	bcc.n	800204e <build_disch_cfgb+0x1a>
		}
}
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <CanSend>:
	}

	return offcan;
}

void CanSend(uint8_t *TxData, uint8_t identifier ){
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	70fb      	strb	r3, [r7, #3]

	TxHeader.Identifier = identifier;
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <CanSend+0x30>)
 8002118:	6013      	str	r3, [r2, #0]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4906      	ldr	r1, [pc, #24]	; (8002138 <CanSend+0x30>)
 800211e:	4807      	ldr	r0, [pc, #28]	; (800213c <CanSend+0x34>)
 8002120:	f001 ff84 	bl	800402c <HAL_FDCAN_AddMessageToTxFifoQ>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <CanSend+0x26>
	        // Transmission request Error
		Error_Handler();
 800212a:	f000 fbc7 	bl	80028bc <Error_Handler>
	}

}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000026c 	.word	0x2000026c
 800213c:	200000c8 	.word	0x200000c8

08002140 <ReadCANBusMessage>:

int ReadCANBusMessage(uint32_t messageIdentifier, uint8_t* RxData1)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
    /* Infinite loop to keep trying to read the message */
	uint8_t t = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]

    while(t < 100)
 800214e:	e015      	b.n	800217c <ReadCANBusMessage+0x3c>
    {
    	t++;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	3301      	adds	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
        /* Check if a new message is available in RX FIFO 0 */
        if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData1) == HAL_OK)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	4a0c      	ldr	r2, [pc, #48]	; (800218c <ReadCANBusMessage+0x4c>)
 800215a:	2140      	movs	r1, #64	; 0x40
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <ReadCANBusMessage+0x50>)
 800215e:	f001 ffa9 	bl	80040b4 <HAL_FDCAN_GetRxMessage>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <ReadCANBusMessage+0x3c>
        {
            /* Validate the Identifier */
            if(RxHeader.Identifier == messageIdentifier)
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <ReadCANBusMessage+0x4c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	429a      	cmp	r2, r3
 8002170:	d101      	bne.n	8002176 <ReadCANBusMessage+0x36>
            {
                return 0; // Message successfully read and validated
 8002172:	2300      	movs	r3, #0
 8002174:	e006      	b.n	8002184 <ReadCANBusMessage+0x44>
            }
            delay_u(10);
 8002176:	200a      	movs	r0, #10
 8002178:	f000 f848 	bl	800220c <delay_u>
    while(t < 100)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b63      	cmp	r3, #99	; 0x63
 8002180:	d9e6      	bls.n	8002150 <ReadCANBusMessage+0x10>
        }
        // Else, ignore the error and try again
    }
    return 1;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000290 	.word	0x20000290
 8002190:	200000c8 	.word	0x200000c8

08002194 <Send_Soc>:

}



void Send_Soc(status_data_t *status_data){
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Data[8];

	Tx_Data[0] = (uint8_t)status_data->soc;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	edd3 7a04 	vldr	s15, [r3, #16]
 80021a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021a6:	edc7 7a00 	vstr	s15, [r7]
 80021aa:	783b      	ldrb	r3, [r7, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	723b      	strb	r3, [r7, #8]
	uint16_t buf = status_data->max_voltage;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021b4:	82fb      	strh	r3, [r7, #22]
	uint8_t c1 = buf;
 80021b6:	8afb      	ldrh	r3, [r7, #22]
 80021b8:	757b      	strb	r3, [r7, #21]
	uint8_t c2 = buf >> 8;
 80021ba:	8afb      	ldrh	r3, [r7, #22]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	b29b      	uxth	r3, r3
 80021c0:	753b      	strb	r3, [r7, #20]
	Tx_Data[1] = c1;
 80021c2:	7d7b      	ldrb	r3, [r7, #21]
 80021c4:	727b      	strb	r3, [r7, #9]
	Tx_Data[2] = c2;
 80021c6:	7d3b      	ldrb	r3, [r7, #20]
 80021c8:	72bb      	strb	r3, [r7, #10]
	if(status_data->air_s = true)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Tx_Data[3] = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	72fb      	strb	r3, [r7, #11]


	uint16_t buf1 = (uint16_t)status_data->sum_of_cells;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80021dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e0:	ee17 3a90 	vmov	r3, s15
 80021e4:	827b      	strh	r3, [r7, #18]

	Tx_Data[4]= (uint8_t)(buf1);
 80021e6:	8a7b      	ldrh	r3, [r7, #18]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	733b      	strb	r3, [r7, #12]
	Tx_Data[5]= (uint8_t)(buf1 >> 8);
 80021ec:	8a7b      	ldrh	r3, [r7, #18]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	737b      	strb	r3, [r7, #13]



	CanSend(Tx_Data, CAN_SOC);
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	2197      	movs	r1, #151	; 0x97
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff83 	bl	8002108 <CanSend>

}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <delay_u>:
#include "conf.h"

extern SPI_HandleTypeDef hspi1;


void delay_u(uint32_t us){
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <delay_u+0x58>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a12      	ldr	r2, [pc, #72]	; (8002264 <delay_u+0x58>)
 800221a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800221e:	60d3      	str	r3, [r2, #12]
		    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <delay_u+0x5c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a10      	ldr	r2, [pc, #64]	; (8002268 <delay_u+0x5c>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6013      	str	r3, [r2, #0]
		    // Get the current number of clock cycles
		    uint32_t const startTicks = DWT->CYCCNT;
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <delay_u+0x5c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	60fb      	str	r3, [r7, #12]
		    // Calculate the number of clock cycles for the desired delay
		    uint32_t const delayTicks = (SystemCoreClock / 1000000) * us;
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <delay_u+0x60>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <delay_u+0x64>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	0c9a      	lsrs	r2, r3, #18
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	60bb      	str	r3, [r7, #8]
		    // Wait until the number of clock cycles has elapsed
		    while (DWT->CYCCNT - startTicks < delayTicks);
 8002246:	bf00      	nop
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <delay_u+0x5c>)
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	429a      	cmp	r2, r3
 8002254:	d8f8      	bhi.n	8002248 <delay_u+0x3c>
}
 8002256:	bf00      	nop
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000edf0 	.word	0xe000edf0
 8002268:	e0001000 	.word	0xe0001000
 800226c:	20000030 	.word	0x20000030
 8002270:	431bde83 	.word	0x431bde83

08002274 <spi_write_read_byte>:

void delay_m(uint32_t ms){
	HAL_Delay(ms);
}

uint8_t spi_write_read_byte(uint8_t wbyte){
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af02      	add	r7, sp, #8
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]

	uint8_t rxByte;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2110      	movs	r1, #16
 8002282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002286:	f002 fb41 	bl	800490c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &wbyte, &rxByte, 1, SPI_TIMEOUT);
 800228a:	f107 020f 	add.w	r2, r7, #15
 800228e:	1df9      	adds	r1, r7, #7
 8002290:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2301      	movs	r3, #1
 8002298:	4806      	ldr	r0, [pc, #24]	; (80022b4 <spi_write_read_byte+0x40>)
 800229a:	f003 fe60 	bl	8005f5e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800229e:	2201      	movs	r2, #1
 80022a0:	2110      	movs	r1, #16
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a6:	f002 fb31 	bl	800490c <HAL_GPIO_WritePin>

	return rxByte;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	2000012c 	.word	0x2000012c

080022b8 <spi_write_array>:

uint32_t spi_write_array(uint8_t len, uint8_t *data){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022c4:	2200      	movs	r2, #0
 80022c6:	2110      	movs	r1, #16
 80022c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022cc:	f002 fb1e 	bl	800490c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, len, SPI_TIMEOUT);
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f643 2398 	movw	r3, #15000	; 0x3a98
 80022d8:	6839      	ldr	r1, [r7, #0]
 80022da:	4807      	ldr	r0, [pc, #28]	; (80022f8 <spi_write_array+0x40>)
 80022dc:	f003 fba1 	bl	8005a22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022e0:	2201      	movs	r2, #1
 80022e2:	2110      	movs	r1, #16
 80022e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e8:	f002 fb10 	bl	800490c <HAL_GPIO_WritePin>

	return 0;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000012c 	.word	0x2000012c

080022fc <spi_write_then_read_array_ltc>:

uint32_t spi_write_then_read_array_ltc(uint8_t wlen, uint8_t *wbuffer, uint8_t rlen, uint8_t *rbuffer){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	4603      	mov	r3, r0
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	4613      	mov	r3, r2
 800230c:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2110      	movs	r1, #16
 8002312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002316:	f002 faf9 	bl	800490c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wbuffer, wlen, SPI_TIMEOUT);
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	b29a      	uxth	r2, r3
 800231e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	480a      	ldr	r0, [pc, #40]	; (8002350 <spi_write_then_read_array_ltc+0x54>)
 8002326:	f003 fb7c 	bl	8005a22 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rbuffer, rlen, SPI_TIMEOUT);
 800232a:	7bbb      	ldrb	r3, [r7, #14]
 800232c:	b29a      	uxth	r2, r3
 800232e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4806      	ldr	r0, [pc, #24]	; (8002350 <spi_write_then_read_array_ltc+0x54>)
 8002336:	f003 fce2 	bl	8005cfe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800233a:	2201      	movs	r2, #1
 800233c:	2110      	movs	r1, #16
 800233e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002342:	f002 fae3 	bl	800490c <HAL_GPIO_WritePin>

	return 0;
 8002346:	2300      	movs	r3, #0

}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	2000012c 	.word	0x2000012c

08002354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002358:	f001 faab 	bl	80038b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800235c:	f000 f80d 	bl	800237a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002360:	f000 fa52 	bl	8002808 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002364:	f000 fa04 	bl	8002770 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002368:	f000 f914 	bl	8002594 <MX_SPI1_Init>
  MX_TIM8_Init();
 800236c:	f000 f950 	bl	8002610 <MX_TIM8_Init>
  MX_FDCAN1_Init();
 8002370:	f000 f844 	bl	80023fc <MX_FDCAN1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      // Here we create a FDCAN message

	  operation_main();
 8002374:	f000 faa8 	bl	80028c8 <operation_main>
 8002378:	e7fc      	b.n	8002374 <main+0x20>

0800237a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b094      	sub	sp, #80	; 0x50
 800237e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002380:	f107 0318 	add.w	r3, r7, #24
 8002384:	2238      	movs	r2, #56	; 0x38
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f005 ffbf 	bl	800830c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800239c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80023a0:	f002 facc 	bl	800493c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023a4:	2302      	movs	r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023ae:	2340      	movs	r3, #64	; 0x40
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b6:	f107 0318 	add.w	r3, r7, #24
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fb62 	bl	8004a84 <HAL_RCC_OscConfig>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <SystemClock_Config+0x50>
  {
    Error_Handler();
 80023c6:	f000 fa79 	bl	80028bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ca:	230f      	movs	r3, #15
 80023cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023ce:	2301      	movs	r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2100      	movs	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f002 fe66 	bl	80050b4 <HAL_RCC_ClockConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80023ee:	f000 fa65 	bl	80028bc <Error_Handler>
  }
}
 80023f2:	bf00      	nop
 80023f4:	3750      	adds	r7, #80	; 0x50
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002402:	4b61      	ldr	r3, [pc, #388]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002404:	4a61      	ldr	r2, [pc, #388]	; (800258c <MX_FDCAN1_Init+0x190>)
 8002406:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002408:	4b5f      	ldr	r3, [pc, #380]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 800240a:	2200      	movs	r2, #0
 800240c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800240e:	4b5e      	ldr	r3, [pc, #376]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002414:	4b5c      	ldr	r3, [pc, #368]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800241a:	4b5b      	ldr	r3, [pc, #364]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 800241c:	2201      	movs	r2, #1
 800241e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002420:	4b59      	ldr	r3, [pc, #356]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002422:	2200      	movs	r2, #0
 8002424:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002426:	4b58      	ldr	r3, [pc, #352]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002428:	2200      	movs	r2, #0
 800242a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800242c:	4b56      	ldr	r3, [pc, #344]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 800242e:	2201      	movs	r2, #1
 8002430:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002432:	4b55      	ldr	r3, [pc, #340]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002434:	2201      	movs	r2, #1
 8002436:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8002438:	4b53      	ldr	r3, [pc, #332]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 800243a:	220d      	movs	r2, #13
 800243c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800243e:	4b52      	ldr	r3, [pc, #328]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002440:	2202      	movs	r2, #2
 8002442:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002444:	4b50      	ldr	r3, [pc, #320]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002446:	2201      	movs	r2, #1
 8002448:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800244a:	4b4f      	ldr	r3, [pc, #316]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 800244c:	2201      	movs	r2, #1
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002450:	4b4d      	ldr	r3, [pc, #308]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002452:	2201      	movs	r2, #1
 8002454:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002456:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002458:	2201      	movs	r2, #1
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 800245c:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 800245e:	221c      	movs	r2, #28
 8002460:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002462:	4b49      	ldr	r3, [pc, #292]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002464:	2200      	movs	r2, #0
 8002466:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002468:	4b47      	ldr	r3, [pc, #284]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 800246a:	2200      	movs	r2, #0
 800246c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800246e:	4846      	ldr	r0, [pc, #280]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002470:	f001 fb96 	bl	8003ba0 <HAL_FDCAN_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800247a:	f000 fa1f 	bl	80028bc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef	sFilterConfig;

  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan1, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 800247e:	2201      	movs	r2, #1
 8002480:	2140      	movs	r1, #64	; 0x40
 8002482:	4841      	ldr	r0, [pc, #260]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002484:	f001 fd71 	bl	8003f6a <HAL_FDCAN_ConfigRxFifoOverwrite>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_FDCAN1_Init+0x96>
  	{
  		Error_Handler();
 800248e:	f000 fa15 	bl	80028bc <Error_Handler>
  	}
  	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan1, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8002492:	2201      	movs	r2, #1
 8002494:	2141      	movs	r1, #65	; 0x41
 8002496:	483c      	ldr	r0, [pc, #240]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002498:	f001 fd67 	bl	8003f6a <HAL_FDCAN_ConfigRxFifoOverwrite>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_FDCAN1_Init+0xaa>
  	{
  		Error_Handler();
 80024a2:	f000 fa0b 	bl	80028bc <Error_Handler>
  	}

    //only accept config/request can messages and sync can messages
  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80024a6:	2300      	movs	r3, #0
 80024a8:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIndex = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80024ae:	2302      	movs	r3, #2
 80024b0:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80024b2:	2301      	movs	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterID1 = 1900; //CANID_CONFIG;
 80024b6:	f240 736c 	movw	r3, #1900	; 0x76c
 80024ba:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterID2 = 0x7FF;
 80024bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80024c0:	617b      	str	r3, [r7, #20]
  	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80024c2:	463b      	mov	r3, r7
 80024c4:	4619      	mov	r1, r3
 80024c6:	4830      	ldr	r0, [pc, #192]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 80024c8:	f001 fcc4 	bl	8003e54 <HAL_FDCAN_ConfigFilter>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_FDCAN1_Init+0xda>
  	{
  		Error_Handler();
 80024d2:	f000 f9f3 	bl	80028bc <Error_Handler>
  	}

    // Additional filter configuration for 0x52x messages
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80024d6:	2300      	movs	r3, #0
 80024d8:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80024de:	2302      	movs	r3, #2
 80024e0:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80024e2:	2301      	movs	r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x520;   // Start of the range
 80024e6:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80024ea:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x700;   // Mask for the filter. This will allow IDs 0x520 - 0x52F
 80024ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80024f0:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80024f2:	463b      	mov	r3, r7
 80024f4:	4619      	mov	r1, r3
 80024f6:	4824      	ldr	r0, [pc, #144]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 80024f8:	f001 fcac 	bl	8003e54 <HAL_FDCAN_ConfigFilter>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_FDCAN1_Init+0x10a>
    {
        Error_Handler();
 8002502:	f000 f9db 	bl	80028bc <Error_Handler>
    }

  	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 8002506:	2301      	movs	r3, #1
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2301      	movs	r3, #1
 800250c:	2202      	movs	r2, #2
 800250e:	2102      	movs	r1, #2
 8002510:	481d      	ldr	r0, [pc, #116]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002512:	f001 fcf9 	bl	8003f08 <HAL_FDCAN_ConfigGlobalFilter>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_FDCAN1_Init+0x124>
  	{
  		Error_Handler();
 800251c:	f000 f9ce 	bl	80028bc <Error_Handler>
  	}

  	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8002520:	4819      	ldr	r0, [pc, #100]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002522:	f001 fd5b 	bl	8003fdc <HAL_FDCAN_Start>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_FDCAN1_Init+0x134>
  	{
  		Error_Handler();
 800252c:	f000 f9c6 	bl	80028bc <Error_Handler>
  	}
  	if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002530:	2200      	movs	r2, #0
 8002532:	2101      	movs	r1, #1
 8002534:	4814      	ldr	r0, [pc, #80]	; (8002588 <MX_FDCAN1_Init+0x18c>)
 8002536:	f001 fe97 	bl	8004268 <HAL_FDCAN_ActivateNotification>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_FDCAN1_Init+0x148>
  	{
  		Error_Handler();
 8002540:	f000 f9bc 	bl	80028bc <Error_Handler>
  	}

  	TxHeader.Identifier = 0x123; // Modify this with your identifier
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <MX_FDCAN1_Init+0x194>)
 8002546:	f240 1223 	movw	r2, #291	; 0x123
 800254a:	601a      	str	r2, [r3, #0]
  	TxHeader.IdType = FDCAN_STANDARD_ID;
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <MX_FDCAN1_Init+0x194>)
 800254e:	2200      	movs	r2, #0
 8002550:	605a      	str	r2, [r3, #4]
  	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <MX_FDCAN1_Init+0x194>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <MX_FDCAN1_Init+0x194>)
 800255a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800255e:	60da      	str	r2, [r3, #12]
  	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <MX_FDCAN1_Init+0x194>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
  	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <MX_FDCAN1_Init+0x194>)
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
  	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <MX_FDCAN1_Init+0x194>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <MX_FDCAN1_Init+0x194>)
 8002574:	2200      	movs	r2, #0
 8002576:	61da      	str	r2, [r3, #28]
  	TxHeader.MessageMarker = 0;
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <MX_FDCAN1_Init+0x194>)
 800257a:	2200      	movs	r2, #0
 800257c:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200000c8 	.word	0x200000c8
 800258c:	40006400 	.word	0x40006400
 8002590:	2000026c 	.word	0x2000026c

08002594 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <MX_SPI1_Init+0x74>)
 800259a:	4a1c      	ldr	r2, [pc, #112]	; (800260c <MX_SPI1_Init+0x78>)
 800259c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <MX_SPI1_Init+0x74>)
 80025a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <MX_SPI1_Init+0x74>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <MX_SPI1_Init+0x74>)
 80025ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <MX_SPI1_Init+0x74>)
 80025b6:	2202      	movs	r2, #2
 80025b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <MX_SPI1_Init+0x74>)
 80025bc:	2201      	movs	r2, #1
 80025be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_SPI1_Init+0x74>)
 80025c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_SPI1_Init+0x74>)
 80025ca:	2238      	movs	r2, #56	; 0x38
 80025cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_SPI1_Init+0x74>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_SPI1_Init+0x74>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <MX_SPI1_Init+0x74>)
 80025dc:	2200      	movs	r2, #0
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_SPI1_Init+0x74>)
 80025e2:	2207      	movs	r2, #7
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <MX_SPI1_Init+0x74>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_SPI1_Init+0x74>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025f2:	4805      	ldr	r0, [pc, #20]	; (8002608 <MX_SPI1_Init+0x74>)
 80025f4:	f003 f96a 	bl	80058cc <HAL_SPI_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80025fe:	f000 f95d 	bl	80028bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2000012c 	.word	0x2000012c
 800260c:	40013000 	.word	0x40013000

08002610 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b09c      	sub	sp, #112	; 0x70
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002616:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002624:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002630:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
 8002640:	615a      	str	r2, [r3, #20]
 8002642:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	2234      	movs	r2, #52	; 0x34
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f005 fe5e 	bl	800830c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002650:	4b45      	ldr	r3, [pc, #276]	; (8002768 <MX_TIM8_Init+0x158>)
 8002652:	4a46      	ldr	r2, [pc, #280]	; (800276c <MX_TIM8_Init+0x15c>)
 8002654:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002656:	4b44      	ldr	r3, [pc, #272]	; (8002768 <MX_TIM8_Init+0x158>)
 8002658:	2200      	movs	r2, #0
 800265a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265c:	4b42      	ldr	r3, [pc, #264]	; (8002768 <MX_TIM8_Init+0x158>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <MX_TIM8_Init+0x158>)
 8002664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002668:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266a:	4b3f      	ldr	r3, [pc, #252]	; (8002768 <MX_TIM8_Init+0x158>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002670:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <MX_TIM8_Init+0x158>)
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002676:	4b3c      	ldr	r3, [pc, #240]	; (8002768 <MX_TIM8_Init+0x158>)
 8002678:	2280      	movs	r2, #128	; 0x80
 800267a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800267c:	483a      	ldr	r0, [pc, #232]	; (8002768 <MX_TIM8_Init+0x158>)
 800267e:	f004 f83d 	bl	80066fc <HAL_TIM_Base_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002688:	f000 f918 	bl	80028bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800268c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002690:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002692:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002696:	4619      	mov	r1, r3
 8002698:	4833      	ldr	r0, [pc, #204]	; (8002768 <MX_TIM8_Init+0x158>)
 800269a:	f004 f9fb 	bl	8006a94 <HAL_TIM_ConfigClockSource>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80026a4:	f000 f90a 	bl	80028bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80026a8:	482f      	ldr	r0, [pc, #188]	; (8002768 <MX_TIM8_Init+0x158>)
 80026aa:	f004 f87e 	bl	80067aa <HAL_TIM_PWM_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80026b4:	f000 f902 	bl	80028bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026bc:	2300      	movs	r3, #0
 80026be:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026c8:	4619      	mov	r1, r3
 80026ca:	4827      	ldr	r0, [pc, #156]	; (8002768 <MX_TIM8_Init+0x158>)
 80026cc:	f004 fefe 	bl	80074cc <HAL_TIMEx_MasterConfigSynchronization>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80026d6:	f000 f8f1 	bl	80028bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026da:	2360      	movs	r3, #96	; 0x60
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e2:	2300      	movs	r3, #0
 80026e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026e6:	2300      	movs	r3, #0
 80026e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026fa:	2208      	movs	r2, #8
 80026fc:	4619      	mov	r1, r3
 80026fe:	481a      	ldr	r0, [pc, #104]	; (8002768 <MX_TIM8_Init+0x158>)
 8002700:	f004 f8b4 	bl	800686c <HAL_TIM_PWM_ConfigChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800270a:	f000 f8d7 	bl	80028bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002726:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002734:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800273e:	2300      	movs	r3, #0
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4807      	ldr	r0, [pc, #28]	; (8002768 <MX_TIM8_Init+0x158>)
 800274c:	f004 ff40 	bl	80075d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8002756:	f000 f8b1 	bl	80028bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800275a:	4803      	ldr	r0, [pc, #12]	; (8002768 <MX_TIM8_Init+0x158>)
 800275c:	f000 ff00 	bl	8003560 <HAL_TIM_MspPostInit>

}
 8002760:	bf00      	nop
 8002762:	3770      	adds	r7, #112	; 0x70
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000190 	.word	0x20000190
 800276c:	40013400 	.word	0x40013400

08002770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <MX_USART2_UART_Init+0x90>)
 8002776:	4a23      	ldr	r2, [pc, #140]	; (8002804 <MX_USART2_UART_Init+0x94>)
 8002778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800277a:	4b21      	ldr	r3, [pc, #132]	; (8002800 <MX_USART2_UART_Init+0x90>)
 800277c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002782:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <MX_USART2_UART_Init+0x90>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <MX_USART2_UART_Init+0x90>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <MX_USART2_UART_Init+0x90>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002794:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <MX_USART2_UART_Init+0x90>)
 8002796:	220c      	movs	r2, #12
 8002798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <MX_USART2_UART_Init+0x90>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <MX_USART2_UART_Init+0x90>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <MX_USART2_UART_Init+0x90>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <MX_USART2_UART_Init+0x90>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <MX_USART2_UART_Init+0x90>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027b8:	4811      	ldr	r0, [pc, #68]	; (8002800 <MX_USART2_UART_Init+0x90>)
 80027ba:	f004 ffa9 	bl	8007710 <HAL_UART_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80027c4:	f000 f87a 	bl	80028bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c8:	2100      	movs	r1, #0
 80027ca:	480d      	ldr	r0, [pc, #52]	; (8002800 <MX_USART2_UART_Init+0x90>)
 80027cc:	f005 fcaa 	bl	8008124 <HAL_UARTEx_SetTxFifoThreshold>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80027d6:	f000 f871 	bl	80028bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027da:	2100      	movs	r1, #0
 80027dc:	4808      	ldr	r0, [pc, #32]	; (8002800 <MX_USART2_UART_Init+0x90>)
 80027de:	f005 fcdf 	bl	80081a0 <HAL_UARTEx_SetRxFifoThreshold>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80027e8:	f000 f868 	bl	80028bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027ec:	4804      	ldr	r0, [pc, #16]	; (8002800 <MX_USART2_UART_Init+0x90>)
 80027ee:	f005 fc60 	bl	80080b2 <HAL_UARTEx_DisableFifoMode>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80027f8:	f000 f860 	bl	80028bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	200001dc 	.word	0x200001dc
 8002804:	40004400 	.word	0x40004400

08002808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280e:	f107 030c 	add.w	r3, r7, #12
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800281e:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <MX_GPIO_Init+0xac>)
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <MX_GPIO_Init+0xac>)
 8002824:	f043 0320 	orr.w	r3, r3, #32
 8002828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282a:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <MX_GPIO_Init+0xac>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <MX_GPIO_Init+0xac>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <MX_GPIO_Init+0xac>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002842:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <MX_GPIO_Init+0xac>)
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <MX_GPIO_Init+0xac>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <MX_GPIO_Init+0xac>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285a:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <MX_GPIO_Init+0xac>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8002866:	2200      	movs	r2, #0
 8002868:	f248 7110 	movw	r1, #34576	; 0x8710
 800286c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002870:	f002 f84c 	bl	800490c <HAL_GPIO_WritePin>
                          |FAN_control_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_Pin Led_debug_Pin PRE_Done_Pin AMS_Ok_Pin
                           FAN_control_Pin */
  GPIO_InitStruct.Pin = CS_Pin|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8002874:	f248 7310 	movw	r3, #34576	; 0x8710
 8002878:	60fb      	str	r3, [r7, #12]
                          |FAN_control_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287a:	2301      	movs	r3, #1
 800287c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	4619      	mov	r1, r3
 800288c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002890:	f001 fea2 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_PRE_Pin AIR__Pin AIR_B7_Pin */
  GPIO_InitStruct.Pin = AIR_PRE_Pin|AIR__Pin|AIR_B7_Pin;
 8002894:	23d0      	movs	r3, #208	; 0xd0
 8002896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4619      	mov	r1, r3
 80028a6:	4804      	ldr	r0, [pc, #16]	; (80028b8 <MX_GPIO_Init+0xb0>)
 80028a8:	f001 fe96 	bl	80045d8 <HAL_GPIO_Init>

}
 80028ac:	bf00      	nop
 80028ae:	3720      	adds	r7, #32
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	48000400 	.word	0x48000400

080028bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028c0:	b672      	cpsid	i
}
 80028c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <Error_Handler+0x8>
	...

080028c8 <operation_main>:

int charger_event_flag;
static uint8_t charger_event_counter;

#define MODE_CAN 0
void operation_main(void){
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0

	open_AIR();
 80028ce:	f000 f877 	bl	80029c0 <open_AIR>
	open_PRE();
 80028d2:	f000 f8ab 	bl	8002a2c <open_PRE>



	initialize();
 80028d6:	f7fe faf2 	bl	8000ebe <initialize>
	//fan_energize();
	init_slave_cfg();
 80028da:	f000 fbad 	bl	8003038 <init_slave_cfg>
	uint32_t timer = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	603b      	str	r3, [r7, #0]
	for(uint32_t i=0; i<NUMB_REASON_CODES; i++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	e008      	b.n	80028fa <operation_main+0x32>
		{
			status_data.error_counters[i]=0;
 80028e8:	4a32      	ldr	r2, [pc, #200]	; (80029b4 <operation_main+0xec>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	331e      	adds	r3, #30
 80028ee:	2100      	movs	r1, #0
 80028f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint32_t i=0; i<NUMB_REASON_CODES; i++)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3301      	adds	r3, #1
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	d9f3      	bls.n	80028e8 <operation_main+0x20>
		}

		status_data.soc = 100;
 8002900:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <operation_main+0xec>)
 8002902:	4a2d      	ldr	r2, [pc, #180]	; (80029b8 <operation_main+0xf0>)
 8002904:	611a      	str	r2, [r3, #16]
		status_data.pec_error_counter = 0;
 8002906:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <operation_main+0xec>)
 8002908:	2200      	movs	r2, #0
 800290a:	66da      	str	r2, [r3, #108]	; 0x6c
		status_data.pec_error_counter_last = 0;
 800290c:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <operation_main+0xec>)
 800290e:	2200      	movs	r2, #0
 8002910:	671a      	str	r2, [r3, #112]	; 0x70

		status_data.limping = 0;
 8002912:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <operation_main+0xec>)
 8002914:	2200      	movs	r2, #0
 8002916:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		status_data.recieved_IVT = 0;
 800291a:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <operation_main+0xec>)
 800291c:	2200      	movs	r2, #0
 800291e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		status_data.opmode = 0;
 8002922:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <operation_main+0xec>)
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		status_data.opmode = (1 << 0)|(1 << 4);
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <operation_main+0xec>)
 800292c:	2211      	movs	r2, #17
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		status_data.mode = 0;
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <operation_main+0xec>)
 8002934:	2200      	movs	r2, #0
 8002936:	711a      	strb	r2, [r3, #4]
#endif

	while(1){


		switch (status_data.mode){
 8002938:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <operation_main+0xec>)
 800293a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d836      	bhi.n	80029b0 <operation_main+0xe8>
 8002942:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <operation_main+0x80>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	08002959 	.word	0x08002959
 800294c:	08002973 	.word	0x08002973
 8002950:	0800298f 	.word	0x0800298f
 8002954:	080029a7 	.word	0x080029a7
			case 0:
				core_routine(RETEST_YES);
 8002958:	2001      	movs	r0, #1
 800295a:	f000 f8fd 	bl	8002b58 <core_routine>
				status_data.uptime++;
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <operation_main+0xec>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <operation_main+0xec>)
 8002966:	6013      	str	r3, [r2, #0]
				//if(status_data.uptime % 10 == 0)
					//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
			    HAL_Delay(500);
 8002968:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800296c:	f001 f812 	bl	8003994 <HAL_Delay>

				break;
 8002970:	e01f      	b.n	80029b2 <operation_main+0xea>
			case 1:
				read_cell_voltage();
 8002972:	f000 fb01 	bl	8002f78 <read_cell_voltage>
				get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002976:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <operation_main+0xec>)
 8002978:	4910      	ldr	r1, [pc, #64]	; (80029bc <operation_main+0xf4>)
 800297a:	2008      	movs	r0, #8
 800297c:	f7ff fa58 	bl	8001e30 <get_minmax_voltage>
				balance_routine();
 8002980:	f000 fa98 	bl	8002eb4 <balance_routine>

				HAL_Delay(2000);
 8002984:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002988:	f001 f804 	bl	8003994 <HAL_Delay>

				break;
 800298c:	e011      	b.n	80029b2 <operation_main+0xea>
			case 2:
				status_data.uptime++;
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <operation_main+0xec>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <operation_main+0xec>)
 8002996:	6013      	str	r3, [r2, #0]
				charge_routine();
 8002998:	f000 f886 	bl	8002aa8 <charge_routine>
				HAL_Delay(2000);
 800299c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029a0:	f000 fff8 	bl	8003994 <HAL_Delay>
				break;
 80029a4:	e005      	b.n	80029b2 <operation_main+0xea>
			case 3:
				//debug_routine();
				close_AIR();
 80029a6:	f000 f81d 	bl	80029e4 <close_AIR>
				close_PRE();
 80029aa:	f000 f82d 	bl	8002a08 <close_PRE>
				break;
 80029ae:	e000      	b.n	80029b2 <operation_main+0xea>
			default:
				break;
 80029b0:	bf00      	nop
		switch (status_data.mode){
 80029b2:	e7c1      	b.n	8002938 <operation_main+0x70>
 80029b4:	20000638 	.word	0x20000638
 80029b8:	42c80000 	.word	0x42c80000
 80029bc:	200002b8 	.word	0x200002b8

080029c0 <open_AIR>:
		Data is checked against limits and a return value is generated.

	\return status of test_limits function (0: OK, -1 FAIL).
*/

void open_AIR(void){
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80029c4:	2200      	movs	r2, #0
 80029c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ce:	f001 ff9d 	bl	800490c <HAL_GPIO_WritePin>
	status_data.air_s = false;
 80029d2:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <open_AIR+0x20>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000638 	.word	0x20000638

080029e4 <close_AIR>:

void close_AIR(void){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 80029e8:	2201      	movs	r2, #1
 80029ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f2:	f001 ff8b 	bl	800490c <HAL_GPIO_WritePin>
	status_data.air_s = true;
 80029f6:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <close_AIR+0x20>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000638 	.word	0x20000638

08002a08 <close_PRE>:

void close_PRE(void){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a16:	f001 ff79 	bl	800490c <HAL_GPIO_WritePin>
	status_data.pre_s = true;
 8002a1a:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <close_PRE+0x20>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000638 	.word	0x20000638

08002a2c <open_PRE>:

void open_PRE(void){
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8002a30:	2200      	movs	r2, #0
 8002a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3a:	f001 ff67 	bl	800490c <HAL_GPIO_WritePin>
	status_data.pre_s = false;
 8002a3e:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <open_PRE+0x20>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000638 	.word	0x20000638

08002a50 <AMS_OK>:

int AMS_OK(status_data_t *status_data, limit_t *limit){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
	if(status_data->min_voltage > limit->min_voltage && status_data->max_voltage < limit->max_voltage){
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	885b      	ldrh	r3, [r3, #2]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d919      	bls.n	8002a9a <AMS_OK+0x4a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d213      	bcs.n	8002a9a <AMS_OK+0x4a>
		if(status_data->min_temp > limit->min_temp && status_data->max_temp < limit->max_temp){
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	dd0b      	ble.n	8002a9a <AMS_OK+0x4a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	da03      	bge.n	8002a9a <AMS_OK+0x4a>
			close_AIR();
 8002a92:	f7ff ffa7 	bl	80029e4 <close_AIR>
			return 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e002      	b.n	8002aa0 <AMS_OK+0x50>
		}
	}
	open_AIR();
 8002a9a:	f7ff ff91 	bl	80029c0 <open_AIR>
	return 1;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <charge_routine>:




void charge_routine(void){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
	status_data.air_m = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002aac:	2140      	movs	r1, #64	; 0x40
 8002aae:	4825      	ldr	r0, [pc, #148]	; (8002b44 <charge_routine+0x9c>)
 8002ab0:	f001 ff14 	bl	80048dc <HAL_GPIO_ReadPin>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	bf14      	ite	ne
 8002aba:	2301      	movne	r3, #1
 8002abc:	2300      	moveq	r3, #0
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <charge_routine+0xa0>)
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	status_data.air_p = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8002ac6:	2180      	movs	r1, #128	; 0x80
 8002ac8:	481e      	ldr	r0, [pc, #120]	; (8002b44 <charge_routine+0x9c>)
 8002aca:	f001 ff07 	bl	80048dc <HAL_GPIO_ReadPin>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <charge_routine+0xa0>)
 8002adc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	status_data.air_pre = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8002ae0:	2110      	movs	r1, #16
 8002ae2:	4818      	ldr	r0, [pc, #96]	; (8002b44 <charge_routine+0x9c>)
 8002ae4:	f001 fefa 	bl	80048dc <HAL_GPIO_ReadPin>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <charge_routine+0xa0>)
 8002af6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	empty_disch_cfg();
 8002afa:	f000 f9fd 	bl	8002ef8 <empty_disch_cfg>
	read_cell_voltage();
 8002afe:	f000 fa3b 	bl	8002f78 <read_cell_voltage>
	read_temp_measurement();
 8002b02:	f000 fa67 	bl	8002fd4 <read_temp_measurement>
	get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002b06:	4a10      	ldr	r2, [pc, #64]	; (8002b48 <charge_routine+0xa0>)
 8002b08:	4910      	ldr	r1, [pc, #64]	; (8002b4c <charge_routine+0xa4>)
 8002b0a:	2008      	movs	r0, #8
 8002b0c:	f7ff f990 	bl	8001e30 <get_minmax_voltage>
	get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8002b10:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <charge_routine+0xa0>)
 8002b12:	490f      	ldr	r1, [pc, #60]	; (8002b50 <charge_routine+0xa8>)
 8002b14:	2008      	movs	r0, #8
 8002b16:	f7ff f8fb 	bl	8001d10 <get_minmax_temperature>
	calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 8002b1a:	4a0b      	ldr	r2, [pc, #44]	; (8002b48 <charge_routine+0xa0>)
 8002b1c:	490b      	ldr	r1, [pc, #44]	; (8002b4c <charge_routine+0xa4>)
 8002b1e:	2008      	movs	r0, #8
 8002b20:	f7ff f890 	bl	8001c44 <calc_sum_of_cells>
	AMS_OK(&status_data, &limits);
 8002b24:	490b      	ldr	r1, [pc, #44]	; (8002b54 <charge_routine+0xac>)
 8002b26:	4808      	ldr	r0, [pc, #32]	; (8002b48 <charge_routine+0xa0>)
 8002b28:	f7ff ff92 	bl	8002a50 <AMS_OK>

#if IVT
	read_IVT(&status_data);
 8002b2c:	4806      	ldr	r0, [pc, #24]	; (8002b48 <charge_routine+0xa0>)
 8002b2e:	f000 f881 	bl	8002c34 <read_IVT>
	calculate_soc(&status_data);
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <charge_routine+0xa0>)
 8002b34:	f7ff f8cc 	bl	8001cd0 <calculate_soc>
	precharge_compare();
 8002b38:	f000 f92a 	bl	8002d90 <precharge_compare>
#endif

	balance_routine();
 8002b3c:	f000 f9ba 	bl	8002eb4 <balance_routine>

}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	48000400 	.word	0x48000400
 8002b48:	20000638 	.word	0x20000638
 8002b4c:	200002b8 	.word	0x200002b8
 8002b50:	200003d8 	.word	0x200003d8
 8002b54:	20000000 	.word	0x20000000

08002b58 <core_routine>:




int8_t core_routine(int32_t retest){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

	status_data.air_m = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002b60:	2140      	movs	r1, #64	; 0x40
 8002b62:	482f      	ldr	r0, [pc, #188]	; (8002c20 <core_routine+0xc8>)
 8002b64:	f001 feba 	bl	80048dc <HAL_GPIO_ReadPin>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf14      	ite	ne
 8002b6e:	2301      	movne	r3, #1
 8002b70:	2300      	moveq	r3, #0
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <core_routine+0xcc>)
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	status_data.air_p = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	4828      	ldr	r0, [pc, #160]	; (8002c20 <core_routine+0xc8>)
 8002b7e:	f001 fead 	bl	80048dc <HAL_GPIO_ReadPin>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <core_routine+0xcc>)
 8002b90:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	status_data.air_pre = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8002b94:	2110      	movs	r1, #16
 8002b96:	4822      	ldr	r0, [pc, #136]	; (8002c20 <core_routine+0xc8>)
 8002b98:	f001 fea0 	bl	80048dc <HAL_GPIO_ReadPin>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf14      	ite	ne
 8002ba2:	2301      	movne	r3, #1
 8002ba4:	2300      	moveq	r3, #0
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <core_routine+0xcc>)
 8002baa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	empty_disch_cfg();
 8002bae:	f000 f9a3 	bl	8002ef8 <empty_disch_cfg>
	read_cell_voltage();
 8002bb2:	f000 f9e1 	bl	8002f78 <read_cell_voltage>
	read_temp_measurement();
 8002bb6:	f000 fa0d 	bl	8002fd4 <read_temp_measurement>
	get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002bba:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <core_routine+0xcc>)
 8002bbc:	491a      	ldr	r1, [pc, #104]	; (8002c28 <core_routine+0xd0>)
 8002bbe:	2008      	movs	r0, #8
 8002bc0:	f7ff f936 	bl	8001e30 <get_minmax_voltage>
	get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <core_routine+0xcc>)
 8002bc6:	4919      	ldr	r1, [pc, #100]	; (8002c2c <core_routine+0xd4>)
 8002bc8:	2008      	movs	r0, #8
 8002bca:	f7ff f8a1 	bl	8001d10 <get_minmax_temperature>
	calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 8002bce:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <core_routine+0xcc>)
 8002bd0:	4915      	ldr	r1, [pc, #84]	; (8002c28 <core_routine+0xd0>)
 8002bd2:	2008      	movs	r0, #8
 8002bd4:	f7ff f836 	bl	8001c44 <calc_sum_of_cells>
	AMS_OK(&status_data, &limits);
 8002bd8:	4915      	ldr	r1, [pc, #84]	; (8002c30 <core_routine+0xd8>)
 8002bda:	4812      	ldr	r0, [pc, #72]	; (8002c24 <core_routine+0xcc>)
 8002bdc:	f7ff ff38 	bl	8002a50 <AMS_OK>
	fan_control(&status_data);
 8002be0:	4810      	ldr	r0, [pc, #64]	; (8002c24 <core_routine+0xcc>)
 8002be2:	f000 fbc0 	bl	8003366 <fan_control>

#if IVT
	read_IVT(&status_data);
 8002be6:	480f      	ldr	r0, [pc, #60]	; (8002c24 <core_routine+0xcc>)
 8002be8:	f000 f824 	bl	8002c34 <read_IVT>
	calculate_soc(&status_data);
 8002bec:	480d      	ldr	r0, [pc, #52]	; (8002c24 <core_routine+0xcc>)
 8002bee:	f7ff f86f 	bl	8001cd0 <calculate_soc>
	precharge_compare();
 8002bf2:	f000 f8cd 	bl	8002d90 <precharge_compare>
	calculate_soc(&status_data);
 8002bf6:	480b      	ldr	r0, [pc, #44]	; (8002c24 <core_routine+0xcc>)
 8002bf8:	f7ff f86a 	bl	8001cd0 <calculate_soc>
#endif

#if CAN_ENABLED
	//Send_cell_data(cell_data);
	//Send_temp_data(temp_data);
	Send_Soc(&status_data);
 8002bfc:	4809      	ldr	r0, [pc, #36]	; (8002c24 <core_routine+0xcc>)
 8002bfe:	f7ff fac9 	bl	8002194 <Send_Soc>
#endif

	test_limp(&status_data, &limits);
 8002c02:	490b      	ldr	r1, [pc, #44]	; (8002c30 <core_routine+0xd8>)
 8002c04:	4807      	ldr	r0, [pc, #28]	; (8002c24 <core_routine+0xcc>)
 8002c06:	f000 facb 	bl	80031a0 <test_limp>


	return test_limits(&status_data, &limits, retest);
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4908      	ldr	r1, [pc, #32]	; (8002c30 <core_routine+0xd8>)
 8002c0e:	4805      	ldr	r0, [pc, #20]	; (8002c24 <core_routine+0xcc>)
 8002c10:	f000 fb00 	bl	8003214 <test_limits>
 8002c14:	4603      	mov	r3, r0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	48000400 	.word	0x48000400
 8002c24:	20000638 	.word	0x20000638
 8002c28:	200002b8 	.word	0x200002b8
 8002c2c:	200003d8 	.word	0x200003d8
 8002c30:	20000000 	.word	0x20000000

08002c34 <read_IVT>:

void read_IVT(status_data_t *status_data){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

	uint8_t RxData1[8];
	while(ReadCANBusMessage(0x522, &RxData1)){
 8002c3c:	e002      	b.n	8002c44 <read_IVT+0x10>
		delay_u(200);
 8002c3e:	20c8      	movs	r0, #200	; 0xc8
 8002c40:	f7ff fae4 	bl	800220c <delay_u>
	while(ReadCANBusMessage(0x522, &RxData1)){
 8002c44:	f107 0320 	add.w	r3, r7, #32
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f240 5022 	movw	r0, #1314	; 0x522
 8002c4e:	f7ff fa77 	bl	8002140 <ReadCANBusMessage>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f2      	bne.n	8002c3e <read_IVT+0xa>
	}

	//delay_u(500);

	status_data->IVT_U1 = (uint32_t)(RxData1[5] | (RxData1[4] << 8) | (RxData1[3] << 16) | (RxData1[2] << 24) );
 8002c58:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	431a      	orrs	r2, r3
 8002c66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
	status_data->IVT_U1_f = status_data->IVT_U1 / 1000.0f;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c86:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002d8c <read_IVT+0x158>
 8002c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	uint8_t RxData2[8];
	while(ReadCANBusMessage(0x523, &RxData2)){
 8002c94:	e002      	b.n	8002c9c <read_IVT+0x68>
		delay_u(200);
 8002c96:	20c8      	movs	r0, #200	; 0xc8
 8002c98:	f7ff fab8 	bl	800220c <delay_u>
	while(ReadCANBusMessage(0x523, &RxData2)){
 8002c9c:	f107 0318 	add.w	r3, r7, #24
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f240 5023 	movw	r0, #1315	; 0x523
 8002ca6:	f7ff fa4b 	bl	8002140 <ReadCANBusMessage>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f2      	bne.n	8002c96 <read_IVT+0x62>
	}
	//delay_u(500);
	status_data->IVT_U2 = (uint32_t)(RxData2[5] | (RxData2[4] << 8) | (RxData2[3] << 16) | (RxData2[2] << 24) );
 8002cb0:	7f7b      	ldrb	r3, [r7, #29]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	7f3b      	ldrb	r3, [r7, #28]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	7efb      	ldrb	r3, [r7, #27]
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	7ebb      	ldrb	r3, [r7, #26]
 8002cc2:	061b      	lsls	r3, r3, #24
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	64da      	str	r2, [r3, #76]	; 0x4c
	status_data->IVT_U2_f = status_data->IVT_U2 / 1000.0f;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cd6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002d8c <read_IVT+0x158>
 8002cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	uint8_t RxData3[8];
	while(ReadCANBusMessage(0x528, &RxData3)){
 8002ce4:	e002      	b.n	8002cec <read_IVT+0xb8>
		delay_u(200);
 8002ce6:	20c8      	movs	r0, #200	; 0xc8
 8002ce8:	f7ff fa90 	bl	800220c <delay_u>
	while(ReadCANBusMessage(0x528, &RxData3)){
 8002cec:	f107 0310 	add.w	r3, r7, #16
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f44f 60a5 	mov.w	r0, #1320	; 0x528
 8002cf6:	f7ff fa23 	bl	8002140 <ReadCANBusMessage>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f2      	bne.n	8002ce6 <read_IVT+0xb2>
	}
	//delay_u(500);
	status_data->IVT_Wh = (uint32_t)(RxData3[5] | (RxData3[4] << 8) | (RxData3[3] << 16) | (RxData3[2] << 24) );
 8002d00:	7d7b      	ldrb	r3, [r7, #21]
 8002d02:	461a      	mov	r2, r3
 8002d04:	7d3b      	ldrb	r3, [r7, #20]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	7cbb      	ldrb	r3, [r7, #18]
 8002d12:	061b      	lsls	r3, r3, #24
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
	status_data->IVT_Wh_f = status_data->IVT_Wh / 1000.0f;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d26:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002d8c <read_IVT+0x158>
 8002d2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	uint8_t RxData4[8];
		while(ReadCANBusMessage(0x521, &RxData4)){
 8002d34:	e002      	b.n	8002d3c <read_IVT+0x108>
			delay_u(200);
 8002d36:	20c8      	movs	r0, #200	; 0xc8
 8002d38:	f7ff fa68 	bl	800220c <delay_u>
		while(ReadCANBusMessage(0x521, &RxData4)){
 8002d3c:	f107 0308 	add.w	r3, r7, #8
 8002d40:	4619      	mov	r1, r3
 8002d42:	f240 5021 	movw	r0, #1313	; 0x521
 8002d46:	f7ff f9fb 	bl	8002140 <ReadCANBusMessage>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f2      	bne.n	8002d36 <read_IVT+0x102>
		}
	status_data->IVT_I = (uint32_t)(RxData4[5] | (RxData4[4] << 8) | (RxData4[3] << 16) | (RxData4[2] << 24) );
 8002d50:	7b7b      	ldrb	r3, [r7, #13]
 8002d52:	461a      	mov	r2, r3
 8002d54:	7b3b      	ldrb	r3, [r7, #12]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	7afb      	ldrb	r3, [r7, #11]
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	7abb      	ldrb	r3, [r7, #10]
 8002d62:	061b      	lsls	r3, r3, #24
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	665a      	str	r2, [r3, #100]	; 0x64
	status_data->IVT_I_f = status_data->IVT_I / 1000.0f;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6e:	ee07 3a90 	vmov	s15, r3
 8002d72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d76:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002d8c <read_IVT+0x158>
 8002d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68


}
 8002d84:	bf00      	nop
 8002d86:	3728      	adds	r7, #40	; 0x28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	447a0000 	.word	0x447a0000

08002d90 <precharge_compare>:

void precharge_compare(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0

//TODO

	float percentage;
	float pre = status_data.IVT_U1_f;
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <precharge_compare+0x9c>)
 8002d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9a:	60fb      	str	r3, [r7, #12]
	float air_p = status_data.IVT_U2_f;
 8002d9c:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <precharge_compare+0x9c>)
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da0:	60bb      	str	r3, [r7, #8]
	percentage = (air_p * 100) / pre;
 8002da2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002da6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002e30 <precharge_compare+0xa0>
 8002daa:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002dae:	ed97 7a03 	vldr	s14, [r7, #12]
 8002db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002db6:	edc7 7a01 	vstr	s15, [r7, #4]
	status_data.pre_percentage = percentage;
 8002dba:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <precharge_compare+0x9c>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6613      	str	r3, [r2, #96]	; 0x60
	if (status_data.safe_state_executed == 0) {
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <precharge_compare+0x9c>)
 8002dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc6:	f083 0301 	eor.w	r3, r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d028      	beq.n	8002e22 <precharge_compare+0x92>
		if ((percentage >= 95) && (check_voltage_match() == true) && status_data.IVT_U1_f > limits.precharge_min_start_voltage) {
 8002dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dd4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002e34 <precharge_compare+0xa4>
 8002dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de0:	da00      	bge.n	8002de4 <precharge_compare+0x54>
			open_PRE(); //it is maybe not a great idea to actively open the precharge without opening all the contactors
		}*/
	} /*else {
		goto_safe_state(IVT_LOST);
	}*/ //this was maybe not working as intended
}
 8002de2:	e01e      	b.n	8002e22 <precharge_compare+0x92>
		if ((percentage >= 95) && (check_voltage_match() == true) && status_data.IVT_U1_f > limits.precharge_min_start_voltage) {
 8002de4:	f000 f82a 	bl	8002e3c <check_voltage_match>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d119      	bne.n	8002e22 <precharge_compare+0x92>
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <precharge_compare+0x9c>)
 8002df0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002df4:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <precharge_compare+0xa8>)
 8002df6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e02:	dc00      	bgt.n	8002e06 <precharge_compare+0x76>
}
 8002e04:	e00d      	b.n	8002e22 <precharge_compare+0x92>
			if(status_data.pre_s == false)
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <precharge_compare+0x9c>)
 8002e08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e0c:	f083 0301 	eor.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <precharge_compare+0x8e>
				HAL_Delay(5000);
 8002e16:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e1a:	f000 fdbb 	bl	8003994 <HAL_Delay>
			close_PRE();
 8002e1e:	f7ff fdf3 	bl	8002a08 <close_PRE>
}
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000638 	.word	0x20000638
 8002e30:	42c80000 	.word	0x42c80000
 8002e34:	42be0000 	.word	0x42be0000
 8002e38:	20000000 	.word	0x20000000

08002e3c <check_voltage_match>:

int check_voltage_match(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
	float percentage;
	float accu_volt = (float)status_data.sum_of_cells;
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <check_voltage_match+0x70>)
 8002e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e46:	60fb      	str	r3, [r7, #12]
	float post_volt = (float)status_data.IVT_U2_f;
 8002e48:	4b18      	ldr	r3, [pc, #96]	; (8002eac <check_voltage_match+0x70>)
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4c:	60bb      	str	r3, [r7, #8]
	percentage = (post_volt * 100) / accu_volt;
 8002e4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e52:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002eb0 <check_voltage_match+0x74>
 8002e56:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002e5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e62:	edc7 7a01 	vstr	s15, [r7, #4]
	percentage = percentage - 100;
 8002e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e6a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002eb0 <check_voltage_match+0x74>
 8002e6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e72:	edc7 7a01 	vstr	s15, [r7, #4]

	if ((percentage < 10) && (percentage > -10)) {
 8002e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e7a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e86:	d50a      	bpl.n	8002e9e <check_voltage_match+0x62>
 8002e88:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e8c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8002e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e98:	dd01      	ble.n	8002e9e <check_voltage_match+0x62>
		return 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <check_voltage_match+0x64>
	}
	return 0;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	20000638 	.word	0x20000638
 8002eb0:	42c80000 	.word	0x42c80000

08002eb4 <balance_routine>:
	Discharge configuration bytes in slave_cfg_tx array are written, and
	configuration is sent to LTC-6811s. After some delay configuration is
	read back to slave_cfg_rx array.
*/
void balance_routine(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af02      	add	r7, sp, #8
	// TODO build_disch_cfg(IC_NUM, cell_data, slave_cfg_tx, &status_data, &limits);
	build_disch_cfg(IC_NUM, cell_data, slave_cfg_tx, &status_data, &limits);
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <balance_routine+0x30>)
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <balance_routine+0x34>)
 8002ec0:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <balance_routine+0x38>)
 8002ec2:	490b      	ldr	r1, [pc, #44]	; (8002ef0 <balance_routine+0x3c>)
 8002ec4:	2008      	movs	r0, #8
 8002ec6:	f7ff f84b 	bl	8001f60 <build_disch_cfg>
	build_disch_cfgb(IC_NUM, cell_data, slave_cfgb_tx, &status_data, &limits);
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <balance_routine+0x30>)
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <balance_routine+0x34>)
 8002ed0:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <balance_routine+0x40>)
 8002ed2:	4907      	ldr	r1, [pc, #28]	; (8002ef0 <balance_routine+0x3c>)
 8002ed4:	2008      	movs	r0, #8
 8002ed6:	f7ff f8ad 	bl	8002034 <build_disch_cfgb>

	cfg_slaves();
 8002eda:	f000 f8fd 	bl	80030d8 <cfg_slaves>

}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	20000638 	.word	0x20000638
 8002eec:	20000558 	.word	0x20000558
 8002ef0:	200002b8 	.word	0x200002b8
 8002ef4:	20000588 	.word	0x20000588

08002ef8 <empty_disch_cfg>:

void empty_disch_cfg(void){
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
	WakeUp();
 8002efe:	f7fd ffd3 	bl	8000ea8 <WakeUp>

	for(int i = 0; i < IC_NUM; i++){
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
 8002f06:	e02a      	b.n	8002f5e <empty_disch_cfg+0x66>
		slave_cfg_tx[i][4] = 0x00 ;
 8002f08:	4919      	ldr	r1, [pc, #100]	; (8002f70 <empty_disch_cfg+0x78>)
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	440b      	add	r3, r1
 8002f16:	3304      	adds	r3, #4
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 8002f1c:	4914      	ldr	r1, [pc, #80]	; (8002f70 <empty_disch_cfg+0x78>)
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	440b      	add	r3, r1
 8002f2a:	3305      	adds	r3, #5
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]

		slave_cfgb_tx[i][4] = 0x00 ;
 8002f30:	4910      	ldr	r1, [pc, #64]	; (8002f74 <empty_disch_cfg+0x7c>)
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3304      	adds	r3, #4
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
		slave_cfgb_tx[i][5] = 0x00;
 8002f44:	490b      	ldr	r1, [pc, #44]	; (8002f74 <empty_disch_cfg+0x7c>)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	440b      	add	r3, r1
 8002f52:	3305      	adds	r3, #5
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < IC_NUM; i++){
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b07      	cmp	r3, #7
 8002f62:	ddd1      	ble.n	8002f08 <empty_disch_cfg+0x10>
	}

	cfg_slaves();
 8002f64:	f000 f8b8 	bl	80030d8 <cfg_slaves>
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000558 	.word	0x20000558
 8002f74:	20000588 	.word	0x20000588

08002f78 <read_cell_voltage>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_cell_voltage(void){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 8002f7e:	f7fd ff93 	bl	8000ea8 <WakeUp>
	adcv();
 8002f82:	f7fe fe17 	bl	8001bb4 <adcv>
	adcv_delay();
 8002f86:	f7fe fdb6 	bl	8001af6 <adcv_delay>

	WakeIdle();
 8002f8a:	f7fd ff83 	bl	8000e94 <WakeIdle>

	for(uint8_t reg = 0; reg < 5; reg++){
 8002f8e:	2300      	movs	r3, #0
 8002f90:	71fb      	strb	r3, [r7, #7]
 8002f92:	e011      	b.n	8002fb8 <read_cell_voltage+0x40>
		pec = rdcv(0, IC_NUM, cell_data);
 8002f94:	4a0e      	ldr	r2, [pc, #56]	; (8002fd0 <read_cell_voltage+0x58>)
 8002f96:	2108      	movs	r1, #8
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7fe faaf 	bl	80014fc <rdcv>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71bb      	strb	r3, [r7, #6]
		if (pec == 0) {
 8002fa2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <read_cell_voltage+0x36>
			return 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e00b      	b.n	8002fc6 <read_cell_voltage+0x4e>
		}
		else increase_pec_counter();
 8002fae:	f000 f8b7 	bl	8003120 <increase_pec_counter>
	for(uint8_t reg = 0; reg < 5; reg++){
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	71fb      	strb	r3, [r7, #7]
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d9ea      	bls.n	8002f94 <read_cell_voltage+0x1c>
	}
	goto_safe_state(PEC_ERROR);
 8002fbe:	2008      	movs	r0, #8
 8002fc0:	f000 f8ce 	bl	8003160 <goto_safe_state>
	return -1;
 8002fc4:	23ff      	movs	r3, #255	; 0xff

}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200002b8 	.word	0x200002b8

08002fd4 <read_temp_measurement>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_temp_measurement(void){
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 8002fda:	f7fd ff65 	bl	8000ea8 <WakeUp>
	adax();
 8002fde:	f7fe fe0d 	bl	8001bfc <adax>
	adax_delay();
 8002fe2:	f7fe fd91 	bl	8001b08 <adax_delay>
	WakeIdle();
 8002fe6:	f7fd ff55 	bl	8000e94 <WakeIdle>

	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 8002fea:	2300      	movs	r3, #0
 8002fec:	71fb      	strb	r3, [r7, #7]
 8002fee:	e015      	b.n	800301c <read_temp_measurement+0x48>
			 pec = rdaux(0, IC_NUM, temp_data);  // pec = ltc6804_rdaux(0, IC_NUM, temp_data);
 8002ff0:	4a10      	ldr	r2, [pc, #64]	; (8003034 <read_temp_measurement+0x60>)
 8002ff2:	2108      	movs	r1, #8
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fe fc36 	bl	8001866 <rdaux>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71bb      	strb	r3, [r7, #6]
			 temp_calc(IC_NUM, temp_data); // Moved out of 'if' to execute even on pec error
 8002ffe:	490d      	ldr	r1, [pc, #52]	; (8003034 <read_temp_measurement+0x60>)
 8003000:	2008      	movs	r0, #8
 8003002:	f000 fb79 	bl	80036f8 <temp_calc>
			if (pec == 0) {
 8003006:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <read_temp_measurement+0x3e>
				return 0;
 800300e:	2300      	movs	r3, #0
 8003010:	e00b      	b.n	800302a <read_temp_measurement+0x56>
			} else {
				increase_pec_counter();
 8003012:	f000 f885 	bl	8003120 <increase_pec_counter>
	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	3301      	adds	r3, #1
 800301a:	71fb      	strb	r3, [r7, #7]
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	2b04      	cmp	r3, #4
 8003020:	d9e6      	bls.n	8002ff0 <read_temp_measurement+0x1c>
			}
		}
		goto_safe_state(PEC_ERROR);
 8003022:	2008      	movs	r0, #8
 8003024:	f000 f89c 	bl	8003160 <goto_safe_state>
		return -1;
 8003028:	23ff      	movs	r3, #255	; 0xff

}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200003d8 	.word	0x200003d8

08003038 <init_slave_cfg>:


void init_slave_cfg(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < IC_NUM; i++)
 800303e:	2300      	movs	r3, #0
 8003040:	71fb      	strb	r3, [r7, #7]
 8003042:	e03d      	b.n	80030c0 <init_slave_cfg+0x88>
	{
		slave_cfg_tx[i][0] = 0xfe;
 8003044:	79fa      	ldrb	r2, [r7, #7]
 8003046:	4923      	ldr	r1, [pc, #140]	; (80030d4 <init_slave_cfg+0x9c>)
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	440b      	add	r3, r1
 8003052:	22fe      	movs	r2, #254	; 0xfe
 8003054:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][1] = 0x00;
 8003056:	79fa      	ldrb	r2, [r7, #7]
 8003058:	491e      	ldr	r1, [pc, #120]	; (80030d4 <init_slave_cfg+0x9c>)
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	440b      	add	r3, r1
 8003064:	3301      	adds	r3, #1
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][2] = 0x00;
 800306a:	79fa      	ldrb	r2, [r7, #7]
 800306c:	4919      	ldr	r1, [pc, #100]	; (80030d4 <init_slave_cfg+0x9c>)
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	440b      	add	r3, r1
 8003078:	3302      	adds	r3, #2
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][3] = 0x00;
 800307e:	79fa      	ldrb	r2, [r7, #7]
 8003080:	4914      	ldr	r1, [pc, #80]	; (80030d4 <init_slave_cfg+0x9c>)
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	440b      	add	r3, r1
 800308c:	3303      	adds	r3, #3
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][4] = 0x00;
 8003092:	79fa      	ldrb	r2, [r7, #7]
 8003094:	490f      	ldr	r1, [pc, #60]	; (80030d4 <init_slave_cfg+0x9c>)
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	440b      	add	r3, r1
 80030a0:	3304      	adds	r3, #4
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 80030a6:	79fa      	ldrb	r2, [r7, #7]
 80030a8:	490a      	ldr	r1, [pc, #40]	; (80030d4 <init_slave_cfg+0x9c>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	440b      	add	r3, r1
 80030b4:	3305      	adds	r3, #5
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < IC_NUM; i++)
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	3301      	adds	r3, #1
 80030be:	71fb      	strb	r3, [r7, #7]
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	2b07      	cmp	r3, #7
 80030c4:	d9be      	bls.n	8003044 <init_slave_cfg+0xc>
	}
}
 80030c6:	bf00      	nop
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	20000558 	.word	0x20000558

080030d8 <cfg_slaves>:

void cfg_slaves(void){
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
	WakeUp();
 80030dc:	f7fd fee4 	bl	8000ea8 <WakeUp>
	wrcfg(IC_NUM, slave_cfg_tx);
 80030e0:	490b      	ldr	r1, [pc, #44]	; (8003110 <cfg_slaves+0x38>)
 80030e2:	2008      	movs	r0, #8
 80030e4:	f7fd ff90 	bl	8001008 <wrcfg>
	WakeUp();
 80030e8:	f7fd fede 	bl	8000ea8 <WakeUp>
	wrcfgb(IC_NUM, slave_cfgb_tx); //TODO
 80030ec:	4909      	ldr	r1, [pc, #36]	; (8003114 <cfg_slaves+0x3c>)
 80030ee:	2008      	movs	r0, #8
 80030f0:	f7fe f8b9 	bl	8001266 <wrcfgb>
	delay_u(500);
 80030f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030f8:	f7ff f888 	bl	800220c <delay_u>
	rdcfg(IC_NUM, slave_cfg_rx);
 80030fc:	4906      	ldr	r1, [pc, #24]	; (8003118 <cfg_slaves+0x40>)
 80030fe:	2008      	movs	r0, #8
 8003100:	f7fe f818 	bl	8001134 <rdcfg>
	rdcfgb(IC_NUM, slave_cfgb_rx);
 8003104:	4905      	ldr	r1, [pc, #20]	; (800311c <cfg_slaves+0x44>)
 8003106:	2008      	movs	r0, #8
 8003108:	f7fe f94f 	bl	80013aa <rdcfgb>
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000558 	.word	0x20000558
 8003114:	20000588 	.word	0x20000588
 8003118:	200005b8 	.word	0x200005b8
 800311c:	200005f8 	.word	0x200005f8

08003120 <increase_pec_counter>:

void increase_pec_counter(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
	status_data.pec_error_counter++;
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <increase_pec_counter+0x3c>)
 8003126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003128:	3301      	adds	r3, #1
 800312a:	4a0c      	ldr	r2, [pc, #48]	; (800315c <increase_pec_counter+0x3c>)
 800312c:	66d3      	str	r3, [r2, #108]	; 0x6c
	status_data.pec_error_average = (float)status_data.pec_error_counter / status_data.uptime;
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <increase_pec_counter+0x3c>)
 8003130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800313a:	4b08      	ldr	r3, [pc, #32]	; (800315c <increase_pec_counter+0x3c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <increase_pec_counter+0x3c>)
 800314c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	20000638 	.word	0x20000638

08003160 <goto_safe_state>:

void goto_safe_state(uint8_t reason)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
	{
		open_AIR();
		open_PRE();
	}
#else
	open_AIR();
 800316a:	f7ff fc29 	bl	80029c0 <open_AIR>
	open_PRE();
 800316e:	f7ff fc5d 	bl	8002a2c <open_PRE>
#if STOP_CORE_ON_SAFE_STATE
	status_data.opmode &= ~(1 << 0);
#endif

#if START_DEBUG_ON_SAFE_STATE
	status_data.opmode |= (1 << 3);
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <goto_safe_state+0x3c>)
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	f043 0308 	orr.w	r3, r3, #8
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b07      	ldr	r3, [pc, #28]	; (800319c <goto_safe_state+0x3c>)
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#endif

	status_data.safe_state_executed = true;
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <goto_safe_state+0x3c>)
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	status_data.reason_code = reason;
 800318c:	4a03      	ldr	r2, [pc, #12]	; (800319c <goto_safe_state+0x3c>)
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000638 	.word	0x20000638

080031a0 <test_limp>:

int32_t test_limp(status_data_t *status_data, limit_t *limit)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]

	if(status_data->min_voltage < limit->limp_min_voltage){
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d225      	bcs.n	8003202 <test_limp+0x62>
		status_data->limping = 1;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

		uint8_t data[8];

		data[0]=8;
 80031be:	2308      	movs	r3, #8
 80031c0:	743b      	strb	r3, [r7, #16]
		data[1]=0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	747b      	strb	r3, [r7, #17]
		data[2]=0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	74bb      	strb	r3, [r7, #18]
		data[3]=(uint8_t)status_data->sum_of_cells;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80031d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80031d8:	793b      	ldrb	r3, [r7, #4]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	74fb      	strb	r3, [r7, #19]

		data[4]=status_data->limping;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	753b      	strb	r3, [r7, #20]
		data[5]=0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	757b      	strb	r3, [r7, #21]
		data[6]=0xAB;
 80031ec:	23ab      	movs	r3, #171	; 0xab
 80031ee:	75bb      	strb	r3, [r7, #22]
		data[7]=0xCD;
 80031f0:	23cd      	movs	r3, #205	; 0xcd
 80031f2:	75fb      	strb	r3, [r7, #23]

		CanSend(data, 0x08);
 80031f4:	f107 0310 	add.w	r3, r7, #16
 80031f8:	2108      	movs	r1, #8
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe ff84 	bl	8002108 <CanSend>
 8003200:	e003      	b.n	800320a <test_limp+0x6a>
		}
	else{
		status_data->limping = 0;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		{
			status_data->limping = 0;
		}
	}
#endif*/
}
 800320a:	bf00      	nop
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <test_limits>:
}
*/


int8_t test_limits(status_data_t *status_data, limit_t *limit, int32_t retest)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
		//MAYBE WE DON'T WANT 50% ERRORS TO BE ALLOWED
#if TEST_OVERVOLTAGE
	if (status_data->max_voltage > limit->max_voltage)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d912      	bls.n	8003252 <test_limits+0x3e>
	{
		if(!(status_data->error_counters[OVERVOLTAGE]<=ERROR_COUNT_LIMIT && retest))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003230:	2b02      	cmp	r3, #2
 8003232:	d802      	bhi.n	800323a <test_limits+0x26>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <test_limits+0x32>
		{
			goto_safe_state(OVERVOLTAGE);
 800323a:	2001      	movs	r0, #1
 800323c:	f7ff ff90 	bl	8003160 <goto_safe_state>
			return -1;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	e08b      	b.n	800335e <test_limits+0x14a>
		}
		else
		{
			status_data->error_counters[OVERVOLTAGE]++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003250:	e008      	b.n	8003264 <test_limits+0x50>
		}
	}
	else if (status_data->error_counters[OVERVOLTAGE]>0)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d004      	beq.n	8003264 <test_limits+0x50>
	{
		status_data->error_counters[OVERVOLTAGE]--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800325e:	1e5a      	subs	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	67da      	str	r2, [r3, #124]	; 0x7c
	}
#endif

#if TEST_UNDERVOLTAGE
	if (status_data->min_voltage < limit->min_voltage)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	885b      	ldrh	r3, [r3, #2]
 800326c:	429a      	cmp	r2, r3
 800326e:	d215      	bcs.n	800329c <test_limits+0x88>
	{
		if(!(status_data->error_counters[UNDERVOLTAGE]<=ERROR_COUNT_LIMIT && retest))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003276:	2b02      	cmp	r3, #2
 8003278:	d802      	bhi.n	8003280 <test_limits+0x6c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <test_limits+0x78>
		{
			goto_safe_state(UNDERVOLTAGE);
 8003280:	2002      	movs	r0, #2
 8003282:	f7ff ff6d 	bl	8003160 <goto_safe_state>
			return -1;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
 800328a:	e068      	b.n	800335e <test_limits+0x14a>
		}
		else
		{
			status_data->error_counters[UNDERVOLTAGE]++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800329a:	e00b      	b.n	80032b4 <test_limits+0xa0>
		}
	}
	else if (status_data->error_counters[UNDERVOLTAGE]>0)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d006      	beq.n	80032b4 <test_limits+0xa0>
	{
		status_data->error_counters[UNDERVOLTAGE]--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ac:	1e5a      	subs	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#endif

#if TEST_OVERTEMPERATURE
	if (status_data->max_temp > limit->max_temp)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	dd15      	ble.n	80032f0 <test_limits+0xdc>
	{
		if(!(status_data->error_counters[OVERTEMP]<=ERROR_COUNT_LIMIT && retest))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d802      	bhi.n	80032d4 <test_limits+0xc0>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <test_limits+0xcc>
		{
			goto_safe_state(OVERTEMP);
 80032d4:	2003      	movs	r0, #3
 80032d6:	f7ff ff43 	bl	8003160 <goto_safe_state>
			return -1;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295
 80032de:	e03e      	b.n	800335e <test_limits+0x14a>
		}
		else
		{
			status_data->error_counters[OVERTEMP]++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80032ee:	e00b      	b.n	8003308 <test_limits+0xf4>
		}
	}
	else if (status_data->error_counters[OVERTEMP]>0)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d006      	beq.n	8003308 <test_limits+0xf4>
	{
		status_data->error_counters[OVERTEMP]--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003300:	1e5a      	subs	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		status_data->error_counters[OVERTEMP_CHARGING]--;
	}
#endif

#if TEST_UNDERTEMPERATURE
	if (status_data->min_temp < limit->min_temp)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	da15      	bge.n	8003344 <test_limits+0x130>
	{
		if(!(status_data->error_counters[UNDERTEMP]<=ERROR_COUNT_LIMIT && retest))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	2b02      	cmp	r3, #2
 8003320:	d802      	bhi.n	8003328 <test_limits+0x114>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <test_limits+0x120>
		{
			goto_safe_state(UNDERTEMP);
 8003328:	2004      	movs	r0, #4
 800332a:	f7ff ff19 	bl	8003160 <goto_safe_state>
			return -1;
 800332e:	f04f 33ff 	mov.w	r3, #4294967295
 8003332:	e014      	b.n	800335e <test_limits+0x14a>
		}
		else
		{
			status_data->error_counters[UNDERTEMP]++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003342:	e00b      	b.n	800335c <test_limits+0x148>
		}
	}
	else if (status_data->error_counters[UNDERTEMP]>0)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <test_limits+0x148>
	{
		status_data->error_counters[UNDERTEMP]--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	1e5a      	subs	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			status_data->error_counters[IVT_LOST]--;
		}
	}
#endif

	return 0;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <fan_control>:
	TIM8->CCR3 = INIT_DUTY_VALUE;
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
}


void fan_control(status_data_t *status_data){
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
	if(status_data->max_temp > 40)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003374:	2b28      	cmp	r3, #40	; 0x28
 8003376:	dd07      	ble.n	8003388 <fan_control+0x22>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8003378:	2201      	movs	r2, #1
 800337a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800337e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003382:	f001 fac3 	bl	800490c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
}
 8003386:	e006      	b.n	8003396 <fan_control+0x30>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
 8003388:	2200      	movs	r2, #0
 800338a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800338e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003392:	f001 fabb 	bl	800490c <HAL_GPIO_WritePin>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a6:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <HAL_MspInit+0x44>)
 80033a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033aa:	4a0e      	ldr	r2, [pc, #56]	; (80033e4 <HAL_MspInit+0x44>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6613      	str	r3, [r2, #96]	; 0x60
 80033b2:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <HAL_MspInit+0x44>)
 80033b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HAL_MspInit+0x44>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <HAL_MspInit+0x44>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6593      	str	r3, [r2, #88]	; 0x58
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_MspInit+0x44>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000

080033e8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b09a      	sub	sp, #104	; 0x68
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003400:	f107 0310 	add.w	r3, r7, #16
 8003404:	2244      	movs	r2, #68	; 0x44
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f004 ff7f 	bl	800830c <memset>
  if(hfdcan->Instance==FDCAN1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a20      	ldr	r2, [pc, #128]	; (8003494 <HAL_FDCAN_MspInit+0xac>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d139      	bne.n	800348c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800341c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800341e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003422:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003424:	f107 0310 	add.w	r3, r7, #16
 8003428:	4618      	mov	r0, r3
 800342a:	f002 f85f 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003434:	f7ff fa42 	bl	80028bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003438:	4b17      	ldr	r3, [pc, #92]	; (8003498 <HAL_FDCAN_MspInit+0xb0>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	4a16      	ldr	r2, [pc, #88]	; (8003498 <HAL_FDCAN_MspInit+0xb0>)
 800343e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003442:	6593      	str	r3, [r2, #88]	; 0x58
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <HAL_FDCAN_MspInit+0xb0>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_FDCAN_MspInit+0xb0>)
 8003452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003454:	4a10      	ldr	r2, [pc, #64]	; (8003498 <HAL_FDCAN_MspInit+0xb0>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_FDCAN_MspInit+0xb0>)
 800345e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003468:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800346c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800347a:	2309      	movs	r3, #9
 800347c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003482:	4619      	mov	r1, r3
 8003484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003488:	f001 f8a6 	bl	80045d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800348c:	bf00      	nop
 800348e:	3768      	adds	r7, #104	; 0x68
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40006400 	.word	0x40006400
 8003498:	40021000 	.word	0x40021000

0800349c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a17      	ldr	r2, [pc, #92]	; (8003518 <HAL_SPI_MspInit+0x7c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d128      	bne.n	8003510 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034be:	4b17      	ldr	r3, [pc, #92]	; (800351c <HAL_SPI_MspInit+0x80>)
 80034c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c2:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_SPI_MspInit+0x80>)
 80034c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034c8:	6613      	str	r3, [r2, #96]	; 0x60
 80034ca:	4b14      	ldr	r3, [pc, #80]	; (800351c <HAL_SPI_MspInit+0x80>)
 80034cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <HAL_SPI_MspInit+0x80>)
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	4a10      	ldr	r2, [pc, #64]	; (800351c <HAL_SPI_MspInit+0x80>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <HAL_SPI_MspInit+0x80>)
 80034e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034ee:	23e0      	movs	r3, #224	; 0xe0
 80034f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	2302      	movs	r3, #2
 80034f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fa:	2300      	movs	r3, #0
 80034fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034fe:	2305      	movs	r3, #5
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003502:	f107 0314 	add.w	r3, r7, #20
 8003506:	4619      	mov	r1, r3
 8003508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800350c:	f001 f864 	bl	80045d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003510:	bf00      	nop
 8003512:	3728      	adds	r7, #40	; 0x28
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40013000 	.word	0x40013000
 800351c:	40021000 	.word	0x40021000

08003520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <HAL_TIM_Base_MspInit+0x38>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10b      	bne.n	800354a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_TIM_Base_MspInit+0x3c>)
 8003534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <HAL_TIM_Base_MspInit+0x3c>)
 8003538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800353c:	6613      	str	r3, [r2, #96]	; 0x60
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <HAL_TIM_Base_MspInit+0x3c>)
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40013400 	.word	0x40013400
 800355c:	40021000 	.word	0x40021000

08003560 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 030c 	add.w	r3, r7, #12
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a11      	ldr	r2, [pc, #68]	; (80035c4 <HAL_TIM_MspPostInit+0x64>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d11b      	bne.n	80035ba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <HAL_TIM_MspPostInit+0x68>)
 8003584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003586:	4a10      	ldr	r2, [pc, #64]	; (80035c8 <HAL_TIM_MspPostInit+0x68>)
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <HAL_TIM_MspPostInit+0x68>)
 8003590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PB5     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800359a:	2320      	movs	r3, #32
 800359c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80035aa:	2303      	movs	r3, #3
 80035ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ae:	f107 030c 	add.w	r3, r7, #12
 80035b2:	4619      	mov	r1, r3
 80035b4:	4805      	ldr	r0, [pc, #20]	; (80035cc <HAL_TIM_MspPostInit+0x6c>)
 80035b6:	f001 f80f 	bl	80045d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80035ba:	bf00      	nop
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40013400 	.word	0x40013400
 80035c8:	40021000 	.word	0x40021000
 80035cc:	48000400 	.word	0x48000400

080035d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b09a      	sub	sp, #104	; 0x68
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	60da      	str	r2, [r3, #12]
 80035e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035e8:	f107 0310 	add.w	r3, r7, #16
 80035ec:	2244      	movs	r2, #68	; 0x44
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f004 fe8b 	bl	800830c <memset>
  if(huart->Instance==USART2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <HAL_UART_MspInit+0xa8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d136      	bne.n	800366e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003600:	2302      	movs	r3, #2
 8003602:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003608:	f107 0310 	add.w	r3, r7, #16
 800360c:	4618      	mov	r0, r3
 800360e:	f001 ff6d 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003618:	f7ff f950 	bl	80028bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <HAL_UART_MspInit+0xac>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	4a16      	ldr	r2, [pc, #88]	; (800367c <HAL_UART_MspInit+0xac>)
 8003622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003626:	6593      	str	r3, [r2, #88]	; 0x58
 8003628:	4b14      	ldr	r3, [pc, #80]	; (800367c <HAL_UART_MspInit+0xac>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_UART_MspInit+0xac>)
 8003636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003638:	4a10      	ldr	r2, [pc, #64]	; (800367c <HAL_UART_MspInit+0xac>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003640:	4b0e      	ldr	r3, [pc, #56]	; (800367c <HAL_UART_MspInit+0xac>)
 8003642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800364c:	230c      	movs	r3, #12
 800364e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	2302      	movs	r3, #2
 8003652:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003658:	2300      	movs	r3, #0
 800365a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800365c:	2307      	movs	r3, #7
 800365e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003664:	4619      	mov	r1, r3
 8003666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800366a:	f000 ffb5 	bl	80045d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800366e:	bf00      	nop
 8003670:	3768      	adds	r7, #104	; 0x68
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40004400 	.word	0x40004400
 800367c:	40021000 	.word	0x40021000

08003680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003684:	e7fe      	b.n	8003684 <NMI_Handler+0x4>

08003686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003686:	b480      	push	{r7}
 8003688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800368a:	e7fe      	b.n	800368a <HardFault_Handler+0x4>

0800368c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003690:	e7fe      	b.n	8003690 <MemManage_Handler+0x4>

08003692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003696:	e7fe      	b.n	8003696 <BusFault_Handler+0x4>

08003698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800369c:	e7fe      	b.n	800369c <UsageFault_Handler+0x4>

0800369e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036ba:	b480      	push	{r7}
 80036bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036cc:	f000 f944 	bl	8003958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <SystemInit+0x20>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <SystemInit+0x20>)
 80036e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <temp_calc>:





void temp_calc(uint8_t total_ic,  temp_data_t temp_data[][GPIO_NUM]){ //fix arguments
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	6039      	str	r1, [r7, #0]
 8003702:	71fb      	strb	r3, [r7, #7]
	float v, r, vv , t;
	for(int i = 0; i < total_ic; i++){
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	e091      	b.n	800382e <temp_calc+0x136>
		for(int j = 0; j < GPIO_NUM; j++){
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	e087      	b.n	8003820 <temp_calc+0x128>
			//vv =  ic[i].aux.a_codes[j];
			vv = temp_data[i][j].raw;
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	461a      	mov	r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4413      	add	r3, r2
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372e:	edc7 7a05 	vstr	s15, [r7, #20]
			v = vv/10000;
 8003732:	ed97 7a05 	vldr	s14, [r7, #20]
 8003736:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003858 <temp_calc+0x160>
 800373a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800373e:	edc7 7a04 	vstr	s15, [r7, #16]
			r = (v*10000)/(3-v);
 8003742:	edd7 7a04 	vldr	s15, [r7, #16]
 8003746:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003858 <temp_calc+0x160>
 800374a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800374e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003752:	edd7 7a04 	vldr	s15, [r7, #16]
 8003756:	ee37 7a67 	vsub.f32	s14, s14, s15
 800375a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800375e:	edc7 7a03 	vstr	s15, [r7, #12]
			t = log(r/10000);
 8003762:	edd7 7a03 	vldr	s15, [r7, #12]
 8003766:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003858 <temp_calc+0x160>
 800376a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800376e:	ee16 0a90 	vmov	r0, s13
 8003772:	f7fc feb5 	bl	80004e0 <__aeabi_f2d>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	ec43 2b10 	vmov	d0, r2, r3
 800377e:	f004 fdcf 	bl	8008320 <log>
 8003782:	ec53 2b10 	vmov	r2, r3, d0
 8003786:	4610      	mov	r0, r2
 8003788:	4619      	mov	r1, r3
 800378a:	f7fd f9b1 	bl	8000af0 <__aeabi_d2f>
 800378e:	4603      	mov	r3, r0
 8003790:	60bb      	str	r3, [r7, #8]
			    t = t / 3660;
 8003792:	ed97 7a02 	vldr	s14, [r7, #8]
 8003796:	eddf 6a31 	vldr	s13, [pc, #196]	; 800385c <temp_calc+0x164>
 800379a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800379e:	edc7 7a02 	vstr	s15, [r7, #8]
			    t = t + 1/298.15;
 80037a2:	68b8      	ldr	r0, [r7, #8]
 80037a4:	f7fc fe9c 	bl	80004e0 <__aeabi_f2d>
 80037a8:	a327      	add	r3, pc, #156	; (adr r3, 8003848 <temp_calc+0x150>)
 80037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ae:	f7fc fd39 	bl	8000224 <__adddf3>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	f7fd f999 	bl	8000af0 <__aeabi_d2f>
 80037be:	4603      	mov	r3, r0
 80037c0:	60bb      	str	r3, [r7, #8]
			    t = 1/t;
 80037c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80037ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ce:	edc7 7a02 	vstr	s15, [r7, #8]

			    t -= 273.15;
 80037d2:	68b8      	ldr	r0, [r7, #8]
 80037d4:	f7fc fe84 	bl	80004e0 <__aeabi_f2d>
 80037d8:	a31d      	add	r3, pc, #116	; (adr r3, 8003850 <temp_calc+0x158>)
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f7fc fd1f 	bl	8000220 <__aeabi_dsub>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	f7fd f981 	bl	8000af0 <__aeabi_d2f>
 80037ee:	4603      	mov	r3, r0
 80037f0:	60bb      	str	r3, [r7, #8]
		temp_data[i][j].temp = (int)t;
 80037f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	461a      	mov	r2, r3
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	441a      	add	r2, r3
 800380a:	ee17 3a90 	vmov	r3, s15
 800380e:	b219      	sxth	r1, r3
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	460a      	mov	r2, r1
 8003818:	805a      	strh	r2, [r3, #2]
		for(int j = 0; j < GPIO_NUM; j++){
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	3301      	adds	r3, #1
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b0b      	cmp	r3, #11
 8003824:	f77f af74 	ble.w	8003710 <temp_calc+0x18>
	for(int i = 0; i < total_ic; i++){
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	3301      	adds	r3, #1
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	429a      	cmp	r2, r3
 8003834:	f6ff af69 	blt.w	800370a <temp_calc+0x12>
		//	ic[i].aux.s_temp[j] = t;

		}
	}

}
 8003838:	bf00      	nop
 800383a:	bf00      	nop
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	f3af 8000 	nop.w
 8003848:	dcb5db83 	.word	0xdcb5db83
 800384c:	3f6b79e1 	.word	0x3f6b79e1
 8003850:	66666666 	.word	0x66666666
 8003854:	40711266 	.word	0x40711266
 8003858:	461c4000 	.word	0x461c4000
 800385c:	4564c000 	.word	0x4564c000

08003860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003860:	480d      	ldr	r0, [pc, #52]	; (8003898 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003862:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003864:	480d      	ldr	r0, [pc, #52]	; (800389c <LoopForever+0x6>)
  ldr r1, =_edata
 8003866:	490e      	ldr	r1, [pc, #56]	; (80038a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003868:	4a0e      	ldr	r2, [pc, #56]	; (80038a4 <LoopForever+0xe>)
  movs r3, #0
 800386a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800386c:	e002      	b.n	8003874 <LoopCopyDataInit>

0800386e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800386e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003872:	3304      	adds	r3, #4

08003874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003878:	d3f9      	bcc.n	800386e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800387a:	4a0b      	ldr	r2, [pc, #44]	; (80038a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800387c:	4c0b      	ldr	r4, [pc, #44]	; (80038ac <LoopForever+0x16>)
  movs r3, #0
 800387e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003880:	e001      	b.n	8003886 <LoopFillZerobss>

08003882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003884:	3204      	adds	r2, #4

08003886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003888:	d3fb      	bcc.n	8003882 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800388a:	f7ff ff23 	bl	80036d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800388e:	f004 fd19 	bl	80082c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003892:	f7fe fd5f 	bl	8002354 <main>

08003896 <LoopForever>:

LoopForever:
    b LoopForever
 8003896:	e7fe      	b.n	8003896 <LoopForever>
  ldr   r0, =_estack
 8003898:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800389c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038a0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80038a4:	08008ba4 	.word	0x08008ba4
  ldr r2, =_sbss
 80038a8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80038ac:	20000718 	.word	0x20000718

080038b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038b0:	e7fe      	b.n	80038b0 <ADC1_2_IRQHandler>

080038b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038bc:	2003      	movs	r0, #3
 80038be:	f000 f93d 	bl	8003b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038c2:	2000      	movs	r0, #0
 80038c4:	f000 f80e 	bl	80038e4 <HAL_InitTick>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	71fb      	strb	r3, [r7, #7]
 80038d2:	e001      	b.n	80038d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038d4:	f7ff fd64 	bl	80033a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038d8:	79fb      	ldrb	r3, [r7, #7]

}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80038f0:	4b16      	ldr	r3, [pc, #88]	; (800394c <HAL_InitTick+0x68>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d022      	beq.n	800393e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80038f8:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_InitTick+0x6c>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <HAL_InitTick+0x68>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003904:	fbb1 f3f3 	udiv	r3, r1, r3
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f93a 	bl	8003b86 <HAL_SYSTICK_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10f      	bne.n	8003938 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b0f      	cmp	r3, #15
 800391c:	d809      	bhi.n	8003932 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800391e:	2200      	movs	r2, #0
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	f04f 30ff 	mov.w	r0, #4294967295
 8003926:	f000 f914 	bl	8003b52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <HAL_InitTick+0x70>)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	e007      	b.n	8003942 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	e004      	b.n	8003942 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
 800393c:	e001      	b.n	8003942 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000038 	.word	0x20000038
 8003950:	20000030 	.word	0x20000030
 8003954:	20000034 	.word	0x20000034

08003958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_IncTick+0x1c>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_IncTick+0x20>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4413      	add	r3, r2
 8003966:	4a03      	ldr	r2, [pc, #12]	; (8003974 <HAL_IncTick+0x1c>)
 8003968:	6013      	str	r3, [r2, #0]
}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	20000714 	.word	0x20000714
 8003978:	20000038 	.word	0x20000038

0800397c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return uwTick;
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_GetTick+0x14>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000714 	.word	0x20000714

08003994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7ff ffee 	bl	800397c <HAL_GetTick>
 80039a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d004      	beq.n	80039b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_Delay+0x40>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039b8:	bf00      	nop
 80039ba:	f7ff ffdf 	bl	800397c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d8f7      	bhi.n	80039ba <HAL_Delay+0x26>
  {
  }
}
 80039ca:	bf00      	nop
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000038 	.word	0x20000038

080039d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <__NVIC_SetPriorityGrouping+0x44>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039f4:	4013      	ands	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a0a:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <__NVIC_SetPriorityGrouping+0x44>)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	60d3      	str	r3, [r2, #12]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <__NVIC_GetPriorityGrouping+0x18>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	f003 0307 	and.w	r3, r3, #7
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	6039      	str	r1, [r7, #0]
 8003a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	db0a      	blt.n	8003a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	490c      	ldr	r1, [pc, #48]	; (8003a88 <__NVIC_SetPriority+0x4c>)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	0112      	lsls	r2, r2, #4
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a64:	e00a      	b.n	8003a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4908      	ldr	r1, [pc, #32]	; (8003a8c <__NVIC_SetPriority+0x50>)
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	3b04      	subs	r3, #4
 8003a74:	0112      	lsls	r2, r2, #4
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	440b      	add	r3, r1
 8003a7a:	761a      	strb	r2, [r3, #24]
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e000e100 	.word	0xe000e100
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b089      	sub	sp, #36	; 0x24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f1c3 0307 	rsb	r3, r3, #7
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	bf28      	it	cs
 8003aae:	2304      	movcs	r3, #4
 8003ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d902      	bls.n	8003ac0 <NVIC_EncodePriority+0x30>
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3b03      	subs	r3, #3
 8003abe:	e000      	b.n	8003ac2 <NVIC_EncodePriority+0x32>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	43d9      	mvns	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae8:	4313      	orrs	r3, r2
         );
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3724      	adds	r7, #36	; 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b08:	d301      	bcc.n	8003b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00f      	b.n	8003b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <SysTick_Config+0x40>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b16:	210f      	movs	r1, #15
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	f7ff ff8e 	bl	8003a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <SysTick_Config+0x40>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b26:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <SysTick_Config+0x40>)
 8003b28:	2207      	movs	r2, #7
 8003b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	e000e010 	.word	0xe000e010

08003b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ff47 	bl	80039d8 <__NVIC_SetPriorityGrouping>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b60:	f7ff ff5e 	bl	8003a20 <__NVIC_GetPriorityGrouping>
 8003b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	6978      	ldr	r0, [r7, #20]
 8003b6c:	f7ff ff90 	bl	8003a90 <NVIC_EncodePriority>
 8003b70:	4602      	mov	r2, r0
 8003b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff ff5f 	bl	8003a3c <__NVIC_SetPriority>
}
 8003b7e:	bf00      	nop
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff ffb2 	bl	8003af8 <SysTick_Config>
 8003b94:	4603      	mov	r3, r0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e147      	b.n	8003e42 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff fc0e 	bl	80033e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0210 	bic.w	r2, r2, #16
 8003bda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bdc:	f7ff fece 	bl	800397c <HAL_GetTick>
 8003be0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003be2:	e012      	b.n	8003c0a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003be4:	f7ff feca 	bl	800397c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b0a      	cmp	r3, #10
 8003bf0:	d90b      	bls.n	8003c0a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2203      	movs	r2, #3
 8003c02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e11b      	b.n	8003e42 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d0e5      	beq.n	8003be4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c28:	f7ff fea8 	bl	800397c <HAL_GetTick>
 8003c2c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c2e:	e012      	b.n	8003c56 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c30:	f7ff fea4 	bl	800397c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b0a      	cmp	r3, #10
 8003c3c:	d90b      	bls.n	8003c56 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c42:	f043 0201 	orr.w	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0f5      	b.n	8003e42 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0e5      	beq.n	8003c30 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0202 	orr.w	r2, r2, #2
 8003c72:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a74      	ldr	r2, [pc, #464]	; (8003e4c <HAL_FDCAN_Init+0x2ac>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d103      	bne.n	8003c86 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003c7e:	4a74      	ldr	r2, [pc, #464]	; (8003e50 <HAL_FDCAN_Init+0x2b0>)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	7c1b      	ldrb	r3, [r3, #16]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d108      	bne.n	8003ca0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699a      	ldr	r2, [r3, #24]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9c:	619a      	str	r2, [r3, #24]
 8003c9e:	e007      	b.n	8003cb0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cae:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	7c5b      	ldrb	r3, [r3, #17]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d108      	bne.n	8003cca <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cc6:	619a      	str	r2, [r3, #24]
 8003cc8:	e007      	b.n	8003cda <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cd8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7c9b      	ldrb	r3, [r3, #18]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d108      	bne.n	8003cf4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cf0:	619a      	str	r2, [r3, #24]
 8003cf2:	e007      	b.n	8003d04 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d02:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699a      	ldr	r2, [r3, #24]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003d28:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0210 	bic.w	r2, r2, #16
 8003d38:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d108      	bne.n	8003d54 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0204 	orr.w	r2, r2, #4
 8003d50:	619a      	str	r2, [r3, #24]
 8003d52:	e02c      	b.n	8003dae <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d028      	beq.n	8003dae <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d01c      	beq.n	8003d9e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d72:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0210 	orr.w	r2, r2, #16
 8003d82:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d110      	bne.n	8003dae <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0220 	orr.w	r2, r2, #32
 8003d9a:	619a      	str	r2, [r3, #24]
 8003d9c:	e007      	b.n	8003dae <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699a      	ldr	r2, [r3, #24]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0220 	orr.w	r2, r2, #32
 8003dac:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003dbe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003dc6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003dd6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003dd8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003de2:	d115      	bne.n	8003e10 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	3b01      	subs	r3, #1
 8003df0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003df2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003dfc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	3b01      	subs	r3, #1
 8003e06:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003e0c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e0e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fb04 	bl	8004434 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40006400 	.word	0x40006400
 8003e50:	40006500 	.word	0x40006500

08003e54 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e64:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d002      	beq.n	8003e72 <HAL_FDCAN_ConfigFilter+0x1e>
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d13d      	bne.n	8003eee <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d119      	bne.n	8003eae <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003e86:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003e8e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e01d      	b.n	8003eea <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	075a      	lsls	r2, r3, #29
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	079a      	lsls	r2, r3, #30
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e006      	b.n	8003efc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef2:	f043 0202 	orr.w	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d116      	bne.n	8003f50 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f2a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	011a      	lsls	r2, r3, #4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	431a      	orrs	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e006      	b.n	8003f5e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f54:	f043 0204 	orr.w	r2, r3, #4
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
  }
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d11f      	bne.n	8003fc2 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d10d      	bne.n	8003fa4 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f90:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	025a      	lsls	r2, r3, #9
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003fa2:	e00c      	b.n	8003fbe <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fac:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	021a      	lsls	r2, r3, #8
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e006      	b.n	8003fd0 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
  }
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d110      	bne.n	8004012 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	e006      	b.n	8004020 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004016:	f043 0204 	orr.w	r2, r3, #4
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
  }
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d12c      	bne.n	800409e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800404c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004058:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e023      	b.n	80040ac <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fa30 	bl	80044e0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	fa01 f202 	lsl.w	r2, r1, r2
 800408c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004090:	2201      	movs	r2, #1
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	409a      	lsls	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e006      	b.n	80040ac <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a2:	f043 0208 	orr.w	r2, r3, #8
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b08b      	sub	sp, #44	; 0x2c
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040c8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80040ca:	7efb      	ldrb	r3, [r7, #27]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	f040 80bc 	bne.w	800424a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d121      	bne.n	800411c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d107      	bne.n	80040f8 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0af      	b.n	8004258 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	440b      	add	r3, r1
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
 800411a:	e020      	b.n	800415e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	2b00      	cmp	r3, #0
 800412a:	d107      	bne.n	800413c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004130:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e08d      	b.n	8004258 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004144:	0a1b      	lsrs	r3, r3, #8
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	440b      	add	r3, r1
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d107      	bne.n	8004182 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	0c9b      	lsrs	r3, r3, #18
 8004178:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	e005      	b.n	800418e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	3304      	adds	r3, #4
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	0e1b      	lsrs	r3, r3, #24
 80041e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	0fda      	lsrs	r2, r3, #31
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	3304      	adds	r3, #4
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	623b      	str	r3, [r7, #32]
 8004200:	e00a      	b.n	8004218 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	441a      	add	r2, r3
 8004208:	6839      	ldr	r1, [r7, #0]
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	440b      	add	r3, r1
 800420e:	7812      	ldrb	r2, [r2, #0]
 8004210:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	3301      	adds	r3, #1
 8004216:	623b      	str	r3, [r7, #32]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	4a11      	ldr	r2, [pc, #68]	; (8004264 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8004220:	5cd3      	ldrb	r3, [r2, r3]
 8004222:	461a      	mov	r2, r3
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	4293      	cmp	r3, r2
 8004228:	d3eb      	bcc.n	8004202 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d105      	bne.n	800423c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800423a:	e004      	b.n	8004246 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	e006      	b.n	8004258 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424e:	f043 0208 	orr.w	r2, r3, #8
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
  }
}
 8004258:	4618      	mov	r0, r3
 800425a:	372c      	adds	r7, #44	; 0x2c
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	08008b58 	.word	0x08008b58

08004268 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800427a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d003      	beq.n	800428a <HAL_FDCAN_ActivateNotification+0x22>
 8004282:	7dfb      	ldrb	r3, [r7, #23]
 8004284:	2b02      	cmp	r3, #2
 8004286:	f040 80c8 	bne.w	800441a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d03b      	beq.n	800431e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d004      	beq.n	80042ba <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d031      	beq.n	800431e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d004      	beq.n	80042ce <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d027      	beq.n	800431e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d004      	beq.n	80042e2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01d      	beq.n	800431e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d004      	beq.n	80042f6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d013      	beq.n	800431e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d107      	bne.n	800432e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d13b      	bne.n	80043ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004348:	2b00      	cmp	r3, #0
 800434a:	d004      	beq.n	8004356 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d131      	bne.n	80043ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800435c:	2b00      	cmp	r3, #0
 800435e:	d004      	beq.n	800436a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d127      	bne.n	80043ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004370:	2b00      	cmp	r3, #0
 8004372:	d004      	beq.n	800437e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d11d      	bne.n	80043ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b00      	cmp	r3, #0
 8004390:	d113      	bne.n	80043ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00c      	beq.n	80043ca <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0202 	orr.w	r2, r2, #2
 80043c8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d009      	beq.n	80043e8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d009      	beq.n	8004406 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	430a      	orrs	r2, r1
 8004402:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	430a      	orrs	r2, r1
 8004414:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e006      	b.n	8004428 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441e:	f043 0202 	orr.w	r2, r3, #2
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800443c:	4b27      	ldr	r3, [pc, #156]	; (80044dc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800443e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800444e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004456:	041a      	lsls	r2, r3, #16
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004474:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	061a      	lsls	r2, r3, #24
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e005      	b.n	80044c2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3304      	adds	r3, #4
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d3f3      	bcc.n	80044b6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	4000a400 	.word	0x4000a400

080044e0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b089      	sub	sp, #36	; 0x24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80044fe:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004506:	4313      	orrs	r3, r2
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	e00a      	b.n	8004522 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004514:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800451a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800451c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004520:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800452c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004532:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004538:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4413      	add	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	440b      	add	r3, r1
 8004552:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	3304      	adds	r3, #4
 800455e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	3304      	adds	r3, #4
 800456a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e020      	b.n	80045b4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	3303      	adds	r3, #3
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4413      	add	r3, r2
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	3302      	adds	r3, #2
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	440b      	add	r3, r1
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800458a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	3301      	adds	r3, #1
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	440b      	add	r3, r1
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004598:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	440a      	add	r2, r1
 80045a0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80045a2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	3304      	adds	r3, #4
 80045ac:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	3304      	adds	r3, #4
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	4a06      	ldr	r2, [pc, #24]	; (80045d4 <FDCAN_CopyMessageToRAM+0xf4>)
 80045bc:	5cd3      	ldrb	r3, [r2, r3]
 80045be:	461a      	mov	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d3d5      	bcc.n	8004572 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	3724      	adds	r7, #36	; 0x24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	08008b58 	.word	0x08008b58

080045d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045e6:	e15a      	b.n	800489e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	2101      	movs	r1, #1
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	fa01 f303 	lsl.w	r3, r1, r3
 80045f4:	4013      	ands	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 814c 	beq.w	8004898 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d005      	beq.n	8004618 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004614:	2b02      	cmp	r3, #2
 8004616:	d130      	bne.n	800467a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	2203      	movs	r2, #3
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4013      	ands	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800464e:	2201      	movs	r2, #1
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4013      	ands	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	f003 0201 	and.w	r2, r3, #1
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b03      	cmp	r3, #3
 8004684:	d017      	beq.n	80046b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	2203      	movs	r2, #3
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43db      	mvns	r3, r3
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d123      	bne.n	800470a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	08da      	lsrs	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3208      	adds	r2, #8
 80046ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	220f      	movs	r2, #15
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4013      	ands	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	08da      	lsrs	r2, r3, #3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3208      	adds	r2, #8
 8004704:	6939      	ldr	r1, [r7, #16]
 8004706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	2203      	movs	r2, #3
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4013      	ands	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 0203 	and.w	r2, r3, #3
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80a6 	beq.w	8004898 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800474c:	4b5b      	ldr	r3, [pc, #364]	; (80048bc <HAL_GPIO_Init+0x2e4>)
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	4a5a      	ldr	r2, [pc, #360]	; (80048bc <HAL_GPIO_Init+0x2e4>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	6613      	str	r3, [r2, #96]	; 0x60
 8004758:	4b58      	ldr	r3, [pc, #352]	; (80048bc <HAL_GPIO_Init+0x2e4>)
 800475a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004764:	4a56      	ldr	r2, [pc, #344]	; (80048c0 <HAL_GPIO_Init+0x2e8>)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	3302      	adds	r3, #2
 800476c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f003 0303 	and.w	r3, r3, #3
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	220f      	movs	r2, #15
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43db      	mvns	r3, r3
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4013      	ands	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800478e:	d01f      	beq.n	80047d0 <HAL_GPIO_Init+0x1f8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a4c      	ldr	r2, [pc, #304]	; (80048c4 <HAL_GPIO_Init+0x2ec>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d019      	beq.n	80047cc <HAL_GPIO_Init+0x1f4>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a4b      	ldr	r2, [pc, #300]	; (80048c8 <HAL_GPIO_Init+0x2f0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <HAL_GPIO_Init+0x1f0>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a4a      	ldr	r2, [pc, #296]	; (80048cc <HAL_GPIO_Init+0x2f4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00d      	beq.n	80047c4 <HAL_GPIO_Init+0x1ec>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a49      	ldr	r2, [pc, #292]	; (80048d0 <HAL_GPIO_Init+0x2f8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d007      	beq.n	80047c0 <HAL_GPIO_Init+0x1e8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a48      	ldr	r2, [pc, #288]	; (80048d4 <HAL_GPIO_Init+0x2fc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d101      	bne.n	80047bc <HAL_GPIO_Init+0x1e4>
 80047b8:	2305      	movs	r3, #5
 80047ba:	e00a      	b.n	80047d2 <HAL_GPIO_Init+0x1fa>
 80047bc:	2306      	movs	r3, #6
 80047be:	e008      	b.n	80047d2 <HAL_GPIO_Init+0x1fa>
 80047c0:	2304      	movs	r3, #4
 80047c2:	e006      	b.n	80047d2 <HAL_GPIO_Init+0x1fa>
 80047c4:	2303      	movs	r3, #3
 80047c6:	e004      	b.n	80047d2 <HAL_GPIO_Init+0x1fa>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e002      	b.n	80047d2 <HAL_GPIO_Init+0x1fa>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <HAL_GPIO_Init+0x1fa>
 80047d0:	2300      	movs	r3, #0
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	f002 0203 	and.w	r2, r2, #3
 80047d8:	0092      	lsls	r2, r2, #2
 80047da:	4093      	lsls	r3, r2
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047e2:	4937      	ldr	r1, [pc, #220]	; (80048c0 <HAL_GPIO_Init+0x2e8>)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	3302      	adds	r3, #2
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047f0:	4b39      	ldr	r3, [pc, #228]	; (80048d8 <HAL_GPIO_Init+0x300>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004814:	4a30      	ldr	r2, [pc, #192]	; (80048d8 <HAL_GPIO_Init+0x300>)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800481a:	4b2f      	ldr	r3, [pc, #188]	; (80048d8 <HAL_GPIO_Init+0x300>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	43db      	mvns	r3, r3
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4013      	ands	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800483e:	4a26      	ldr	r2, [pc, #152]	; (80048d8 <HAL_GPIO_Init+0x300>)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004844:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_GPIO_Init+0x300>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	43db      	mvns	r3, r3
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4013      	ands	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004868:	4a1b      	ldr	r2, [pc, #108]	; (80048d8 <HAL_GPIO_Init+0x300>)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800486e:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <HAL_GPIO_Init+0x300>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	43db      	mvns	r3, r3
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4013      	ands	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004892:	4a11      	ldr	r2, [pc, #68]	; (80048d8 <HAL_GPIO_Init+0x300>)
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	3301      	adds	r3, #1
 800489c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f47f ae9d 	bne.w	80045e8 <HAL_GPIO_Init+0x10>
  }
}
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40021000 	.word	0x40021000
 80048c0:	40010000 	.word	0x40010000
 80048c4:	48000400 	.word	0x48000400
 80048c8:	48000800 	.word	0x48000800
 80048cc:	48000c00 	.word	0x48000c00
 80048d0:	48001000 	.word	0x48001000
 80048d4:	48001400 	.word	0x48001400
 80048d8:	40010400 	.word	0x40010400

080048dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	887b      	ldrh	r3, [r7, #2]
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
 80048f8:	e001      	b.n	80048fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	807b      	strh	r3, [r7, #2]
 8004918:	4613      	mov	r3, r2
 800491a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800491c:	787b      	ldrb	r3, [r7, #1]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004922:	887a      	ldrh	r2, [r7, #2]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004928:	e002      	b.n	8004930 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800492a:	887a      	ldrh	r2, [r7, #2]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d141      	bne.n	80049ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800494a:	4b4b      	ldr	r3, [pc, #300]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004956:	d131      	bne.n	80049bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004958:	4b47      	ldr	r3, [pc, #284]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495e:	4a46      	ldr	r2, [pc, #280]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004964:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004968:	4b43      	ldr	r3, [pc, #268]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004970:	4a41      	ldr	r2, [pc, #260]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004976:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004978:	4b40      	ldr	r3, [pc, #256]	; (8004a7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2232      	movs	r2, #50	; 0x32
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	4a3f      	ldr	r2, [pc, #252]	; (8004a80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	0c9b      	lsrs	r3, r3, #18
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800498e:	e002      	b.n	8004996 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3b01      	subs	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004996:	4b38      	ldr	r3, [pc, #224]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a2:	d102      	bne.n	80049aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f2      	bne.n	8004990 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049aa:	4b33      	ldr	r3, [pc, #204]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b6:	d158      	bne.n	8004a6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e057      	b.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049bc:	4b2e      	ldr	r3, [pc, #184]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049c2:	4a2d      	ldr	r2, [pc, #180]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80049cc:	e04d      	b.n	8004a6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d4:	d141      	bne.n	8004a5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049d6:	4b28      	ldr	r3, [pc, #160]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e2:	d131      	bne.n	8004a48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049e4:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ea:	4a23      	ldr	r2, [pc, #140]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049f4:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049fc:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a04:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2232      	movs	r2, #50	; 0x32
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a10:	fba2 2303 	umull	r2, r3, r2, r3
 8004a14:	0c9b      	lsrs	r3, r3, #18
 8004a16:	3301      	adds	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a1a:	e002      	b.n	8004a22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a22:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2e:	d102      	bne.n	8004a36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f2      	bne.n	8004a1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a42:	d112      	bne.n	8004a6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e011      	b.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a58:	e007      	b.n	8004a6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a5a:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a62:	4a05      	ldr	r2, [pc, #20]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a68:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40007000 	.word	0x40007000
 8004a7c:	20000030 	.word	0x20000030
 8004a80:	431bde83 	.word	0x431bde83

08004a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e306      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d075      	beq.n	8004b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aa2:	4b97      	ldr	r3, [pc, #604]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aac:	4b94      	ldr	r3, [pc, #592]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2b0c      	cmp	r3, #12
 8004aba:	d102      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x3e>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d002      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x44>
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac8:	4b8d      	ldr	r3, [pc, #564]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d05b      	beq.n	8004b8c <HAL_RCC_OscConfig+0x108>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d157      	bne.n	8004b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e2e1      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d106      	bne.n	8004af8 <HAL_RCC_OscConfig+0x74>
 8004aea:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a84      	ldr	r2, [pc, #528]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e01d      	b.n	8004b34 <HAL_RCC_OscConfig+0xb0>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x98>
 8004b02:	4b7f      	ldr	r3, [pc, #508]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a7e      	ldr	r2, [pc, #504]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	4b7c      	ldr	r3, [pc, #496]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a7b      	ldr	r2, [pc, #492]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	e00b      	b.n	8004b34 <HAL_RCC_OscConfig+0xb0>
 8004b1c:	4b78      	ldr	r3, [pc, #480]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a77      	ldr	r2, [pc, #476]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	4b75      	ldr	r3, [pc, #468]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a74      	ldr	r2, [pc, #464]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d013      	beq.n	8004b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3c:	f7fe ff1e 	bl	800397c <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b44:	f7fe ff1a 	bl	800397c <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b64      	cmp	r3, #100	; 0x64
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e2a6      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b56:	4b6a      	ldr	r3, [pc, #424]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0xc0>
 8004b62:	e014      	b.n	8004b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fe ff0a 	bl	800397c <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b6c:	f7fe ff06 	bl	800397c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b64      	cmp	r3, #100	; 0x64
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e292      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b7e:	4b60      	ldr	r3, [pc, #384]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0xe8>
 8004b8a:	e000      	b.n	8004b8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d075      	beq.n	8004c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b9a:	4b59      	ldr	r3, [pc, #356]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ba4:	4b56      	ldr	r3, [pc, #344]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b0c      	cmp	r3, #12
 8004bb2:	d102      	bne.n	8004bba <HAL_RCC_OscConfig+0x136>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d002      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x13c>
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d11f      	bne.n	8004c00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc0:	4b4f      	ldr	r3, [pc, #316]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x154>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e265      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd8:	4b49      	ldr	r3, [pc, #292]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	4946      	ldr	r1, [pc, #280]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bec:	4b45      	ldr	r3, [pc, #276]	; (8004d04 <HAL_RCC_OscConfig+0x280>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe fe77 	bl	80038e4 <HAL_InitTick>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d043      	beq.n	8004c84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e251      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d023      	beq.n	8004c50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c08:	4b3d      	ldr	r3, [pc, #244]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a3c      	ldr	r2, [pc, #240]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fe feb2 	bl	800397c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c1c:	f7fe feae 	bl	800397c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e23a      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c2e:	4b34      	ldr	r3, [pc, #208]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3a:	4b31      	ldr	r3, [pc, #196]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	061b      	lsls	r3, r3, #24
 8004c48:	492d      	ldr	r1, [pc, #180]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	604b      	str	r3, [r1, #4]
 8004c4e:	e01a      	b.n	8004c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c50:	4b2b      	ldr	r3, [pc, #172]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a2a      	ldr	r2, [pc, #168]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7fe fe8e 	bl	800397c <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c64:	f7fe fe8a 	bl	800397c <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e216      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c76:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCC_OscConfig+0x1e0>
 8004c82:	e000      	b.n	8004c86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d041      	beq.n	8004d16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d01c      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c9a:	4b19      	ldr	r3, [pc, #100]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca0:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004caa:	f7fe fe67 	bl	800397c <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb2:	f7fe fe63 	bl	800397c <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e1ef      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cc4:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0ef      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x22e>
 8004cd2:	e020      	b.n	8004d16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cda:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fe fe4a 	bl	800397c <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cea:	e00d      	b.n	8004d08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cec:	f7fe fe46 	bl	800397c <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d906      	bls.n	8004d08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e1d2      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000
 8004d04:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d08:	4b8c      	ldr	r3, [pc, #560]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1ea      	bne.n	8004cec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 80a6 	beq.w	8004e70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d24:	2300      	movs	r3, #0
 8004d26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d28:	4b84      	ldr	r3, [pc, #528]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_OscConfig+0x2b4>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <HAL_RCC_OscConfig+0x2b6>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00d      	beq.n	8004d5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3e:	4b7f      	ldr	r3, [pc, #508]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d42:	4a7e      	ldr	r2, [pc, #504]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d48:	6593      	str	r3, [r2, #88]	; 0x58
 8004d4a:	4b7c      	ldr	r3, [pc, #496]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d56:	2301      	movs	r3, #1
 8004d58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d5a:	4b79      	ldr	r3, [pc, #484]	; (8004f40 <HAL_RCC_OscConfig+0x4bc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d118      	bne.n	8004d98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d66:	4b76      	ldr	r3, [pc, #472]	; (8004f40 <HAL_RCC_OscConfig+0x4bc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a75      	ldr	r2, [pc, #468]	; (8004f40 <HAL_RCC_OscConfig+0x4bc>)
 8004d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d72:	f7fe fe03 	bl	800397c <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7a:	f7fe fdff 	bl	800397c <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e18b      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d8c:	4b6c      	ldr	r3, [pc, #432]	; (8004f40 <HAL_RCC_OscConfig+0x4bc>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d108      	bne.n	8004db2 <HAL_RCC_OscConfig+0x32e>
 8004da0:	4b66      	ldr	r3, [pc, #408]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	4a65      	ldr	r2, [pc, #404]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004db0:	e024      	b.n	8004dfc <HAL_RCC_OscConfig+0x378>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b05      	cmp	r3, #5
 8004db8:	d110      	bne.n	8004ddc <HAL_RCC_OscConfig+0x358>
 8004dba:	4b60      	ldr	r3, [pc, #384]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc0:	4a5e      	ldr	r2, [pc, #376]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004dc2:	f043 0304 	orr.w	r3, r3, #4
 8004dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dca:	4b5c      	ldr	r3, [pc, #368]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd0:	4a5a      	ldr	r2, [pc, #360]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dda:	e00f      	b.n	8004dfc <HAL_RCC_OscConfig+0x378>
 8004ddc:	4b57      	ldr	r3, [pc, #348]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de2:	4a56      	ldr	r2, [pc, #344]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dec:	4b53      	ldr	r3, [pc, #332]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df2:	4a52      	ldr	r2, [pc, #328]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004df4:	f023 0304 	bic.w	r3, r3, #4
 8004df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d016      	beq.n	8004e32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e04:	f7fe fdba 	bl	800397c <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0a:	e00a      	b.n	8004e22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0c:	f7fe fdb6 	bl	800397c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e140      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e22:	4b46      	ldr	r3, [pc, #280]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ed      	beq.n	8004e0c <HAL_RCC_OscConfig+0x388>
 8004e30:	e015      	b.n	8004e5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e32:	f7fe fda3 	bl	800397c <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f7fe fd9f 	bl	800397c <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e129      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e50:	4b3a      	ldr	r3, [pc, #232]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1ed      	bne.n	8004e3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e5e:	7ffb      	ldrb	r3, [r7, #31]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d105      	bne.n	8004e70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e64:	4b35      	ldr	r3, [pc, #212]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e68:	4a34      	ldr	r2, [pc, #208]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d03c      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01c      	beq.n	8004ebe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e84:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e8a:	4a2c      	ldr	r2, [pc, #176]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e94:	f7fe fd72 	bl	800397c <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e9c:	f7fe fd6e 	bl	800397c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e0fa      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eae:	4b23      	ldr	r3, [pc, #140]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0ef      	beq.n	8004e9c <HAL_RCC_OscConfig+0x418>
 8004ebc:	e01b      	b.n	8004ef6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ebe:	4b1f      	ldr	r3, [pc, #124]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ec4:	4a1d      	ldr	r2, [pc, #116]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ece:	f7fe fd55 	bl	800397c <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ed6:	f7fe fd51 	bl	800397c <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e0dd      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ee8:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1ef      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80d1 	beq.w	80050a2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f00:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 030c 	and.w	r3, r3, #12
 8004f08:	2b0c      	cmp	r3, #12
 8004f0a:	f000 808b 	beq.w	8005024 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d15e      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <HAL_RCC_OscConfig+0x4b8>)
 8004f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f22:	f7fe fd2b 	bl	800397c <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f28:	e00c      	b.n	8004f44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2a:	f7fe fd27 	bl	800397c <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d905      	bls.n	8004f44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e0b3      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f44:	4b59      	ldr	r3, [pc, #356]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1ec      	bne.n	8004f2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f50:	4b56      	ldr	r3, [pc, #344]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	4b56      	ldr	r3, [pc, #344]	; (80050b0 <HAL_RCC_OscConfig+0x62c>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6a11      	ldr	r1, [r2, #32]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f60:	3a01      	subs	r2, #1
 8004f62:	0112      	lsls	r2, r2, #4
 8004f64:	4311      	orrs	r1, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004f6a:	0212      	lsls	r2, r2, #8
 8004f6c:	4311      	orrs	r1, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f72:	0852      	lsrs	r2, r2, #1
 8004f74:	3a01      	subs	r2, #1
 8004f76:	0552      	lsls	r2, r2, #21
 8004f78:	4311      	orrs	r1, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f7e:	0852      	lsrs	r2, r2, #1
 8004f80:	3a01      	subs	r2, #1
 8004f82:	0652      	lsls	r2, r2, #25
 8004f84:	4311      	orrs	r1, r2
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f8a:	06d2      	lsls	r2, r2, #27
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	4947      	ldr	r1, [pc, #284]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f94:	4b45      	ldr	r3, [pc, #276]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a44      	ldr	r2, [pc, #272]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fa0:	4b42      	ldr	r3, [pc, #264]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	4a41      	ldr	r2, [pc, #260]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004faa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fe fce6 	bl	800397c <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb4:	f7fe fce2 	bl	800397c <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e06e      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc6:	4b39      	ldr	r3, [pc, #228]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x530>
 8004fd2:	e066      	b.n	80050a2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd4:	4b35      	ldr	r3, [pc, #212]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a34      	ldr	r2, [pc, #208]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fde:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004fe0:	4b32      	ldr	r3, [pc, #200]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4a31      	ldr	r2, [pc, #196]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004fec:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4a2e      	ldr	r2, [pc, #184]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8004ff2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fe fcbe 	bl	800397c <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005004:	f7fe fcba 	bl	800397c <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e046      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005016:	4b25      	ldr	r3, [pc, #148]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x580>
 8005022:	e03e      	b.n	80050a2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e039      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005030:	4b1e      	ldr	r3, [pc, #120]	; (80050ac <HAL_RCC_OscConfig+0x628>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f003 0203 	and.w	r2, r3, #3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	429a      	cmp	r2, r3
 8005042:	d12c      	bne.n	800509e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	3b01      	subs	r3, #1
 8005050:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005052:	429a      	cmp	r2, r3
 8005054:	d123      	bne.n	800509e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005062:	429a      	cmp	r2, r3
 8005064:	d11b      	bne.n	800509e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d113      	bne.n	800509e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	3b01      	subs	r3, #1
 8005084:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d109      	bne.n	800509e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	3b01      	subs	r3, #1
 8005098:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800509a:	429a      	cmp	r2, r3
 800509c:	d001      	beq.n	80050a2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3720      	adds	r7, #32
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40021000 	.word	0x40021000
 80050b0:	019f800c 	.word	0x019f800c

080050b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050be:	2300      	movs	r3, #0
 80050c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e11e      	b.n	800530a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050cc:	4b91      	ldr	r3, [pc, #580]	; (8005314 <HAL_RCC_ClockConfig+0x260>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d910      	bls.n	80050fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b8e      	ldr	r3, [pc, #568]	; (8005314 <HAL_RCC_ClockConfig+0x260>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 020f 	bic.w	r2, r3, #15
 80050e2:	498c      	ldr	r1, [pc, #560]	; (8005314 <HAL_RCC_ClockConfig+0x260>)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ea:	4b8a      	ldr	r3, [pc, #552]	; (8005314 <HAL_RCC_ClockConfig+0x260>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e106      	b.n	800530a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d073      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b03      	cmp	r3, #3
 800510e:	d129      	bne.n	8005164 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005110:	4b81      	ldr	r3, [pc, #516]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0f4      	b.n	800530a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005120:	f000 f99e 	bl	8005460 <RCC_GetSysClockFreqFromPLLSource>
 8005124:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4a7c      	ldr	r2, [pc, #496]	; (800531c <HAL_RCC_ClockConfig+0x268>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d93f      	bls.n	80051ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800512e:	4b7a      	ldr	r3, [pc, #488]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005142:	2b00      	cmp	r3, #0
 8005144:	d033      	beq.n	80051ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800514a:	2b00      	cmp	r3, #0
 800514c:	d12f      	bne.n	80051ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800514e:	4b72      	ldr	r3, [pc, #456]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005156:	4a70      	ldr	r2, [pc, #448]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 8005158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	e024      	b.n	80051ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d107      	bne.n	800517c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800516c:	4b6a      	ldr	r3, [pc, #424]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d109      	bne.n	800518c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0c6      	b.n	800530a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800517c:	4b66      	ldr	r3, [pc, #408]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0be      	b.n	800530a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800518c:	f000 f8ce 	bl	800532c <HAL_RCC_GetSysClockFreq>
 8005190:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4a61      	ldr	r2, [pc, #388]	; (800531c <HAL_RCC_ClockConfig+0x268>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d909      	bls.n	80051ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800519a:	4b5f      	ldr	r3, [pc, #380]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a2:	4a5d      	ldr	r2, [pc, #372]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 80051a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051aa:	2380      	movs	r3, #128	; 0x80
 80051ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051ae:	4b5a      	ldr	r3, [pc, #360]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f023 0203 	bic.w	r2, r3, #3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	4957      	ldr	r1, [pc, #348]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c0:	f7fe fbdc 	bl	800397c <HAL_GetTick>
 80051c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c6:	e00a      	b.n	80051de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c8:	f7fe fbd8 	bl	800397c <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e095      	b.n	800530a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051de:	4b4e      	ldr	r3, [pc, #312]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 020c 	and.w	r2, r3, #12
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d1eb      	bne.n	80051c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d023      	beq.n	8005244 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005208:	4b43      	ldr	r3, [pc, #268]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4a42      	ldr	r2, [pc, #264]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 800520e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005212:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005220:	4b3d      	ldr	r3, [pc, #244]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005228:	4a3b      	ldr	r2, [pc, #236]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 800522a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800522e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005230:	4b39      	ldr	r3, [pc, #228]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	4936      	ldr	r1, [pc, #216]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
 8005242:	e008      	b.n	8005256 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b80      	cmp	r3, #128	; 0x80
 8005248:	d105      	bne.n	8005256 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800524a:	4b33      	ldr	r3, [pc, #204]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	4a32      	ldr	r2, [pc, #200]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 8005250:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005254:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005256:	4b2f      	ldr	r3, [pc, #188]	; (8005314 <HAL_RCC_ClockConfig+0x260>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d21d      	bcs.n	80052a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005264:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <HAL_RCC_ClockConfig+0x260>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f023 020f 	bic.w	r2, r3, #15
 800526c:	4929      	ldr	r1, [pc, #164]	; (8005314 <HAL_RCC_ClockConfig+0x260>)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	4313      	orrs	r3, r2
 8005272:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005274:	f7fe fb82 	bl	800397c <HAL_GetTick>
 8005278:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800527a:	e00a      	b.n	8005292 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800527c:	f7fe fb7e 	bl	800397c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	; 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e03b      	b.n	800530a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005292:	4b20      	ldr	r3, [pc, #128]	; (8005314 <HAL_RCC_ClockConfig+0x260>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d1ed      	bne.n	800527c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ac:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4917      	ldr	r1, [pc, #92]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ca:	4b13      	ldr	r3, [pc, #76]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	490f      	ldr	r1, [pc, #60]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052de:	f000 f825 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80052e2:	4602      	mov	r2, r0
 80052e4:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <HAL_RCC_ClockConfig+0x264>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	091b      	lsrs	r3, r3, #4
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	490c      	ldr	r1, [pc, #48]	; (8005320 <HAL_RCC_ClockConfig+0x26c>)
 80052f0:	5ccb      	ldrb	r3, [r1, r3]
 80052f2:	f003 031f 	and.w	r3, r3, #31
 80052f6:	fa22 f303 	lsr.w	r3, r2, r3
 80052fa:	4a0a      	ldr	r2, [pc, #40]	; (8005324 <HAL_RCC_ClockConfig+0x270>)
 80052fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052fe:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <HAL_RCC_ClockConfig+0x274>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe faee 	bl	80038e4 <HAL_InitTick>
 8005308:	4603      	mov	r3, r0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40022000 	.word	0x40022000
 8005318:	40021000 	.word	0x40021000
 800531c:	04c4b400 	.word	0x04c4b400
 8005320:	08008b40 	.word	0x08008b40
 8005324:	20000030 	.word	0x20000030
 8005328:	20000034 	.word	0x20000034

0800532c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005332:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	2b04      	cmp	r3, #4
 800533c:	d102      	bne.n	8005344 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800533e:	4b2a      	ldr	r3, [pc, #168]	; (80053e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	e047      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005344:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 030c 	and.w	r3, r3, #12
 800534c:	2b08      	cmp	r3, #8
 800534e:	d102      	bne.n	8005356 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005350:	4b26      	ldr	r3, [pc, #152]	; (80053ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	e03e      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005356:	4b23      	ldr	r3, [pc, #140]	; (80053e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	2b0c      	cmp	r3, #12
 8005360:	d136      	bne.n	80053d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005362:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	091b      	lsrs	r3, r3, #4
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	3301      	adds	r3, #1
 8005378:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d10c      	bne.n	800539a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005380:	4a1a      	ldr	r2, [pc, #104]	; (80053ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	4a16      	ldr	r2, [pc, #88]	; (80053e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800538a:	68d2      	ldr	r2, [r2, #12]
 800538c:	0a12      	lsrs	r2, r2, #8
 800538e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005392:	fb02 f303 	mul.w	r3, r2, r3
 8005396:	617b      	str	r3, [r7, #20]
      break;
 8005398:	e00c      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800539a:	4a13      	ldr	r2, [pc, #76]	; (80053e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	4a10      	ldr	r2, [pc, #64]	; (80053e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a4:	68d2      	ldr	r2, [r2, #12]
 80053a6:	0a12      	lsrs	r2, r2, #8
 80053a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053ac:	fb02 f303 	mul.w	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]
      break;
 80053b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053b4:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	0e5b      	lsrs	r3, r3, #25
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	3301      	adds	r3, #1
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	e001      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053d4:	693b      	ldr	r3, [r7, #16]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40021000 	.word	0x40021000
 80053e8:	00f42400 	.word	0x00f42400
 80053ec:	007a1200 	.word	0x007a1200

080053f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053f4:	4b03      	ldr	r3, [pc, #12]	; (8005404 <HAL_RCC_GetHCLKFreq+0x14>)
 80053f6:	681b      	ldr	r3, [r3, #0]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000030 	.word	0x20000030

08005408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800540c:	f7ff fff0 	bl	80053f0 <HAL_RCC_GetHCLKFreq>
 8005410:	4602      	mov	r2, r0
 8005412:	4b06      	ldr	r3, [pc, #24]	; (800542c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	0a1b      	lsrs	r3, r3, #8
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	4904      	ldr	r1, [pc, #16]	; (8005430 <HAL_RCC_GetPCLK1Freq+0x28>)
 800541e:	5ccb      	ldrb	r3, [r1, r3]
 8005420:	f003 031f 	and.w	r3, r3, #31
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40021000 	.word	0x40021000
 8005430:	08008b50 	.word	0x08008b50

08005434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005438:	f7ff ffda 	bl	80053f0 <HAL_RCC_GetHCLKFreq>
 800543c:	4602      	mov	r2, r0
 800543e:	4b06      	ldr	r3, [pc, #24]	; (8005458 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	0adb      	lsrs	r3, r3, #11
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	4904      	ldr	r1, [pc, #16]	; (800545c <HAL_RCC_GetPCLK2Freq+0x28>)
 800544a:	5ccb      	ldrb	r3, [r1, r3]
 800544c:	f003 031f 	and.w	r3, r3, #31
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005454:	4618      	mov	r0, r3
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40021000 	.word	0x40021000
 800545c:	08008b50 	.word	0x08008b50

08005460 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005466:	4b1e      	ldr	r3, [pc, #120]	; (80054e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005470:	4b1b      	ldr	r3, [pc, #108]	; (80054e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	091b      	lsrs	r3, r3, #4
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b03      	cmp	r3, #3
 8005482:	d10c      	bne.n	800549e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005484:	4a17      	ldr	r2, [pc, #92]	; (80054e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800548e:	68d2      	ldr	r2, [r2, #12]
 8005490:	0a12      	lsrs	r2, r2, #8
 8005492:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005496:	fb02 f303 	mul.w	r3, r2, r3
 800549a:	617b      	str	r3, [r7, #20]
    break;
 800549c:	e00c      	b.n	80054b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800549e:	4a12      	ldr	r2, [pc, #72]	; (80054e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a6:	4a0e      	ldr	r2, [pc, #56]	; (80054e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054a8:	68d2      	ldr	r2, [r2, #12]
 80054aa:	0a12      	lsrs	r2, r2, #8
 80054ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054b0:	fb02 f303 	mul.w	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]
    break;
 80054b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	0e5b      	lsrs	r3, r3, #25
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	3301      	adds	r3, #1
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80054d2:	687b      	ldr	r3, [r7, #4]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40021000 	.word	0x40021000
 80054e4:	007a1200 	.word	0x007a1200
 80054e8:	00f42400 	.word	0x00f42400

080054ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054f4:	2300      	movs	r3, #0
 80054f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054f8:	2300      	movs	r3, #0
 80054fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 8098 	beq.w	800563a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800550a:	2300      	movs	r3, #0
 800550c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800550e:	4b43      	ldr	r3, [pc, #268]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10d      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551a:	4b40      	ldr	r3, [pc, #256]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800551c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551e:	4a3f      	ldr	r2, [pc, #252]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005524:	6593      	str	r3, [r2, #88]	; 0x58
 8005526:	4b3d      	ldr	r3, [pc, #244]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552e:	60bb      	str	r3, [r7, #8]
 8005530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005532:	2301      	movs	r3, #1
 8005534:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005536:	4b3a      	ldr	r3, [pc, #232]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a39      	ldr	r2, [pc, #228]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800553c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005540:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005542:	f7fe fa1b 	bl	800397c <HAL_GetTick>
 8005546:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005548:	e009      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800554a:	f7fe fa17 	bl	800397c <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d902      	bls.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	74fb      	strb	r3, [r7, #19]
        break;
 800555c:	e005      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800555e:	4b30      	ldr	r3, [pc, #192]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0ef      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800556a:	7cfb      	ldrb	r3, [r7, #19]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d159      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005570:	4b2a      	ldr	r3, [pc, #168]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01e      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	429a      	cmp	r2, r3
 800558a:	d019      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800558c:	4b23      	ldr	r3, [pc, #140]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005596:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005598:	4b20      	ldr	r3, [pc, #128]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559e:	4a1f      	ldr	r2, [pc, #124]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055a8:	4b1c      	ldr	r3, [pc, #112]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ae:	4a1b      	ldr	r2, [pc, #108]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055b8:	4a18      	ldr	r2, [pc, #96]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d016      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ca:	f7fe f9d7 	bl	800397c <HAL_GetTick>
 80055ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d0:	e00b      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d2:	f7fe f9d3 	bl	800397c <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d902      	bls.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	74fb      	strb	r3, [r7, #19]
            break;
 80055e8:	e006      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0ec      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80055f8:	7cfb      	ldrb	r3, [r7, #19]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055fe:	4b07      	ldr	r3, [pc, #28]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	4903      	ldr	r1, [pc, #12]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005614:	e008      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005616:	7cfb      	ldrb	r3, [r7, #19]
 8005618:	74bb      	strb	r3, [r7, #18]
 800561a:	e005      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800561c:	40021000 	.word	0x40021000
 8005620:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005624:	7cfb      	ldrb	r3, [r7, #19]
 8005626:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005628:	7c7b      	ldrb	r3, [r7, #17]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d105      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562e:	4ba6      	ldr	r3, [pc, #664]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	4aa5      	ldr	r2, [pc, #660]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005638:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005646:	4ba0      	ldr	r3, [pc, #640]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564c:	f023 0203 	bic.w	r2, r3, #3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	499c      	ldr	r1, [pc, #624]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005668:	4b97      	ldr	r3, [pc, #604]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566e:	f023 020c 	bic.w	r2, r3, #12
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	4994      	ldr	r1, [pc, #592]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800568a:	4b8f      	ldr	r3, [pc, #572]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005690:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	498b      	ldr	r1, [pc, #556]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056ac:	4b86      	ldr	r3, [pc, #536]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	4983      	ldr	r1, [pc, #524]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056ce:	4b7e      	ldr	r3, [pc, #504]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	497a      	ldr	r1, [pc, #488]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056f0:	4b75      	ldr	r3, [pc, #468]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	4972      	ldr	r1, [pc, #456]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005712:	4b6d      	ldr	r3, [pc, #436]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	4969      	ldr	r1, [pc, #420]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005734:	4b64      	ldr	r3, [pc, #400]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	4961      	ldr	r1, [pc, #388]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005756:	4b5c      	ldr	r3, [pc, #368]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	4958      	ldr	r1, [pc, #352]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	2b00      	cmp	r3, #0
 8005776:	d015      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005778:	4b53      	ldr	r3, [pc, #332]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	4950      	ldr	r1, [pc, #320]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005796:	d105      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005798:	4b4b      	ldr	r3, [pc, #300]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4a4a      	ldr	r2, [pc, #296]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800579e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d015      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057b0:	4b45      	ldr	r3, [pc, #276]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	4942      	ldr	r1, [pc, #264]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ce:	d105      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d0:	4b3d      	ldr	r3, [pc, #244]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4a3c      	ldr	r2, [pc, #240]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d015      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057e8:	4b37      	ldr	r3, [pc, #220]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	4934      	ldr	r1, [pc, #208]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005806:	d105      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005808:	4b2f      	ldr	r3, [pc, #188]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	4a2e      	ldr	r2, [pc, #184]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800580e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005812:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d015      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005820:	4b29      	ldr	r3, [pc, #164]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005826:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582e:	4926      	ldr	r1, [pc, #152]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800583e:	d105      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005840:	4b21      	ldr	r3, [pc, #132]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	4a20      	ldr	r2, [pc, #128]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800584a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d015      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005858:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005866:	4918      	ldr	r1, [pc, #96]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005876:	d105      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005878:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	4a12      	ldr	r2, [pc, #72]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800587e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005882:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d015      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005890:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005896:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589e:	490a      	ldr	r1, [pc, #40]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ae:	d105      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058b0:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	4a04      	ldr	r2, [pc, #16]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80058bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40021000 	.word	0x40021000

080058cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e09d      	b.n	8005a1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d108      	bne.n	80058f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ee:	d009      	beq.n	8005904 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	61da      	str	r2, [r3, #28]
 80058f6:	e005      	b.n	8005904 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fd fdbc 	bl	800349c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800593a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005944:	d902      	bls.n	800594c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	e002      	b.n	8005952 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800594c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005950:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800595a:	d007      	beq.n	800596c <HAL_SPI_Init+0xa0>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005964:	d002      	beq.n	800596c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800597c:	431a      	orrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	ea42 0103 	orr.w	r1, r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	0c1b      	lsrs	r3, r3, #16
 80059c8:	f003 0204 	and.w	r2, r3, #4
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80059e8:	ea42 0103 	orr.w	r1, r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b088      	sub	sp, #32
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_SPI_Transmit+0x22>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e158      	b.n	8005cf6 <HAL_SPI_Transmit+0x2d4>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a4c:	f7fd ff96 	bl	800397c <HAL_GetTick>
 8005a50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d002      	beq.n	8005a68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a62:	2302      	movs	r3, #2
 8005a64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a66:	e13d      	b.n	8005ce4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_SPI_Transmit+0x52>
 8005a6e:	88fb      	ldrh	r3, [r7, #6]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a78:	e134      	b.n	8005ce4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2203      	movs	r2, #3
 8005a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	88fa      	ldrh	r2, [r7, #6]
 8005a92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac4:	d10f      	bne.n	8005ae6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ad4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ae4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af0:	2b40      	cmp	r3, #64	; 0x40
 8005af2:	d007      	beq.n	8005b04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b0c:	d94b      	bls.n	8005ba6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <HAL_SPI_Transmit+0xfa>
 8005b16:	8afb      	ldrh	r3, [r7, #22]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d13e      	bne.n	8005b9a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	881a      	ldrh	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	1c9a      	adds	r2, r3, #2
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b40:	e02b      	b.n	8005b9a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d112      	bne.n	8005b76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	881a      	ldrh	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	1c9a      	adds	r2, r3, #2
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b74:	e011      	b.n	8005b9a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b76:	f7fd ff01 	bl	800397c <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d803      	bhi.n	8005b8e <HAL_SPI_Transmit+0x16c>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8c:	d102      	bne.n	8005b94 <HAL_SPI_Transmit+0x172>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d102      	bne.n	8005b9a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b98:	e0a4      	b.n	8005ce4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1ce      	bne.n	8005b42 <HAL_SPI_Transmit+0x120>
 8005ba4:	e07c      	b.n	8005ca0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <HAL_SPI_Transmit+0x192>
 8005bae:	8afb      	ldrh	r3, [r7, #22]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d170      	bne.n	8005c96 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d912      	bls.n	8005be4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	881a      	ldrh	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b02      	subs	r3, #2
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005be2:	e058      	b.n	8005c96 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	330c      	adds	r3, #12
 8005bee:	7812      	ldrb	r2, [r2, #0]
 8005bf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c0a:	e044      	b.n	8005c96 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d12b      	bne.n	8005c72 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d912      	bls.n	8005c4a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	881a      	ldrh	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	1c9a      	adds	r2, r3, #2
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b02      	subs	r3, #2
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c48:	e025      	b.n	8005c96 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	330c      	adds	r3, #12
 8005c54:	7812      	ldrb	r2, [r2, #0]
 8005c56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c70:	e011      	b.n	8005c96 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c72:	f7fd fe83 	bl	800397c <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d803      	bhi.n	8005c8a <HAL_SPI_Transmit+0x268>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d102      	bne.n	8005c90 <HAL_SPI_Transmit+0x26e>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d102      	bne.n	8005c96 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c94:	e026      	b.n	8005ce4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1b5      	bne.n	8005c0c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fce3 	bl	8006670 <SPI_EndRxTxTransaction>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e000      	b.n	8005ce4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005ce2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3720      	adds	r7, #32
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b088      	sub	sp, #32
 8005d02:	af02      	add	r7, sp, #8
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d1a:	d112      	bne.n	8005d42 <HAL_SPI_Receive+0x44>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10e      	bne.n	8005d42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2204      	movs	r2, #4
 8005d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d2c:	88fa      	ldrh	r2, [r7, #6]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	4613      	mov	r3, r2
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f910 	bl	8005f5e <HAL_SPI_TransmitReceive>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	e109      	b.n	8005f56 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_SPI_Receive+0x52>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e102      	b.n	8005f56 <HAL_SPI_Receive+0x258>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d58:	f7fd fe10 	bl	800397c <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d002      	beq.n	8005d70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d6e:	e0e9      	b.n	8005f44 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_SPI_Receive+0x7e>
 8005d76:	88fb      	ldrh	r3, [r7, #6]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d102      	bne.n	8005d82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d80:	e0e0      	b.n	8005f44 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2204      	movs	r2, #4
 8005d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	88fa      	ldrh	r2, [r7, #6]
 8005d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	88fa      	ldrh	r2, [r7, #6]
 8005da2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dcc:	d908      	bls.n	8005de0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	e007      	b.n	8005df0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df8:	d10f      	bne.n	8005e1a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	d007      	beq.n	8005e38 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e40:	d867      	bhi.n	8005f12 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e42:	e030      	b.n	8005ea6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d117      	bne.n	8005e82 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f103 020c 	add.w	r2, r3, #12
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	7812      	ldrb	r2, [r2, #0]
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e80:	e011      	b.n	8005ea6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e82:	f7fd fd7b 	bl	800397c <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d803      	bhi.n	8005e9a <HAL_SPI_Receive+0x19c>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e98:	d102      	bne.n	8005ea0 <HAL_SPI_Receive+0x1a2>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d102      	bne.n	8005ea6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ea4:	e04e      	b.n	8005f44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1c8      	bne.n	8005e44 <HAL_SPI_Receive+0x146>
 8005eb2:	e034      	b.n	8005f1e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d115      	bne.n	8005eee <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	b292      	uxth	r2, r2
 8005ece:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	1c9a      	adds	r2, r3, #2
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005eec:	e011      	b.n	8005f12 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eee:	f7fd fd45 	bl	800397c <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d803      	bhi.n	8005f06 <HAL_SPI_Receive+0x208>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d102      	bne.n	8005f0c <HAL_SPI_Receive+0x20e>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f10:	e018      	b.n	8005f44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1ca      	bne.n	8005eb4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fb4c 	bl	80065c0 <SPI_EndRxTransaction>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2220      	movs	r2, #32
 8005f32:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	75fb      	strb	r3, [r7, #23]
 8005f40:	e000      	b.n	8005f44 <HAL_SPI_Receive+0x246>
  }

error :
 8005f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b08a      	sub	sp, #40	; 0x28
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]
 8005f6a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_SPI_TransmitReceive+0x26>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e1fb      	b.n	800637c <HAL_SPI_TransmitReceive+0x41e>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f8c:	f7fd fcf6 	bl	800397c <HAL_GetTick>
 8005f90:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f98:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005fa0:	887b      	ldrh	r3, [r7, #2]
 8005fa2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005fa4:	887b      	ldrh	r3, [r7, #2]
 8005fa6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fa8:	7efb      	ldrb	r3, [r7, #27]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d00e      	beq.n	8005fcc <HAL_SPI_TransmitReceive+0x6e>
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb4:	d106      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x66>
 8005fbe:	7efb      	ldrb	r3, [r7, #27]
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d003      	beq.n	8005fcc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005fca:	e1cd      	b.n	8006368 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d005      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x80>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x80>
 8005fd8:	887b      	ldrh	r3, [r7, #2]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005fe4:	e1c0      	b.n	8006368 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d003      	beq.n	8005ffa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2205      	movs	r2, #5
 8005ff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	887a      	ldrh	r2, [r7, #2]
 800600a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	887a      	ldrh	r2, [r7, #2]
 8006012:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	887a      	ldrh	r2, [r7, #2]
 8006020:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	887a      	ldrh	r2, [r7, #2]
 8006026:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800603c:	d802      	bhi.n	8006044 <HAL_SPI_TransmitReceive+0xe6>
 800603e:	8a3b      	ldrh	r3, [r7, #16]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d908      	bls.n	8006056 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006052:	605a      	str	r2, [r3, #4]
 8006054:	e007      	b.n	8006066 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006064:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006070:	2b40      	cmp	r3, #64	; 0x40
 8006072:	d007      	beq.n	8006084 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800608c:	d97c      	bls.n	8006188 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_SPI_TransmitReceive+0x13e>
 8006096:	8a7b      	ldrh	r3, [r7, #18]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d169      	bne.n	8006170 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	881a      	ldrh	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	1c9a      	adds	r2, r3, #2
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060c0:	e056      	b.n	8006170 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d11b      	bne.n	8006108 <HAL_SPI_TransmitReceive+0x1aa>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d016      	beq.n	8006108 <HAL_SPI_TransmitReceive+0x1aa>
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d113      	bne.n	8006108 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	881a      	ldrh	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	1c9a      	adds	r2, r3, #2
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b01      	cmp	r3, #1
 8006114:	d11c      	bne.n	8006150 <HAL_SPI_TransmitReceive+0x1f2>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d016      	beq.n	8006150 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	b292      	uxth	r2, r2
 800612e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	1c9a      	adds	r2, r3, #2
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800614c:	2301      	movs	r3, #1
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006150:	f7fd fc14 	bl	800397c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615c:	429a      	cmp	r2, r3
 800615e:	d807      	bhi.n	8006170 <HAL_SPI_TransmitReceive+0x212>
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006166:	d003      	beq.n	8006170 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800616e:	e0fb      	b.n	8006368 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1a3      	bne.n	80060c2 <HAL_SPI_TransmitReceive+0x164>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d19d      	bne.n	80060c2 <HAL_SPI_TransmitReceive+0x164>
 8006186:	e0df      	b.n	8006348 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_SPI_TransmitReceive+0x23a>
 8006190:	8a7b      	ldrh	r3, [r7, #18]
 8006192:	2b01      	cmp	r3, #1
 8006194:	f040 80cb 	bne.w	800632e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d912      	bls.n	80061c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a6:	881a      	ldrh	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	1c9a      	adds	r2, r3, #2
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b02      	subs	r3, #2
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061c6:	e0b2      	b.n	800632e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	7812      	ldrb	r2, [r2, #0]
 80061d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ee:	e09e      	b.n	800632e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d134      	bne.n	8006268 <HAL_SPI_TransmitReceive+0x30a>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d02f      	beq.n	8006268 <HAL_SPI_TransmitReceive+0x30a>
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	2b01      	cmp	r3, #1
 800620c:	d12c      	bne.n	8006268 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006212:	b29b      	uxth	r3, r3
 8006214:	2b01      	cmp	r3, #1
 8006216:	d912      	bls.n	800623e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	881a      	ldrh	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	1c9a      	adds	r2, r3, #2
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b02      	subs	r3, #2
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800623c:	e012      	b.n	8006264 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	330c      	adds	r3, #12
 8006248:	7812      	ldrb	r2, [r2, #0]
 800624a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b01      	cmp	r3, #1
 8006274:	d148      	bne.n	8006308 <HAL_SPI_TransmitReceive+0x3aa>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d042      	beq.n	8006308 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b01      	cmp	r3, #1
 800628c:	d923      	bls.n	80062d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	b292      	uxth	r2, r2
 800629a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	1c9a      	adds	r2, r3, #2
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	3b02      	subs	r3, #2
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d81f      	bhi.n	8006304 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062d2:	605a      	str	r2, [r3, #4]
 80062d4:	e016      	b.n	8006304 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f103 020c 	add.w	r2, r3, #12
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	7812      	ldrb	r2, [r2, #0]
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006304:	2301      	movs	r3, #1
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006308:	f7fd fb38 	bl	800397c <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006314:	429a      	cmp	r2, r3
 8006316:	d803      	bhi.n	8006320 <HAL_SPI_TransmitReceive+0x3c2>
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631e:	d102      	bne.n	8006326 <HAL_SPI_TransmitReceive+0x3c8>
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	2b00      	cmp	r3, #0
 8006324:	d103      	bne.n	800632e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800632c:	e01c      	b.n	8006368 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	f47f af5b 	bne.w	80061f0 <HAL_SPI_TransmitReceive+0x292>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	f47f af54 	bne.w	80061f0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f98f 	bl	8006670 <SPI_EndRxTxTransaction>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d006      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	661a      	str	r2, [r3, #96]	; 0x60
 8006364:	e000      	b.n	8006368 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006366:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800637c:	4618      	mov	r0, r3
 800637e:	3728      	adds	r7, #40	; 0x28
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	4613      	mov	r3, r2
 8006392:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006394:	f7fd faf2 	bl	800397c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	4413      	add	r3, r2
 80063a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063a4:	f7fd faea 	bl	800397c <HAL_GetTick>
 80063a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063aa:	4b39      	ldr	r3, [pc, #228]	; (8006490 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	015b      	lsls	r3, r3, #5
 80063b0:	0d1b      	lsrs	r3, r3, #20
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	fb02 f303 	mul.w	r3, r2, r3
 80063b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ba:	e054      	b.n	8006466 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d050      	beq.n	8006466 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063c4:	f7fd fada 	bl	800397c <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d902      	bls.n	80063da <SPI_WaitFlagStateUntilTimeout+0x56>
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d13d      	bne.n	8006456 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063f2:	d111      	bne.n	8006418 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063fc:	d004      	beq.n	8006408 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006406:	d107      	bne.n	8006418 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006416:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006420:	d10f      	bne.n	8006442 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006440:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e017      	b.n	8006486 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	3b01      	subs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	4013      	ands	r3, r2
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	429a      	cmp	r2, r3
 8006474:	bf0c      	ite	eq
 8006476:	2301      	moveq	r3, #1
 8006478:	2300      	movne	r3, #0
 800647a:	b2db      	uxtb	r3, r3
 800647c:	461a      	mov	r2, r3
 800647e:	79fb      	ldrb	r3, [r7, #7]
 8006480:	429a      	cmp	r2, r3
 8006482:	d19b      	bne.n	80063bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000030 	.word	0x20000030

08006494 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	; 0x28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80064a6:	f7fd fa69 	bl	800397c <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	1a9b      	subs	r3, r3, r2
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	4413      	add	r3, r2
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80064b6:	f7fd fa61 	bl	800397c <HAL_GetTick>
 80064ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	330c      	adds	r3, #12
 80064c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80064c4:	4b3d      	ldr	r3, [pc, #244]	; (80065bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4613      	mov	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	00da      	lsls	r2, r3, #3
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	0d1b      	lsrs	r3, r3, #20
 80064d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d6:	fb02 f303 	mul.w	r3, r2, r3
 80064da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80064dc:	e060      	b.n	80065a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80064e4:	d107      	bne.n	80064f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d104      	bne.n	80064f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d050      	beq.n	80065a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064fe:	f7fd fa3d 	bl	800397c <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650a:	429a      	cmp	r2, r3
 800650c:	d902      	bls.n	8006514 <SPI_WaitFifoStateUntilTimeout+0x80>
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	2b00      	cmp	r3, #0
 8006512:	d13d      	bne.n	8006590 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006522:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800652c:	d111      	bne.n	8006552 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006536:	d004      	beq.n	8006542 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006540:	d107      	bne.n	8006552 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006550:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800655a:	d10f      	bne.n	800657c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800657a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e010      	b.n	80065b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	3b01      	subs	r3, #1
 800659e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	4013      	ands	r3, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d196      	bne.n	80064de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3728      	adds	r7, #40	; 0x28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000030 	.word	0x20000030

080065c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af02      	add	r7, sp, #8
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065d4:	d111      	bne.n	80065fa <SPI_EndRxTransaction+0x3a>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065de:	d004      	beq.n	80065ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e8:	d107      	bne.n	80065fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2200      	movs	r2, #0
 8006602:	2180      	movs	r1, #128	; 0x80
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7ff febd 	bl	8006384 <SPI_WaitFlagStateUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006614:	f043 0220 	orr.w	r2, r3, #32
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e023      	b.n	8006668 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006628:	d11d      	bne.n	8006666 <SPI_EndRxTransaction+0xa6>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006632:	d004      	beq.n	800663e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663c:	d113      	bne.n	8006666 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2200      	movs	r2, #0
 8006646:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff ff22 	bl	8006494 <SPI_WaitFifoStateUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d007      	beq.n	8006666 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665a:	f043 0220 	orr.w	r2, r3, #32
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e000      	b.n	8006668 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af02      	add	r7, sp, #8
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2200      	movs	r2, #0
 8006684:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff ff03 	bl	8006494 <SPI_WaitFifoStateUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006698:	f043 0220 	orr.w	r2, r3, #32
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e027      	b.n	80066f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2200      	movs	r2, #0
 80066ac:	2180      	movs	r1, #128	; 0x80
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff fe68 	bl	8006384 <SPI_WaitFlagStateUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d007      	beq.n	80066ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066be:	f043 0220 	orr.w	r2, r3, #32
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e014      	b.n	80066f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7ff fedc 	bl	8006494 <SPI_WaitFifoStateUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d007      	beq.n	80066f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e6:	f043 0220 	orr.w	r2, r3, #32
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e000      	b.n	80066f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e049      	b.n	80067a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fc fefc 	bl	8003520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3304      	adds	r3, #4
 8006738:	4619      	mov	r1, r3
 800673a:	4610      	mov	r0, r2
 800673c:	f000 faa4 	bl	8006c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e049      	b.n	8006850 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f841 	bl	8006858 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2202      	movs	r2, #2
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3304      	adds	r3, #4
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f000 fa4d 	bl	8006c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006882:	2b01      	cmp	r3, #1
 8006884:	d101      	bne.n	800688a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006886:	2302      	movs	r3, #2
 8006888:	e0ff      	b.n	8006a8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b14      	cmp	r3, #20
 8006896:	f200 80f0 	bhi.w	8006a7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800689a:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068f5 	.word	0x080068f5
 80068a4:	08006a7b 	.word	0x08006a7b
 80068a8:	08006a7b 	.word	0x08006a7b
 80068ac:	08006a7b 	.word	0x08006a7b
 80068b0:	08006935 	.word	0x08006935
 80068b4:	08006a7b 	.word	0x08006a7b
 80068b8:	08006a7b 	.word	0x08006a7b
 80068bc:	08006a7b 	.word	0x08006a7b
 80068c0:	08006977 	.word	0x08006977
 80068c4:	08006a7b 	.word	0x08006a7b
 80068c8:	08006a7b 	.word	0x08006a7b
 80068cc:	08006a7b 	.word	0x08006a7b
 80068d0:	080069b7 	.word	0x080069b7
 80068d4:	08006a7b 	.word	0x08006a7b
 80068d8:	08006a7b 	.word	0x08006a7b
 80068dc:	08006a7b 	.word	0x08006a7b
 80068e0:	080069f9 	.word	0x080069f9
 80068e4:	08006a7b 	.word	0x08006a7b
 80068e8:	08006a7b 	.word	0x08006a7b
 80068ec:	08006a7b 	.word	0x08006a7b
 80068f0:	08006a39 	.word	0x08006a39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68b9      	ldr	r1, [r7, #8]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fa54 	bl	8006da8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699a      	ldr	r2, [r3, #24]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0208 	orr.w	r2, r2, #8
 800690e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0204 	bic.w	r2, r2, #4
 800691e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6999      	ldr	r1, [r3, #24]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	691a      	ldr	r2, [r3, #16]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	619a      	str	r2, [r3, #24]
      break;
 8006932:	e0a5      	b.n	8006a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fac4 	bl	8006ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800694e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6999      	ldr	r1, [r3, #24]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	021a      	lsls	r2, r3, #8
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	619a      	str	r2, [r3, #24]
      break;
 8006974:	e084      	b.n	8006a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68b9      	ldr	r1, [r7, #8]
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fb2d 	bl	8006fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69da      	ldr	r2, [r3, #28]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 0208 	orr.w	r2, r2, #8
 8006990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69da      	ldr	r2, [r3, #28]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0204 	bic.w	r2, r2, #4
 80069a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69d9      	ldr	r1, [r3, #28]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	61da      	str	r2, [r3, #28]
      break;
 80069b4:	e064      	b.n	8006a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68b9      	ldr	r1, [r7, #8]
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 fb95 	bl	80070ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69da      	ldr	r2, [r3, #28]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69d9      	ldr	r1, [r3, #28]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	021a      	lsls	r2, r3, #8
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	61da      	str	r2, [r3, #28]
      break;
 80069f6:	e043      	b.n	8006a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fbfe 	bl	8007200 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0208 	orr.w	r2, r2, #8
 8006a12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0204 	bic.w	r2, r2, #4
 8006a22:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	691a      	ldr	r2, [r3, #16]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a36:	e023      	b.n	8006a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fc42 	bl	80072c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a62:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	021a      	lsls	r2, r3, #8
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a78:	e002      	b.n	8006a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop

08006a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e0de      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x1da>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a63      	ldr	r2, [pc, #396]	; (8006c78 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	f000 80a9 	beq.w	8006c42 <HAL_TIM_ConfigClockSource+0x1ae>
 8006af0:	4a61      	ldr	r2, [pc, #388]	; (8006c78 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	f200 80ae 	bhi.w	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006af8:	4a60      	ldr	r2, [pc, #384]	; (8006c7c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	f000 80a1 	beq.w	8006c42 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b00:	4a5e      	ldr	r2, [pc, #376]	; (8006c7c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	f200 80a6 	bhi.w	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b08:	4a5d      	ldr	r2, [pc, #372]	; (8006c80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	f000 8099 	beq.w	8006c42 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b10:	4a5b      	ldr	r2, [pc, #364]	; (8006c80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	f200 809e 	bhi.w	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b18:	4a5a      	ldr	r2, [pc, #360]	; (8006c84 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	f000 8091 	beq.w	8006c42 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b20:	4a58      	ldr	r2, [pc, #352]	; (8006c84 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	f200 8096 	bhi.w	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b2c:	f000 8089 	beq.w	8006c42 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b34:	f200 808e 	bhi.w	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b3c:	d03e      	beq.n	8006bbc <HAL_TIM_ConfigClockSource+0x128>
 8006b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b42:	f200 8087 	bhi.w	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4a:	f000 8086 	beq.w	8006c5a <HAL_TIM_ConfigClockSource+0x1c6>
 8006b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b52:	d87f      	bhi.n	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b54:	2b70      	cmp	r3, #112	; 0x70
 8006b56:	d01a      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0xfa>
 8006b58:	2b70      	cmp	r3, #112	; 0x70
 8006b5a:	d87b      	bhi.n	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b5c:	2b60      	cmp	r3, #96	; 0x60
 8006b5e:	d050      	beq.n	8006c02 <HAL_TIM_ConfigClockSource+0x16e>
 8006b60:	2b60      	cmp	r3, #96	; 0x60
 8006b62:	d877      	bhi.n	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b64:	2b50      	cmp	r3, #80	; 0x50
 8006b66:	d03c      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x14e>
 8006b68:	2b50      	cmp	r3, #80	; 0x50
 8006b6a:	d873      	bhi.n	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d058      	beq.n	8006c22 <HAL_TIM_ConfigClockSource+0x18e>
 8006b70:	2b40      	cmp	r3, #64	; 0x40
 8006b72:	d86f      	bhi.n	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b74:	2b30      	cmp	r3, #48	; 0x30
 8006b76:	d064      	beq.n	8006c42 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b78:	2b30      	cmp	r3, #48	; 0x30
 8006b7a:	d86b      	bhi.n	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b7c:	2b20      	cmp	r3, #32
 8006b7e:	d060      	beq.n	8006c42 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d867      	bhi.n	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d05c      	beq.n	8006c42 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d05a      	beq.n	8006c42 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b8c:	e062      	b.n	8006c54 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6818      	ldr	r0, [r3, #0]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	6899      	ldr	r1, [r3, #8]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f000 fc75 	bl	800748c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	609a      	str	r2, [r3, #8]
      break;
 8006bba:	e04f      	b.n	8006c5c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	6899      	ldr	r1, [r3, #8]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f000 fc5e 	bl	800748c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bde:	609a      	str	r2, [r3, #8]
      break;
 8006be0:	e03c      	b.n	8006c5c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6818      	ldr	r0, [r3, #0]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	6859      	ldr	r1, [r3, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f000 fbd0 	bl	8007394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2150      	movs	r1, #80	; 0x50
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fc29 	bl	8007452 <TIM_ITRx_SetConfig>
      break;
 8006c00:	e02c      	b.n	8006c5c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6818      	ldr	r0, [r3, #0]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	6859      	ldr	r1, [r3, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f000 fbef 	bl	80073f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2160      	movs	r1, #96	; 0x60
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fc19 	bl	8007452 <TIM_ITRx_SetConfig>
      break;
 8006c20:	e01c      	b.n	8006c5c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	6859      	ldr	r1, [r3, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f000 fbb0 	bl	8007394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2140      	movs	r1, #64	; 0x40
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fc09 	bl	8007452 <TIM_ITRx_SetConfig>
      break;
 8006c40:	e00c      	b.n	8006c5c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f000 fc00 	bl	8007452 <TIM_ITRx_SetConfig>
      break;
 8006c52:	e003      	b.n	8006c5c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	73fb      	strb	r3, [r7, #15]
      break;
 8006c58:	e000      	b.n	8006c5c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	00100070 	.word	0x00100070
 8006c7c:	00100040 	.word	0x00100040
 8006c80:	00100030 	.word	0x00100030
 8006c84:	00100020 	.word	0x00100020

08006c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3c      	ldr	r2, [pc, #240]	; (8006d8c <TIM_Base_SetConfig+0x104>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00f      	beq.n	8006cc0 <TIM_Base_SetConfig+0x38>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca6:	d00b      	beq.n	8006cc0 <TIM_Base_SetConfig+0x38>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a39      	ldr	r2, [pc, #228]	; (8006d90 <TIM_Base_SetConfig+0x108>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d007      	beq.n	8006cc0 <TIM_Base_SetConfig+0x38>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a38      	ldr	r2, [pc, #224]	; (8006d94 <TIM_Base_SetConfig+0x10c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <TIM_Base_SetConfig+0x38>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a37      	ldr	r2, [pc, #220]	; (8006d98 <TIM_Base_SetConfig+0x110>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d108      	bne.n	8006cd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2d      	ldr	r2, [pc, #180]	; (8006d8c <TIM_Base_SetConfig+0x104>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01b      	beq.n	8006d12 <TIM_Base_SetConfig+0x8a>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce0:	d017      	beq.n	8006d12 <TIM_Base_SetConfig+0x8a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2a      	ldr	r2, [pc, #168]	; (8006d90 <TIM_Base_SetConfig+0x108>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d013      	beq.n	8006d12 <TIM_Base_SetConfig+0x8a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a29      	ldr	r2, [pc, #164]	; (8006d94 <TIM_Base_SetConfig+0x10c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00f      	beq.n	8006d12 <TIM_Base_SetConfig+0x8a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a28      	ldr	r2, [pc, #160]	; (8006d98 <TIM_Base_SetConfig+0x110>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <TIM_Base_SetConfig+0x8a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a27      	ldr	r2, [pc, #156]	; (8006d9c <TIM_Base_SetConfig+0x114>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d007      	beq.n	8006d12 <TIM_Base_SetConfig+0x8a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a26      	ldr	r2, [pc, #152]	; (8006da0 <TIM_Base_SetConfig+0x118>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_Base_SetConfig+0x8a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a25      	ldr	r2, [pc, #148]	; (8006da4 <TIM_Base_SetConfig+0x11c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d108      	bne.n	8006d24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a10      	ldr	r2, [pc, #64]	; (8006d8c <TIM_Base_SetConfig+0x104>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00f      	beq.n	8006d70 <TIM_Base_SetConfig+0xe8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a11      	ldr	r2, [pc, #68]	; (8006d98 <TIM_Base_SetConfig+0x110>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00b      	beq.n	8006d70 <TIM_Base_SetConfig+0xe8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <TIM_Base_SetConfig+0x114>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d007      	beq.n	8006d70 <TIM_Base_SetConfig+0xe8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a0f      	ldr	r2, [pc, #60]	; (8006da0 <TIM_Base_SetConfig+0x118>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d003      	beq.n	8006d70 <TIM_Base_SetConfig+0xe8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a0e      	ldr	r2, [pc, #56]	; (8006da4 <TIM_Base_SetConfig+0x11c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d103      	bne.n	8006d78 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	615a      	str	r2, [r3, #20]
}
 8006d7e:	bf00      	nop
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40012c00 	.word	0x40012c00
 8006d90:	40000400 	.word	0x40000400
 8006d94:	40000800 	.word	0x40000800
 8006d98:	40013400 	.word	0x40013400
 8006d9c:	40014000 	.word	0x40014000
 8006da0:	40014400 	.word	0x40014400
 8006da4:	40014800 	.word	0x40014800

08006da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f023 0201 	bic.w	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f023 0302 	bic.w	r3, r3, #2
 8006df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a2c      	ldr	r2, [pc, #176]	; (8006eb4 <TIM_OC1_SetConfig+0x10c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00f      	beq.n	8006e28 <TIM_OC1_SetConfig+0x80>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a2b      	ldr	r2, [pc, #172]	; (8006eb8 <TIM_OC1_SetConfig+0x110>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00b      	beq.n	8006e28 <TIM_OC1_SetConfig+0x80>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a2a      	ldr	r2, [pc, #168]	; (8006ebc <TIM_OC1_SetConfig+0x114>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d007      	beq.n	8006e28 <TIM_OC1_SetConfig+0x80>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a29      	ldr	r2, [pc, #164]	; (8006ec0 <TIM_OC1_SetConfig+0x118>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d003      	beq.n	8006e28 <TIM_OC1_SetConfig+0x80>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a28      	ldr	r2, [pc, #160]	; (8006ec4 <TIM_OC1_SetConfig+0x11c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d10c      	bne.n	8006e42 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f023 0308 	bic.w	r3, r3, #8
 8006e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f023 0304 	bic.w	r3, r3, #4
 8006e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a1b      	ldr	r2, [pc, #108]	; (8006eb4 <TIM_OC1_SetConfig+0x10c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00f      	beq.n	8006e6a <TIM_OC1_SetConfig+0xc2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a1a      	ldr	r2, [pc, #104]	; (8006eb8 <TIM_OC1_SetConfig+0x110>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00b      	beq.n	8006e6a <TIM_OC1_SetConfig+0xc2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a19      	ldr	r2, [pc, #100]	; (8006ebc <TIM_OC1_SetConfig+0x114>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d007      	beq.n	8006e6a <TIM_OC1_SetConfig+0xc2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <TIM_OC1_SetConfig+0x118>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d003      	beq.n	8006e6a <TIM_OC1_SetConfig+0xc2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <TIM_OC1_SetConfig+0x11c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d111      	bne.n	8006e8e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	621a      	str	r2, [r3, #32]
}
 8006ea8:	bf00      	nop
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	40012c00 	.word	0x40012c00
 8006eb8:	40013400 	.word	0x40013400
 8006ebc:	40014000 	.word	0x40014000
 8006ec0:	40014400 	.word	0x40014400
 8006ec4:	40014800 	.word	0x40014800

08006ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f023 0210 	bic.w	r2, r3, #16
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f023 0320 	bic.w	r3, r3, #32
 8006f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a28      	ldr	r2, [pc, #160]	; (8006fc8 <TIM_OC2_SetConfig+0x100>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d003      	beq.n	8006f34 <TIM_OC2_SetConfig+0x6c>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a27      	ldr	r2, [pc, #156]	; (8006fcc <TIM_OC2_SetConfig+0x104>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d10d      	bne.n	8006f50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a1d      	ldr	r2, [pc, #116]	; (8006fc8 <TIM_OC2_SetConfig+0x100>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00f      	beq.n	8006f78 <TIM_OC2_SetConfig+0xb0>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a1c      	ldr	r2, [pc, #112]	; (8006fcc <TIM_OC2_SetConfig+0x104>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00b      	beq.n	8006f78 <TIM_OC2_SetConfig+0xb0>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a1b      	ldr	r2, [pc, #108]	; (8006fd0 <TIM_OC2_SetConfig+0x108>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d007      	beq.n	8006f78 <TIM_OC2_SetConfig+0xb0>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a1a      	ldr	r2, [pc, #104]	; (8006fd4 <TIM_OC2_SetConfig+0x10c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d003      	beq.n	8006f78 <TIM_OC2_SetConfig+0xb0>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a19      	ldr	r2, [pc, #100]	; (8006fd8 <TIM_OC2_SetConfig+0x110>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d113      	bne.n	8006fa0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	621a      	str	r2, [r3, #32]
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40012c00 	.word	0x40012c00
 8006fcc:	40013400 	.word	0x40013400
 8006fd0:	40014000 	.word	0x40014000
 8006fd4:	40014400 	.word	0x40014400
 8006fd8:	40014800 	.word	0x40014800

08006fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800700a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0303 	bic.w	r3, r3, #3
 8007016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a27      	ldr	r2, [pc, #156]	; (80070d8 <TIM_OC3_SetConfig+0xfc>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d003      	beq.n	8007046 <TIM_OC3_SetConfig+0x6a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a26      	ldr	r2, [pc, #152]	; (80070dc <TIM_OC3_SetConfig+0x100>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d10d      	bne.n	8007062 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800704c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	021b      	lsls	r3, r3, #8
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	4313      	orrs	r3, r2
 8007058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a1c      	ldr	r2, [pc, #112]	; (80070d8 <TIM_OC3_SetConfig+0xfc>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00f      	beq.n	800708a <TIM_OC3_SetConfig+0xae>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a1b      	ldr	r2, [pc, #108]	; (80070dc <TIM_OC3_SetConfig+0x100>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00b      	beq.n	800708a <TIM_OC3_SetConfig+0xae>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1a      	ldr	r2, [pc, #104]	; (80070e0 <TIM_OC3_SetConfig+0x104>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d007      	beq.n	800708a <TIM_OC3_SetConfig+0xae>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <TIM_OC3_SetConfig+0x108>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d003      	beq.n	800708a <TIM_OC3_SetConfig+0xae>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a18      	ldr	r2, [pc, #96]	; (80070e8 <TIM_OC3_SetConfig+0x10c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d113      	bne.n	80070b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	621a      	str	r2, [r3, #32]
}
 80070cc:	bf00      	nop
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	40012c00 	.word	0x40012c00
 80070dc:	40013400 	.word	0x40013400
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40014400 	.word	0x40014400
 80070e8:	40014800 	.word	0x40014800

080070ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800711a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800711e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	021b      	lsls	r3, r3, #8
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800713a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	031b      	lsls	r3, r3, #12
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	4313      	orrs	r3, r2
 8007146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a28      	ldr	r2, [pc, #160]	; (80071ec <TIM_OC4_SetConfig+0x100>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d003      	beq.n	8007158 <TIM_OC4_SetConfig+0x6c>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a27      	ldr	r2, [pc, #156]	; (80071f0 <TIM_OC4_SetConfig+0x104>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d10d      	bne.n	8007174 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800715e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	031b      	lsls	r3, r3, #12
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007172:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a1d      	ldr	r2, [pc, #116]	; (80071ec <TIM_OC4_SetConfig+0x100>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00f      	beq.n	800719c <TIM_OC4_SetConfig+0xb0>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a1c      	ldr	r2, [pc, #112]	; (80071f0 <TIM_OC4_SetConfig+0x104>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00b      	beq.n	800719c <TIM_OC4_SetConfig+0xb0>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a1b      	ldr	r2, [pc, #108]	; (80071f4 <TIM_OC4_SetConfig+0x108>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d007      	beq.n	800719c <TIM_OC4_SetConfig+0xb0>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a1a      	ldr	r2, [pc, #104]	; (80071f8 <TIM_OC4_SetConfig+0x10c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d003      	beq.n	800719c <TIM_OC4_SetConfig+0xb0>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a19      	ldr	r2, [pc, #100]	; (80071fc <TIM_OC4_SetConfig+0x110>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d113      	bne.n	80071c4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	019b      	lsls	r3, r3, #6
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	019b      	lsls	r3, r3, #6
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40012c00 	.word	0x40012c00
 80071f0:	40013400 	.word	0x40013400
 80071f4:	40014000 	.word	0x40014000
 80071f8:	40014400 	.word	0x40014400
 80071fc:	40014800 	.word	0x40014800

08007200 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800722e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007244:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	041b      	lsls	r3, r3, #16
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <TIM_OC5_SetConfig+0xb4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00f      	beq.n	800727a <TIM_OC5_SetConfig+0x7a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a16      	ldr	r2, [pc, #88]	; (80072b8 <TIM_OC5_SetConfig+0xb8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00b      	beq.n	800727a <TIM_OC5_SetConfig+0x7a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a15      	ldr	r2, [pc, #84]	; (80072bc <TIM_OC5_SetConfig+0xbc>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d007      	beq.n	800727a <TIM_OC5_SetConfig+0x7a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a14      	ldr	r2, [pc, #80]	; (80072c0 <TIM_OC5_SetConfig+0xc0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d003      	beq.n	800727a <TIM_OC5_SetConfig+0x7a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a13      	ldr	r2, [pc, #76]	; (80072c4 <TIM_OC5_SetConfig+0xc4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d109      	bne.n	800728e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007280:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	621a      	str	r2, [r3, #32]
}
 80072a8:	bf00      	nop
 80072aa:	371c      	adds	r7, #28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	40012c00 	.word	0x40012c00
 80072b8:	40013400 	.word	0x40013400
 80072bc:	40014000 	.word	0x40014000
 80072c0:	40014400 	.word	0x40014400
 80072c4:	40014800 	.word	0x40014800

080072c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	021b      	lsls	r3, r3, #8
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4313      	orrs	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800730e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	051b      	lsls	r3, r3, #20
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	4313      	orrs	r3, r2
 800731a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a18      	ldr	r2, [pc, #96]	; (8007380 <TIM_OC6_SetConfig+0xb8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00f      	beq.n	8007344 <TIM_OC6_SetConfig+0x7c>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a17      	ldr	r2, [pc, #92]	; (8007384 <TIM_OC6_SetConfig+0xbc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d00b      	beq.n	8007344 <TIM_OC6_SetConfig+0x7c>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a16      	ldr	r2, [pc, #88]	; (8007388 <TIM_OC6_SetConfig+0xc0>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d007      	beq.n	8007344 <TIM_OC6_SetConfig+0x7c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a15      	ldr	r2, [pc, #84]	; (800738c <TIM_OC6_SetConfig+0xc4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <TIM_OC6_SetConfig+0x7c>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a14      	ldr	r2, [pc, #80]	; (8007390 <TIM_OC6_SetConfig+0xc8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d109      	bne.n	8007358 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800734a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	029b      	lsls	r3, r3, #10
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40012c00 	.word	0x40012c00
 8007384:	40013400 	.word	0x40013400
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800

08007394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	f023 0201 	bic.w	r2, r3, #1
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f023 030a 	bic.w	r3, r3, #10
 80073d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	621a      	str	r2, [r3, #32]
}
 80073e6:	bf00      	nop
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b087      	sub	sp, #28
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	f023 0210 	bic.w	r2, r3, #16
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800741c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	031b      	lsls	r3, r3, #12
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800742e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	621a      	str	r2, [r3, #32]
}
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	f043 0307 	orr.w	r3, r3, #7
 8007478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	609a      	str	r2, [r3, #8]
}
 8007480:	bf00      	nop
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	021a      	lsls	r2, r3, #8
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	609a      	str	r2, [r3, #8]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e065      	b.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a2c      	ldr	r2, [pc, #176]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d004      	beq.n	8007518 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a2b      	ldr	r2, [pc, #172]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d108      	bne.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800751e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007534:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a1b      	ldr	r2, [pc, #108]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d018      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755a:	d013      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a18      	ldr	r2, [pc, #96]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00e      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d009      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a12      	ldr	r2, [pc, #72]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d004      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a13      	ldr	r2, [pc, #76]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d10c      	bne.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800758a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	4313      	orrs	r3, r2
 8007594:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	40012c00 	.word	0x40012c00
 80075c0:	40013400 	.word	0x40013400
 80075c4:	40000400 	.word	0x40000400
 80075c8:	40000800 	.word	0x40000800
 80075cc:	40014000 	.word	0x40014000

080075d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e087      	b.n	80076fc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	041b      	lsls	r3, r3, #16
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a27      	ldr	r2, [pc, #156]	; (8007708 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d004      	beq.n	800767a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a25      	ldr	r2, [pc, #148]	; (800770c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d106      	bne.n	8007688 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1e      	ldr	r2, [pc, #120]	; (8007708 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d004      	beq.n	800769c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1d      	ldr	r2, [pc, #116]	; (800770c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d126      	bne.n	80076ea <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a6:	051b      	lsls	r3, r3, #20
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a0e      	ldr	r2, [pc, #56]	; (8007708 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d004      	beq.n	80076dc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a0d      	ldr	r2, [pc, #52]	; (800770c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d106      	bne.n	80076ea <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	40012c00 	.word	0x40012c00
 800770c:	40013400 	.word	0x40013400

08007710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e042      	b.n	80077a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007728:	2b00      	cmp	r3, #0
 800772a:	d106      	bne.n	800773a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7fb ff4b 	bl	80035d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2224      	movs	r2, #36	; 0x24
 800773e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0201 	bic.w	r2, r2, #1
 8007750:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f82c 	bl	80077b0 <UART_SetConfig>
 8007758:	4603      	mov	r3, r0
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e022      	b.n	80077a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 faec 	bl	8007d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800777e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800778e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f042 0201 	orr.w	r2, r2, #1
 800779e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fb73 	bl	8007e8c <UART_CheckIdleState>
 80077a6:	4603      	mov	r3, r0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077b4:	b08c      	sub	sp, #48	; 0x30
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	431a      	orrs	r2, r3
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	431a      	orrs	r2, r3
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	4bab      	ldr	r3, [pc, #684]	; (8007a8c <UART_SetConfig+0x2dc>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	6812      	ldr	r2, [r2, #0]
 80077e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077e8:	430b      	orrs	r3, r1
 80077ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4aa0      	ldr	r2, [pc, #640]	; (8007a90 <UART_SetConfig+0x2e0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d004      	beq.n	800781c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007818:	4313      	orrs	r3, r2
 800781a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007826:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007830:	430b      	orrs	r3, r1
 8007832:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	f023 010f 	bic.w	r1, r3, #15
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a91      	ldr	r2, [pc, #580]	; (8007a94 <UART_SetConfig+0x2e4>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d125      	bne.n	80078a0 <UART_SetConfig+0xf0>
 8007854:	4b90      	ldr	r3, [pc, #576]	; (8007a98 <UART_SetConfig+0x2e8>)
 8007856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	2b03      	cmp	r3, #3
 8007860:	d81a      	bhi.n	8007898 <UART_SetConfig+0xe8>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <UART_SetConfig+0xb8>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007879 	.word	0x08007879
 800786c:	08007889 	.word	0x08007889
 8007870:	08007881 	.word	0x08007881
 8007874:	08007891 	.word	0x08007891
 8007878:	2301      	movs	r3, #1
 800787a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800787e:	e0d6      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007880:	2302      	movs	r3, #2
 8007882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007886:	e0d2      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007888:	2304      	movs	r3, #4
 800788a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800788e:	e0ce      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007890:	2308      	movs	r3, #8
 8007892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007896:	e0ca      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007898:	2310      	movs	r3, #16
 800789a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800789e:	e0c6      	b.n	8007a2e <UART_SetConfig+0x27e>
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a7d      	ldr	r2, [pc, #500]	; (8007a9c <UART_SetConfig+0x2ec>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d138      	bne.n	800791c <UART_SetConfig+0x16c>
 80078aa:	4b7b      	ldr	r3, [pc, #492]	; (8007a98 <UART_SetConfig+0x2e8>)
 80078ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b0:	f003 030c 	and.w	r3, r3, #12
 80078b4:	2b0c      	cmp	r3, #12
 80078b6:	d82d      	bhi.n	8007914 <UART_SetConfig+0x164>
 80078b8:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <UART_SetConfig+0x110>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078f5 	.word	0x080078f5
 80078c4:	08007915 	.word	0x08007915
 80078c8:	08007915 	.word	0x08007915
 80078cc:	08007915 	.word	0x08007915
 80078d0:	08007905 	.word	0x08007905
 80078d4:	08007915 	.word	0x08007915
 80078d8:	08007915 	.word	0x08007915
 80078dc:	08007915 	.word	0x08007915
 80078e0:	080078fd 	.word	0x080078fd
 80078e4:	08007915 	.word	0x08007915
 80078e8:	08007915 	.word	0x08007915
 80078ec:	08007915 	.word	0x08007915
 80078f0:	0800790d 	.word	0x0800790d
 80078f4:	2300      	movs	r3, #0
 80078f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078fa:	e098      	b.n	8007a2e <UART_SetConfig+0x27e>
 80078fc:	2302      	movs	r3, #2
 80078fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007902:	e094      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007904:	2304      	movs	r3, #4
 8007906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800790a:	e090      	b.n	8007a2e <UART_SetConfig+0x27e>
 800790c:	2308      	movs	r3, #8
 800790e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007912:	e08c      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007914:	2310      	movs	r3, #16
 8007916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800791a:	e088      	b.n	8007a2e <UART_SetConfig+0x27e>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a5f      	ldr	r2, [pc, #380]	; (8007aa0 <UART_SetConfig+0x2f0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d125      	bne.n	8007972 <UART_SetConfig+0x1c2>
 8007926:	4b5c      	ldr	r3, [pc, #368]	; (8007a98 <UART_SetConfig+0x2e8>)
 8007928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007930:	2b30      	cmp	r3, #48	; 0x30
 8007932:	d016      	beq.n	8007962 <UART_SetConfig+0x1b2>
 8007934:	2b30      	cmp	r3, #48	; 0x30
 8007936:	d818      	bhi.n	800796a <UART_SetConfig+0x1ba>
 8007938:	2b20      	cmp	r3, #32
 800793a:	d00a      	beq.n	8007952 <UART_SetConfig+0x1a2>
 800793c:	2b20      	cmp	r3, #32
 800793e:	d814      	bhi.n	800796a <UART_SetConfig+0x1ba>
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <UART_SetConfig+0x19a>
 8007944:	2b10      	cmp	r3, #16
 8007946:	d008      	beq.n	800795a <UART_SetConfig+0x1aa>
 8007948:	e00f      	b.n	800796a <UART_SetConfig+0x1ba>
 800794a:	2300      	movs	r3, #0
 800794c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007950:	e06d      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007952:	2302      	movs	r3, #2
 8007954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007958:	e069      	b.n	8007a2e <UART_SetConfig+0x27e>
 800795a:	2304      	movs	r3, #4
 800795c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007960:	e065      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007962:	2308      	movs	r3, #8
 8007964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007968:	e061      	b.n	8007a2e <UART_SetConfig+0x27e>
 800796a:	2310      	movs	r3, #16
 800796c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007970:	e05d      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a4b      	ldr	r2, [pc, #300]	; (8007aa4 <UART_SetConfig+0x2f4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d125      	bne.n	80079c8 <UART_SetConfig+0x218>
 800797c:	4b46      	ldr	r3, [pc, #280]	; (8007a98 <UART_SetConfig+0x2e8>)
 800797e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007982:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007986:	2bc0      	cmp	r3, #192	; 0xc0
 8007988:	d016      	beq.n	80079b8 <UART_SetConfig+0x208>
 800798a:	2bc0      	cmp	r3, #192	; 0xc0
 800798c:	d818      	bhi.n	80079c0 <UART_SetConfig+0x210>
 800798e:	2b80      	cmp	r3, #128	; 0x80
 8007990:	d00a      	beq.n	80079a8 <UART_SetConfig+0x1f8>
 8007992:	2b80      	cmp	r3, #128	; 0x80
 8007994:	d814      	bhi.n	80079c0 <UART_SetConfig+0x210>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <UART_SetConfig+0x1f0>
 800799a:	2b40      	cmp	r3, #64	; 0x40
 800799c:	d008      	beq.n	80079b0 <UART_SetConfig+0x200>
 800799e:	e00f      	b.n	80079c0 <UART_SetConfig+0x210>
 80079a0:	2300      	movs	r3, #0
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079a6:	e042      	b.n	8007a2e <UART_SetConfig+0x27e>
 80079a8:	2302      	movs	r3, #2
 80079aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079ae:	e03e      	b.n	8007a2e <UART_SetConfig+0x27e>
 80079b0:	2304      	movs	r3, #4
 80079b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079b6:	e03a      	b.n	8007a2e <UART_SetConfig+0x27e>
 80079b8:	2308      	movs	r3, #8
 80079ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079be:	e036      	b.n	8007a2e <UART_SetConfig+0x27e>
 80079c0:	2310      	movs	r3, #16
 80079c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079c6:	e032      	b.n	8007a2e <UART_SetConfig+0x27e>
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a30      	ldr	r2, [pc, #192]	; (8007a90 <UART_SetConfig+0x2e0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d12a      	bne.n	8007a28 <UART_SetConfig+0x278>
 80079d2:	4b31      	ldr	r3, [pc, #196]	; (8007a98 <UART_SetConfig+0x2e8>)
 80079d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079e0:	d01a      	beq.n	8007a18 <UART_SetConfig+0x268>
 80079e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079e6:	d81b      	bhi.n	8007a20 <UART_SetConfig+0x270>
 80079e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ec:	d00c      	beq.n	8007a08 <UART_SetConfig+0x258>
 80079ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079f2:	d815      	bhi.n	8007a20 <UART_SetConfig+0x270>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <UART_SetConfig+0x250>
 80079f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079fc:	d008      	beq.n	8007a10 <UART_SetConfig+0x260>
 80079fe:	e00f      	b.n	8007a20 <UART_SetConfig+0x270>
 8007a00:	2300      	movs	r3, #0
 8007a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a06:	e012      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a0e:	e00e      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007a10:	2304      	movs	r3, #4
 8007a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a16:	e00a      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007a18:	2308      	movs	r3, #8
 8007a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a1e:	e006      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007a20:	2310      	movs	r3, #16
 8007a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a26:	e002      	b.n	8007a2e <UART_SetConfig+0x27e>
 8007a28:	2310      	movs	r3, #16
 8007a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a17      	ldr	r2, [pc, #92]	; (8007a90 <UART_SetConfig+0x2e0>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	f040 80a8 	bne.w	8007b8a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d834      	bhi.n	8007aac <UART_SetConfig+0x2fc>
 8007a42:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <UART_SetConfig+0x298>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007a6d 	.word	0x08007a6d
 8007a4c:	08007aad 	.word	0x08007aad
 8007a50:	08007a75 	.word	0x08007a75
 8007a54:	08007aad 	.word	0x08007aad
 8007a58:	08007a7b 	.word	0x08007a7b
 8007a5c:	08007aad 	.word	0x08007aad
 8007a60:	08007aad 	.word	0x08007aad
 8007a64:	08007aad 	.word	0x08007aad
 8007a68:	08007a83 	.word	0x08007a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a6c:	f7fd fccc 	bl	8005408 <HAL_RCC_GetPCLK1Freq>
 8007a70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a72:	e021      	b.n	8007ab8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a74:	4b0c      	ldr	r3, [pc, #48]	; (8007aa8 <UART_SetConfig+0x2f8>)
 8007a76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a78:	e01e      	b.n	8007ab8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a7a:	f7fd fc57 	bl	800532c <HAL_RCC_GetSysClockFreq>
 8007a7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a80:	e01a      	b.n	8007ab8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a88:	e016      	b.n	8007ab8 <UART_SetConfig+0x308>
 8007a8a:	bf00      	nop
 8007a8c:	cfff69f3 	.word	0xcfff69f3
 8007a90:	40008000 	.word	0x40008000
 8007a94:	40013800 	.word	0x40013800
 8007a98:	40021000 	.word	0x40021000
 8007a9c:	40004400 	.word	0x40004400
 8007aa0:	40004800 	.word	0x40004800
 8007aa4:	40004c00 	.word	0x40004c00
 8007aa8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ab6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 812a 	beq.w	8007d14 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	4a9e      	ldr	r2, [pc, #632]	; (8007d40 <UART_SetConfig+0x590>)
 8007ac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aca:	461a      	mov	r2, r3
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ad2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	4413      	add	r3, r2
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d305      	bcc.n	8007af0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d903      	bls.n	8007af8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007af6:	e10d      	b.n	8007d14 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	2200      	movs	r2, #0
 8007afc:	60bb      	str	r3, [r7, #8]
 8007afe:	60fa      	str	r2, [r7, #12]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	4a8e      	ldr	r2, [pc, #568]	; (8007d40 <UART_SetConfig+0x590>)
 8007b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	603b      	str	r3, [r7, #0]
 8007b10:	607a      	str	r2, [r7, #4]
 8007b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b1a:	f7f9 f839 	bl	8000b90 <__aeabi_uldivmod>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4610      	mov	r0, r2
 8007b24:	4619      	mov	r1, r3
 8007b26:	f04f 0200 	mov.w	r2, #0
 8007b2a:	f04f 0300 	mov.w	r3, #0
 8007b2e:	020b      	lsls	r3, r1, #8
 8007b30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b34:	0202      	lsls	r2, r0, #8
 8007b36:	6979      	ldr	r1, [r7, #20]
 8007b38:	6849      	ldr	r1, [r1, #4]
 8007b3a:	0849      	lsrs	r1, r1, #1
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	4605      	mov	r5, r0
 8007b42:	eb12 0804 	adds.w	r8, r2, r4
 8007b46:	eb43 0905 	adc.w	r9, r3, r5
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	469a      	mov	sl, r3
 8007b52:	4693      	mov	fp, r2
 8007b54:	4652      	mov	r2, sl
 8007b56:	465b      	mov	r3, fp
 8007b58:	4640      	mov	r0, r8
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	f7f9 f818 	bl	8000b90 <__aeabi_uldivmod>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4613      	mov	r3, r2
 8007b66:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b6e:	d308      	bcc.n	8007b82 <UART_SetConfig+0x3d2>
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b76:	d204      	bcs.n	8007b82 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6a3a      	ldr	r2, [r7, #32]
 8007b7e:	60da      	str	r2, [r3, #12]
 8007b80:	e0c8      	b.n	8007d14 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b88:	e0c4      	b.n	8007d14 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b92:	d167      	bne.n	8007c64 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007b94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d828      	bhi.n	8007bee <UART_SetConfig+0x43e>
 8007b9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <UART_SetConfig+0x3f4>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007bc9 	.word	0x08007bc9
 8007ba8:	08007bd1 	.word	0x08007bd1
 8007bac:	08007bd9 	.word	0x08007bd9
 8007bb0:	08007bef 	.word	0x08007bef
 8007bb4:	08007bdf 	.word	0x08007bdf
 8007bb8:	08007bef 	.word	0x08007bef
 8007bbc:	08007bef 	.word	0x08007bef
 8007bc0:	08007bef 	.word	0x08007bef
 8007bc4:	08007be7 	.word	0x08007be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bc8:	f7fd fc1e 	bl	8005408 <HAL_RCC_GetPCLK1Freq>
 8007bcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bce:	e014      	b.n	8007bfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bd0:	f7fd fc30 	bl	8005434 <HAL_RCC_GetPCLK2Freq>
 8007bd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bd6:	e010      	b.n	8007bfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bd8:	4b5a      	ldr	r3, [pc, #360]	; (8007d44 <UART_SetConfig+0x594>)
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bdc:	e00d      	b.n	8007bfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bde:	f7fd fba5 	bl	800532c <HAL_RCC_GetSysClockFreq>
 8007be2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007be4:	e009      	b.n	8007bfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bec:	e005      	b.n	8007bfa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007bf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 8089 	beq.w	8007d14 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	4a4e      	ldr	r2, [pc, #312]	; (8007d40 <UART_SetConfig+0x590>)
 8007c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c14:	005a      	lsls	r2, r3, #1
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	085b      	lsrs	r3, r3, #1
 8007c1c:	441a      	add	r2, r3
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	2b0f      	cmp	r3, #15
 8007c2c:	d916      	bls.n	8007c5c <UART_SetConfig+0x4ac>
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c34:	d212      	bcs.n	8007c5c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	f023 030f 	bic.w	r3, r3, #15
 8007c3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	8bfb      	ldrh	r3, [r7, #30]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	8bfa      	ldrh	r2, [r7, #30]
 8007c58:	60da      	str	r2, [r3, #12]
 8007c5a:	e05b      	b.n	8007d14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c62:	e057      	b.n	8007d14 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d828      	bhi.n	8007cbe <UART_SetConfig+0x50e>
 8007c6c:	a201      	add	r2, pc, #4	; (adr r2, 8007c74 <UART_SetConfig+0x4c4>)
 8007c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c72:	bf00      	nop
 8007c74:	08007c99 	.word	0x08007c99
 8007c78:	08007ca1 	.word	0x08007ca1
 8007c7c:	08007ca9 	.word	0x08007ca9
 8007c80:	08007cbf 	.word	0x08007cbf
 8007c84:	08007caf 	.word	0x08007caf
 8007c88:	08007cbf 	.word	0x08007cbf
 8007c8c:	08007cbf 	.word	0x08007cbf
 8007c90:	08007cbf 	.word	0x08007cbf
 8007c94:	08007cb7 	.word	0x08007cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c98:	f7fd fbb6 	bl	8005408 <HAL_RCC_GetPCLK1Freq>
 8007c9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c9e:	e014      	b.n	8007cca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ca0:	f7fd fbc8 	bl	8005434 <HAL_RCC_GetPCLK2Freq>
 8007ca4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ca6:	e010      	b.n	8007cca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ca8:	4b26      	ldr	r3, [pc, #152]	; (8007d44 <UART_SetConfig+0x594>)
 8007caa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cac:	e00d      	b.n	8007cca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cae:	f7fd fb3d 	bl	800532c <HAL_RCC_GetSysClockFreq>
 8007cb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cb4:	e009      	b.n	8007cca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cbc:	e005      	b.n	8007cca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007cc8:	bf00      	nop
    }

    if (pclk != 0U)
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d021      	beq.n	8007d14 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	4a1a      	ldr	r2, [pc, #104]	; (8007d40 <UART_SetConfig+0x590>)
 8007cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	085b      	lsrs	r3, r3, #1
 8007ce8:	441a      	add	r2, r3
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	2b0f      	cmp	r3, #15
 8007cf8:	d909      	bls.n	8007d0e <UART_SetConfig+0x55e>
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d00:	d205      	bcs.n	8007d0e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60da      	str	r2, [r3, #12]
 8007d0c:	e002      	b.n	8007d14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2200      	movs	r2, #0
 8007d28:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d30:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3730      	adds	r7, #48	; 0x30
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d3e:	bf00      	nop
 8007d40:	08008b68 	.word	0x08008b68
 8007d44:	00f42400 	.word	0x00f42400

08007d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00a      	beq.n	8007db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dba:	f003 0308 	and.w	r3, r3, #8
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00a      	beq.n	8007dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d01a      	beq.n	8007e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e46:	d10a      	bne.n	8007e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	605a      	str	r2, [r3, #4]
  }
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e9c:	f7fb fd6e 	bl	800397c <HAL_GetTick>
 8007ea0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d10e      	bne.n	8007ece <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f82f 	bl	8007f22 <UART_WaitOnFlagUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e025      	b.n	8007f1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d10e      	bne.n	8007efa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f819 	bl	8007f22 <UART_WaitOnFlagUntilTimeout>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e00f      	b.n	8007f1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b09c      	sub	sp, #112	; 0x70
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	603b      	str	r3, [r7, #0]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f32:	e0a9      	b.n	8008088 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3a:	f000 80a5 	beq.w	8008088 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f3e:	f7fb fd1d 	bl	800397c <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d302      	bcc.n	8007f54 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d140      	bne.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f68:	667b      	str	r3, [r7, #100]	; 0x64
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e6      	bne.n	8007f54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	f023 0301 	bic.w	r3, r3, #1
 8007f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e5      	bne.n	8007f86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e069      	b.n	80080aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d051      	beq.n	8008088 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff2:	d149      	bne.n	8008088 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ffc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008012:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801c:	637b      	str	r3, [r7, #52]	; 0x34
 800801e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e6      	bne.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3308      	adds	r3, #8
 8008036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	e853 3f00 	ldrex	r3, [r3]
 800803e:	613b      	str	r3, [r7, #16]
   return(result);
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f023 0301 	bic.w	r3, r3, #1
 8008046:	66bb      	str	r3, [r7, #104]	; 0x68
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3308      	adds	r3, #8
 800804e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008050:	623a      	str	r2, [r7, #32]
 8008052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	69f9      	ldr	r1, [r7, #28]
 8008056:	6a3a      	ldr	r2, [r7, #32]
 8008058:	e841 2300 	strex	r3, r2, [r1]
 800805c:	61bb      	str	r3, [r7, #24]
   return(result);
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e5      	bne.n	8008030 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2220      	movs	r2, #32
 8008078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e010      	b.n	80080aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69da      	ldr	r2, [r3, #28]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	4013      	ands	r3, r2
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	429a      	cmp	r2, r3
 8008096:	bf0c      	ite	eq
 8008098:	2301      	moveq	r3, #1
 800809a:	2300      	movne	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	f43f af46 	beq.w	8007f34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3770      	adds	r7, #112	; 0x70
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b085      	sub	sp, #20
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e027      	b.n	8008118 <HAL_UARTEx_DisableFifoMode+0x66>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2224      	movs	r2, #36	; 0x24
 80080d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0201 	bic.w	r2, r2, #1
 80080ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2220      	movs	r2, #32
 800810a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008134:	2b01      	cmp	r3, #1
 8008136:	d101      	bne.n	800813c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008138:	2302      	movs	r3, #2
 800813a:	e02d      	b.n	8008198 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2224      	movs	r2, #36	; 0x24
 8008148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 0201 	bic.w	r2, r2, #1
 8008162:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f84f 	bl	800821c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2220      	movs	r2, #32
 800818a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d101      	bne.n	80081b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081b4:	2302      	movs	r3, #2
 80081b6:	e02d      	b.n	8008214 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2224      	movs	r2, #36	; 0x24
 80081c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0201 	bic.w	r2, r2, #1
 80081de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f811 	bl	800821c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2220      	movs	r2, #32
 8008206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008228:	2b00      	cmp	r3, #0
 800822a:	d108      	bne.n	800823e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800823c:	e031      	b.n	80082a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800823e:	2308      	movs	r3, #8
 8008240:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008242:	2308      	movs	r3, #8
 8008244:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	0e5b      	lsrs	r3, r3, #25
 800824e:	b2db      	uxtb	r3, r3
 8008250:	f003 0307 	and.w	r3, r3, #7
 8008254:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	0f5b      	lsrs	r3, r3, #29
 800825e:	b2db      	uxtb	r3, r3
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	7b3a      	ldrb	r2, [r7, #12]
 800826a:	4911      	ldr	r1, [pc, #68]	; (80082b0 <UARTEx_SetNbDataToProcess+0x94>)
 800826c:	5c8a      	ldrb	r2, [r1, r2]
 800826e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008272:	7b3a      	ldrb	r2, [r7, #12]
 8008274:	490f      	ldr	r1, [pc, #60]	; (80082b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008276:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008278:	fb93 f3f2 	sdiv	r3, r3, r2
 800827c:	b29a      	uxth	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	7b7a      	ldrb	r2, [r7, #13]
 8008288:	4909      	ldr	r1, [pc, #36]	; (80082b0 <UARTEx_SetNbDataToProcess+0x94>)
 800828a:	5c8a      	ldrb	r2, [r1, r2]
 800828c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008290:	7b7a      	ldrb	r2, [r7, #13]
 8008292:	4908      	ldr	r1, [pc, #32]	; (80082b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008294:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008296:	fb93 f3f2 	sdiv	r3, r3, r2
 800829a:	b29a      	uxth	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80082a2:	bf00      	nop
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	08008b80 	.word	0x08008b80
 80082b4:	08008b88 	.word	0x08008b88

080082b8 <__errno>:
 80082b8:	4b01      	ldr	r3, [pc, #4]	; (80082c0 <__errno+0x8>)
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	2000003c 	.word	0x2000003c

080082c4 <__libc_init_array>:
 80082c4:	b570      	push	{r4, r5, r6, lr}
 80082c6:	4d0d      	ldr	r5, [pc, #52]	; (80082fc <__libc_init_array+0x38>)
 80082c8:	4c0d      	ldr	r4, [pc, #52]	; (8008300 <__libc_init_array+0x3c>)
 80082ca:	1b64      	subs	r4, r4, r5
 80082cc:	10a4      	asrs	r4, r4, #2
 80082ce:	2600      	movs	r6, #0
 80082d0:	42a6      	cmp	r6, r4
 80082d2:	d109      	bne.n	80082e8 <__libc_init_array+0x24>
 80082d4:	4d0b      	ldr	r5, [pc, #44]	; (8008304 <__libc_init_array+0x40>)
 80082d6:	4c0c      	ldr	r4, [pc, #48]	; (8008308 <__libc_init_array+0x44>)
 80082d8:	f000 fa26 	bl	8008728 <_init>
 80082dc:	1b64      	subs	r4, r4, r5
 80082de:	10a4      	asrs	r4, r4, #2
 80082e0:	2600      	movs	r6, #0
 80082e2:	42a6      	cmp	r6, r4
 80082e4:	d105      	bne.n	80082f2 <__libc_init_array+0x2e>
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ec:	4798      	blx	r3
 80082ee:	3601      	adds	r6, #1
 80082f0:	e7ee      	b.n	80082d0 <__libc_init_array+0xc>
 80082f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f6:	4798      	blx	r3
 80082f8:	3601      	adds	r6, #1
 80082fa:	e7f2      	b.n	80082e2 <__libc_init_array+0x1e>
 80082fc:	08008b9c 	.word	0x08008b9c
 8008300:	08008b9c 	.word	0x08008b9c
 8008304:	08008b9c 	.word	0x08008b9c
 8008308:	08008ba0 	.word	0x08008ba0

0800830c <memset>:
 800830c:	4402      	add	r2, r0
 800830e:	4603      	mov	r3, r0
 8008310:	4293      	cmp	r3, r2
 8008312:	d100      	bne.n	8008316 <memset+0xa>
 8008314:	4770      	bx	lr
 8008316:	f803 1b01 	strb.w	r1, [r3], #1
 800831a:	e7f9      	b.n	8008310 <memset+0x4>
 800831c:	0000      	movs	r0, r0
	...

08008320 <log>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	ed2d 8b02 	vpush	{d8}
 8008326:	ec55 4b10 	vmov	r4, r5, d0
 800832a:	f000 f839 	bl	80083a0 <__ieee754_log>
 800832e:	4622      	mov	r2, r4
 8008330:	462b      	mov	r3, r5
 8008332:	4620      	mov	r0, r4
 8008334:	4629      	mov	r1, r5
 8008336:	eeb0 8a40 	vmov.f32	s16, s0
 800833a:	eef0 8a60 	vmov.f32	s17, s1
 800833e:	f7f8 fbc1 	bl	8000ac4 <__aeabi_dcmpun>
 8008342:	b998      	cbnz	r0, 800836c <log+0x4c>
 8008344:	2200      	movs	r2, #0
 8008346:	2300      	movs	r3, #0
 8008348:	4620      	mov	r0, r4
 800834a:	4629      	mov	r1, r5
 800834c:	f7f8 fbb0 	bl	8000ab0 <__aeabi_dcmpgt>
 8008350:	b960      	cbnz	r0, 800836c <log+0x4c>
 8008352:	2200      	movs	r2, #0
 8008354:	2300      	movs	r3, #0
 8008356:	4620      	mov	r0, r4
 8008358:	4629      	mov	r1, r5
 800835a:	f7f8 fb81 	bl	8000a60 <__aeabi_dcmpeq>
 800835e:	b160      	cbz	r0, 800837a <log+0x5a>
 8008360:	f7ff ffaa 	bl	80082b8 <__errno>
 8008364:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8008390 <log+0x70>
 8008368:	2322      	movs	r3, #34	; 0x22
 800836a:	6003      	str	r3, [r0, #0]
 800836c:	eeb0 0a48 	vmov.f32	s0, s16
 8008370:	eef0 0a68 	vmov.f32	s1, s17
 8008374:	ecbd 8b02 	vpop	{d8}
 8008378:	bd38      	pop	{r3, r4, r5, pc}
 800837a:	f7ff ff9d 	bl	80082b8 <__errno>
 800837e:	ecbd 8b02 	vpop	{d8}
 8008382:	2321      	movs	r3, #33	; 0x21
 8008384:	6003      	str	r3, [r0, #0]
 8008386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800838a:	4803      	ldr	r0, [pc, #12]	; (8008398 <log+0x78>)
 800838c:	f000 b9c4 	b.w	8008718 <nan>
 8008390:	00000000 	.word	0x00000000
 8008394:	fff00000 	.word	0xfff00000
 8008398:	08008b90 	.word	0x08008b90
 800839c:	00000000 	.word	0x00000000

080083a0 <__ieee754_log>:
 80083a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	ec51 0b10 	vmov	r0, r1, d0
 80083a8:	ed2d 8b04 	vpush	{d8-d9}
 80083ac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80083b0:	b083      	sub	sp, #12
 80083b2:	460d      	mov	r5, r1
 80083b4:	da29      	bge.n	800840a <__ieee754_log+0x6a>
 80083b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80083ba:	4303      	orrs	r3, r0
 80083bc:	ee10 2a10 	vmov	r2, s0
 80083c0:	d10c      	bne.n	80083dc <__ieee754_log+0x3c>
 80083c2:	49cf      	ldr	r1, [pc, #828]	; (8008700 <__ieee754_log+0x360>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	2300      	movs	r3, #0
 80083c8:	2000      	movs	r0, #0
 80083ca:	f7f8 fa0b 	bl	80007e4 <__aeabi_ddiv>
 80083ce:	ec41 0b10 	vmov	d0, r0, r1
 80083d2:	b003      	add	sp, #12
 80083d4:	ecbd 8b04 	vpop	{d8-d9}
 80083d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083dc:	2900      	cmp	r1, #0
 80083de:	da05      	bge.n	80083ec <__ieee754_log+0x4c>
 80083e0:	460b      	mov	r3, r1
 80083e2:	f7f7 ff1d 	bl	8000220 <__aeabi_dsub>
 80083e6:	2200      	movs	r2, #0
 80083e8:	2300      	movs	r3, #0
 80083ea:	e7ee      	b.n	80083ca <__ieee754_log+0x2a>
 80083ec:	4bc5      	ldr	r3, [pc, #788]	; (8008704 <__ieee754_log+0x364>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	f7f8 f8ce 	bl	8000590 <__aeabi_dmul>
 80083f4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80083f8:	460d      	mov	r5, r1
 80083fa:	4ac3      	ldr	r2, [pc, #780]	; (8008708 <__ieee754_log+0x368>)
 80083fc:	4295      	cmp	r5, r2
 80083fe:	dd06      	ble.n	800840e <__ieee754_log+0x6e>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	f7f7 ff0e 	bl	8000224 <__adddf3>
 8008408:	e7e1      	b.n	80083ce <__ieee754_log+0x2e>
 800840a:	2300      	movs	r3, #0
 800840c:	e7f5      	b.n	80083fa <__ieee754_log+0x5a>
 800840e:	152c      	asrs	r4, r5, #20
 8008410:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008414:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008418:	441c      	add	r4, r3
 800841a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800841e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008426:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800842a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800842e:	ea42 0105 	orr.w	r1, r2, r5
 8008432:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008436:	2200      	movs	r2, #0
 8008438:	4bb4      	ldr	r3, [pc, #720]	; (800870c <__ieee754_log+0x36c>)
 800843a:	f7f7 fef1 	bl	8000220 <__aeabi_dsub>
 800843e:	1cab      	adds	r3, r5, #2
 8008440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008444:	2b02      	cmp	r3, #2
 8008446:	4682      	mov	sl, r0
 8008448:	468b      	mov	fp, r1
 800844a:	f04f 0200 	mov.w	r2, #0
 800844e:	dc53      	bgt.n	80084f8 <__ieee754_log+0x158>
 8008450:	2300      	movs	r3, #0
 8008452:	f7f8 fb05 	bl	8000a60 <__aeabi_dcmpeq>
 8008456:	b1d0      	cbz	r0, 800848e <__ieee754_log+0xee>
 8008458:	2c00      	cmp	r4, #0
 800845a:	f000 8122 	beq.w	80086a2 <__ieee754_log+0x302>
 800845e:	4620      	mov	r0, r4
 8008460:	f7f8 f82c 	bl	80004bc <__aeabi_i2d>
 8008464:	a390      	add	r3, pc, #576	; (adr r3, 80086a8 <__ieee754_log+0x308>)
 8008466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846a:	4606      	mov	r6, r0
 800846c:	460f      	mov	r7, r1
 800846e:	f7f8 f88f 	bl	8000590 <__aeabi_dmul>
 8008472:	a38f      	add	r3, pc, #572	; (adr r3, 80086b0 <__ieee754_log+0x310>)
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	4604      	mov	r4, r0
 800847a:	460d      	mov	r5, r1
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f8 f886 	bl	8000590 <__aeabi_dmul>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4620      	mov	r0, r4
 800848a:	4629      	mov	r1, r5
 800848c:	e7ba      	b.n	8008404 <__ieee754_log+0x64>
 800848e:	a38a      	add	r3, pc, #552	; (adr r3, 80086b8 <__ieee754_log+0x318>)
 8008490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008494:	4650      	mov	r0, sl
 8008496:	4659      	mov	r1, fp
 8008498:	f7f8 f87a 	bl	8000590 <__aeabi_dmul>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	2000      	movs	r0, #0
 80084a2:	499b      	ldr	r1, [pc, #620]	; (8008710 <__ieee754_log+0x370>)
 80084a4:	f7f7 febc 	bl	8000220 <__aeabi_dsub>
 80084a8:	4652      	mov	r2, sl
 80084aa:	4606      	mov	r6, r0
 80084ac:	460f      	mov	r7, r1
 80084ae:	465b      	mov	r3, fp
 80084b0:	4650      	mov	r0, sl
 80084b2:	4659      	mov	r1, fp
 80084b4:	f7f8 f86c 	bl	8000590 <__aeabi_dmul>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4630      	mov	r0, r6
 80084be:	4639      	mov	r1, r7
 80084c0:	f7f8 f866 	bl	8000590 <__aeabi_dmul>
 80084c4:	4606      	mov	r6, r0
 80084c6:	460f      	mov	r7, r1
 80084c8:	b914      	cbnz	r4, 80084d0 <__ieee754_log+0x130>
 80084ca:	4632      	mov	r2, r6
 80084cc:	463b      	mov	r3, r7
 80084ce:	e0a2      	b.n	8008616 <__ieee754_log+0x276>
 80084d0:	4620      	mov	r0, r4
 80084d2:	f7f7 fff3 	bl	80004bc <__aeabi_i2d>
 80084d6:	a374      	add	r3, pc, #464	; (adr r3, 80086a8 <__ieee754_log+0x308>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	4680      	mov	r8, r0
 80084de:	4689      	mov	r9, r1
 80084e0:	f7f8 f856 	bl	8000590 <__aeabi_dmul>
 80084e4:	a372      	add	r3, pc, #456	; (adr r3, 80086b0 <__ieee754_log+0x310>)
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	4604      	mov	r4, r0
 80084ec:	460d      	mov	r5, r1
 80084ee:	4640      	mov	r0, r8
 80084f0:	4649      	mov	r1, r9
 80084f2:	f7f8 f84d 	bl	8000590 <__aeabi_dmul>
 80084f6:	e0a7      	b.n	8008648 <__ieee754_log+0x2a8>
 80084f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084fc:	f7f7 fe92 	bl	8000224 <__adddf3>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4650      	mov	r0, sl
 8008506:	4659      	mov	r1, fp
 8008508:	f7f8 f96c 	bl	80007e4 <__aeabi_ddiv>
 800850c:	ec41 0b18 	vmov	d8, r0, r1
 8008510:	4620      	mov	r0, r4
 8008512:	f7f7 ffd3 	bl	80004bc <__aeabi_i2d>
 8008516:	ec53 2b18 	vmov	r2, r3, d8
 800851a:	ec41 0b19 	vmov	d9, r0, r1
 800851e:	ec51 0b18 	vmov	r0, r1, d8
 8008522:	f7f8 f835 	bl	8000590 <__aeabi_dmul>
 8008526:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800852a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4680      	mov	r8, r0
 8008536:	4689      	mov	r9, r1
 8008538:	f7f8 f82a 	bl	8000590 <__aeabi_dmul>
 800853c:	a360      	add	r3, pc, #384	; (adr r3, 80086c0 <__ieee754_log+0x320>)
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	4606      	mov	r6, r0
 8008544:	460f      	mov	r7, r1
 8008546:	f7f8 f823 	bl	8000590 <__aeabi_dmul>
 800854a:	a35f      	add	r3, pc, #380	; (adr r3, 80086c8 <__ieee754_log+0x328>)
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	f7f7 fe68 	bl	8000224 <__adddf3>
 8008554:	4632      	mov	r2, r6
 8008556:	463b      	mov	r3, r7
 8008558:	f7f8 f81a 	bl	8000590 <__aeabi_dmul>
 800855c:	a35c      	add	r3, pc, #368	; (adr r3, 80086d0 <__ieee754_log+0x330>)
 800855e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008562:	f7f7 fe5f 	bl	8000224 <__adddf3>
 8008566:	4632      	mov	r2, r6
 8008568:	463b      	mov	r3, r7
 800856a:	f7f8 f811 	bl	8000590 <__aeabi_dmul>
 800856e:	a35a      	add	r3, pc, #360	; (adr r3, 80086d8 <__ieee754_log+0x338>)
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	f7f7 fe56 	bl	8000224 <__adddf3>
 8008578:	4642      	mov	r2, r8
 800857a:	464b      	mov	r3, r9
 800857c:	f7f8 f808 	bl	8000590 <__aeabi_dmul>
 8008580:	a357      	add	r3, pc, #348	; (adr r3, 80086e0 <__ieee754_log+0x340>)
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	4680      	mov	r8, r0
 8008588:	4689      	mov	r9, r1
 800858a:	4630      	mov	r0, r6
 800858c:	4639      	mov	r1, r7
 800858e:	f7f7 ffff 	bl	8000590 <__aeabi_dmul>
 8008592:	a355      	add	r3, pc, #340	; (adr r3, 80086e8 <__ieee754_log+0x348>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f7f7 fe44 	bl	8000224 <__adddf3>
 800859c:	4632      	mov	r2, r6
 800859e:	463b      	mov	r3, r7
 80085a0:	f7f7 fff6 	bl	8000590 <__aeabi_dmul>
 80085a4:	a352      	add	r3, pc, #328	; (adr r3, 80086f0 <__ieee754_log+0x350>)
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	f7f7 fe3b 	bl	8000224 <__adddf3>
 80085ae:	4632      	mov	r2, r6
 80085b0:	463b      	mov	r3, r7
 80085b2:	f7f7 ffed 	bl	8000590 <__aeabi_dmul>
 80085b6:	460b      	mov	r3, r1
 80085b8:	4602      	mov	r2, r0
 80085ba:	4649      	mov	r1, r9
 80085bc:	4640      	mov	r0, r8
 80085be:	f7f7 fe31 	bl	8000224 <__adddf3>
 80085c2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	3551      	adds	r5, #81	; 0x51
 80085ca:	431d      	orrs	r5, r3
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	4680      	mov	r8, r0
 80085d0:	4689      	mov	r9, r1
 80085d2:	dd48      	ble.n	8008666 <__ieee754_log+0x2c6>
 80085d4:	4b4e      	ldr	r3, [pc, #312]	; (8008710 <__ieee754_log+0x370>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	4650      	mov	r0, sl
 80085da:	4659      	mov	r1, fp
 80085dc:	f7f7 ffd8 	bl	8000590 <__aeabi_dmul>
 80085e0:	4652      	mov	r2, sl
 80085e2:	465b      	mov	r3, fp
 80085e4:	f7f7 ffd4 	bl	8000590 <__aeabi_dmul>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4606      	mov	r6, r0
 80085ee:	460f      	mov	r7, r1
 80085f0:	4640      	mov	r0, r8
 80085f2:	4649      	mov	r1, r9
 80085f4:	f7f7 fe16 	bl	8000224 <__adddf3>
 80085f8:	ec53 2b18 	vmov	r2, r3, d8
 80085fc:	f7f7 ffc8 	bl	8000590 <__aeabi_dmul>
 8008600:	4680      	mov	r8, r0
 8008602:	4689      	mov	r9, r1
 8008604:	b964      	cbnz	r4, 8008620 <__ieee754_log+0x280>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	4630      	mov	r0, r6
 800860c:	4639      	mov	r1, r7
 800860e:	f7f7 fe07 	bl	8000220 <__aeabi_dsub>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4650      	mov	r0, sl
 8008618:	4659      	mov	r1, fp
 800861a:	f7f7 fe01 	bl	8000220 <__aeabi_dsub>
 800861e:	e6d6      	b.n	80083ce <__ieee754_log+0x2e>
 8008620:	a321      	add	r3, pc, #132	; (adr r3, 80086a8 <__ieee754_log+0x308>)
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	ec51 0b19 	vmov	r0, r1, d9
 800862a:	f7f7 ffb1 	bl	8000590 <__aeabi_dmul>
 800862e:	a320      	add	r3, pc, #128	; (adr r3, 80086b0 <__ieee754_log+0x310>)
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	4604      	mov	r4, r0
 8008636:	460d      	mov	r5, r1
 8008638:	ec51 0b19 	vmov	r0, r1, d9
 800863c:	f7f7 ffa8 	bl	8000590 <__aeabi_dmul>
 8008640:	4642      	mov	r2, r8
 8008642:	464b      	mov	r3, r9
 8008644:	f7f7 fdee 	bl	8000224 <__adddf3>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4630      	mov	r0, r6
 800864e:	4639      	mov	r1, r7
 8008650:	f7f7 fde6 	bl	8000220 <__aeabi_dsub>
 8008654:	4652      	mov	r2, sl
 8008656:	465b      	mov	r3, fp
 8008658:	f7f7 fde2 	bl	8000220 <__aeabi_dsub>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4620      	mov	r0, r4
 8008662:	4629      	mov	r1, r5
 8008664:	e7d9      	b.n	800861a <__ieee754_log+0x27a>
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	4650      	mov	r0, sl
 800866c:	4659      	mov	r1, fp
 800866e:	f7f7 fdd7 	bl	8000220 <__aeabi_dsub>
 8008672:	ec53 2b18 	vmov	r2, r3, d8
 8008676:	f7f7 ff8b 	bl	8000590 <__aeabi_dmul>
 800867a:	4606      	mov	r6, r0
 800867c:	460f      	mov	r7, r1
 800867e:	2c00      	cmp	r4, #0
 8008680:	f43f af23 	beq.w	80084ca <__ieee754_log+0x12a>
 8008684:	a308      	add	r3, pc, #32	; (adr r3, 80086a8 <__ieee754_log+0x308>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	ec51 0b19 	vmov	r0, r1, d9
 800868e:	f7f7 ff7f 	bl	8000590 <__aeabi_dmul>
 8008692:	a307      	add	r3, pc, #28	; (adr r3, 80086b0 <__ieee754_log+0x310>)
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	4604      	mov	r4, r0
 800869a:	460d      	mov	r5, r1
 800869c:	ec51 0b19 	vmov	r0, r1, d9
 80086a0:	e727      	b.n	80084f2 <__ieee754_log+0x152>
 80086a2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80086f8 <__ieee754_log+0x358>
 80086a6:	e694      	b.n	80083d2 <__ieee754_log+0x32>
 80086a8:	fee00000 	.word	0xfee00000
 80086ac:	3fe62e42 	.word	0x3fe62e42
 80086b0:	35793c76 	.word	0x35793c76
 80086b4:	3dea39ef 	.word	0x3dea39ef
 80086b8:	55555555 	.word	0x55555555
 80086bc:	3fd55555 	.word	0x3fd55555
 80086c0:	df3e5244 	.word	0xdf3e5244
 80086c4:	3fc2f112 	.word	0x3fc2f112
 80086c8:	96cb03de 	.word	0x96cb03de
 80086cc:	3fc74664 	.word	0x3fc74664
 80086d0:	94229359 	.word	0x94229359
 80086d4:	3fd24924 	.word	0x3fd24924
 80086d8:	55555593 	.word	0x55555593
 80086dc:	3fe55555 	.word	0x3fe55555
 80086e0:	d078c69f 	.word	0xd078c69f
 80086e4:	3fc39a09 	.word	0x3fc39a09
 80086e8:	1d8e78af 	.word	0x1d8e78af
 80086ec:	3fcc71c5 	.word	0x3fcc71c5
 80086f0:	9997fa04 	.word	0x9997fa04
 80086f4:	3fd99999 	.word	0x3fd99999
	...
 8008700:	c3500000 	.word	0xc3500000
 8008704:	43500000 	.word	0x43500000
 8008708:	7fefffff 	.word	0x7fefffff
 800870c:	3ff00000 	.word	0x3ff00000
 8008710:	3fe00000 	.word	0x3fe00000
 8008714:	00000000 	.word	0x00000000

08008718 <nan>:
 8008718:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008720 <nan+0x8>
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	00000000 	.word	0x00000000
 8008724:	7ff80000 	.word	0x7ff80000

08008728 <_init>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	bf00      	nop
 800872c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872e:	bc08      	pop	{r3}
 8008730:	469e      	mov	lr, r3
 8008732:	4770      	bx	lr

08008734 <_fini>:
 8008734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008736:	bf00      	nop
 8008738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800873a:	bc08      	pop	{r3}
 800873c:	469e      	mov	lr, r3
 800873e:	4770      	bx	lr
