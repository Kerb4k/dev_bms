
dev_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009124  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080092fc  080092fc  000192fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009750  08009750  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009758  08009758  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009758  08009758  00019758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800975c  0800975c  0001975c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  20000088  080097e8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  080097e8  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a7d4  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d6  00000000  00000000  0003a8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  0003dda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001170  00000000  00000000  0003f410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000206fd  00000000  00000000  00040580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b1ae  00000000  00000000  00060c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce592  00000000  00000000  0007be2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063ac  00000000  00000000  0014a3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0015076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080092e4 	.word	0x080092e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	080092e4 	.word	0x080092e4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b970 	b.w	8000e88 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9e08      	ldr	r6, [sp, #32]
 8000bc6:	460d      	mov	r5, r1
 8000bc8:	4604      	mov	r4, r0
 8000bca:	460f      	mov	r7, r1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d14a      	bne.n	8000c66 <__udivmoddi4+0xa6>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4694      	mov	ip, r2
 8000bd4:	d965      	bls.n	8000ca2 <__udivmoddi4+0xe2>
 8000bd6:	fab2 f382 	clz	r3, r2
 8000bda:	b143      	cbz	r3, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000be0:	f1c3 0220 	rsb	r2, r3, #32
 8000be4:	409f      	lsls	r7, r3
 8000be6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bea:	4317      	orrs	r7, r2
 8000bec:	409c      	lsls	r4, r3
 8000bee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bf2:	fa1f f58c 	uxth.w	r5, ip
 8000bf6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bfa:	0c22      	lsrs	r2, r4, #16
 8000bfc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c00:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c04:	fb01 f005 	mul.w	r0, r1, r5
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	d90a      	bls.n	8000c22 <__udivmoddi4+0x62>
 8000c0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c10:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c14:	f080 811c 	bcs.w	8000e50 <__udivmoddi4+0x290>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f240 8119 	bls.w	8000e50 <__udivmoddi4+0x290>
 8000c1e:	3902      	subs	r1, #2
 8000c20:	4462      	add	r2, ip
 8000c22:	1a12      	subs	r2, r2, r0
 8000c24:	b2a4      	uxth	r4, r4
 8000c26:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c2a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c32:	fb00 f505 	mul.w	r5, r0, r5
 8000c36:	42a5      	cmp	r5, r4
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x90>
 8000c3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c42:	f080 8107 	bcs.w	8000e54 <__udivmoddi4+0x294>
 8000c46:	42a5      	cmp	r5, r4
 8000c48:	f240 8104 	bls.w	8000e54 <__udivmoddi4+0x294>
 8000c4c:	4464      	add	r4, ip
 8000c4e:	3802      	subs	r0, #2
 8000c50:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c54:	1b64      	subs	r4, r4, r5
 8000c56:	2100      	movs	r1, #0
 8000c58:	b11e      	cbz	r6, 8000c62 <__udivmoddi4+0xa2>
 8000c5a:	40dc      	lsrs	r4, r3
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0xbc>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	f000 80ed 	beq.w	8000e4a <__udivmoddi4+0x28a>
 8000c70:	2100      	movs	r1, #0
 8000c72:	e9c6 0500 	strd	r0, r5, [r6]
 8000c76:	4608      	mov	r0, r1
 8000c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7c:	fab3 f183 	clz	r1, r3
 8000c80:	2900      	cmp	r1, #0
 8000c82:	d149      	bne.n	8000d18 <__udivmoddi4+0x158>
 8000c84:	42ab      	cmp	r3, r5
 8000c86:	d302      	bcc.n	8000c8e <__udivmoddi4+0xce>
 8000c88:	4282      	cmp	r2, r0
 8000c8a:	f200 80f8 	bhi.w	8000e7e <__udivmoddi4+0x2be>
 8000c8e:	1a84      	subs	r4, r0, r2
 8000c90:	eb65 0203 	sbc.w	r2, r5, r3
 8000c94:	2001      	movs	r0, #1
 8000c96:	4617      	mov	r7, r2
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d0e2      	beq.n	8000c62 <__udivmoddi4+0xa2>
 8000c9c:	e9c6 4700 	strd	r4, r7, [r6]
 8000ca0:	e7df      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000ca2:	b902      	cbnz	r2, 8000ca6 <__udivmoddi4+0xe6>
 8000ca4:	deff      	udf	#255	; 0xff
 8000ca6:	fab2 f382 	clz	r3, r2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f040 8090 	bne.w	8000dd0 <__udivmoddi4+0x210>
 8000cb0:	1a8a      	subs	r2, r1, r2
 8000cb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	2101      	movs	r1, #1
 8000cbc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cc0:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc4:	0c22      	lsrs	r2, r4, #16
 8000cc6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cca:	fb0e f005 	mul.w	r0, lr, r5
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x124>
 8000cd2:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x122>
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	f200 80cb 	bhi.w	8000e78 <__udivmoddi4+0x2b8>
 8000ce2:	4645      	mov	r5, r8
 8000ce4:	1a12      	subs	r2, r2, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cec:	fb07 2210 	mls	r2, r7, r0, r2
 8000cf0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x14e>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d04:	d202      	bcs.n	8000d0c <__udivmoddi4+0x14c>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f200 80bb 	bhi.w	8000e82 <__udivmoddi4+0x2c2>
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d16:	e79f      	b.n	8000c58 <__udivmoddi4+0x98>
 8000d18:	f1c1 0720 	rsb	r7, r1, #32
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d26:	fa05 f401 	lsl.w	r4, r5, r1
 8000d2a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2e:	40fd      	lsrs	r5, r7
 8000d30:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d34:	4323      	orrs	r3, r4
 8000d36:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d3a:	fa1f fe8c 	uxth.w	lr, ip
 8000d3e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d42:	0c1c      	lsrs	r4, r3, #16
 8000d44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d48:	fb08 f50e 	mul.w	r5, r8, lr
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d52:	fa00 f001 	lsl.w	r0, r0, r1
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b0>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d60:	f080 8088 	bcs.w	8000e74 <__udivmoddi4+0x2b4>
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	f240 8085 	bls.w	8000e74 <__udivmoddi4+0x2b4>
 8000d6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6e:	4464      	add	r4, ip
 8000d70:	1b64      	subs	r4, r4, r5
 8000d72:	b29d      	uxth	r5, r3
 8000d74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d78:	fb09 4413 	mls	r4, r9, r3, r4
 8000d7c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d80:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d84:	45a6      	cmp	lr, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1da>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d90:	d26c      	bcs.n	8000e6c <__udivmoddi4+0x2ac>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	d96a      	bls.n	8000e6c <__udivmoddi4+0x2ac>
 8000d96:	3b02      	subs	r3, #2
 8000d98:	4464      	add	r4, ip
 8000d9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9e:	fba3 9502 	umull	r9, r5, r3, r2
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	42ac      	cmp	r4, r5
 8000da8:	46c8      	mov	r8, r9
 8000daa:	46ae      	mov	lr, r5
 8000dac:	d356      	bcc.n	8000e5c <__udivmoddi4+0x29c>
 8000dae:	d053      	beq.n	8000e58 <__udivmoddi4+0x298>
 8000db0:	b156      	cbz	r6, 8000dc8 <__udivmoddi4+0x208>
 8000db2:	ebb0 0208 	subs.w	r2, r0, r8
 8000db6:	eb64 040e 	sbc.w	r4, r4, lr
 8000dba:	fa04 f707 	lsl.w	r7, r4, r7
 8000dbe:	40ca      	lsrs	r2, r1
 8000dc0:	40cc      	lsrs	r4, r1
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	2100      	movs	r1, #0
 8000dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd0:	f1c3 0120 	rsb	r1, r3, #32
 8000dd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd8:	fa20 f201 	lsr.w	r2, r0, r1
 8000ddc:	fa25 f101 	lsr.w	r1, r5, r1
 8000de0:	409d      	lsls	r5, r3
 8000de2:	432a      	orrs	r2, r5
 8000de4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de8:	fa1f fe8c 	uxth.w	lr, ip
 8000dec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df0:	fb07 1510 	mls	r5, r7, r0, r1
 8000df4:	0c11      	lsrs	r1, r2, #16
 8000df6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dfa:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfe:	428d      	cmp	r5, r1
 8000e00:	fa04 f403 	lsl.w	r4, r4, r3
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x258>
 8000e06:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0e:	d22f      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e10:	428d      	cmp	r5, r1
 8000e12:	d92d      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e14:	3802      	subs	r0, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	1b49      	subs	r1, r1, r5
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e20:	fb07 1115 	mls	r1, r7, r5, r1
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	fb05 f10e 	mul.w	r1, r5, lr
 8000e2c:	4291      	cmp	r1, r2
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x282>
 8000e30:	eb1c 0202 	adds.w	r2, ip, r2
 8000e34:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e38:	d216      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000e3a:	4291      	cmp	r1, r2
 8000e3c:	d914      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000e3e:	3d02      	subs	r5, #2
 8000e40:	4462      	add	r2, ip
 8000e42:	1a52      	subs	r2, r2, r1
 8000e44:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e48:	e738      	b.n	8000cbc <__udivmoddi4+0xfc>
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000e50:	4639      	mov	r1, r7
 8000e52:	e6e6      	b.n	8000c22 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e6fb      	b.n	8000c50 <__udivmoddi4+0x90>
 8000e58:	4548      	cmp	r0, r9
 8000e5a:	d2a9      	bcs.n	8000db0 <__udivmoddi4+0x1f0>
 8000e5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e64:	3b01      	subs	r3, #1
 8000e66:	e7a3      	b.n	8000db0 <__udivmoddi4+0x1f0>
 8000e68:	4645      	mov	r5, r8
 8000e6a:	e7ea      	b.n	8000e42 <__udivmoddi4+0x282>
 8000e6c:	462b      	mov	r3, r5
 8000e6e:	e794      	b.n	8000d9a <__udivmoddi4+0x1da>
 8000e70:	4640      	mov	r0, r8
 8000e72:	e7d1      	b.n	8000e18 <__udivmoddi4+0x258>
 8000e74:	46d0      	mov	r8, sl
 8000e76:	e77b      	b.n	8000d70 <__udivmoddi4+0x1b0>
 8000e78:	3d02      	subs	r5, #2
 8000e7a:	4462      	add	r2, ip
 8000e7c:	e732      	b.n	8000ce4 <__udivmoddi4+0x124>
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e70a      	b.n	8000c98 <__udivmoddi4+0xd8>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e742      	b.n	8000d0e <__udivmoddi4+0x14e>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <WakeIdle>:
#define T_WAKE_MAX		400
#define T_REFUP_MAX		4400
#define T_CYCLE_FAST_MAX	1185	// Measure 12 Cells

void WakeIdle(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000e90:	20ff      	movs	r0, #255	; 0xff
 8000e92:	f001 fcbb 	bl	800280c <spi_write_read_byte>
	delay_u(IC_NUM * T_READY);
 8000e96:	200a      	movs	r0, #10
 8000e98:	f001 fc84 	bl	80027a4 <delay_u>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <WakeUp>:

void WakeUp(void){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000ea4:	20ff      	movs	r0, #255	; 0xff
 8000ea6:	f001 fcb1 	bl	800280c <spi_write_read_byte>
	delay_u(IC_NUM * T_WAKE_MAX);
 8000eaa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000eae:	f001 fc79 	bl	80027a4 <delay_u>

#if ((IC_NUM * T_WAKE_MAX) >= T_IDLE_MIN)
	spi_write_read_byte(0xFF);
	delay_u(IC_NUM * T_READY);
#endif
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <initialize>:
uint8_t ADCV[2]; //!< Cell Voltage conversion command
uint8_t ADAX[2]; //!< GPIO conversion command
uint8_t ADSTAT[2]; //!< STAT conversion command

void initialize(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af02      	add	r7, sp, #8
	init(MD_NORMAL,DCP_DISABLED,CELL_CH_ALL,AUX_CH_ALL,STS_CH_ALL);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f000 f804 	bl	8000ed4 <init>
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <init>:
				  uint8_t DCP,	//Discharge Permit
				  uint8_t CH,	//Cell Channels to be measured
				  uint8_t CHG,	//GPIO Channels to be measured
				  uint8_t CHST	//Status Channels to be measured
				  )
{
 8000ed4:	b490      	push	{r4, r7}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	4608      	mov	r0, r1
 8000ede:	4611      	mov	r1, r2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4623      	mov	r3, r4
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71bb      	strb	r3, [r7, #6]
 8000eea:	460b      	mov	r3, r1
 8000eec:	717b      	strb	r3, [r7, #5]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	713b      	strb	r3, [r7, #4]
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	105b      	asrs	r3, r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
	ADCV[0] = md_bits + 0x02;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	3302      	adds	r3, #2
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <init+0xb8>)
 8000f06:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	01db      	lsls	r3, r3, #7
 8000f0c:	73fb      	strb	r3, [r7, #15]
	ADCV[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	4413      	add	r3, r2
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	797b      	ldrb	r3, [r7, #5]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	3360      	adds	r3, #96	; 0x60
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <init+0xb8>)
 8000f26:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	105b      	asrs	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
	ADAX[0] = md_bits + 0x04;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	3304      	adds	r3, #4
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <init+0xbc>)
 8000f3c:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	01db      	lsls	r3, r3, #7
 8000f42:	73fb      	strb	r3, [r7, #15]
	ADAX[1] = md_bits + 0x60 + CHG;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	793b      	ldrb	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3360      	adds	r3, #96	; 0x60
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <init+0xbc>)
 8000f52:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
	ADSTAT[0] = md_bits + 0x04;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	3304      	adds	r3, #4
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <init+0xc0>)
 8000f68:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	01db      	lsls	r3, r3, #7
 8000f6e:	73fb      	strb	r3, [r7, #15]
	ADSTAT[1] = md_bits + 0x68 + CHST;
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	7e3b      	ldrb	r3, [r7, #24]
 8000f74:	4413      	add	r3, r2
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	3368      	adds	r3, #104	; 0x68
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <init+0xc0>)
 8000f7e:	705a      	strb	r2, [r3, #1]
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc90      	pop	{r4, r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200000a4 	.word	0x200000a4
 8000f90:	200000a8 	.word	0x200000a8
 8000f94:	200000ac 	.word	0x200000ac

08000f98 <pec15_calc>:

uint16_t pec15_calc(uint8_t len,	//Number of bytes that will be used to calculate a PEC
                    uint8_t *data	//Array of data that will be used to calculate  a PEC
                   )
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder, addr;

  remainder = 16;					//initialize the PEC
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fa8:	2300      	movs	r3, #0
 8000faa:	737b      	strb	r3, [r7, #13]
 8000fac:	e018      	b.n	8000fe0 <pec15_calc+0x48>
  {
    addr = ((remainder>>7)^data[i])&0xff;	//calculate PEC table address
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	09db      	lsrs	r3, r3, #7
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	7b7b      	ldrb	r3, [r7, #13]
 8000fb6:	6839      	ldr	r1, [r7, #0]
 8000fb8:	440b      	add	r3, r1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4053      	eors	r3, r2
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	817b      	strh	r3, [r7, #10]
    remainder = (remainder<<8)^crc15Table[addr];
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	897b      	ldrh	r3, [r7, #10]
 8000fce:	490b      	ldr	r1, [pc, #44]	; (8000ffc <pec15_calc+0x64>)
 8000fd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4053      	eors	r3, r2
 8000fd8:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fda:	7b7b      	ldrb	r3, [r7, #13]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	737b      	strb	r3, [r7, #13]
 8000fe0:	7b7a      	ldrb	r2, [r7, #13]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d3e2      	bcc.n	8000fae <pec15_calc+0x16>
  }
  return(remainder*2);	//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000fe8:	89fb      	ldrh	r3, [r7, #14]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	b29b      	uxth	r3, r3
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	080092fc 	.word	0x080092fc

08001000 <wrcfg>:

void wrcfg(uint8_t total_ic,
				   uint8_t config[][6]
				  )
{
 8001000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001004:	b089      	sub	sp, #36	; 0x24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	6039      	str	r1, [r7, #0]
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	466b      	mov	r3, sp
 8001010:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 8001012:	2306      	movs	r3, #6
 8001014:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	3304      	adds	r3, #4
 800101e:	76fb      	strb	r3, [r7, #27]

#if DYNAMIC_MEM
	uint8_t *cmd;
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
#else
	uint8_t cmd[CMD_LEN];
 8001020:	7efb      	ldrb	r3, [r7, #27]
 8001022:	3b01      	subs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	7efb      	ldrb	r3, [r7, #27]
 8001028:	2200      	movs	r2, #0
 800102a:	4698      	mov	r8, r3
 800102c:	4691      	mov	r9, r2
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800103a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800103e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001042:	7efb      	ldrb	r3, [r7, #27]
 8001044:	2200      	movs	r2, #0
 8001046:	461c      	mov	r4, r3
 8001048:	4615      	mov	r5, r2
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	00eb      	lsls	r3, r5, #3
 8001054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001058:	00e2      	lsls	r2, r4, #3
 800105a:	7efb      	ldrb	r3, [r7, #27]
 800105c:	3307      	adds	r3, #7
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	ebad 0d03 	sub.w	sp, sp, r3
 8001066:	466b      	mov	r3, sp
 8001068:	3300      	adds	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	2201      	movs	r2, #1
 8001076:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x3d;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	223d      	movs	r2, #61	; 0x3d
 800107c:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6e;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	226e      	movs	r2, #110	; 0x6e
 8001082:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 8001084:	2304      	movs	r3, #4
 8001086:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	77bb      	strb	r3, [r7, #30]
 800108c:	e03c      	b.n	8001108 <wrcfg+0x108>
	{
		/* the last IC on the stack. The first configuration written is */
		/* received by the last IC in the daisy chain */

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 800108e:	2300      	movs	r3, #0
 8001090:	777b      	strb	r3, [r7, #29]
 8001092:	e012      	b.n	80010ba <wrcfg+0xba>
		{
			/* current_byte is the byte counter */

			cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 8001094:	7fba      	ldrb	r2, [r7, #30]
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	3b06      	subs	r3, #6
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	18d1      	adds	r1, r2, r3
 80010a4:	7f7a      	ldrb	r2, [r7, #29]
 80010a6:	7ffb      	ldrb	r3, [r7, #31]
 80010a8:	5c89      	ldrb	r1, [r1, r2]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80010ae:	7ffb      	ldrb	r3, [r7, #31]
 80010b0:	3301      	adds	r3, #1
 80010b2:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 80010b4:	7f7b      	ldrb	r3, [r7, #29]
 80010b6:	3301      	adds	r3, #1
 80010b8:	777b      	strb	r3, [r7, #29]
 80010ba:	7f7a      	ldrb	r2, [r7, #29]
 80010bc:	7f3b      	ldrb	r3, [r7, #28]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3e8      	bcc.n	8001094 <wrcfg+0x94>
		}
		cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 80010c2:	7fba      	ldrb	r2, [r7, #30]
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	3b06      	subs	r3, #6
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	461a      	mov	r2, r3
 80010d4:	7f3b      	ldrb	r3, [r7, #28]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <pec15_calc>
 80010de:	4603      	mov	r3, r0
 80010e0:	81fb      	strh	r3, [r7, #14]
		cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 80010e2:	89fb      	ldrh	r3, [r7, #14]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	7ffb      	ldrb	r3, [r7, #31]
 80010ea:	b2d1      	uxtb	r1, r2
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	54d1      	strb	r1, [r2, r3]
		cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 80010f0:	7ffb      	ldrb	r3, [r7, #31]
 80010f2:	3301      	adds	r3, #1
 80010f4:	89fa      	ldrh	r2, [r7, #14]
 80010f6:	b2d1      	uxtb	r1, r2
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 80010fc:	7ffb      	ldrb	r3, [r7, #31]
 80010fe:	3302      	adds	r3, #2
 8001100:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001102:	7fbb      	ldrb	r3, [r7, #30]
 8001104:	3b01      	subs	r3, #1
 8001106:	77bb      	strb	r3, [r7, #30]
 8001108:	7fbb      	ldrb	r3, [r7, #30]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1bf      	bne.n	800108e <wrcfg+0x8e>
	}

	uint8_t rx_data;
	WakeIdle();
 800110e:	f7ff febd 	bl	8000e8c <WakeIdle>
	//spi_write_array(CMD_LEN, cmd); //This function causes bad stuff!
	spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 8001112:	7ef8      	ldrb	r0, [r7, #27]
 8001114:	f107 030d 	add.w	r3, r7, #13
 8001118:	2200      	movs	r2, #0
 800111a:	6939      	ldr	r1, [r7, #16]
 800111c:	f001 fbba 	bl	8002894 <spi_write_then_read_array_ltc>
 8001120:	46b5      	mov	sp, r6

#if DYNAMIC_MEM
	free(cmd);
#endif
}
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800112c <rdcfg>:

int8_t rdcfg(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 800112c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001130:	b089      	sub	sp, #36	; 0x24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	6039      	str	r1, [r7, #0]
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	466b      	mov	r3, sp
 800113c:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 800113e:	2308      	movs	r3, #8
 8001140:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	77fb      	strb	r3, [r7, #31]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 8001146:	230c      	movs	r3, #12
 8001148:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 800114a:	7efb      	ldrb	r3, [r7, #27]
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	3b01      	subs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	7efb      	ldrb	r3, [r7, #27]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	461a      	mov	r2, r3
 8001158:	2300      	movs	r3, #0
 800115a:	4690      	mov	r8, r2
 800115c:	4699      	mov	r9, r3
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800116a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800116e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001172:	7efb      	ldrb	r3, [r7, #27]
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	461a      	mov	r2, r3
 8001178:	2300      	movs	r3, #0
 800117a:	4614      	mov	r4, r2
 800117c:	461d      	mov	r5, r3
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	00eb      	lsls	r3, r5, #3
 8001188:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800118c:	00e2      	lsls	r2, r4, #3
 800118e:	7efb      	ldrb	r3, [r7, #27]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	3307      	adds	r3, #7
 8001194:	08db      	lsrs	r3, r3, #3
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	ebad 0d03 	sub.w	sp, sp, r3
 800119c:	466b      	mov	r3, sp
 800119e:	3300      	adds	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 80011a2:	2300      	movs	r3, #0
 80011a4:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x02;
 80011a6:	2302      	movs	r3, #2
 80011a8:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x2b;
 80011aa:	232b      	movs	r3, #43	; 0x2b
 80011ac:	72bb      	strb	r3, [r7, #10]
	cmd[3] = 0x0a;
 80011ae:	230a      	movs	r3, #10
 80011b0:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 80011b2:	f7ff fe6b 	bl	8000e8c <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 80011b6:	7f3b      	ldrb	r3, [r7, #28]
 80011b8:	79fa      	ldrb	r2, [r7, #7]
 80011ba:	fb03 f202 	mul.w	r2, r3, r2
 80011be:	f107 0108 	add.w	r1, r7, #8
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	2004      	movs	r0, #4
 80011c6:	f001 fb65 	bl	8002894 <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	77bb      	strb	r3, [r7, #30]
 80011ce:	e03a      	b.n	8001246 <rdcfg+0x11a>
	{
		// executes for each LTC6804 in the daisy chain and packs the data
		// into the r_config array as well as check the received Config data
		// for any bit errors

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	777b      	strb	r3, [r7, #29]
 80011d4:	e010      	b.n	80011f8 <rdcfg+0xcc>
		{
			r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 80011d6:	7f7a      	ldrb	r2, [r7, #29]
 80011d8:	7fbb      	ldrb	r3, [r7, #30]
 80011da:	7f39      	ldrb	r1, [r7, #28]
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	18d1      	adds	r1, r2, r3
 80011e2:	7fbb      	ldrb	r3, [r7, #30]
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	441a      	add	r2, r3
 80011ea:	7f7b      	ldrb	r3, [r7, #29]
 80011ec:	6938      	ldr	r0, [r7, #16]
 80011ee:	5c41      	ldrb	r1, [r0, r1]
 80011f0:	54d1      	strb	r1, [r2, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80011f2:	7f7b      	ldrb	r3, [r7, #29]
 80011f4:	3301      	adds	r3, #1
 80011f6:	777b      	strb	r3, [r7, #29]
 80011f8:	7f7a      	ldrb	r2, [r7, #29]
 80011fa:	7f3b      	ldrb	r3, [r7, #28]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3ea      	bcc.n	80011d6 <rdcfg+0xaa>
		}

		received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8001200:	7fbb      	ldrb	r3, [r7, #30]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	4413      	add	r3, r2
 8001208:	799b      	ldrb	r3, [r3, #6]
 800120a:	b29b      	uxth	r3, r3
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b29a      	uxth	r2, r3
 8001210:	7fbb      	ldrb	r3, [r7, #30]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	440b      	add	r3, r1
 8001218:	79db      	ldrb	r3, [r3, #7]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	81fb      	strh	r3, [r7, #14]
		data_pec = pec15_calc(6, &r_config[current_ic][0]);
 8001220:	7fbb      	ldrb	r3, [r7, #30]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4619      	mov	r1, r3
 800122a:	2006      	movs	r0, #6
 800122c:	f7ff feb4 	bl	8000f98 <pec15_calc>
 8001230:	4603      	mov	r3, r0
 8001232:	81bb      	strh	r3, [r7, #12]
		if (received_pec != data_pec)
 8001234:	89fa      	ldrh	r2, [r7, #14]
 8001236:	89bb      	ldrh	r3, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <rdcfg+0x114>
		{
			pec_error = -1;
 800123c:	23ff      	movs	r3, #255	; 0xff
 800123e:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 8001240:	7fbb      	ldrb	r3, [r7, #30]
 8001242:	3301      	adds	r3, #1
 8001244:	77bb      	strb	r3, [r7, #30]
 8001246:	7fba      	ldrb	r2, [r7, #30]
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	429a      	cmp	r2, r3
 800124c:	d3c0      	bcc.n	80011d0 <rdcfg+0xa4>
	}

#if DYNAMIC_MEM
	free(rx_data);
#endif
	return(pec_error);
 800124e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001252:	46b5      	mov	sp, r6
}
 8001254:	4618      	mov	r0, r3
 8001256:	3724      	adds	r7, #36	; 0x24
 8001258:	46bd      	mov	sp, r7
 800125a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800125e <wrcfgb>:

void wrcfgb(uint8_t total_ic,
				   uint8_t config[][6]
				  ){
 800125e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	466b      	mov	r3, sp
 800126e:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 8001270:	2306      	movs	r3, #6
 8001272:	773b      	strb	r3, [r7, #28]
		const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	3304      	adds	r3, #4
 800127c:	76fb      	strb	r3, [r7, #27]

	#if DYNAMIC_MEM
		uint8_t *cmd;
		cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
	#else
		uint8_t cmd[CMD_LEN];
 800127e:	7efb      	ldrb	r3, [r7, #27]
 8001280:	3b01      	subs	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	7efb      	ldrb	r3, [r7, #27]
 8001286:	2200      	movs	r2, #0
 8001288:	4698      	mov	r8, r3
 800128a:	4691      	mov	r9, r2
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001298:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800129c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012a0:	7efb      	ldrb	r3, [r7, #27]
 80012a2:	2200      	movs	r2, #0
 80012a4:	461c      	mov	r4, r3
 80012a6:	4615      	mov	r5, r2
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	00eb      	lsls	r3, r5, #3
 80012b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012b6:	00e2      	lsls	r2, r4, #3
 80012b8:	7efb      	ldrb	r3, [r7, #27]
 80012ba:	3307      	adds	r3, #7
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	ebad 0d03 	sub.w	sp, sp, r3
 80012c4:	466b      	mov	r3, sp
 80012c6:	3300      	adds	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
	#endif

		cmd[0] = 0x00;
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
		cmd[1] = 0x24;
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2224      	movs	r2, #36	; 0x24
 80012d4:	705a      	strb	r2, [r3, #1]
		//pec15_calc(2, cmd);
		cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	2002      	movs	r0, #2
 80012da:	f7ff fe5d 	bl	8000f98 <pec15_calc>
 80012de:	4603      	mov	r3, r0
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	709a      	strb	r2, [r3, #2]
		cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 80012ea:	6939      	ldr	r1, [r7, #16]
 80012ec:	2002      	movs	r0, #2
 80012ee:	f7ff fe53 	bl	8000f98 <pec15_calc>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	70da      	strb	r2, [r3, #3]

		cmd_index = 4;
 80012fa:	2304      	movs	r3, #4
 80012fc:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	77bb      	strb	r3, [r7, #30]
 8001302:	e03c      	b.n	800137e <wrcfgb+0x120>
		{
			/* the last IC on the stack. The first configuration written is */
			/* received by the last IC in the daisy chain */

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 8001304:	2300      	movs	r3, #0
 8001306:	777b      	strb	r3, [r7, #29]
 8001308:	e012      	b.n	8001330 <wrcfgb+0xd2>
			{
				/* current_byte is the byte counter */

				cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 800130a:	7fba      	ldrb	r2, [r7, #30]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	3b06      	subs	r3, #6
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	18d1      	adds	r1, r2, r3
 800131a:	7f7a      	ldrb	r2, [r7, #29]
 800131c:	7ffb      	ldrb	r3, [r7, #31]
 800131e:	5c89      	ldrb	r1, [r1, r2]
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	54d1      	strb	r1, [r2, r3]
				cmd_index = cmd_index + 1;
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	3301      	adds	r3, #1
 8001328:	77fb      	strb	r3, [r7, #31]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 800132a:	7f7b      	ldrb	r3, [r7, #29]
 800132c:	3301      	adds	r3, #1
 800132e:	777b      	strb	r3, [r7, #29]
 8001330:	7f7a      	ldrb	r2, [r7, #29]
 8001332:	7f3b      	ldrb	r3, [r7, #28]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3e8      	bcc.n	800130a <wrcfgb+0xac>
			}
			cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 8001338:	7fba      	ldrb	r2, [r7, #30]
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	3b06      	subs	r3, #6
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	4413      	add	r3, r2
 8001348:	461a      	mov	r2, r3
 800134a:	7f3b      	ldrb	r3, [r7, #28]
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fe22 	bl	8000f98 <pec15_calc>
 8001354:	4603      	mov	r3, r0
 8001356:	81fb      	strh	r3, [r7, #14]
			cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8001358:	89fb      	ldrh	r3, [r7, #14]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	b29a      	uxth	r2, r3
 800135e:	7ffb      	ldrb	r3, [r7, #31]
 8001360:	b2d1      	uxtb	r1, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	54d1      	strb	r1, [r2, r3]
			cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8001366:	7ffb      	ldrb	r3, [r7, #31]
 8001368:	3301      	adds	r3, #1
 800136a:	89fa      	ldrh	r2, [r7, #14]
 800136c:	b2d1      	uxtb	r1, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 2;
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	3302      	adds	r3, #2
 8001376:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001378:	7fbb      	ldrb	r3, [r7, #30]
 800137a:	3b01      	subs	r3, #1
 800137c:	77bb      	strb	r3, [r7, #30]
 800137e:	7fbb      	ldrb	r3, [r7, #30]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1bf      	bne.n	8001304 <wrcfgb+0xa6>
		}

		uint8_t rx_data;

		WakeIdle();
 8001384:	f7ff fd82 	bl	8000e8c <WakeIdle>
		spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 8001388:	7ef8      	ldrb	r0, [r7, #27]
 800138a:	f107 030d 	add.w	r3, r7, #13
 800138e:	2200      	movs	r2, #0
 8001390:	6939      	ldr	r1, [r7, #16]
 8001392:	f001 fa7f 	bl	8002894 <spi_write_then_read_array_ltc>
 8001396:	46b5      	mov	sp, r6
#if DYNAMIC_MEM
	free(cmd);
#endif

}
 8001398:	bf00      	nop
 800139a:	3724      	adds	r7, #36	; 0x24
 800139c:	46bd      	mov	sp, r7
 800139e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080013a2 <rdcfgb>:

int8_t rdcfgb(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 80013a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	466b      	mov	r3, sp
 80013b2:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 80013b4:	2308      	movs	r3, #8
 80013b6:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	77fb      	strb	r3, [r7, #31]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 80013bc:	230c      	movs	r3, #12
 80013be:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 80013c0:	7efb      	ldrb	r3, [r7, #27]
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	3b01      	subs	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	7efb      	ldrb	r3, [r7, #27]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	461a      	mov	r2, r3
 80013ce:	2300      	movs	r3, #0
 80013d0:	4690      	mov	r8, r2
 80013d2:	4699      	mov	r9, r3
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013e8:	7efb      	ldrb	r3, [r7, #27]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	461a      	mov	r2, r3
 80013ee:	2300      	movs	r3, #0
 80013f0:	4614      	mov	r4, r2
 80013f2:	461d      	mov	r5, r3
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	00eb      	lsls	r3, r5, #3
 80013fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001402:	00e2      	lsls	r2, r4, #3
 8001404:	7efb      	ldrb	r3, [r7, #27]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	3307      	adds	r3, #7
 800140a:	08db      	lsrs	r3, r3, #3
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	ebad 0d03 	sub.w	sp, sp, r3
 8001412:	466b      	mov	r3, sp
 8001414:	3300      	adds	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 8001418:	2300      	movs	r3, #0
 800141a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x26;
 800141c:	2326      	movs	r3, #38	; 0x26
 800141e:	727b      	strb	r3, [r7, #9]
	cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4619      	mov	r1, r3
 8001426:	2002      	movs	r0, #2
 8001428:	f7ff fdb6 	bl	8000f98 <pec15_calc>
 800142c:	4603      	mov	r3, r0
 800142e:	0a1b      	lsrs	r3, r3, #8
 8001430:	b29b      	uxth	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4619      	mov	r1, r3
 800143c:	2002      	movs	r0, #2
 800143e:	f7ff fdab 	bl	8000f98 <pec15_calc>
 8001442:	4603      	mov	r3, r0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001448:	f7ff fd20 	bl	8000e8c <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 800144c:	7f3b      	ldrb	r3, [r7, #28]
 800144e:	79fa      	ldrb	r2, [r7, #7]
 8001450:	fb03 f202 	mul.w	r2, r3, r2
 8001454:	f107 0108 	add.w	r1, r7, #8
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2004      	movs	r0, #4
 800145c:	f001 fa1a 	bl	8002894 <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 8001460:	2300      	movs	r3, #0
 8001462:	77bb      	strb	r3, [r7, #30]
 8001464:	e03a      	b.n	80014dc <rdcfgb+0x13a>
		{
			// executes for each LTC6804 in the daisy chain and packs the data
			// into the r_config array as well as check the received Config data
			// for any bit errors

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001466:	2300      	movs	r3, #0
 8001468:	777b      	strb	r3, [r7, #29]
 800146a:	e010      	b.n	800148e <rdcfgb+0xec>
			{
				r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 800146c:	7f7a      	ldrb	r2, [r7, #29]
 800146e:	7fbb      	ldrb	r3, [r7, #30]
 8001470:	7f39      	ldrb	r1, [r7, #28]
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	18d1      	adds	r1, r2, r3
 8001478:	7fbb      	ldrb	r3, [r7, #30]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	441a      	add	r2, r3
 8001480:	7f7b      	ldrb	r3, [r7, #29]
 8001482:	6938      	ldr	r0, [r7, #16]
 8001484:	5c41      	ldrb	r1, [r0, r1]
 8001486:	54d1      	strb	r1, [r2, r3]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001488:	7f7b      	ldrb	r3, [r7, #29]
 800148a:	3301      	adds	r3, #1
 800148c:	777b      	strb	r3, [r7, #29]
 800148e:	7f7a      	ldrb	r2, [r7, #29]
 8001490:	7f3b      	ldrb	r3, [r7, #28]
 8001492:	429a      	cmp	r2, r3
 8001494:	d3ea      	bcc.n	800146c <rdcfgb+0xca>
			}

			received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8001496:	7fbb      	ldrb	r3, [r7, #30]
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	4413      	add	r3, r2
 800149e:	799b      	ldrb	r3, [r3, #6]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	7fbb      	ldrb	r3, [r7, #30]
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	6839      	ldr	r1, [r7, #0]
 80014ac:	440b      	add	r3, r1
 80014ae:	79db      	ldrb	r3, [r3, #7]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	81fb      	strh	r3, [r7, #14]
			data_pec = pec15_calc(6, &r_config[current_ic][0]);
 80014b6:	7fbb      	ldrb	r3, [r7, #30]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	2006      	movs	r0, #6
 80014c2:	f7ff fd69 	bl	8000f98 <pec15_calc>
 80014c6:	4603      	mov	r3, r0
 80014c8:	81bb      	strh	r3, [r7, #12]
			if (received_pec != data_pec)
 80014ca:	89fa      	ldrh	r2, [r7, #14]
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d001      	beq.n	80014d6 <rdcfgb+0x134>
			{
				pec_error = -1;
 80014d2:	23ff      	movs	r3, #255	; 0xff
 80014d4:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80014d6:	7fbb      	ldrb	r3, [r7, #30]
 80014d8:	3301      	adds	r3, #1
 80014da:	77bb      	strb	r3, [r7, #30]
 80014dc:	7fba      	ldrb	r2, [r7, #30]
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3c0      	bcc.n	8001466 <rdcfgb+0xc4>
		}

	#if DYNAMIC_MEM
		free(rx_data);
	#endif
		return(pec_error);
 80014e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014e8:	46b5      	mov	sp, r6

}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014f4 <rdcv>:

uint8_t rdcv(uint8_t reg,				// Controls which cell voltage register is read back.
                     uint8_t total_ic,			// the number of ICs in the system
                     cell_data_t cell_codes[][18]	// Array of the parsed cell codes
                    )
{
 80014f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014f8:	b08b      	sub	sp, #44	; 0x2c
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	603a      	str	r2, [r7, #0]
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	460b      	mov	r3, r1
 8001504:	71bb      	strb	r3, [r7, #6]
 8001506:	466b      	mov	r3, sp
 8001508:	461e      	mov	r6, r3

	const uint8_t NUM_RX_BYT = 8;
 800150a:	2308      	movs	r3, #8
 800150c:	f887 3020 	strb.w	r3, [r7, #32]
	const uint8_t BYT_IN_REG = 6;
 8001510:	2306      	movs	r3, #6
 8001512:	77fb      	strb	r3, [r7, #31]
	const uint8_t CELL_IN_REG = 3;
 8001514:	2303      	movs	r3, #3
 8001516:	77bb      	strb	r3, [r7, #30]

	uint8_t pec_error = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter=0;	//data counter
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if DYNAMIC_MEM
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 18;
 8001524:	2312      	movs	r3, #18
 8001526:	777b      	strb	r3, [r7, #29]
	uint8_t cell_data[NUM_RX_BYT * max_ic];
 8001528:	f897 3020 	ldrb.w	r3, [r7, #32]
 800152c:	7f7a      	ldrb	r2, [r7, #29]
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	3b01      	subs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	f897 3020 	ldrb.w	r3, [r7, #32]
 800153a:	7f7a      	ldrb	r2, [r7, #29]
 800153c:	fb02 f303 	mul.w	r3, r2, r3
 8001540:	461a      	mov	r2, r3
 8001542:	2300      	movs	r3, #0
 8001544:	4690      	mov	r8, r2
 8001546:	4699      	mov	r9, r3
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001554:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001558:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800155c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001560:	7f7a      	ldrb	r2, [r7, #29]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	461a      	mov	r2, r3
 8001568:	2300      	movs	r3, #0
 800156a:	4614      	mov	r4, r2
 800156c:	461d      	mov	r5, r3
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	00eb      	lsls	r3, r5, #3
 8001578:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800157c:	00e2      	lsls	r2, r4, #3
 800157e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001582:	7f7a      	ldrb	r2, [r7, #29]
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	3307      	adds	r3, #7
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	ebad 0d03 	sub.w	sp, sp, r3
 8001592:	466b      	mov	r3, sp
 8001594:	3300      	adds	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
#endif


	if (reg == 0)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 8088 	bne.w	80016b0 <rdcv+0x1bc>
	{
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 80015a0:	2301      	movs	r3, #1
 80015a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80015a6:	e07d      	b.n	80016a4 <rdcv+0x1b0>
		{
			data_counter = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			rdcv_reg(cell_reg, total_ic,cell_data );				 //Reads a single Cell voltage register
 80015ae:	79b9      	ldrb	r1, [r7, #6]
 80015b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f8f6 	bl	80017a8 <rdcv_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80015c2:	e065      	b.n	8001690 <rdcv+0x19c>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015ca:	e02d      	b.n	8001628 <rdcv+0x134>
				{
					// loops once for each of the 3 cell voltage codes in the register

					parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 80015cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015da:	3301      	adds	r3, #1
 80015dc:	6979      	ldr	r1, [r7, #20]
 80015de:	5ccb      	ldrb	r3, [r1, r3]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	81fb      	strh	r3, [r7, #14]
					// create the parsed cell voltage code
					//cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
					cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)].voltage = parsed_cell;
 80015ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	461a      	mov	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001600:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001604:	3a01      	subs	r2, #1
 8001606:	7fb8      	ldrb	r0, [r7, #30]
 8001608:	fb00 f202 	mul.w	r2, r0, r2
 800160c:	440a      	add	r2, r1
 800160e:	89f9      	ldrh	r1, [r7, #14]
 8001610:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 8001614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001618:	3302      	adds	r3, #2
 800161a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 800161e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001622:	3301      	adds	r3, #1
 8001624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001628:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800162c:	7fbb      	ldrb	r3, [r7, #30]
 800162e:	429a      	cmp	r2, r3
 8001630:	d3cc      	bcc.n	80015cc <rdcv+0xd8>
					//must increment by two for each parsed cell code
				}
				received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001632:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	b29b      	uxth	r3, r3
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b29a      	uxth	r2, r3
 8001640:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001644:	3301      	adds	r3, #1
 8001646:	6979      	ldr	r1, [r7, #20]
 8001648:	5ccb      	ldrb	r3, [r1, r3]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4413      	add	r3, r2
 800164e:	827b      	strh	r3, [r7, #18]
				//after the 6 cell voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001650:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001654:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	441a      	add	r2, r3
 8001660:	7ffb      	ldrb	r3, [r7, #31]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fc97 	bl	8000f98 <pec15_calc>
 800166a:	4603      	mov	r3, r0
 800166c:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 800166e:	8a7a      	ldrh	r2, [r7, #18]
 8001670:	8a3b      	ldrh	r3, [r7, #16]
 8001672:	429a      	cmp	r2, r3
 8001674:	d002      	beq.n	800167c <rdcv+0x188>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 8001676:	23ff      	movs	r3, #255	; 0xff
 8001678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					//are detected in the serial data
				}
			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 800167c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001680:	3302      	adds	r3, #2
 8001682:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 8001686:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800168a:	3301      	adds	r3, #1
 800168c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001690:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	429a      	cmp	r2, r3
 8001698:	d394      	bcc.n	80015c4 <rdcv+0xd0>
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 800169a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800169e:	3301      	adds	r3, #1
 80016a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80016a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016a8:	2b06      	cmp	r3, #6
 80016aa:	f67f af7d 	bls.w	80015a8 <rdcv+0xb4>
 80016ae:	e073      	b.n	8001798 <rdcv+0x2a4>
		}
	}

	else
	{
		rdcv_reg(reg, total_ic,cell_data);
 80016b0:	79b9      	ldrb	r1, [r7, #6]
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f876 	bl	80017a8 <rdcv_reg>
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80016c2:	e064      	b.n	800178e <rdcv+0x29a>
		{
			// current_ic is used as the IC counter
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80016ca:	e02c      	b.n	8001726 <rdcv+0x232>
			{
				// loops once for each of the 3 cell voltage codes in the register

				parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8); //Each cell code is received as two bytes and is combined to
 80016cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	5cd3      	ldrb	r3, [r2, r3]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016da:	3301      	adds	r3, #1
 80016dc:	6979      	ldr	r1, [r7, #20]
 80016de:	5ccb      	ldrb	r3, [r1, r3]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	81fb      	strh	r3, [r7, #14]
				// create the parsed cell voltage code

				//cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
				cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)].voltage = 0x0000FFFF & parsed_cell;
 80016ea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016ee:	4613      	mov	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	461a      	mov	r2, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001700:	79fa      	ldrb	r2, [r7, #7]
 8001702:	3a01      	subs	r2, #1
 8001704:	7fb8      	ldrb	r0, [r7, #30]
 8001706:	fb00 f202 	mul.w	r2, r0, r2
 800170a:	440a      	add	r2, r1
 800170c:	89f9      	ldrh	r1, [r7, #14]
 800170e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter= data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 8001712:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001716:	3302      	adds	r3, #2
 8001718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 800171c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001720:	3301      	adds	r3, #1
 8001722:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001726:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800172a:	7fbb      	ldrb	r3, [r7, #30]
 800172c:	429a      	cmp	r2, r3
 800172e:	d3cd      	bcc.n	80016cc <rdcv+0x1d8>
				//must increment by two for each parsed cell code
			}
			received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	b29b      	uxth	r3, r3
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	b29a      	uxth	r2, r3
 800173e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001742:	3301      	adds	r3, #1
 8001744:	6979      	ldr	r1, [r7, #20]
 8001746:	5ccb      	ldrb	r3, [r1, r3]
 8001748:	b29b      	uxth	r3, r3
 800174a:	4413      	add	r3, r2
 800174c:	827b      	strh	r3, [r7, #18]
			//after the 6 cell voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 800174e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001752:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	441a      	add	r2, r3
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fc18 	bl	8000f98 <pec15_calc>
 8001768:	4603      	mov	r3, r0
 800176a:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 800176c:	8a7a      	ldrh	r2, [r7, #18]
 800176e:	8a3b      	ldrh	r3, [r7, #16]
 8001770:	429a      	cmp	r2, r3
 8001772:	d002      	beq.n	800177a <rdcv+0x286>
			{
				pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 8001774:	23ff      	movs	r3, #255	; 0xff
 8001776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//are detected in the serial data
			}
			data_counter= data_counter + 2;                       //Because the transmitted PEC code is 2 bytes long the data_counter
 800177a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800177e:	3302      	adds	r3, #2
 8001780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 8001784:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001788:	3301      	adds	r3, #1
 800178a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800178e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001792:	79bb      	ldrb	r3, [r7, #6]
 8001794:	429a      	cmp	r2, r3
 8001796:	d395      	bcc.n	80016c4 <rdcv+0x1d0>
		}
	}
#if DYNAMIC_MEM
	free(cell_data);
#endif
	return(pec_error);
 8001798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800179c:	46b5      	mov	sp, r6
}
 800179e:	4618      	mov	r0, r3
 80017a0:	372c      	adds	r7, #44	; 0x2c
 80017a2:	46bd      	mov	sp, r7
 80017a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080017a8 <rdcv_reg>:
*/
void rdcv_reg(uint8_t reg,			//Determines which cell voltage register is read back
                      uint8_t total_ic,		//the number of ICs in the
                      uint8_t *data			//An array of the unparsed cell codes
                     )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	603a      	str	r2, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
 80017b4:	460b      	mov	r3, r1
 80017b6:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 80017b8:	2308      	movs	r3, #8
 80017ba:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d104      	bne.n	80017cc <rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 80017c2:	2304      	movs	r3, #4
 80017c4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017c6:	2300      	movs	r3, #0
 80017c8:	723b      	strb	r3, [r7, #8]
 80017ca:	e026      	b.n	800181a <rdcv_reg+0x72>
	}
	else if (reg == 2)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d104      	bne.n	80017dc <rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 80017d2:	2306      	movs	r3, #6
 80017d4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017d6:	2300      	movs	r3, #0
 80017d8:	723b      	strb	r3, [r7, #8]
 80017da:	e01e      	b.n	800181a <rdcv_reg+0x72>
	}
	else if (reg == 3)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d104      	bne.n	80017ec <rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 80017e2:	2308      	movs	r3, #8
 80017e4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017e6:	2300      	movs	r3, #0
 80017e8:	723b      	strb	r3, [r7, #8]
 80017ea:	e016      	b.n	800181a <rdcv_reg+0x72>
	}
	else if (reg == 4)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d104      	bne.n	80017fc <rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 80017f2:	230a      	movs	r3, #10
 80017f4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017f6:	2300      	movs	r3, #0
 80017f8:	723b      	strb	r3, [r7, #8]
 80017fa:	e00e      	b.n	800181a <rdcv_reg+0x72>
	}
	else if (reg == 5) // LTC6813 - Cell register E
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d104      	bne.n	800180c <rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 8001802:	2309      	movs	r3, #9
 8001804:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001806:	2300      	movs	r3, #0
 8001808:	723b      	strb	r3, [r7, #8]
 800180a:	e006      	b.n	800181a <rdcv_reg+0x72>
	}
	else if (reg == 6) // LTC6813 - Cell register F
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2b06      	cmp	r3, #6
 8001810:	d103      	bne.n	800181a <rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 8001812:	230b      	movs	r3, #11
 8001814:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	4619      	mov	r1, r3
 8001820:	2002      	movs	r0, #2
 8001822:	f7ff fbb9 	bl	8000f98 <pec15_calc>
 8001826:	4603      	mov	r3, r0
 8001828:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800182a:	89bb      	ldrh	r3, [r7, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	b29b      	uxth	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001834:	89bb      	ldrh	r3, [r7, #12]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 800183a:	f7ff fb27 	bl	8000e8c <WakeIdle>
	WakeIdle();
 800183e:	f7ff fb25 	bl	8000e8c <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	79ba      	ldrb	r2, [r7, #6]
 8001846:	fb03 f202 	mul.w	r2, r3, r2
 800184a:	f107 0108 	add.w	r1, r7, #8
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2004      	movs	r0, #4
 8001852:	f001 f81f 	bl	8002894 <spi_write_then_read_array_ltc>
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <rdaux>:
*/
int8_t rdaux(uint8_t reg,				//Determines which GPIO voltage register is read back.
                     uint8_t total_ic,			//the number of ICs in the system
                     temp_data_t aux_codes[][GPIO_NUM]	//A two dimensional array of the gpio voltage codes.
                    )
{
 800185e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001862:	b08d      	sub	sp, #52	; 0x34
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	603a      	str	r2, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	460b      	mov	r3, r1
 800186e:	71bb      	strb	r3, [r7, #6]
 8001870:	466b      	mov	r3, sp
 8001872:	461e      	mov	r6, r3
	const uint8_t NUM_RX_BYT = 8;
 8001874:	2308      	movs	r3, #8
 8001876:	77fb      	strb	r3, [r7, #31]
	const uint8_t BYT_IN_REG = 6;
 8001878:	2306      	movs	r3, #6
 800187a:	77bb      	strb	r3, [r7, #30]
	const uint8_t GPIO_IN_REG = 3;
 800187c:	2303      	movs	r3, #3
 800187e:	777b      	strb	r3, [r7, #29]

	uint8_t data_counter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int8_t pec_error = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint16_t data_pec;
#if DYNAMIC_MEM
	uint8_t *data;
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 800188c:	230c      	movs	r3, #12
 800188e:	773b      	strb	r3, [r7, #28]
	uint8_t data[NUM_RX_BYT * max_ic];
 8001890:	7ffb      	ldrb	r3, [r7, #31]
 8001892:	7f3a      	ldrb	r2, [r7, #28]
 8001894:	fb02 f303 	mul.w	r3, r2, r3
 8001898:	3b01      	subs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	7ffb      	ldrb	r3, [r7, #31]
 800189e:	7f3a      	ldrb	r2, [r7, #28]
 80018a0:	fb02 f303 	mul.w	r3, r2, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	2300      	movs	r3, #0
 80018a8:	4690      	mov	r8, r2
 80018aa:	4699      	mov	r9, r3
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018c0:	7ffb      	ldrb	r3, [r7, #31]
 80018c2:	7f3a      	ldrb	r2, [r7, #28]
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	2300      	movs	r3, #0
 80018cc:	4614      	mov	r4, r2
 80018ce:	461d      	mov	r5, r3
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	00eb      	lsls	r3, r5, #3
 80018da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018de:	00e2      	lsls	r2, r4, #3
 80018e0:	7ffb      	ldrb	r3, [r7, #31]
 80018e2:	7f3a      	ldrb	r2, [r7, #28]
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	3307      	adds	r3, #7
 80018ea:	08db      	lsrs	r3, r3, #3
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	ebad 0d03 	sub.w	sp, sp, r3
 80018f2:	466b      	mov	r3, sp
 80018f4:	3300      	adds	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
#endif

	if (reg == 0)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 8087 	bne.w	8001a0e <rdaux+0x1b0>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 8001900:	2301      	movs	r3, #1
 8001902:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001906:	e07c      	b.n	8001a02 <rdaux+0x1a4>
		{
			data_counter = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 800190e:	79b9      	ldrb	r1, [r7, #6]
 8001910:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f8f9 	bl	8001b0e <rdaux_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 800191c:	2300      	movs	r3, #0
 800191e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001922:	e064      	b.n	80019ee <rdaux+0x190>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 8001924:	2300      	movs	r3, #0
 8001926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800192a:	e02d      	b.n	8001988 <rdaux+0x12a>
				{
					// loops once for each of the 3 gpio voltage codes in the register

					parsed_aux = data[data_counter] + (data[data_counter+1]<<8);              //Each gpio codes is received as two bytes and is combined to
 800192c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	b29a      	uxth	r2, r3
 8001936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800193a:	3301      	adds	r3, #1
 800193c:	6979      	ldr	r1, [r7, #20]
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	b29b      	uxth	r3, r3
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	b29b      	uxth	r3, r3
 8001946:	4413      	add	r3, r2
 8001948:	81fb      	strh	r3, [r7, #14]
					// create the parsed gpio voltage code

					//aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
					aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 800194a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	461a      	mov	r2, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8001960:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001964:	3a01      	subs	r2, #1
 8001966:	7f78      	ldrb	r0, [r7, #29]
 8001968:	fb00 f202 	mul.w	r2, r0, r2
 800196c:	440a      	add	r2, r1
 800196e:	89f9      	ldrh	r1, [r7, #14]
 8001970:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
					data_counter=data_counter+2;                        //Because gpio voltage codes are two bytes the data counter
 8001974:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001978:	3302      	adds	r3, #2
 800197a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 800197e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001982:	3301      	adds	r3, #1
 8001984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001988:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800198c:	7f7b      	ldrb	r3, [r7, #29]
 800198e:	429a      	cmp	r2, r3
 8001990:	d3cc      	bcc.n	800192c <rdaux+0xce>
					//must increment by two for each parsed gpio voltage code
				}
				received_pec = (data[data_counter]<<8)+ data[data_counter+1];          //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	b29b      	uxth	r3, r3
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	b29a      	uxth	r2, r3
 80019a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019a4:	3301      	adds	r3, #1
 80019a6:	6979      	ldr	r1, [r7, #20]
 80019a8:	5ccb      	ldrb	r3, [r1, r3]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	827b      	strh	r3, [r7, #18]
				//after the 6 gpio voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 80019b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019b4:	7ffa      	ldrb	r2, [r7, #31]
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	441a      	add	r2, r3
 80019be:	7fbb      	ldrb	r3, [r7, #30]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fae8 	bl	8000f98 <pec15_calc>
 80019c8:	4603      	mov	r3, r0
 80019ca:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 80019cc:	8a7a      	ldrh	r2, [r7, #18]
 80019ce:	8a3b      	ldrh	r3, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d002      	beq.n	80019da <rdaux+0x17c>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 80019d4:	23ff      	movs	r3, #255	; 0xff
 80019d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					//are detected in the received serial data
				}

				data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 80019da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019de:	3302      	adds	r3, #2
 80019e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80019e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019e8:	3301      	adds	r3, #1
 80019ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80019ee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d395      	bcc.n	8001924 <rdaux+0xc6>
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 80019f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019fc:	3301      	adds	r3, #1
 80019fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001a02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	f67f af7e 	bls.w	8001908 <rdaux+0xaa>
 8001a0c:	e067      	b.n	8001ade <rdaux+0x280>
		}

	}
	else
	{
		rdaux_reg(reg, total_ic, data);
 8001a0e:	79b9      	ldrb	r1, [r7, #6]
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f87a 	bl	8001b0e <rdaux_reg>
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1e:	e05a      	b.n	8001ad6 <rdaux+0x278>
		{
			// current_ic is used as an IC counter

			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	e028      	b.n	8001a78 <rdaux+0x21a>
			{
				// once for each aux voltage in the register

				parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));        //Each gpio codes is received as two bytes and is combined to
 8001a26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	5cd3      	ldrb	r3, [r2, r3]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a34:	3301      	adds	r3, #1
 8001a36:	6979      	ldr	r1, [r7, #20]
 8001a38:	5ccb      	ldrb	r3, [r1, r3]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	81fb      	strh	r3, [r7, #14]
				// create the parsed gpio voltage code
				//aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
				aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	461a      	mov	r2, r3
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	79fa      	ldrb	r2, [r7, #7]
 8001a56:	3a01      	subs	r2, #1
 8001a58:	7f79      	ldrb	r1, [r7, #29]
 8001a5a:	fb02 f101 	mul.w	r1, r2, r1
 8001a5e:	6a3a      	ldr	r2, [r7, #32]
 8001a60:	440a      	add	r2, r1
 8001a62:	89f9      	ldrh	r1, [r7, #14]
 8001a64:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
				data_counter=data_counter+2;                      //Because gpio voltage codes are two bytes the data counter
 8001a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	3301      	adds	r3, #1
 8001a76:	623b      	str	r3, [r7, #32]
 8001a78:	7f7b      	ldrb	r3, [r7, #29]
 8001a7a:	6a3a      	ldr	r2, [r7, #32]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbd2      	blt.n	8001a26 <rdaux+0x1c8>
				//must increment by two for each parsed gpio voltage code
			}
			received_pec = (data[data_counter]<<8) + data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001a80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a92:	3301      	adds	r3, #1
 8001a94:	6979      	ldr	r1, [r7, #20]
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	827b      	strh	r3, [r7, #18]
			//after the 6 gpio voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8001a9e:	7ffb      	ldrb	r3, [r7, #31]
 8001aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	441a      	add	r2, r3
 8001aaa:	7fbb      	ldrb	r3, [r7, #30]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fa72 	bl	8000f98 <pec15_calc>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 8001ab8:	8a7a      	ldrh	r2, [r7, #18]
 8001aba:	8a3b      	ldrh	r3, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d002      	beq.n	8001ac6 <rdaux+0x268>
			{
				pec_error = -1;                               //The pec_error variable is simply set negative if any PEC errors
 8001ac0:	23ff      	movs	r3, #255	; 0xff
 8001ac2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				//are detected in the received serial data
			}

			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8001ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aca:	3302      	adds	r3, #2
 8001acc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dba0      	blt.n	8001a20 <rdaux+0x1c2>
	}

#if DYNAMIC_MEM
	free(data);
#endif
	return (pec_error);
 8001ade:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8001ae2:	46b5      	mov	sp, r6
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3734      	adds	r7, #52	; 0x34
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001aee <adcv_delay>:

	free(data);
	return (pec_error);
}

void adcv_delay(void){
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001af2:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8001af6:	f000 fe55 	bl	80027a4 <delay_u>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}

08001afe <adax_delay>:

void adax_delay(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001b02:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8001b06:	f000 fe4d 	bl	80027a4 <delay_u>

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <rdaux_reg>:
*/
void rdaux_reg(uint8_t reg,			//Determines which GPIO voltage register is read back
                       uint8_t total_ic,	//The number of ICs in the system
                       uint8_t *data		//Array of the unparsed auxiliary codes
                      )
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	603a      	str	r2, [r7, #0]
 8001b18:	71fb      	strb	r3, [r7, #7]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001b1e:	2308      	movs	r3, #8
 8001b20:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d104      	bne.n	8001b32 <rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	723b      	strb	r3, [r7, #8]
 8001b30:	e01b      	b.n	8001b6a <rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d104      	bne.n	8001b42 <rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 8001b38:	230e      	movs	r3, #14
 8001b3a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	723b      	strb	r3, [r7, #8]
 8001b40:	e013      	b.n	8001b6a <rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d104      	bne.n	8001b52 <rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8001b48:	230d      	movs	r3, #13
 8001b4a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	723b      	strb	r3, [r7, #8]
 8001b50:	e00b      	b.n	8001b6a <rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d104      	bne.n	8001b62 <rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8001b58:	230f      	movs	r3, #15
 8001b5a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	723b      	strb	r3, [r7, #8]
 8001b60:	e003      	b.n	8001b6a <rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8001b62:	230c      	movs	r3, #12
 8001b64:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b66:	2300      	movs	r3, #0
 8001b68:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	4619      	mov	r1, r3
 8001b70:	2002      	movs	r0, #2
 8001b72:	f7ff fa11 	bl	8000f98 <pec15_calc>
 8001b76:	4603      	mov	r3, r0
 8001b78:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001b7a:	89bb      	ldrh	r3, [r7, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001b84:	89bb      	ldrh	r3, [r7, #12]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001b8a:	f7ff f97f 	bl	8000e8c <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	79ba      	ldrb	r2, [r7, #6]
 8001b92:	fb03 f202 	mul.w	r2, r3, r2
 8001b96:	f107 0108 	add.w	r1, r7, #8
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2004      	movs	r0, #4
 8001b9e:	f000 fe79 	bl	8002894 <spi_write_then_read_array_ltc>
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <adcv>:

/*!
	\brief Starts cell voltage conversion.
*/
void adcv(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADCV[0];
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <adcv+0x44>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <adcv+0x44>)
 8001bba:	785b      	ldrb	r3, [r3, #1]
 8001bbc:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADCV);
 8001bbe:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <adcv+0x44>)
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f7ff f9e9 	bl	8000f98 <pec15_calc>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001bda:	f7ff f957 	bl	8000e8c <WakeIdle>
	spi_write_array(4, cmd);
 8001bde:	463b      	mov	r3, r7
 8001be0:	4619      	mov	r1, r3
 8001be2:	2004      	movs	r0, #4
 8001be4:	f000 fe34 	bl	8002850 <spi_write_array>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200000a4 	.word	0x200000a4

08001bf4 <adax>:

/*!
	\brief Start an GPIO Conversion.
*/
void adax(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADAX[0];
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <adax+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <adax+0x44>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADAX);
 8001c06:	490c      	ldr	r1, [pc, #48]	; (8001c38 <adax+0x44>)
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f7ff f9c5 	bl	8000f98 <pec15_calc>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001c22:	f7ff f933 	bl	8000e8c <WakeIdle>
	spi_write_array(4, cmd);
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	2004      	movs	r0, #4
 8001c2c:	f000 fe10 	bl	8002850 <spi_write_array>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200000a8 	.word	0x200000a8

08001c3c <calc_sum_of_cells>:
	\brief	Calculates the Sum of Cells.
*/


void calc_sum_of_cells(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	73fb      	strb	r3, [r7, #15]

	uint16_t soc = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	82fb      	strh	r3, [r7, #22]

	for(uint8_t i = 0; i < total_ic; i++){
 8001c4e:	2300      	movs	r3, #0
 8001c50:	757b      	strb	r3, [r7, #21]
 8001c52:	e01e      	b.n	8001c92 <calc_sum_of_cells+0x56>
		for(uint8_t j = 0; j < CELL_NUM; j++){
 8001c54:	2300      	movs	r3, #0
 8001c56:	753b      	strb	r3, [r7, #20]
 8001c58:	e015      	b.n	8001c86 <calc_sum_of_cells+0x4a>
			soc += (cell_data[i][j].voltage / 100);
 8001c5a:	7d7a      	ldrb	r2, [r7, #21]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	461a      	mov	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	4413      	add	r3, r2
 8001c6a:	7d3a      	ldrb	r2, [r7, #20]
 8001c6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <calc_sum_of_cells+0x84>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	8afb      	ldrh	r3, [r7, #22]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	82fb      	strh	r3, [r7, #22]
		for(uint8_t j = 0; j < CELL_NUM; j++){
 8001c80:	7d3b      	ldrb	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	753b      	strb	r3, [r7, #20]
 8001c86:	7d3b      	ldrb	r3, [r7, #20]
 8001c88:	2b11      	cmp	r3, #17
 8001c8a:	d9e6      	bls.n	8001c5a <calc_sum_of_cells+0x1e>
	for(uint8_t i = 0; i < total_ic; i++){
 8001c8c:	7d7b      	ldrb	r3, [r7, #21]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	757b      	strb	r3, [r7, #21]
 8001c92:	7d7a      	ldrb	r2, [r7, #21]
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3dc      	bcc.n	8001c54 <calc_sum_of_cells+0x18>
		}
	}
	status_data->sum_of_cells = (float)soc /100;
 8001c9a:	8afb      	ldrh	r3, [r7, #22]
 8001c9c:	ee07 3a90 	vmov	s15, r3
 8001ca0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ca4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001cc4 <calc_sum_of_cells+0x88>
 8001ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8001cb2:	bf00      	nop
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	51eb851f 	.word	0x51eb851f
 8001cc4:	42c80000 	.word	0x42c80000

08001cc8 <calculate_soc>:
/*!
	\brief	Calculate power from current data and Sum of Cells.
*/

void calculate_soc(status_data_t *status_data){
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

	//float consumed = status_data->IVT_I * FREQUENCY/3600;

	status_data->soc = 100 - (status_data->IVT_Wh / ACCU_Wh)*100;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <calculate_soc+0x3c>)
 8001cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cda:	441a      	add	r2, r3
 8001cdc:	1312      	asrs	r2, r2, #12
 8001cde:	17db      	asrs	r3, r3, #31
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	2264      	movs	r2, #100	; 0x64
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	9ee009ef 	.word	0x9ee009ef

08001d08 <get_minmax_temperature>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][12]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_temperature(uint8_t total_ic, temp_data_t temp_data[][GPIO_NUM], status_data_t *status_data)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	73fb      	strb	r3, [r7, #15]
	int32_t min = temp_data[0][0].temp;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d1c:	61fb      	str	r3, [r7, #28]
	int32_t max = temp_data[0][0].temp;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d24:	61bb      	str	r3, [r7, #24]
	uint8_t min_id = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
	uint8_t max_id = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0; i < total_ic; i++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	757b      	strb	r3, [r7, #21]
 8001d32:	e062      	b.n	8001dfa <get_minmax_temperature+0xf2>
	{
		for (uint8_t j = 0; j < 5; j++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	753b      	strb	r3, [r7, #20]
 8001d38:	e059      	b.n	8001dee <get_minmax_temperature+0xe6>
		{

			if (temp_data[i][j].temp > max)
 8001d3a:	7d7a      	ldrb	r2, [r7, #21]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	461a      	mov	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	441a      	add	r2, r3
 8001d4a:	7d3b      	ldrb	r3, [r7, #20]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d54:	461a      	mov	r2, r3
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	da18      	bge.n	8001d8e <get_minmax_temperature+0x86>
			{

				max = temp_data[i][j].temp;
 8001d5c:	7d7a      	ldrb	r2, [r7, #21]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	461a      	mov	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	441a      	add	r2, r3
 8001d6c:	7d3b      	ldrb	r3, [r7, #20]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d76:	61bb      	str	r3, [r7, #24]
				max_id = (i << 4) | (j & 0x0f);
 8001d78:	7d7b      	ldrb	r3, [r7, #21]
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	b25a      	sxtb	r2, r3
 8001d7e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	75bb      	strb	r3, [r7, #22]

			}
			if (temp_data[i][j].temp < min && j != 5)
 8001d8e:	7d7a      	ldrb	r2, [r7, #21]
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	441a      	add	r2, r3
 8001d9e:	7d3b      	ldrb	r3, [r7, #20]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001da8:	461a      	mov	r2, r3
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4293      	cmp	r3, r2
 8001dae:	dd1b      	ble.n	8001de8 <get_minmax_temperature+0xe0>
 8001db0:	7d3b      	ldrb	r3, [r7, #20]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d018      	beq.n	8001de8 <get_minmax_temperature+0xe0>
			{

				min = temp_data[i][j].temp;
 8001db6:	7d7a      	ldrb	r2, [r7, #21]
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	441a      	add	r2, r3
 8001dc6:	7d3b      	ldrb	r3, [r7, #20]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dd0:	61fb      	str	r3, [r7, #28]
				min_id = (i << 4) | (j & 0x0f);
 8001dd2:	7d7b      	ldrb	r3, [r7, #21]
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	b25a      	sxtb	r2, r3
 8001dd8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	75fb      	strb	r3, [r7, #23]
		for (uint8_t j = 0; j < 5; j++)
 8001de8:	7d3b      	ldrb	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	753b      	strb	r3, [r7, #20]
 8001dee:	7d3b      	ldrb	r3, [r7, #20]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d9a2      	bls.n	8001d3a <get_minmax_temperature+0x32>
	for (uint8_t i = 0; i < total_ic; i++)
 8001df4:	7d7b      	ldrb	r3, [r7, #21]
 8001df6:	3301      	adds	r3, #1
 8001df8:	757b      	strb	r3, [r7, #21]
 8001dfa:	7d7a      	ldrb	r2, [r7, #21]
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d398      	bcc.n	8001d34 <get_minmax_temperature+0x2c>

			}
		}
	}
	status_data->min_temp = min;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	b21a      	sxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	83da      	strh	r2, [r3, #30]
	status_data->max_temp = max;
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	841a      	strh	r2, [r3, #32]

	status_data->min_temp_id = min_id;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7dfa      	ldrb	r2, [r7, #23]
 8001e16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	status_data->max_temp_id = max_id;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7dba      	ldrb	r2, [r7, #22]
 8001e1e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <get_minmax_voltage>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][CELL_NUM]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_voltage(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b087      	sub	sp, #28
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
	uint16_t min = cell_data[0][0].voltage;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	82fb      	strh	r3, [r7, #22]
	uint16_t max = cell_data[0][0].voltage;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	82bb      	strh	r3, [r7, #20]
	uint8_t min_id = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	74fb      	strb	r3, [r7, #19]
	uint8_t max_id = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	74bb      	strb	r3, [r7, #18]





	for (uint8_t i = 0; i < total_ic; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	747b      	strb	r3, [r7, #17]
 8001e54:	e064      	b.n	8001f20 <get_minmax_voltage+0xf2>
	{
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	743b      	strb	r3, [r7, #16]
 8001e5a:	e05b      	b.n	8001f14 <get_minmax_voltage+0xe6>
		{
			if (cell_data[i][j].voltage > max)
 8001e5c:	7c7a      	ldrb	r2, [r7, #17]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	461a      	mov	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	7c3a      	ldrb	r2, [r7, #16]
 8001e6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e72:	8aba      	ldrh	r2, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d216      	bcs.n	8001ea6 <get_minmax_voltage+0x78>
			{
				max = cell_data[i][j].voltage;
 8001e78:	7c7a      	ldrb	r2, [r7, #17]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	461a      	mov	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4413      	add	r3, r2
 8001e88:	7c3a      	ldrb	r2, [r7, #16]
 8001e8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e8e:	82bb      	strh	r3, [r7, #20]
				max_id = (i << 4) | (j & 0x0f);
 8001e90:	7c7b      	ldrb	r3, [r7, #17]
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	b25a      	sxtb	r2, r3
 8001e96:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	74bb      	strb	r3, [r7, #18]
			}
			if (cell_data[i][j].voltage < min && cell_data[i][j].voltage > 5000) //ignore cells under .5V
 8001ea6:	7c7a      	ldrb	r2, [r7, #17]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	7c3a      	ldrb	r2, [r7, #16]
 8001eb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ebc:	8afa      	ldrh	r2, [r7, #22]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d925      	bls.n	8001f0e <get_minmax_voltage+0xe0>
 8001ec2:	7c7a      	ldrb	r2, [r7, #17]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	7c3a      	ldrb	r2, [r7, #16]
 8001ed4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d916      	bls.n	8001f0e <get_minmax_voltage+0xe0>
			{
				min = cell_data[i][j].voltage;
 8001ee0:	7c7a      	ldrb	r2, [r7, #17]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4413      	add	r3, r2
 8001ef0:	7c3a      	ldrb	r2, [r7, #16]
 8001ef2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ef6:	82fb      	strh	r3, [r7, #22]
				min_id = (i << 4) | (j & 0x0f);
 8001ef8:	7c7b      	ldrb	r3, [r7, #17]
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	b25a      	sxtb	r2, r3
 8001efe:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	b25b      	sxtb	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b25b      	sxtb	r3, r3
 8001f0c:	74fb      	strb	r3, [r7, #19]
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001f0e:	7c3b      	ldrb	r3, [r7, #16]
 8001f10:	3301      	adds	r3, #1
 8001f12:	743b      	strb	r3, [r7, #16]
 8001f14:	7c3b      	ldrb	r3, [r7, #16]
 8001f16:	2b11      	cmp	r3, #17
 8001f18:	d9a0      	bls.n	8001e5c <get_minmax_voltage+0x2e>
	for (uint8_t i = 0; i < total_ic; i++)
 8001f1a:	7c7b      	ldrb	r3, [r7, #17]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	747b      	strb	r3, [r7, #17]
 8001f20:	7c7a      	ldrb	r2, [r7, #17]
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d396      	bcc.n	8001e56 <get_minmax_voltage+0x28>
			}
		}
	}
	status_data->min_voltage = min;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	8afa      	ldrh	r2, [r7, #22]
 8001f2c:	849a      	strh	r2, [r3, #36]	; 0x24
	status_data->max_voltage = max;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8aba      	ldrh	r2, [r7, #20]
 8001f32:	84da      	strh	r2, [r3, #38]	; 0x26
	status_data->delta = max - min;
 8001f34:	8aba      	ldrh	r2, [r7, #20]
 8001f36:	8afb      	ldrh	r3, [r7, #22]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	839a      	strh	r2, [r3, #28]
	status_data->min_voltage_id = min_id;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7cfa      	ldrb	r2, [r7, #19]
 8001f46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	status_data->max_voltage_id = max_id;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7cba      	ldrb	r2, [r7, #18]
 8001f4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8001f52:	bf00      	nop
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <build_disch_cfg>:




void build_disch_cfg(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], uint8_t tx_config[][6],\
					 status_data_t *status_data, limit_t *limit){
 8001f5e:	b480      	push	{r7}
 8001f60:	b087      	sub	sp, #28
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	73fb      	strb	r3, [r7, #15]
	uint16_t DCCx = 0x0000;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	82fb      	strh	r3, [r7, #22]
	//discharge all cells

	for (uint8_t i = 0; i < total_ic; i++){
 8001f72:	2300      	movs	r3, #0
 8001f74:	757b      	strb	r3, [r7, #21]
 8001f76:	e051      	b.n	800201c <build_disch_cfg+0xbe>
		for (uint8_t j = 0; j < 12; j++){
 8001f78:	2300      	movs	r3, #0
 8001f7a:	753b      	strb	r3, [r7, #20]
 8001f7c:	e02d      	b.n	8001fda <build_disch_cfg+0x7c>
			if (cell_data[i][j].voltage > (status_data->min_voltage + limit->tolerance)){
 8001f7e:	7d7a      	ldrb	r2, [r7, #21]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	7d3a      	ldrb	r2, [r7, #20]
 8001f90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f94:	461a      	mov	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	8a9b      	ldrh	r3, [r3, #20]
 8001fa0:	440b      	add	r3, r1
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	dd0a      	ble.n	8001fbc <build_disch_cfg+0x5e>
				DCCx |= (1<<j);
 8001fa6:	7d3b      	ldrb	r3, [r7, #20]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	82fb      	strh	r3, [r7, #22]
 8001fba:	e00b      	b.n	8001fd4 <build_disch_cfg+0x76>
			}
			else{
				DCCx &= ~(1<<j);
 8001fbc:	7d3b      	ldrb	r3, [r7, #20]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	82fb      	strh	r3, [r7, #22]
		for (uint8_t j = 0; j < 12; j++){
 8001fd4:	7d3b      	ldrb	r3, [r7, #20]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	753b      	strb	r3, [r7, #20]
 8001fda:	7d3b      	ldrb	r3, [r7, #20]
 8001fdc:	2b0b      	cmp	r3, #11
 8001fde:	d9ce      	bls.n	8001f7e <build_disch_cfg+0x20>
			}
		}
		tx_config[i][4] = (DCCx & 0x00ff);
 8001fe0:	7d7a      	ldrb	r2, [r7, #21]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	461a      	mov	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	8afa      	ldrh	r2, [r7, #22]
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	711a      	strb	r2, [r3, #4]
		tx_config[i][5] = ((DCCx >> 8) & 0x0f);
 8001ff6:	8afb      	ldrh	r3, [r7, #22]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b2d9      	uxtb	r1, r3
 8001ffe:	7d7a      	ldrb	r2, [r7, #21]
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	461a      	mov	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	f001 020f 	and.w	r2, r1, #15
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < total_ic; i++){
 8002016:	7d7b      	ldrb	r3, [r7, #21]
 8002018:	3301      	adds	r3, #1
 800201a:	757b      	strb	r3, [r7, #21]
 800201c:	7d7a      	ldrb	r2, [r7, #21]
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3a9      	bcc.n	8001f78 <build_disch_cfg+0x1a>
	}

}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <build_disch_cfgb>:

void build_disch_cfgb(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], uint8_t tx_config[][6],\
status_data_t *status_data, limit_t *limit)
{
 8002032:	b480      	push	{r7}
 8002034:	b087      	sub	sp, #28
 8002036:	af00      	add	r7, sp, #0
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4603      	mov	r3, r0
 8002040:	73fb      	strb	r3, [r7, #15]
	uint16_t DCCx = 0x0000;
 8002042:	2300      	movs	r3, #0
 8002044:	82fb      	strh	r3, [r7, #22]
		//discharge all cells

	for (uint8_t i = 0; i < total_ic; i++){
 8002046:	2300      	movs	r3, #0
 8002048:	757b      	strb	r3, [r7, #21]
 800204a:	e051      	b.n	80020f0 <build_disch_cfgb+0xbe>
			for (uint8_t j = 12; j < CELL_NUM; j++){
 800204c:	230c      	movs	r3, #12
 800204e:	753b      	strb	r3, [r7, #20]
 8002050:	e02f      	b.n	80020b2 <build_disch_cfgb+0x80>
				if (cell_data[i][j].voltage > (status_data->min_voltage + limit->tolerance)){
 8002052:	7d7a      	ldrb	r2, [r7, #21]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	461a      	mov	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4413      	add	r3, r2
 8002062:	7d3a      	ldrb	r2, [r7, #20]
 8002064:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002068:	461a      	mov	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800206e:	4619      	mov	r1, r3
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	8a9b      	ldrh	r3, [r3, #20]
 8002074:	440b      	add	r3, r1
 8002076:	429a      	cmp	r2, r3
 8002078:	dd0b      	ble.n	8002092 <build_disch_cfgb+0x60>
					DCCx |= (1<<(j - 12));
 800207a:	7d3b      	ldrb	r3, [r7, #20]
 800207c:	3b0c      	subs	r3, #12
 800207e:	2201      	movs	r2, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	b21a      	sxth	r2, r3
 8002086:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800208a:	4313      	orrs	r3, r2
 800208c:	b21b      	sxth	r3, r3
 800208e:	82fb      	strh	r3, [r7, #22]
 8002090:	e00c      	b.n	80020ac <build_disch_cfgb+0x7a>
				}
				else{
					DCCx &= ~(1<<(j - 12));
 8002092:	7d3b      	ldrb	r3, [r7, #20]
 8002094:	3b0c      	subs	r3, #12
 8002096:	2201      	movs	r2, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	b21b      	sxth	r3, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	b21a      	sxth	r2, r3
 80020a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020a6:	4013      	ands	r3, r2
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	82fb      	strh	r3, [r7, #22]
			for (uint8_t j = 12; j < CELL_NUM; j++){
 80020ac:	7d3b      	ldrb	r3, [r7, #20]
 80020ae:	3301      	adds	r3, #1
 80020b0:	753b      	strb	r3, [r7, #20]
 80020b2:	7d3b      	ldrb	r3, [r7, #20]
 80020b4:	2b11      	cmp	r3, #17
 80020b6:	d9cc      	bls.n	8002052 <build_disch_cfgb+0x20>
				}
			}
			tx_config[i][0] = (DCCx & 0x0f) << 4 ;
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	0119      	lsls	r1, r3, #4
 80020bc:	7d7a      	ldrb	r2, [r7, #21]
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	b2ca      	uxtb	r2, r1
 80020ce:	701a      	strb	r2, [r3, #0]
			tx_config[i][1] = (DCCx >> 4);
 80020d0:	8afb      	ldrh	r3, [r7, #22]
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	b299      	uxth	r1, r3
 80020d6:	7d7a      	ldrb	r2, [r7, #21]
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	461a      	mov	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	b2ca      	uxtb	r2, r1
 80020e8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < total_ic; i++){
 80020ea:	7d7b      	ldrb	r3, [r7, #21]
 80020ec:	3301      	adds	r3, #1
 80020ee:	757b      	strb	r3, [r7, #21]
 80020f0:	7d7a      	ldrb	r2, [r7, #21]
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d3a9      	bcc.n	800204c <build_disch_cfgb+0x1a>
		}
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <read_IVT_I>:


#define ERR_CANOFFLINE				11
uint8_t canSendErrorFlag;

void read_IVT_I(){
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
	status_data.recieved_IVT = 0;
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <read_IVT_I+0x54>)
 800210e:	2200      	movs	r2, #0
 8002110:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	status_data.IVT_I = (uint32_t)(CAN_RxData[5] | (CAN_RxData[4] << 8) | (CAN_RxData[3] << 16) | (CAN_RxData[2] << 24) );
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <read_IVT_I+0x58>)
 8002116:	795b      	ldrb	r3, [r3, #5]
 8002118:	461a      	mov	r2, r3
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <read_IVT_I+0x58>)
 800211c:	791b      	ldrb	r3, [r3, #4]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	431a      	orrs	r2, r3
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <read_IVT_I+0x58>)
 8002124:	78db      	ldrb	r3, [r3, #3]
 8002126:	041b      	lsls	r3, r3, #16
 8002128:	431a      	orrs	r2, r3
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <read_IVT_I+0x58>)
 800212c:	789b      	ldrb	r3, [r3, #2]
 800212e:	061b      	lsls	r3, r3, #24
 8002130:	4313      	orrs	r3, r2
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <read_IVT_I+0x54>)
 8002134:	6513      	str	r3, [r2, #80]	; 0x50
	status_data.IVT_I_f = status_data.IVT_I / 1000.0f;
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <read_IVT_I+0x54>)
 8002138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002142:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002164 <read_IVT_I+0x5c>
 8002146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800214a:	4b04      	ldr	r3, [pc, #16]	; (800215c <read_IVT_I+0x54>)
 800214c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000320 	.word	0x20000320
 8002160:	200002a4 	.word	0x200002a4
 8002164:	447a0000 	.word	0x447a0000

08002168 <read_IVT_U1>:

void read_IVT_U1(){
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
	status_data.recieved_IVT = 0;
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <read_IVT_U1+0x54>)
 800216e:	2200      	movs	r2, #0
 8002170:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	status_data.IVT_U1 = (uint32_t)(CAN_RxData[5] | (CAN_RxData[4] << 8) | (CAN_RxData[3] << 16) | (CAN_RxData[2] << 24) );
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <read_IVT_U1+0x58>)
 8002176:	795b      	ldrb	r3, [r3, #5]
 8002178:	461a      	mov	r2, r3
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <read_IVT_U1+0x58>)
 800217c:	791b      	ldrb	r3, [r3, #4]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	431a      	orrs	r2, r3
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <read_IVT_U1+0x58>)
 8002184:	78db      	ldrb	r3, [r3, #3]
 8002186:	041b      	lsls	r3, r3, #16
 8002188:	431a      	orrs	r2, r3
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <read_IVT_U1+0x58>)
 800218c:	789b      	ldrb	r3, [r3, #2]
 800218e:	061b      	lsls	r3, r3, #24
 8002190:	4313      	orrs	r3, r2
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <read_IVT_U1+0x54>)
 8002194:	6393      	str	r3, [r2, #56]	; 0x38
	status_data.IVT_U1_f = status_data.IVT_U1 / 1000.0f;
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <read_IVT_U1+0x54>)
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021a2:	eddf 6a08 	vldr	s13, [pc, #32]	; 80021c4 <read_IVT_U1+0x5c>
 80021a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <read_IVT_U1+0x54>)
 80021ac:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000320 	.word	0x20000320
 80021c0:	200002a4 	.word	0x200002a4
 80021c4:	447a0000 	.word	0x447a0000

080021c8 <read_IVT_U2>:

void read_IVT_U2(){
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
	status_data.recieved_IVT = 0;
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <read_IVT_U2+0x54>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	status_data.IVT_U2 = (uint32_t)(CAN_RxData[5] | (CAN_RxData[4] << 8) | (CAN_RxData[3] << 16) | (CAN_RxData[2] << 24) );
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <read_IVT_U2+0x58>)
 80021d6:	795b      	ldrb	r3, [r3, #5]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <read_IVT_U2+0x58>)
 80021dc:	791b      	ldrb	r3, [r3, #4]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <read_IVT_U2+0x58>)
 80021e4:	78db      	ldrb	r3, [r3, #3]
 80021e6:	041b      	lsls	r3, r3, #16
 80021e8:	431a      	orrs	r2, r3
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <read_IVT_U2+0x58>)
 80021ec:	789b      	ldrb	r3, [r3, #2]
 80021ee:	061b      	lsls	r3, r3, #24
 80021f0:	4313      	orrs	r3, r2
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <read_IVT_U2+0x54>)
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
	status_data.IVT_U2_f = status_data.IVT_U2 / 1000.0f;
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <read_IVT_U2+0x54>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002202:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002224 <read_IVT_U2+0x5c>
 8002206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <read_IVT_U2+0x54>)
 800220c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000320 	.word	0x20000320
 8002220:	200002a4 	.word	0x200002a4
 8002224:	447a0000 	.word	0x447a0000

08002228 <read_IVT_Wh>:

void read_IVT_Wh(){
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
	status_data.recieved_IVT = 0;
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <read_IVT_Wh+0x54>)
 800222e:	2200      	movs	r2, #0
 8002230:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	status_data.IVT_Wh = (uint32_t)(CAN_RxData[5] | (CAN_RxData[4] << 8) | (CAN_RxData[3] << 16) | (CAN_RxData[2] << 24) );
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <read_IVT_Wh+0x58>)
 8002236:	795b      	ldrb	r3, [r3, #5]
 8002238:	461a      	mov	r2, r3
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <read_IVT_Wh+0x58>)
 800223c:	791b      	ldrb	r3, [r3, #4]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	431a      	orrs	r2, r3
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <read_IVT_Wh+0x58>)
 8002244:	78db      	ldrb	r3, [r3, #3]
 8002246:	041b      	lsls	r3, r3, #16
 8002248:	431a      	orrs	r2, r3
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <read_IVT_Wh+0x58>)
 800224c:	789b      	ldrb	r3, [r3, #2]
 800224e:	061b      	lsls	r3, r3, #24
 8002250:	4313      	orrs	r3, r2
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <read_IVT_Wh+0x54>)
 8002254:	6493      	str	r3, [r2, #72]	; 0x48
	status_data.IVT_Wh_f = status_data.IVT_Wh / 1000.0f;
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <read_IVT_Wh+0x54>)
 8002258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002262:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002284 <read_IVT_Wh+0x5c>
 8002266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <read_IVT_Wh+0x54>)
 800226c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000320 	.word	0x20000320
 8002280:	200002a4 	.word	0x200002a4
 8002284:	447a0000 	.word	0x447a0000

08002288 <HAL_FDCAN_RxFifo0Callback>:




void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d03b      	beq.n	8002314 <HAL_FDCAN_RxFifo0Callback+0x8c>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, CAN_RxData) != HAL_OK)
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_FDCAN_RxFifo0Callback+0x94>)
 800229e:	4a20      	ldr	r2, [pc, #128]	; (8002320 <HAL_FDCAN_RxFifo0Callback+0x98>)
 80022a0:	2140      	movs	r1, #64	; 0x40
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f002 f9c6 	bl	8004634 <HAL_FDCAN_GetRxMessage>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_FDCAN_RxFifo0Callback+0x2c>
    {
    /* Reception Error */
    Error_Handler();
 80022ae:	f000 fe03 	bl	8002eb8 <Error_Handler>
 80022b2:	e025      	b.n	8002300 <HAL_FDCAN_RxFifo0Callback+0x78>
    }
    else{
    	switch(RxHeader.Identifier){
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_FDCAN_RxFifo0Callback+0x98>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f2a3 5321 	subw	r3, r3, #1313	; 0x521
 80022bc:	2b07      	cmp	r3, #7
 80022be:	d81f      	bhi.n	8002300 <HAL_FDCAN_RxFifo0Callback+0x78>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <HAL_FDCAN_RxFifo0Callback+0x40>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022e9 	.word	0x080022e9
 80022cc:	080022ef 	.word	0x080022ef
 80022d0:	080022f5 	.word	0x080022f5
 80022d4:	08002301 	.word	0x08002301
 80022d8:	08002301 	.word	0x08002301
 80022dc:	08002301 	.word	0x08002301
 80022e0:	08002301 	.word	0x08002301
 80022e4:	080022fb 	.word	0x080022fb
    	case CAN_IVT_I:
			read_IVT_I();
 80022e8:	f7ff ff0e 	bl	8002108 <read_IVT_I>
    		break;
 80022ec:	e008      	b.n	8002300 <HAL_FDCAN_RxFifo0Callback+0x78>
    	case CAN_IVT_U1:
			read_IVT_U1();
 80022ee:	f7ff ff3b 	bl	8002168 <read_IVT_U1>
			break;
 80022f2:	e005      	b.n	8002300 <HAL_FDCAN_RxFifo0Callback+0x78>
		case CAN_IVT_U2:
			read_IVT_U2();
 80022f4:	f7ff ff68 	bl	80021c8 <read_IVT_U2>
			break;
 80022f8:	e002      	b.n	8002300 <HAL_FDCAN_RxFifo0Callback+0x78>
		case CAN_IVT_Wh:
			read_IVT_Wh();
 80022fa:	f7ff ff95 	bl	8002228 <read_IVT_Wh>
			break;
 80022fe:	bf00      	nop
	

    	}
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002300:	2200      	movs	r2, #0
 8002302:	2101      	movs	r1, #1
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f002 faaf 	bl	8004868 <HAL_FDCAN_ActivateNotification>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_FDCAN_RxFifo0Callback+0x8c>
    {
      /* Notification Error */
      Error_Handler();
 8002310:	f000 fdd2 	bl	8002eb8 <Error_Handler>
    }


  }
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	200002a4 	.word	0x200002a4
 8002320:	2000027c 	.word	0x2000027c

08002324 <CanSend>:


void CanSend(uint8_t *TxData, uint32_t identifier ){
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier = identifier;
 800232e:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <CanSend+0x3c>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6013      	str	r3, [r2, #0]


	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8002334:	e002      	b.n	800233c <CanSend+0x18>
		delay_u(10);
 8002336:	200a      	movs	r0, #10
 8002338:	f000 fa34 	bl	80027a4 <delay_u>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 800233c:	4809      	ldr	r0, [pc, #36]	; (8002364 <CanSend+0x40>)
 800233e:	f002 fa81 	bl	8004844 <HAL_FDCAN_GetTxFifoFreeLevel>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <CanSend+0x34>
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4905      	ldr	r1, [pc, #20]	; (8002360 <CanSend+0x3c>)
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <CanSend+0x40>)
 800234e:	f002 f92d 	bl	80045ac <HAL_FDCAN_AddMessageToTxFifoQ>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ee      	bne.n	8002336 <CanSend+0x12>
	}

}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000258 	.word	0x20000258
 8002364:	200000b0 	.word	0x200000b0

08002368 <ReadCANBusMessage>:

int ReadCANBusMessage(uint32_t messageIdentifier, uint8_t* RxData1)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
    /* Infinite loop to keep trying to read the message */
	uint32_t t = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]

    while(t < 4294967295)
 8002376:	e015      	b.n	80023a4 <ReadCANBusMessage+0x3c>
    {
    	t++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3301      	adds	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
        /* Check if a new message is available in RX FIFO 0 */
        if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData1) == HAL_OK)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <ReadCANBusMessage+0x50>)
 8002382:	2140      	movs	r1, #64	; 0x40
 8002384:	480d      	ldr	r0, [pc, #52]	; (80023bc <ReadCANBusMessage+0x54>)
 8002386:	f002 f955 	bl	8004634 <HAL_FDCAN_GetRxMessage>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <ReadCANBusMessage+0x3c>
        {
            /* Validate the Identifier */
            if(RxHeader.Identifier == messageIdentifier)
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <ReadCANBusMessage+0x50>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	d101      	bne.n	800239e <ReadCANBusMessage+0x36>
            {
                return 0; // Message successfully read and validated
 800239a:	2300      	movs	r3, #0
 800239c:	e007      	b.n	80023ae <ReadCANBusMessage+0x46>
            }
            delay_u(10);
 800239e:	200a      	movs	r0, #10
 80023a0:	f000 fa00 	bl	80027a4 <delay_u>
    while(t < 4294967295)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023aa:	d1e5      	bne.n	8002378 <ReadCANBusMessage+0x10>
        }
        // Else, ignore the error and try again
    }
    return 1;
 80023ac:	2301      	movs	r3, #1
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000027c 	.word	0x2000027c
 80023bc:	200000b0 	.word	0x200000b0

080023c0 <Send_cell_data>:



void Send_cell_data(cell_data_t cell_data[][CELL_NUM]){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < IC_NUM; i++){
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
 80023cc:	e061      	b.n	8002492 <Send_cell_data+0xd2>
		for(int j = 0; j < CELL_NUM; j += 3){
 80023ce:	2300      	movs	r3, #0
 80023d0:	623b      	str	r3, [r7, #32]
 80023d2:	e058      	b.n	8002486 <Send_cell_data+0xc6>
			uint16_t buf = cell_data[i][j].voltage;
 80023d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	461a      	mov	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	6a3a      	ldr	r2, [r7, #32]
 80023e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023ea:	83fb      	strh	r3, [r7, #30]
			uint16_t buf2 = cell_data[i][j+1].voltage;
 80023ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	461a      	mov	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	6a3a      	ldr	r2, [r7, #32]
 80023fe:	3201      	adds	r2, #1
 8002400:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002404:	83bb      	strh	r3, [r7, #28]
			uint16_t buf3 = cell_data[i][j+2].voltage;
 8002406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	461a      	mov	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	6a3a      	ldr	r2, [r7, #32]
 8002418:	3202      	adds	r2, #2
 800241a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800241e:	837b      	strh	r3, [r7, #26]

			uint8_t c1_1 = buf;
 8002420:	8bfb      	ldrh	r3, [r7, #30]
 8002422:	767b      	strb	r3, [r7, #25]
			uint8_t c2_1 = buf >> 8;
 8002424:	8bfb      	ldrh	r3, [r7, #30]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	b29b      	uxth	r3, r3
 800242a:	763b      	strb	r3, [r7, #24]

			uint8_t c1_2 = buf2;
 800242c:	8bbb      	ldrh	r3, [r7, #28]
 800242e:	75fb      	strb	r3, [r7, #23]
			uint8_t c2_2 = buf2 >> 8;
 8002430:	8bbb      	ldrh	r3, [r7, #28]
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	b29b      	uxth	r3, r3
 8002436:	75bb      	strb	r3, [r7, #22]

			uint8_t c1_3 = buf3;
 8002438:	8b7b      	ldrh	r3, [r7, #26]
 800243a:	757b      	strb	r3, [r7, #21]
			uint8_t c2_3 = buf3 >> 8;
 800243c:	8b7b      	ldrh	r3, [r7, #26]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	b29b      	uxth	r3, r3
 8002442:	753b      	strb	r3, [r7, #20]


			uint8_t TxData[8] = { c1_1, c2_1, c1_2, c2_2 ,c1_3, c2_3, i, j};
 8002444:	7e7b      	ldrb	r3, [r7, #25]
 8002446:	723b      	strb	r3, [r7, #8]
 8002448:	7e3b      	ldrb	r3, [r7, #24]
 800244a:	727b      	strb	r3, [r7, #9]
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	72bb      	strb	r3, [r7, #10]
 8002450:	7dbb      	ldrb	r3, [r7, #22]
 8002452:	72fb      	strb	r3, [r7, #11]
 8002454:	7d7b      	ldrb	r3, [r7, #21]
 8002456:	733b      	strb	r3, [r7, #12]
 8002458:	7d3b      	ldrb	r3, [r7, #20]
 800245a:	737b      	strb	r3, [r7, #13]
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	b2db      	uxtb	r3, r3
 8002460:	73bb      	strb	r3, [r7, #14]
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	73fb      	strb	r3, [r7, #15]

			uint32_t id_c = 0x778;
 8002468:	f44f 63ef 	mov.w	r3, #1912	; 0x778
 800246c:	613b      	str	r3, [r7, #16]
			CanSend(TxData, id_c);
 800246e:	f107 0308 	add.w	r3, r7, #8
 8002472:	6939      	ldr	r1, [r7, #16]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff55 	bl	8002324 <CanSend>
			delay_u(100);
 800247a:	2064      	movs	r0, #100	; 0x64
 800247c:	f000 f992 	bl	80027a4 <delay_u>
		for(int j = 0; j < CELL_NUM; j += 3){
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	3303      	adds	r3, #3
 8002484:	623b      	str	r3, [r7, #32]
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	2b11      	cmp	r3, #17
 800248a:	dda3      	ble.n	80023d4 <Send_cell_data+0x14>
	for(int i = 0; i < IC_NUM; i++){
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	3301      	adds	r3, #1
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	2b00      	cmp	r3, #0
 8002496:	dd9a      	ble.n	80023ce <Send_cell_data+0xe>
		}
	}
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3728      	adds	r7, #40	; 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <Send_temp_data>:

#define TEMP_FIXED 1
void Send_temp_data(temp_data_t temp_data[][GPIO_NUM]){
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b094      	sub	sp, #80	; 0x50
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]

#if TEMP_FIXED

		for(int i = 0; i < IC_NUM; i++){
 80024aa:	2300      	movs	r3, #0
 80024ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ae:	e11d      	b.n	80026ec <Send_temp_data+0x24a>
			uint32_t id_t = 1960;
 80024b0:	f44f 63f5 	mov.w	r3, #1960	; 0x7a8
 80024b4:	64bb      	str	r3, [r7, #72]	; 0x48

						uint16_t buf = temp_data[i][0].temp;
 80024b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						uint16_t buf2 = temp_data[i][1].temp;
 80024ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	461a      	mov	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80024e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
						uint16_t buf3 = temp_data[i][2].temp;
 80024e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	461a      	mov	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80024fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

						uint8_t c1_1 = buf;
 80024fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002502:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
						uint8_t c2_1 = buf >> 8;
 8002506:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	b29b      	uxth	r3, r3
 800250e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

						uint8_t c1_2 = buf2;
 8002512:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002516:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						uint8_t c2_2 = buf2 >> 8;
 800251a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	b29b      	uxth	r3, r3
 8002522:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

						uint8_t c1_3 = buf3;
 8002526:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800252a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
						uint8_t c2_3 = buf3 >> 8;
 800252e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	b29b      	uxth	r3, r3
 8002536:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

						uint8_t TxData[8] = { c1_1, c2_1, c1_2, c2_2 ,c1_3, c2_3, i, 0};
 800253a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800253e:	773b      	strb	r3, [r7, #28]
 8002540:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002544:	777b      	strb	r3, [r7, #29]
 8002546:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800254a:	77bb      	strb	r3, [r7, #30]
 800254c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002550:	77fb      	strb	r3, [r7, #31]
 8002552:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002556:	f887 3020 	strb.w	r3, [r7, #32]
 800255a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800255e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800256a:	2300      	movs	r3, #0
 800256c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

						CanSend(TxData, id_t);
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fed4 	bl	8002324 <CanSend>
						delay_u(100);
 800257c:	2064      	movs	r0, #100	; 0x64
 800257e:	f000 f911 	bl	80027a4 <delay_u>

						uint16_t buf4 = temp_data[i][3].temp;
 8002582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	461a      	mov	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002596:	877b      	strh	r3, [r7, #58]	; 0x3a
						uint16_t buf5 = temp_data[i][4].temp;
 8002598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80025ac:	873b      	strh	r3, [r7, #56]	; 0x38
						uint16_t buf6 = temp_data[i][6].temp;
 80025ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	461a      	mov	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80025c2:	86fb      	strh	r3, [r7, #54]	; 0x36

						uint8_t c1_4 = buf4;
 80025c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80025c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
						uint8_t c2_4 = buf4 >> 8;
 80025ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

						uint8_t c1_5 = buf5;
 80025d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80025d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
						uint8_t c2_5 = buf5 >> 8;
 80025da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

						uint8_t c1_6 = buf6;
 80025e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025e6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
						uint8_t c2_6 = buf6 >> 8;
 80025ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

						uint8_t TxData1[8] = { c1_4, c2_4, c1_5, c2_5 ,c1_6, c2_6, i, 1};
 80025f4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025f8:	753b      	strb	r3, [r7, #20]
 80025fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025fe:	757b      	strb	r3, [r7, #21]
 8002600:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002604:	75bb      	strb	r3, [r7, #22]
 8002606:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800260a:	75fb      	strb	r3, [r7, #23]
 800260c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002610:	763b      	strb	r3, [r7, #24]
 8002612:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002616:	767b      	strb	r3, [r7, #25]
 8002618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800261a:	b2db      	uxtb	r3, r3
 800261c:	76bb      	strb	r3, [r7, #26]
 800261e:	2301      	movs	r3, #1
 8002620:	76fb      	strb	r3, [r7, #27]

						CanSend(TxData1, id_t);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fe7b 	bl	8002324 <CanSend>
						delay_u(100);
 800262e:	2064      	movs	r0, #100	; 0x64
 8002630:	f000 f8b8 	bl	80027a4 <delay_u>

						uint16_t buf7 = temp_data[i][7].temp;
 8002634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	461a      	mov	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002648:	85fb      	strh	r3, [r7, #46]	; 0x2e
						uint16_t buf8 = temp_data[i][8].temp;
 800264a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	461a      	mov	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800265e:	85bb      	strh	r3, [r7, #44]	; 0x2c
						uint16_t buf9 = temp_data[i][9].temp;
 8002660:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002674:	857b      	strh	r3, [r7, #42]	; 0x2a

						uint8_t c1_7 = buf7;
 8002676:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002678:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						uint8_t c2_7 = buf7 >> 8;
 800267c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	b29b      	uxth	r3, r3
 8002682:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

						uint8_t c1_8 = buf8;
 8002686:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						uint8_t c2_8 = buf8 >> 8;
 800268c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	b29b      	uxth	r3, r3
 8002692:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

						uint8_t c1_9 = buf9;
 8002696:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002698:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						uint8_t c2_9 = buf9 >> 8;
 800269c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24


						uint8_t TxData2[8] = { c1_7, c2_7, c1_8, c2_8 ,c1_9, c2_9, i, 2};
 80026a6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80026aa:	733b      	strb	r3, [r7, #12]
 80026ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026b0:	737b      	strb	r3, [r7, #13]
 80026b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b6:	73bb      	strb	r3, [r7, #14]
 80026b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026c2:	743b      	strb	r3, [r7, #16]
 80026c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026c8:	747b      	strb	r3, [r7, #17]
 80026ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	74bb      	strb	r3, [r7, #18]
 80026d0:	2302      	movs	r3, #2
 80026d2:	74fb      	strb	r3, [r7, #19]
						CanSend(TxData2, id_t);
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fe22 	bl	8002324 <CanSend>
						delay_u(100);
 80026e0:	2064      	movs	r0, #100	; 0x64
 80026e2:	f000 f85f 	bl	80027a4 <delay_u>
		for(int i = 0; i < IC_NUM; i++){
 80026e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e8:	3301      	adds	r3, #1
 80026ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f77f aede 	ble.w	80024b0 <Send_temp_data+0xe>
		}
#endif



}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3750      	adds	r7, #80	; 0x50
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <Send_Soc>:



void Send_Soc(status_data_t *status_data){
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Data[8];

	Tx_Data[0] = (uint8_t)status_data->soc;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	edd3 7a02 	vldr	s15, [r3, #8]
 800270e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002712:	edc7 7a00 	vstr	s15, [r7]
 8002716:	783b      	ldrb	r3, [r7, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	723b      	strb	r3, [r7, #8]
	uint16_t buf = status_data->max_voltage / 10;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <Send_Soc+0xa0>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	08db      	lsrs	r3, r3, #3
 8002728:	82fb      	strh	r3, [r7, #22]
	uint8_t c1 = buf;
 800272a:	8afb      	ldrh	r3, [r7, #22]
 800272c:	757b      	strb	r3, [r7, #21]
	uint8_t c2 = buf >> 8;
 800272e:	8afb      	ldrh	r3, [r7, #22]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	b29b      	uxth	r3, r3
 8002734:	753b      	strb	r3, [r7, #20]
	Tx_Data[1] = c1;
 8002736:	7d7b      	ldrb	r3, [r7, #21]
 8002738:	727b      	strb	r3, [r7, #9]
	Tx_Data[2] = c2;
 800273a:	7d3b      	ldrb	r3, [r7, #20]
 800273c:	72bb      	strb	r3, [r7, #10]
	if(status_data->air_s == true)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <Send_Soc+0x4e>
	Tx_Data[3] = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	72fb      	strb	r3, [r7, #11]
 800274c:	e001      	b.n	8002752 <Send_Soc+0x52>
	else
	Tx_Data[3] = 1;
 800274e:	2301      	movs	r3, #1
 8002750:	72fb      	strb	r3, [r7, #11]

	uint16_t buf1 = (uint16_t)status_data->sum_of_cells;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800275c:	ee17 3a90 	vmov	r3, s15
 8002760:	827b      	strh	r3, [r7, #18]

	Tx_Data[4]= (uint8_t)(buf1);
 8002762:	8a7b      	ldrh	r3, [r7, #18]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	733b      	strb	r3, [r7, #12]
	Tx_Data[5]= (uint8_t)(buf1 >> 8);
 8002768:	8a7b      	ldrh	r3, [r7, #18]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	b29b      	uxth	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	737b      	strb	r3, [r7, #13]

	uint16_t buf2 = (uint16_t)status_data->max_temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002778:	823b      	strh	r3, [r7, #16]

	Tx_Data[6]= (uint8_t)(buf2);
 800277a:	8a3b      	ldrh	r3, [r7, #16]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	73bb      	strb	r3, [r7, #14]
	Tx_Data[7]= (uint8_t)(buf2 >> 8);
 8002780:	8a3b      	ldrh	r3, [r7, #16]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	b29b      	uxth	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	73fb      	strb	r3, [r7, #15]

	CanSend(Tx_Data, CAN_SOC);
 800278a:	f107 0308 	add.w	r3, r7, #8
 800278e:	2197      	movs	r1, #151	; 0x97
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fdc7 	bl	8002324 <CanSend>

}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	cccccccd 	.word	0xcccccccd

080027a4 <delay_u>:
#include "conf.h"

extern SPI_HandleTypeDef hspi1;


void delay_u(uint32_t us){
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <delay_u+0x58>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a12      	ldr	r2, [pc, #72]	; (80027fc <delay_u+0x58>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b6:	60d3      	str	r3, [r2, #12]
		    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <delay_u+0x5c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a10      	ldr	r2, [pc, #64]	; (8002800 <delay_u+0x5c>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6013      	str	r3, [r2, #0]
		    // Get the current number of clock cycles
		    uint32_t const startTicks = DWT->CYCCNT;
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <delay_u+0x5c>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60fb      	str	r3, [r7, #12]
		    // Calculate the number of clock cycles for the desired delay
		    uint32_t const delayTicks = (SystemCoreClock / 1000000) * us;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <delay_u+0x60>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <delay_u+0x64>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	0c9a      	lsrs	r2, r3, #18
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	60bb      	str	r3, [r7, #8]
		    // Wait until the number of clock cycles has elapsed
		    while (DWT->CYCCNT - startTicks < delayTicks);
 80027de:	bf00      	nop
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <delay_u+0x5c>)
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d8f8      	bhi.n	80027e0 <delay_u+0x3c>
}
 80027ee:	bf00      	nop
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000edf0 	.word	0xe000edf0
 8002800:	e0001000 	.word	0xe0001000
 8002804:	2000002c 	.word	0x2000002c
 8002808:	431bde83 	.word	0x431bde83

0800280c <spi_write_read_byte>:

void delay_m(uint32_t ms){
	HAL_Delay(ms);
}

uint8_t spi_write_read_byte(uint8_t wbyte){
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af02      	add	r7, sp, #8
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]

	uint8_t rxByte;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2110      	movs	r1, #16
 800281a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800281e:	f002 fd03 	bl	8005228 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &wbyte, &rxByte, 1, SPI_TIMEOUT);
 8002822:	f107 020f 	add.w	r2, r7, #15
 8002826:	1df9      	adds	r1, r7, #7
 8002828:	f643 2398 	movw	r3, #15000	; 0x3a98
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2301      	movs	r3, #1
 8002830:	4806      	ldr	r0, [pc, #24]	; (800284c <spi_write_read_byte+0x40>)
 8002832:	f004 f82a 	bl	800688a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002836:	2201      	movs	r2, #1
 8002838:	2110      	movs	r1, #16
 800283a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283e:	f002 fcf3 	bl	8005228 <HAL_GPIO_WritePin>

	return rxByte;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000114 	.word	0x20000114

08002850 <spi_write_array>:

uint32_t spi_write_array(uint8_t len, uint8_t *data){
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2110      	movs	r1, #16
 8002860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002864:	f002 fce0 	bl	8005228 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, len, SPI_TIMEOUT);
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	b29a      	uxth	r2, r3
 800286c:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	4807      	ldr	r0, [pc, #28]	; (8002890 <spi_write_array+0x40>)
 8002874:	f003 fd5d 	bl	8006332 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002878:	2201      	movs	r2, #1
 800287a:	2110      	movs	r1, #16
 800287c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002880:	f002 fcd2 	bl	8005228 <HAL_GPIO_WritePin>

	return 0;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000114 	.word	0x20000114

08002894 <spi_write_then_read_array_ltc>:

uint32_t spi_write_then_read_array_ltc(uint8_t wlen, uint8_t *wbuffer, uint8_t rlen, uint8_t *rbuffer){
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	4603      	mov	r3, r0
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	4613      	mov	r3, r2
 80028a4:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2110      	movs	r1, #16
 80028aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ae:	f002 fcbb 	bl	8005228 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wbuffer, wlen, SPI_TIMEOUT);
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	f643 2398 	movw	r3, #15000	; 0x3a98
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	480a      	ldr	r0, [pc, #40]	; (80028e8 <spi_write_then_read_array_ltc+0x54>)
 80028be:	f003 fd38 	bl	8006332 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rbuffer, rlen, SPI_TIMEOUT);
 80028c2:	7bbb      	ldrb	r3, [r7, #14]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	f643 2398 	movw	r3, #15000	; 0x3a98
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4806      	ldr	r0, [pc, #24]	; (80028e8 <spi_write_then_read_array_ltc+0x54>)
 80028ce:	f003 fea5 	bl	800661c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80028d2:	2201      	movs	r2, #1
 80028d4:	2110      	movs	r1, #16
 80028d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028da:	f002 fca5 	bl	8005228 <HAL_GPIO_WritePin>

	return 0;
 80028de:	2300      	movs	r3, #0

}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000114 	.word	0x20000114

080028ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028f2:	f001 fa72 	bl	8003dda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028f6:	f000 f829 	bl	800294c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028fa:	f000 fa83 	bl	8002e04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028fe:	f000 fa35 	bl	8002d6c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002902:	f000 f945 	bl	8002b90 <MX_SPI1_Init>
  MX_TIM8_Init();
 8002906:	f000 f981 	bl	8002c0c <MX_TIM8_Init>
  MX_FDCAN1_Init();
 800290a:	f000 f85f 	bl	80029cc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 800290e:	480d      	ldr	r0, [pc, #52]	; (8002944 <main+0x58>)
 8002910:	f001 fe24 	bl	800455c <HAL_FDCAN_Start>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <main+0x32>
    {
  	  Error_Handler();
 800291a:	f000 facd 	bl	8002eb8 <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800291e:	2200      	movs	r2, #0
 8002920:	2101      	movs	r1, #1
 8002922:	4808      	ldr	r0, [pc, #32]	; (8002944 <main+0x58>)
 8002924:	f001 ffa0 	bl	8004868 <HAL_FDCAN_ActivateNotification>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <main+0x46>
    {
      /* Notification Error */
      Error_Handler();
 800292e:	f000 fac3 	bl	8002eb8 <Error_Handler>
    }

  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8002932:	2108      	movs	r1, #8
 8002934:	4804      	ldr	r0, [pc, #16]	; (8002948 <main+0x5c>)
 8002936:	f005 fa7b 	bl	8007e30 <HAL_TIMEx_PWMN_Start>
  uint16_t pulse = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      // Here we create a FDCAN message

	 operation_main();
 800293e:	f000 fac5 	bl	8002ecc <operation_main>
 8002942:	e7fc      	b.n	800293e <main+0x52>
 8002944:	200000b0 	.word	0x200000b0
 8002948:	20000178 	.word	0x20000178

0800294c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b094      	sub	sp, #80	; 0x50
 8002950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002952:	f107 0318 	add.w	r3, r7, #24
 8002956:	2238      	movs	r2, #56	; 0x38
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f006 fa8e 	bl	8008e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	60da      	str	r2, [r3, #12]
 800296c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800296e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002972:	f002 fc71 	bl	8005258 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002976:	2302      	movs	r3, #2
 8002978:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800297a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002980:	2340      	movs	r3, #64	; 0x40
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002984:	2300      	movs	r3, #0
 8002986:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002988:	f107 0318 	add.w	r3, r7, #24
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fd07 	bl	80053a0 <HAL_RCC_OscConfig>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002998:	f000 fa8e 	bl	8002eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800299c:	230f      	movs	r3, #15
 800299e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029a0:	2301      	movs	r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 f805 	bl	80059c4 <HAL_RCC_ClockConfig>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80029c0:	f000 fa7a 	bl	8002eb8 <Error_Handler>
  }
}
 80029c4:	bf00      	nop
 80029c6:	3750      	adds	r7, #80	; 0x50
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80029d2:	4b6c      	ldr	r3, [pc, #432]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 80029d4:	4a6c      	ldr	r2, [pc, #432]	; (8002b88 <MX_FDCAN1_Init+0x1bc>)
 80029d6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80029d8:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 80029da:	2200      	movs	r2, #0
 80029dc:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80029de:	4b69      	ldr	r3, [pc, #420]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80029e4:	4b67      	ldr	r3, [pc, #412]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80029ea:	4b66      	ldr	r3, [pc, #408]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80029f0:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80029f6:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80029fc:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002a02:	4b60      	ldr	r3, [pc, #384]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8002a08:	4b5e      	ldr	r3, [pc, #376]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a0a:	220d      	movs	r2, #13
 8002a0c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a10:	2202      	movs	r2, #2
 8002a12:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002a14:	4b5b      	ldr	r3, [pc, #364]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002a1a:	4b5a      	ldr	r3, [pc, #360]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002a20:	4b58      	ldr	r3, [pc, #352]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002a26:	4b57      	ldr	r3, [pc, #348]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 8002a2c:	4b55      	ldr	r3, [pc, #340]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a2e:	221c      	movs	r2, #28
 8002a30:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002a32:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002a38:	4b52      	ldr	r3, [pc, #328]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002a3e:	4851      	ldr	r0, [pc, #324]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a40:	f001 fb6e 	bl	8004120 <HAL_FDCAN_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8002a4a:	f000 fa35 	bl	8002eb8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan1, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	2140      	movs	r1, #64	; 0x40
 8002a52:	484c      	ldr	r0, [pc, #304]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a54:	f001 fd49 	bl	80044ea <HAL_FDCAN_ConfigRxFifoOverwrite>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_FDCAN1_Init+0x96>
    {
      Error_Handler();
 8002a5e:	f000 fa2b 	bl	8002eb8 <Error_Handler>
    }
  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan1, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8002a62:	2201      	movs	r2, #1
 8002a64:	2141      	movs	r1, #65	; 0x41
 8002a66:	4847      	ldr	r0, [pc, #284]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a68:	f001 fd3f 	bl	80044ea <HAL_FDCAN_ConfigRxFifoOverwrite>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_FDCAN1_Init+0xaa>
    {
      Error_Handler();
 8002a72:	f000 fa21 	bl	8002eb8 <Error_Handler>
    }

  //only accept config/request can messages and sync can messages
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002a76:	2300      	movs	r3, #0
 8002a78:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002a82:	2301      	movs	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 1900; //CANID_CONFIG;
 8002a86:	f240 736c 	movw	r3, #1900	; 0x76c
 8002a8a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8002a8c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002a90:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002a92:	463b      	mov	r3, r7
 8002a94:	4619      	mov	r1, r3
 8002a96:	483b      	ldr	r0, [pc, #236]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002a98:	f001 fc9c 	bl	80043d4 <HAL_FDCAN_ConfigFilter>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_FDCAN1_Init+0xda>
    {
      Error_Handler();
 8002aa2:	f000 fa09 	bl	8002eb8 <Error_Handler>
    }

  // Additional filter configuration for 0x52x messages
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x520;   // Start of the range
 8002ab6:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8002aba:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x700;   // Mask for the filter. This will allow IDs 0x520 - 0x52F
 8002abc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002ac0:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	482f      	ldr	r0, [pc, #188]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002ac8:	f001 fc84 	bl	80043d4 <HAL_FDCAN_ConfigFilter>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_FDCAN1_Init+0x10a>
  {
      Error_Handler();
 8002ad2:	f000 f9f1 	bl	8002eb8 <Error_Handler>
  }

  // Filter configuration for message ID 150
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 2; // Different index for this filter
 8002ada:	2302      	movs	r3, #2
 8002adc:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 150;   // Specific ID
 8002ae6:	2396      	movs	r3, #150	; 0x96
 8002ae8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;   // Mask for the filter. This will allow only ID 150
 8002aea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002aee:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002af0:	463b      	mov	r3, r7
 8002af2:	4619      	mov	r1, r3
 8002af4:	4823      	ldr	r0, [pc, #140]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002af6:	f001 fc6d 	bl	80043d4 <HAL_FDCAN_ConfigFilter>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_FDCAN1_Init+0x138>
  {
      Error_Handler();
 8002b00:	f000 f9da 	bl	8002eb8 <Error_Handler>
  }

  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 8002b04:	2301      	movs	r3, #1
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	481d      	ldr	r0, [pc, #116]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002b10:	f001 fcba 	bl	8004488 <HAL_FDCAN_ConfigGlobalFilter>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_FDCAN1_Init+0x152>
    {
      Error_Handler();
 8002b1a:	f000 f9cd 	bl	8002eb8 <Error_Handler>
    }

  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8002b1e:	4819      	ldr	r0, [pc, #100]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002b20:	f001 fd1c 	bl	800455c <HAL_FDCAN_Start>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_FDCAN1_Init+0x162>
    {
      Error_Handler();
 8002b2a:	f000 f9c5 	bl	8002eb8 <Error_Handler>
    }
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2101      	movs	r1, #1
 8002b32:	4814      	ldr	r0, [pc, #80]	; (8002b84 <MX_FDCAN1_Init+0x1b8>)
 8002b34:	f001 fe98 	bl	8004868 <HAL_FDCAN_ActivateNotification>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_FDCAN1_Init+0x176>
    {
      Error_Handler();
 8002b3e:	f000 f9bb 	bl	8002eb8 <Error_Handler>
    }

  TxHeader.Identifier = 0x123; // Modify this with your identifier
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <MX_FDCAN1_Init+0x1c0>)
 8002b44:	f240 1223 	movw	r2, #291	; 0x123
 8002b48:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <MX_FDCAN1_Init+0x1c0>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <MX_FDCAN1_Init+0x1c0>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <MX_FDCAN1_Init+0x1c0>)
 8002b58:	2208      	movs	r2, #8
 8002b5a:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <MX_FDCAN1_Init+0x1c0>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <MX_FDCAN1_Init+0x1c0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <MX_FDCAN1_Init+0x1c0>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <MX_FDCAN1_Init+0x1c0>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <MX_FDCAN1_Init+0x1c0>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200000b0 	.word	0x200000b0
 8002b88:	40006400 	.word	0x40006400
 8002b8c:	20000258 	.word	0x20000258

08002b90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002b96:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <MX_SPI1_Init+0x78>)
 8002b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002baa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002bb0:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bc6:	2238      	movs	r2, #56	; 0x38
 8002bc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bde:	2207      	movs	r2, #7
 8002be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bf0:	f003 faf4 	bl	80061dc <HAL_SPI_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bfa:	f000 f95d 	bl	8002eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000114 	.word	0x20000114
 8002c08:	40013000 	.word	0x40013000

08002c0c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b09c      	sub	sp, #112	; 0x70
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
 8002c3c:	615a      	str	r2, [r3, #20]
 8002c3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	2234      	movs	r2, #52	; 0x34
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f006 f918 	bl	8008e7c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c4c:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002c4e:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <MX_TIM8_Init+0x15c>)
 8002c50:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 8002c52:	4b44      	ldr	r3, [pc, #272]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002c54:	220f      	movs	r2, #15
 8002c56:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c58:	4b42      	ldr	r3, [pc, #264]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 39;
 8002c5e:	4b41      	ldr	r3, [pc, #260]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002c60:	2227      	movs	r2, #39	; 0x27
 8002c62:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c64:	4b3f      	ldr	r3, [pc, #252]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c6a:	4b3e      	ldr	r3, [pc, #248]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c70:	4b3c      	ldr	r3, [pc, #240]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002c72:	2280      	movs	r2, #128	; 0x80
 8002c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c76:	483b      	ldr	r0, [pc, #236]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002c78:	f004 f9e6 	bl	8007048 <HAL_TIM_Base_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002c82:	f000 f919 	bl	8002eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c8a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002c8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002c90:	4619      	mov	r1, r3
 8002c92:	4834      	ldr	r0, [pc, #208]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002c94:	f004 fba4 	bl	80073e0 <HAL_TIM_ConfigClockSource>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002c9e:	f000 f90b 	bl	8002eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002ca2:	4830      	ldr	r0, [pc, #192]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002ca4:	f004 fa27 	bl	80070f6 <HAL_TIM_PWM_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002cae:	f000 f903 	bl	8002eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4827      	ldr	r0, [pc, #156]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002cc6:	f005 f967 	bl	8007f98 <HAL_TIMEx_MasterConfigSynchronization>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8002cd0:	f000 f8f2 	bl	8002eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cd4:	2360      	movs	r3, #96	; 0x60
 8002cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 19;
 8002cd8:	2313      	movs	r3, #19
 8002cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	481a      	ldr	r0, [pc, #104]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002cfa:	f004 fa5d 	bl	80071b8 <HAL_TIM_PWM_ConfigChannel>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8002d04:	f000 f8d8 	bl	8002eb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002d26:	2300      	movs	r3, #0
 8002d28:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	4619      	mov	r1, r3
 8002d44:	4807      	ldr	r0, [pc, #28]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002d46:	f005 f9a9 	bl	800809c <HAL_TIMEx_ConfigBreakDeadTime>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8002d50:	f000 f8b2 	bl	8002eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002d54:	4803      	ldr	r0, [pc, #12]	; (8002d64 <MX_TIM8_Init+0x158>)
 8002d56:	f000 fdd5 	bl	8003904 <HAL_TIM_MspPostInit>

}
 8002d5a:	bf00      	nop
 8002d5c:	3770      	adds	r7, #112	; 0x70
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000178 	.word	0x20000178
 8002d68:	40013400 	.word	0x40013400

08002d6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002d72:	4a23      	ldr	r2, [pc, #140]	; (8002e00 <MX_USART2_UART_Init+0x94>)
 8002d74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d7e:	4b1f      	ldr	r3, [pc, #124]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d84:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002d92:	220c      	movs	r2, #12
 8002d94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d96:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d9c:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002da2:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002da8:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dae:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002db4:	4811      	ldr	r0, [pc, #68]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002db6:	f005 fa22 	bl	80081fe <HAL_UART_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002dc0:	f000 f87a 	bl	8002eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	480d      	ldr	r0, [pc, #52]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002dc8:	f005 ff8e 	bl	8008ce8 <HAL_UARTEx_SetTxFifoThreshold>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002dd2:	f000 f871 	bl	8002eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002dda:	f005 ffc3 	bl	8008d64 <HAL_UARTEx_SetRxFifoThreshold>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002de4:	f000 f868 	bl	8002eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <MX_USART2_UART_Init+0x90>)
 8002dea:	f005 ff44 	bl	8008c76 <HAL_UARTEx_DisableFifoMode>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002df4:	f000 f860 	bl	8002eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	200001c4 	.word	0x200001c4
 8002e00:	40004400 	.word	0x40004400

08002e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
 8002e18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e1a:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <MX_GPIO_Init+0xac>)
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <MX_GPIO_Init+0xac>)
 8002e20:	f043 0320 	orr.w	r3, r3, #32
 8002e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <MX_GPIO_Init+0xac>)
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <MX_GPIO_Init+0xac>)
 8002e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e36:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <MX_GPIO_Init+0xac>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <MX_GPIO_Init+0xac>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <MX_GPIO_Init+0xac>)
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4e:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <MX_GPIO_Init+0xac>)
 8002e50:	f043 0302 	orr.w	r3, r3, #2
 8002e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <MX_GPIO_Init+0xac>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8002e62:	2200      	movs	r2, #0
 8002e64:	f248 7110 	movw	r1, #34576	; 0x8710
 8002e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e6c:	f002 f9dc 	bl	8005228 <HAL_GPIO_WritePin>
                          |FAN_control_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_Pin Led_debug_Pin PRE_Done_Pin AMS_Ok_Pin
                           FAN_control_Pin */
  GPIO_InitStruct.Pin = CS_Pin|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8002e70:	f248 7310 	movw	r3, #34576	; 0x8710
 8002e74:	60fb      	str	r3, [r7, #12]
                          |FAN_control_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e76:	2301      	movs	r3, #1
 8002e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e82:	f107 030c 	add.w	r3, r7, #12
 8002e86:	4619      	mov	r1, r3
 8002e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e8c:	f002 f832 	bl	8004ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_PRE_Pin AIR__Pin AIR_B7_Pin */
  GPIO_InitStruct.Pin = AIR_PRE_Pin|AIR__Pin|AIR_B7_Pin;
 8002e90:	23d0      	movs	r3, #208	; 0xd0
 8002e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9c:	f107 030c 	add.w	r3, r7, #12
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4804      	ldr	r0, [pc, #16]	; (8002eb4 <MX_GPIO_Init+0xb0>)
 8002ea4:	f002 f826 	bl	8004ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ea8:	bf00      	nop
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	48000400 	.word	0x48000400

08002eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	open_AIR();
 8002ebc:	f000 f88a 	bl	8002fd4 <open_AIR>
		open_PRE();
 8002ec0:	f000 f8be 	bl	8003040 <open_PRE>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec4:	b672      	cpsid	i
}
 8002ec6:	bf00      	nop
	__disable_irq();
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <Error_Handler+0x10>
	...

08002ecc <operation_main>:
	.precharge_min_start_voltage = 450.0,
	.precharge_max_end_voltage = 450.0,
	.limp_min_voltage = 34000
};

void operation_main(void){
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0

	open_AIR();
 8002ed0:	f000 f880 	bl	8002fd4 <open_AIR>
	open_PRE();
 8002ed4:	f000 f8b4 	bl	8003040 <open_PRE>


	initialize();
 8002ed8:	f7fd ffed 	bl	8000eb6 <initialize>
	init_slave_cfg();
 8002edc:	f000 fb38 	bl	8003550 <init_slave_cfg>

		status_data.pec_error_counter = 0;
 8002ee0:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <operation_main+0xfc>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	65da      	str	r2, [r3, #92]	; 0x5c
		status_data.pec_error_counter_last = 0;
 8002ee6:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <operation_main+0xfc>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	661a      	str	r2, [r3, #96]	; 0x60

		status_data.limping = 0;
 8002eec:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <operation_main+0xfc>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	669a      	str	r2, [r3, #104]	; 0x68
		status_data.recieved_IVT = 0;
 8002ef2:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <operation_main+0xfc>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c


		status_data.mode = 0;
 8002efa:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <operation_main+0xfc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	711a      	strb	r2, [r3, #4]

		//Set Fans on
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8002f00:	2201      	movs	r2, #1
 8002f02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f0a:	f002 f98d 	bl	8005228 <HAL_GPIO_WritePin>


	while(1){


		switch (status_data.mode){
 8002f0e:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <operation_main+0xfc>)
 8002f10:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d855      	bhi.n	8002fc4 <operation_main+0xf8>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <operation_main+0x54>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f49 	.word	0x08002f49
 8002f28:	08002f87 	.word	0x08002f87
 8002f2c:	08002f97 	.word	0x08002f97
			case 0:
				core_routine(RETEST_YES);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f000 f93d 	bl	80031b0 <core_routine>
				status_data.uptime++;
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <operation_main+0xfc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <operation_main+0xfc>)
 8002f3e:	6013      	str	r3, [r2, #0]

			    HAL_Delay(100);
 8002f40:	2064      	movs	r0, #100	; 0x64
 8002f42:	f000 ffbb 	bl	8003ebc <HAL_Delay>

				break;
 8002f46:	e03e      	b.n	8002fc6 <operation_main+0xfa>
			case 1:
				read_cell_voltage();
 8002f48:	f000 faa2 	bl	8003490 <read_cell_voltage>
				read_temp_measurement();
 8002f4c:	f000 face 	bl	80034ec <read_temp_measurement>
				get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002f50:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <operation_main+0xfc>)
 8002f52:	491e      	ldr	r1, [pc, #120]	; (8002fcc <operation_main+0x100>)
 8002f54:	2001      	movs	r0, #1
 8002f56:	f7fe ff6a 	bl	8001e2e <get_minmax_voltage>
				get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8002f5a:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <operation_main+0xfc>)
 8002f5c:	491c      	ldr	r1, [pc, #112]	; (8002fd0 <operation_main+0x104>)
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7fe fed2 	bl	8001d08 <get_minmax_temperature>
				calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <operation_main+0xfc>)
 8002f66:	4919      	ldr	r1, [pc, #100]	; (8002fcc <operation_main+0x100>)
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f7fe fe67 	bl	8001c3c <calc_sum_of_cells>
				balance_routine();
 8002f6e:	f000 fa2d 	bl	80033cc <balance_routine>
				status_data.uptime++;
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <operation_main+0xfc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <operation_main+0xfc>)
 8002f7a:	6013      	str	r3, [r2, #0]
				HAL_Delay(1900);
 8002f7c:	f240 706c 	movw	r0, #1900	; 0x76c
 8002f80:	f000 ff9c 	bl	8003ebc <HAL_Delay>

				break;
 8002f84:	e01f      	b.n	8002fc6 <operation_main+0xfa>
			case 2:

				charge_routine();
 8002f86:	f000 f89f 	bl	80030c8 <charge_routine>
				status_data.uptime++;
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <operation_main+0xfc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <operation_main+0xfc>)
 8002f92:	6013      	str	r3, [r2, #0]
				break;
 8002f94:	e017      	b.n	8002fc6 <operation_main+0xfa>
			case 3:
				//debug_routine();
				read_cell_voltage();
 8002f96:	f000 fa7b 	bl	8003490 <read_cell_voltage>
				read_temp_measurement();
 8002f9a:	f000 faa7 	bl	80034ec <read_temp_measurement>
				get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8002f9e:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <operation_main+0xfc>)
 8002fa0:	490b      	ldr	r1, [pc, #44]	; (8002fd0 <operation_main+0x104>)
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f7fe feb0 	bl	8001d08 <get_minmax_temperature>
				get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002fa8:	4a07      	ldr	r2, [pc, #28]	; (8002fc8 <operation_main+0xfc>)
 8002faa:	4908      	ldr	r1, [pc, #32]	; (8002fcc <operation_main+0x100>)
 8002fac:	2001      	movs	r0, #1
 8002fae:	f7fe ff3e 	bl	8001e2e <get_minmax_voltage>
				status_data.uptime++;
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <operation_main+0xfc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4a03      	ldr	r2, [pc, #12]	; (8002fc8 <operation_main+0xfc>)
 8002fba:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8002fbc:	2064      	movs	r0, #100	; 0x64
 8002fbe:	f000 ff7d 	bl	8003ebc <HAL_Delay>

				break;
 8002fc2:	e000      	b.n	8002fc6 <operation_main+0xfa>
			default:
				break;
 8002fc4:	bf00      	nop
		switch (status_data.mode){
 8002fc6:	e7a2      	b.n	8002f0e <operation_main+0x42>
 8002fc8:	20000320 	.word	0x20000320
 8002fcc:	200002ac 	.word	0x200002ac
 8002fd0:	200002d0 	.word	0x200002d0

08002fd4 <open_AIR>:
		Data is checked against limits and a return value is generated.

	\return status of test_limits function (0: OK, -1 FAIL).
*/

void open_AIR(void){
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe2:	f002 f921 	bl	8005228 <HAL_GPIO_WritePin>
	status_data.air_s = false;
 8002fe6:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <open_AIR+0x20>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000320 	.word	0x20000320

08002ff8 <close_AIR>:

void close_AIR(void){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003006:	f002 f90f 	bl	8005228 <HAL_GPIO_WritePin>
	status_data.air_s = true;
 800300a:	4b03      	ldr	r3, [pc, #12]	; (8003018 <close_AIR+0x20>)
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000320 	.word	0x20000320

0800301c <close_PRE>:

void close_PRE(void){
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8003020:	2201      	movs	r2, #1
 8003022:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800302a:	f002 f8fd 	bl	8005228 <HAL_GPIO_WritePin>
	status_data.pre_s = true;
 800302e:	4b03      	ldr	r3, [pc, #12]	; (800303c <close_PRE+0x20>)
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000320 	.word	0x20000320

08003040 <open_PRE>:

void open_PRE(void){
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8003044:	2200      	movs	r2, #0
 8003046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800304a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800304e:	f002 f8eb 	bl	8005228 <HAL_GPIO_WritePin>
	status_data.pre_s = false;
 8003052:	4b03      	ldr	r3, [pc, #12]	; (8003060 <open_PRE+0x20>)
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000320 	.word	0x20000320

08003064 <AMS_OK>:

int AMS_OK(status_data_t *status_data, limit_t *limit){
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
	if(status_data->min_voltage > limit->min_voltage && status_data->max_voltage < limit->max_voltage){
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	885b      	ldrh	r3, [r3, #2]
 8003076:	429a      	cmp	r2, r3
 8003078:	d91e      	bls.n	80030b8 <AMS_OK+0x54>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d218      	bcs.n	80030b8 <AMS_OK+0x54>
		if(status_data->min_temp > limit->min_temp && status_data->max_temp < limit->max_temp){
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	dd10      	ble.n	80030b8 <AMS_OK+0x54>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	da08      	bge.n	80030b8 <AMS_OK+0x54>
			if(status_data->recieved_IVT){
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <AMS_OK+0x54>
				close_AIR();
 80030b0:	f7ff ffa2 	bl	8002ff8 <close_AIR>
				return 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e002      	b.n	80030be <AMS_OK+0x5a>
			}
		}
	}
	open_AIR();
 80030b8:	f7ff ff8c 	bl	8002fd4 <open_AIR>
	return 1;
 80030bc:	2301      	movs	r3, #1
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <charge_routine>:




void charge_routine(void){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0

	uint8_t RxData2[8];
		while(ReadCANBusMessage(0x96, &RxData2)){
 80030ce:	e002      	b.n	80030d6 <charge_routine+0xe>
			delay_u(200);
 80030d0:	20c8      	movs	r0, #200	; 0xc8
 80030d2:	f7ff fb67 	bl	80027a4 <delay_u>
		while(ReadCANBusMessage(0x96, &RxData2)){
 80030d6:	463b      	mov	r3, r7
 80030d8:	4619      	mov	r1, r3
 80030da:	2096      	movs	r0, #150	; 0x96
 80030dc:	f7ff f944 	bl	8002368 <ReadCANBusMessage>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f4      	bne.n	80030d0 <charge_routine+0x8>
		}

	while(1){
		status_data.air_m = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80030e6:	2140      	movs	r1, #64	; 0x40
 80030e8:	482c      	ldr	r0, [pc, #176]	; (800319c <charge_routine+0xd4>)
 80030ea:	f002 f885 	bl	80051f8 <HAL_GPIO_ReadPin>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <charge_routine+0xd8>)
 80030fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		status_data.air_p = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	4826      	ldr	r0, [pc, #152]	; (800319c <charge_routine+0xd4>)
 8003104:	f002 f878 	bl	80051f8 <HAL_GPIO_ReadPin>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	bf14      	ite	ne
 800310e:	2301      	movne	r3, #1
 8003110:	2300      	moveq	r3, #0
 8003112:	b2da      	uxtb	r2, r3
 8003114:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <charge_routine+0xd8>)
 8003116:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		status_data.air_pre = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800311a:	2110      	movs	r1, #16
 800311c:	481f      	ldr	r0, [pc, #124]	; (800319c <charge_routine+0xd4>)
 800311e:	f002 f86b 	bl	80051f8 <HAL_GPIO_ReadPin>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <charge_routine+0xd8>)
 8003130:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

		empty_disch_cfg();
 8003134:	f000 f96c 	bl	8003410 <empty_disch_cfg>
		read_cell_voltage();
 8003138:	f000 f9aa 	bl	8003490 <read_cell_voltage>
		read_temp_measurement();
 800313c:	f000 f9d6 	bl	80034ec <read_temp_measurement>
		get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8003140:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <charge_routine+0xd8>)
 8003142:	4918      	ldr	r1, [pc, #96]	; (80031a4 <charge_routine+0xdc>)
 8003144:	2001      	movs	r0, #1
 8003146:	f7fe fe72 	bl	8001e2e <get_minmax_voltage>
		get_minmax_temperature(IC_NUM, temp_data, &status_data);
 800314a:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <charge_routine+0xd8>)
 800314c:	4916      	ldr	r1, [pc, #88]	; (80031a8 <charge_routine+0xe0>)
 800314e:	2001      	movs	r0, #1
 8003150:	f7fe fdda 	bl	8001d08 <get_minmax_temperature>
		calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 8003154:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <charge_routine+0xd8>)
 8003156:	4913      	ldr	r1, [pc, #76]	; (80031a4 <charge_routine+0xdc>)
 8003158:	2001      	movs	r0, #1
 800315a:	f7fe fd6f 	bl	8001c3c <calc_sum_of_cells>
		AMS_OK(&status_data, &limits);
 800315e:	4913      	ldr	r1, [pc, #76]	; (80031ac <charge_routine+0xe4>)
 8003160:	480f      	ldr	r0, [pc, #60]	; (80031a0 <charge_routine+0xd8>)
 8003162:	f7ff ff7f 	bl	8003064 <AMS_OK>
		set_fan_duty_cycle(&status_data);
 8003166:	480e      	ldr	r0, [pc, #56]	; (80031a0 <charge_routine+0xd8>)
 8003168:	f000 faca 	bl	8003700 <set_fan_duty_cycle>

	#if IVT
		calculate_soc(&status_data);
 800316c:	480c      	ldr	r0, [pc, #48]	; (80031a0 <charge_routine+0xd8>)
 800316e:	f7fe fdab 	bl	8001cc8 <calculate_soc>
		precharge_compare();
 8003172:	f000 f887 	bl	8003284 <precharge_compare>
		calculate_soc(&status_data);
 8003176:	480a      	ldr	r0, [pc, #40]	; (80031a0 <charge_routine+0xd8>)
 8003178:	f7fe fda6 	bl	8001cc8 <calculate_soc>
	#endif

	#if CAN_ENABLED

		Send_cell_data(cell_data);
 800317c:	4809      	ldr	r0, [pc, #36]	; (80031a4 <charge_routine+0xdc>)
 800317e:	f7ff f91f 	bl	80023c0 <Send_cell_data>

		Send_temp_data(temp_data);
 8003182:	4809      	ldr	r0, [pc, #36]	; (80031a8 <charge_routine+0xe0>)
 8003184:	f7ff f98d 	bl	80024a2 <Send_temp_data>
		Send_Soc(&status_data);
 8003188:	4805      	ldr	r0, [pc, #20]	; (80031a0 <charge_routine+0xd8>)
 800318a:	f7ff fab9 	bl	8002700 <Send_Soc>
	#endif

		balance_routine();
 800318e:	f000 f91d 	bl	80033cc <balance_routine>
		HAL_Delay(100);
 8003192:	2064      	movs	r0, #100	; 0x64
 8003194:	f000 fe92 	bl	8003ebc <HAL_Delay>
	while(1){
 8003198:	e7a5      	b.n	80030e6 <charge_routine+0x1e>
 800319a:	bf00      	nop
 800319c:	48000400 	.word	0x48000400
 80031a0:	20000320 	.word	0x20000320
 80031a4:	200002ac 	.word	0x200002ac
 80031a8:	200002d0 	.word	0x200002d0
 80031ac:	20000000 	.word	0x20000000

080031b0 <core_routine>:
}




void core_routine(int32_t retest){
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

	status_data.air_m = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80031b8:	2140      	movs	r1, #64	; 0x40
 80031ba:	482d      	ldr	r0, [pc, #180]	; (8003270 <core_routine+0xc0>)
 80031bc:	f002 f81c 	bl	80051f8 <HAL_GPIO_ReadPin>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bf14      	ite	ne
 80031c6:	2301      	movne	r3, #1
 80031c8:	2300      	moveq	r3, #0
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	4b29      	ldr	r3, [pc, #164]	; (8003274 <core_routine+0xc4>)
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	status_data.air_p = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 80031d2:	2180      	movs	r1, #128	; 0x80
 80031d4:	4826      	ldr	r0, [pc, #152]	; (8003270 <core_routine+0xc0>)
 80031d6:	f002 f80f 	bl	80051f8 <HAL_GPIO_ReadPin>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4b23      	ldr	r3, [pc, #140]	; (8003274 <core_routine+0xc4>)
 80031e8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	status_data.air_pre = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80031ec:	2110      	movs	r1, #16
 80031ee:	4820      	ldr	r0, [pc, #128]	; (8003270 <core_routine+0xc0>)
 80031f0:	f002 f802 	bl	80051f8 <HAL_GPIO_ReadPin>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf14      	ite	ne
 80031fa:	2301      	movne	r3, #1
 80031fc:	2300      	moveq	r3, #0
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <core_routine+0xc4>)
 8003202:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	empty_disch_cfg();
 8003206:	f000 f903 	bl	8003410 <empty_disch_cfg>
	read_cell_voltage();
 800320a:	f000 f941 	bl	8003490 <read_cell_voltage>
	read_temp_measurement();
 800320e:	f000 f96d 	bl	80034ec <read_temp_measurement>
	get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8003212:	4a18      	ldr	r2, [pc, #96]	; (8003274 <core_routine+0xc4>)
 8003214:	4918      	ldr	r1, [pc, #96]	; (8003278 <core_routine+0xc8>)
 8003216:	2001      	movs	r0, #1
 8003218:	f7fe fe09 	bl	8001e2e <get_minmax_voltage>
	get_minmax_temperature(IC_NUM, temp_data, &status_data);
 800321c:	4a15      	ldr	r2, [pc, #84]	; (8003274 <core_routine+0xc4>)
 800321e:	4917      	ldr	r1, [pc, #92]	; (800327c <core_routine+0xcc>)
 8003220:	2001      	movs	r0, #1
 8003222:	f7fe fd71 	bl	8001d08 <get_minmax_temperature>
	calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 8003226:	4a13      	ldr	r2, [pc, #76]	; (8003274 <core_routine+0xc4>)
 8003228:	4913      	ldr	r1, [pc, #76]	; (8003278 <core_routine+0xc8>)
 800322a:	2001      	movs	r0, #1
 800322c:	f7fe fd06 	bl	8001c3c <calc_sum_of_cells>
	AMS_OK(&status_data, &limits);
 8003230:	4913      	ldr	r1, [pc, #76]	; (8003280 <core_routine+0xd0>)
 8003232:	4810      	ldr	r0, [pc, #64]	; (8003274 <core_routine+0xc4>)
 8003234:	f7ff ff16 	bl	8003064 <AMS_OK>
	set_fan_duty_cycle(&status_data);
 8003238:	480e      	ldr	r0, [pc, #56]	; (8003274 <core_routine+0xc4>)
 800323a:	f000 fa61 	bl	8003700 <set_fan_duty_cycle>

#if IVT

	calculate_soc(&status_data);
 800323e:	480d      	ldr	r0, [pc, #52]	; (8003274 <core_routine+0xc4>)
 8003240:	f7fe fd42 	bl	8001cc8 <calculate_soc>
	precharge_compare();
 8003244:	f000 f81e 	bl	8003284 <precharge_compare>
	calculate_soc(&status_data);
 8003248:	480a      	ldr	r0, [pc, #40]	; (8003274 <core_routine+0xc4>)
 800324a:	f7fe fd3d 	bl	8001cc8 <calculate_soc>
#endif

#if CAN_ENABLED

	Send_cell_data(cell_data);
 800324e:	480a      	ldr	r0, [pc, #40]	; (8003278 <core_routine+0xc8>)
 8003250:	f7ff f8b6 	bl	80023c0 <Send_cell_data>
	Send_temp_data(temp_data);
 8003254:	4809      	ldr	r0, [pc, #36]	; (800327c <core_routine+0xcc>)
 8003256:	f7ff f924 	bl	80024a2 <Send_temp_data>
	Send_Soc(&status_data);
 800325a:	4806      	ldr	r0, [pc, #24]	; (8003274 <core_routine+0xc4>)
 800325c:	f7ff fa50 	bl	8002700 <Send_Soc>
	test_limp(&status_data, &limits);
 8003260:	4907      	ldr	r1, [pc, #28]	; (8003280 <core_routine+0xd0>)
 8003262:	4804      	ldr	r0, [pc, #16]	; (8003274 <core_routine+0xc4>)
 8003264:	f000 fa15 	bl	8003692 <test_limp>
#endif

}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	48000400 	.word	0x48000400
 8003274:	20000320 	.word	0x20000320
 8003278:	200002ac 	.word	0x200002ac
 800327c:	200002d0 	.word	0x200002d0
 8003280:	20000000 	.word	0x20000000

08003284 <precharge_compare>:



void precharge_compare(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0

//TODO

	float percentage;
	float pre = status_data.IVT_U1_f;
 800328a:	4b2e      	ldr	r3, [pc, #184]	; (8003344 <precharge_compare+0xc0>)
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	60fb      	str	r3, [r7, #12]
	float air_p = status_data.IVT_U2_f;
 8003290:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <precharge_compare+0xc0>)
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	60bb      	str	r3, [r7, #8]
	percentage = (air_p * 100) / pre;
 8003296:	edd7 7a02 	vldr	s15, [r7, #8]
 800329a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003348 <precharge_compare+0xc4>
 800329e:	ee67 6a87 	vmul.f32	s13, s15, s14
 80032a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80032a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032aa:	edc7 7a01 	vstr	s15, [r7, #4]
	status_data.pre_percentage = percentage;
 80032ae:	4a25      	ldr	r2, [pc, #148]	; (8003344 <precharge_compare+0xc0>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6593      	str	r3, [r2, #88]	; 0x58
	if (status_data.safe_state_executed == 0) {
 80032b4:	4b23      	ldr	r3, [pc, #140]	; (8003344 <precharge_compare+0xc0>)
 80032b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80032ba:	f083 0301 	eor.w	r3, r3, #1
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d03b      	beq.n	800333c <precharge_compare+0xb8>
		if ((percentage >= 95) && (check_voltage_match() == true) && status_data.IVT_U1_f > limits.precharge_min_start_voltage) {
 80032c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80032c8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800334c <precharge_compare+0xc8>
 80032cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d4:	db30      	blt.n	8003338 <precharge_compare+0xb4>
 80032d6:	f000 f83d 	bl	8003354 <check_voltage_match>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d12b      	bne.n	8003338 <precharge_compare+0xb4>
 80032e0:	4b18      	ldr	r3, [pc, #96]	; (8003344 <precharge_compare+0xc0>)
 80032e2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <precharge_compare+0xcc>)
 80032e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80032ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f4:	dd20      	ble.n	8003338 <precharge_compare+0xb4>
			if(status_data.pre_s == false)
 80032f6:	4b13      	ldr	r3, [pc, #76]	; (8003344 <precharge_compare+0xc0>)
 80032f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032fc:	f083 0301 	eor.w	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d015      	beq.n	8003332 <precharge_compare+0xae>
			{
				uint32_t starttick = HAL_GetTick();
 8003306:	f000 fdcd 	bl	8003ea4 <HAL_GetTick>
 800330a:	6038      	str	r0, [r7, #0]
				while ( HAL_GetTick() - starttick < 5000 )
 800330c:	e008      	b.n	8003320 <precharge_compare+0x9c>
				{
					calculate_soc(&status_data);
 800330e:	480d      	ldr	r0, [pc, #52]	; (8003344 <precharge_compare+0xc0>)
 8003310:	f7fe fcda 	bl	8001cc8 <calculate_soc>
					Send_Soc(&status_data);
 8003314:	480b      	ldr	r0, [pc, #44]	; (8003344 <precharge_compare+0xc0>)
 8003316:	f7ff f9f3 	bl	8002700 <Send_Soc>
					HAL_Delay(100);
 800331a:	2064      	movs	r0, #100	; 0x64
 800331c:	f000 fdce 	bl	8003ebc <HAL_Delay>
				while ( HAL_GetTick() - starttick < 5000 )
 8003320:	f000 fdc0 	bl	8003ea4 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3287 	movw	r2, #4999	; 0x1387
 800332e:	4293      	cmp	r3, r2
 8003330:	d9ed      	bls.n	800330e <precharge_compare+0x8a>
				}
			}
			close_PRE();
 8003332:	f7ff fe73 	bl	800301c <close_PRE>
		else
		{
			open_PRE();
		}
	}
}
 8003336:	e001      	b.n	800333c <precharge_compare+0xb8>
			open_PRE();
 8003338:	f7ff fe82 	bl	8003040 <open_PRE>
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000320 	.word	0x20000320
 8003348:	42c80000 	.word	0x42c80000
 800334c:	42be0000 	.word	0x42be0000
 8003350:	20000000 	.word	0x20000000

08003354 <check_voltage_match>:

int check_voltage_match(void)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
	float percentage;
	float accu_volt = (float)status_data.sum_of_cells;
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <check_voltage_match+0x70>)
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	60fb      	str	r3, [r7, #12]
	float post_volt = (float)status_data.IVT_U2_f;
 8003360:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <check_voltage_match+0x70>)
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	60bb      	str	r3, [r7, #8]
	percentage = (post_volt * 100) / accu_volt;
 8003366:	edd7 7a02 	vldr	s15, [r7, #8]
 800336a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80033c8 <check_voltage_match+0x74>
 800336e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003372:	ed97 7a03 	vldr	s14, [r7, #12]
 8003376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800337a:	edc7 7a01 	vstr	s15, [r7, #4]
	percentage = percentage - 100;
 800337e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003382:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80033c8 <check_voltage_match+0x74>
 8003386:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800338a:	edc7 7a01 	vstr	s15, [r7, #4]

	if ((percentage < 10) && (percentage > -10)) {
 800338e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003392:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339e:	d50a      	bpl.n	80033b6 <check_voltage_match+0x62>
 80033a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a4:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80033a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b0:	dd01      	ble.n	80033b6 <check_voltage_match+0x62>
		return 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <check_voltage_match+0x64>
	}
	return 0;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	20000320 	.word	0x20000320
 80033c8:	42c80000 	.word	0x42c80000

080033cc <balance_routine>:
	Discharge configuration bytes in slave_cfg_tx array are written, and
	configuration is sent to LTC-6811s. After some delay configuration is
	read back to slave_cfg_rx array.
*/
void balance_routine(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af02      	add	r7, sp, #8
	build_disch_cfg(IC_NUM, cell_data, slave_cfg_tx, &status_data, &limits);
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <balance_routine+0x30>)
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <balance_routine+0x34>)
 80033d8:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <balance_routine+0x38>)
 80033da:	490b      	ldr	r1, [pc, #44]	; (8003408 <balance_routine+0x3c>)
 80033dc:	2001      	movs	r0, #1
 80033de:	f7fe fdbe 	bl	8001f5e <build_disch_cfg>
	build_disch_cfgb(IC_NUM, cell_data, slave_cfgb_tx, &status_data, &limits);
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <balance_routine+0x30>)
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <balance_routine+0x34>)
 80033e8:	4a08      	ldr	r2, [pc, #32]	; (800340c <balance_routine+0x40>)
 80033ea:	4907      	ldr	r1, [pc, #28]	; (8003408 <balance_routine+0x3c>)
 80033ec:	2001      	movs	r0, #1
 80033ee:	f7fe fe20 	bl	8002032 <build_disch_cfgb>

	cfg_slaves();
 80033f2:	f000 f8fd 	bl	80035f0 <cfg_slaves>

}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000000 	.word	0x20000000
 8003400:	20000320 	.word	0x20000320
 8003404:	20000300 	.word	0x20000300
 8003408:	200002ac 	.word	0x200002ac
 800340c:	20000308 	.word	0x20000308

08003410 <empty_disch_cfg>:

void empty_disch_cfg(void){
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
	WakeUp();
 8003416:	f7fd fd43 	bl	8000ea0 <WakeUp>

	for(int i = 0; i < IC_NUM; i++){
 800341a:	2300      	movs	r3, #0
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	e02a      	b.n	8003476 <empty_disch_cfg+0x66>
		slave_cfg_tx[i][4] = 0x00 ;
 8003420:	4919      	ldr	r1, [pc, #100]	; (8003488 <empty_disch_cfg+0x78>)
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	440b      	add	r3, r1
 800342e:	3304      	adds	r3, #4
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 8003434:	4914      	ldr	r1, [pc, #80]	; (8003488 <empty_disch_cfg+0x78>)
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	440b      	add	r3, r1
 8003442:	3305      	adds	r3, #5
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]

		slave_cfgb_tx[i][4] = 0x00 ;
 8003448:	4910      	ldr	r1, [pc, #64]	; (800348c <empty_disch_cfg+0x7c>)
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	440b      	add	r3, r1
 8003456:	3304      	adds	r3, #4
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
		slave_cfgb_tx[i][5] = 0x00;
 800345c:	490b      	ldr	r1, [pc, #44]	; (800348c <empty_disch_cfg+0x7c>)
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	440b      	add	r3, r1
 800346a:	3305      	adds	r3, #5
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < IC_NUM; i++){
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3301      	adds	r3, #1
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	ddd1      	ble.n	8003420 <empty_disch_cfg+0x10>
	}

	cfg_slaves();
 800347c:	f000 f8b8 	bl	80035f0 <cfg_slaves>
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000300 	.word	0x20000300
 800348c:	20000308 	.word	0x20000308

08003490 <read_cell_voltage>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_cell_voltage(void){
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 8003496:	f7fd fd03 	bl	8000ea0 <WakeUp>
	adcv();
 800349a:	f7fe fb87 	bl	8001bac <adcv>
	adcv_delay();
 800349e:	f7fe fb26 	bl	8001aee <adcv_delay>

	WakeIdle();
 80034a2:	f7fd fcf3 	bl	8000e8c <WakeIdle>

	for(uint8_t reg = 0; reg < 5; reg++){
 80034a6:	2300      	movs	r3, #0
 80034a8:	71fb      	strb	r3, [r7, #7]
 80034aa:	e011      	b.n	80034d0 <read_cell_voltage+0x40>
		pec = rdcv(0, IC_NUM, cell_data);
 80034ac:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <read_cell_voltage+0x58>)
 80034ae:	2101      	movs	r1, #1
 80034b0:	2000      	movs	r0, #0
 80034b2:	f7fe f81f 	bl	80014f4 <rdcv>
 80034b6:	4603      	mov	r3, r0
 80034b8:	71bb      	strb	r3, [r7, #6]

		if (pec == 0) {
 80034ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <read_cell_voltage+0x36>
			return 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e00b      	b.n	80034de <read_cell_voltage+0x4e>
		}
		else increase_pec_counter();
 80034c6:	f000 f8b7 	bl	8003638 <increase_pec_counter>
	for(uint8_t reg = 0; reg < 5; reg++){
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	3301      	adds	r3, #1
 80034ce:	71fb      	strb	r3, [r7, #7]
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d9ea      	bls.n	80034ac <read_cell_voltage+0x1c>
	}
	goto_safe_state(PEC_ERROR);
 80034d6:	2008      	movs	r0, #8
 80034d8:	f000 f8ce 	bl	8003678 <goto_safe_state>
	return -1;
 80034dc:	23ff      	movs	r3, #255	; 0xff

}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200002ac 	.word	0x200002ac

080034ec <read_temp_measurement>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_temp_measurement(void){
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 80034f2:	f7fd fcd5 	bl	8000ea0 <WakeUp>
	adax();
 80034f6:	f7fe fb7d 	bl	8001bf4 <adax>
	adax_delay();
 80034fa:	f7fe fb00 	bl	8001afe <adax_delay>
	WakeIdle();
 80034fe:	f7fd fcc5 	bl	8000e8c <WakeIdle>

	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 8003502:	2300      	movs	r3, #0
 8003504:	71fb      	strb	r3, [r7, #7]
 8003506:	e015      	b.n	8003534 <read_temp_measurement+0x48>
			 pec = rdaux(0, IC_NUM, temp_data);  // pec = ltc6804_rdaux(0, IC_NUM, temp_data);
 8003508:	4a10      	ldr	r2, [pc, #64]	; (800354c <read_temp_measurement+0x60>)
 800350a:	2101      	movs	r1, #1
 800350c:	2000      	movs	r0, #0
 800350e:	f7fe f9a6 	bl	800185e <rdaux>
 8003512:	4603      	mov	r3, r0
 8003514:	71bb      	strb	r3, [r7, #6]
			 temp_calc(IC_NUM, temp_data); // Moved out of 'if' to execute even on pec error
 8003516:	490d      	ldr	r1, [pc, #52]	; (800354c <read_temp_measurement+0x60>)
 8003518:	2001      	movs	r0, #1
 800351a:	f000 fac9 	bl	8003ab0 <temp_calc>
			if (pec == 0) {
 800351e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <read_temp_measurement+0x3e>
				return 0;
 8003526:	2300      	movs	r3, #0
 8003528:	e00b      	b.n	8003542 <read_temp_measurement+0x56>
			} else {
				increase_pec_counter();
 800352a:	f000 f885 	bl	8003638 <increase_pec_counter>
	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	3301      	adds	r3, #1
 8003532:	71fb      	strb	r3, [r7, #7]
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	2b04      	cmp	r3, #4
 8003538:	d9e6      	bls.n	8003508 <read_temp_measurement+0x1c>
			}
		}
		goto_safe_state(PEC_ERROR);
 800353a:	2008      	movs	r0, #8
 800353c:	f000 f89c 	bl	8003678 <goto_safe_state>
		return -1;
 8003540:	23ff      	movs	r3, #255	; 0xff

}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200002d0 	.word	0x200002d0

08003550 <init_slave_cfg>:


void init_slave_cfg(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < IC_NUM; i++)
 8003556:	2300      	movs	r3, #0
 8003558:	71fb      	strb	r3, [r7, #7]
 800355a:	e03d      	b.n	80035d8 <init_slave_cfg+0x88>
	{
		slave_cfg_tx[i][0] = 0xfe;
 800355c:	79fa      	ldrb	r2, [r7, #7]
 800355e:	4923      	ldr	r1, [pc, #140]	; (80035ec <init_slave_cfg+0x9c>)
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	440b      	add	r3, r1
 800356a:	22fe      	movs	r2, #254	; 0xfe
 800356c:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][1] = 0x00;
 800356e:	79fa      	ldrb	r2, [r7, #7]
 8003570:	491e      	ldr	r1, [pc, #120]	; (80035ec <init_slave_cfg+0x9c>)
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	440b      	add	r3, r1
 800357c:	3301      	adds	r3, #1
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][2] = 0x00;
 8003582:	79fa      	ldrb	r2, [r7, #7]
 8003584:	4919      	ldr	r1, [pc, #100]	; (80035ec <init_slave_cfg+0x9c>)
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	440b      	add	r3, r1
 8003590:	3302      	adds	r3, #2
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][3] = 0x00;
 8003596:	79fa      	ldrb	r2, [r7, #7]
 8003598:	4914      	ldr	r1, [pc, #80]	; (80035ec <init_slave_cfg+0x9c>)
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	440b      	add	r3, r1
 80035a4:	3303      	adds	r3, #3
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][4] = 0x00;
 80035aa:	79fa      	ldrb	r2, [r7, #7]
 80035ac:	490f      	ldr	r1, [pc, #60]	; (80035ec <init_slave_cfg+0x9c>)
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	440b      	add	r3, r1
 80035b8:	3304      	adds	r3, #4
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 80035be:	79fa      	ldrb	r2, [r7, #7]
 80035c0:	490a      	ldr	r1, [pc, #40]	; (80035ec <init_slave_cfg+0x9c>)
 80035c2:	4613      	mov	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4413      	add	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	440b      	add	r3, r1
 80035cc:	3305      	adds	r3, #5
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < IC_NUM; i++)
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	3301      	adds	r3, #1
 80035d6:	71fb      	strb	r3, [r7, #7]
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0be      	beq.n	800355c <init_slave_cfg+0xc>
	}
}
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	20000300 	.word	0x20000300

080035f0 <cfg_slaves>:

void cfg_slaves(void){
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
	WakeUp();
 80035f4:	f7fd fc54 	bl	8000ea0 <WakeUp>
	wrcfg(IC_NUM, slave_cfg_tx);
 80035f8:	490b      	ldr	r1, [pc, #44]	; (8003628 <cfg_slaves+0x38>)
 80035fa:	2001      	movs	r0, #1
 80035fc:	f7fd fd00 	bl	8001000 <wrcfg>
	WakeUp();
 8003600:	f7fd fc4e 	bl	8000ea0 <WakeUp>
	wrcfgb(IC_NUM, slave_cfgb_tx);
 8003604:	4909      	ldr	r1, [pc, #36]	; (800362c <cfg_slaves+0x3c>)
 8003606:	2001      	movs	r0, #1
 8003608:	f7fd fe29 	bl	800125e <wrcfgb>
	delay_u(500);
 800360c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003610:	f7ff f8c8 	bl	80027a4 <delay_u>
	rdcfg(IC_NUM, slave_cfg_rx);
 8003614:	4906      	ldr	r1, [pc, #24]	; (8003630 <cfg_slaves+0x40>)
 8003616:	2001      	movs	r0, #1
 8003618:	f7fd fd88 	bl	800112c <rdcfg>
	rdcfgb(IC_NUM, slave_cfgb_rx);
 800361c:	4905      	ldr	r1, [pc, #20]	; (8003634 <cfg_slaves+0x44>)
 800361e:	2001      	movs	r0, #1
 8003620:	f7fd febf 	bl	80013a2 <rdcfgb>
}
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000300 	.word	0x20000300
 800362c:	20000308 	.word	0x20000308
 8003630:	20000310 	.word	0x20000310
 8003634:	20000318 	.word	0x20000318

08003638 <increase_pec_counter>:

void increase_pec_counter(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
	status_data.pec_error_counter++;
 800363c:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <increase_pec_counter+0x3c>)
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	3301      	adds	r3, #1
 8003642:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <increase_pec_counter+0x3c>)
 8003644:	65d3      	str	r3, [r2, #92]	; 0x5c
	status_data.pec_error_average = (float)status_data.pec_error_counter / status_data.uptime;
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <increase_pec_counter+0x3c>)
 8003648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <increase_pec_counter+0x3c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800365e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003662:	4b04      	ldr	r3, [pc, #16]	; (8003674 <increase_pec_counter+0x3c>)
 8003664:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000320 	.word	0x20000320

08003678 <goto_safe_state>:

void goto_safe_state(uint8_t reason)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]

	open_AIR();
 8003682:	f7ff fca7 	bl	8002fd4 <open_AIR>
	open_PRE();
 8003686:	f7ff fcdb 	bl	8003040 <open_PRE>

}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <test_limp>:

void test_limp(status_data_t *status_data, limit_t *limit)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b086      	sub	sp, #24
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]

	if(status_data->min_voltage < limit->limp_min_voltage){
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d223      	bcs.n	80036f0 <test_limp+0x5e>
		status_data->limping = 1;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	669a      	str	r2, [r3, #104]	; 0x68

		uint8_t data[8];

		data[0]=8;
 80036ae:	2308      	movs	r3, #8
 80036b0:	743b      	strb	r3, [r7, #16]
		data[1]=0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	747b      	strb	r3, [r7, #17]
		data[2]=0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	74bb      	strb	r3, [r7, #18]
		data[3]=(uint8_t)status_data->sum_of_cells;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80036c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80036c8:	793b      	ldrb	r3, [r7, #4]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	74fb      	strb	r3, [r7, #19]

		data[4]=status_data->limping;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	753b      	strb	r3, [r7, #20]
		data[5]=0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	757b      	strb	r3, [r7, #21]
		data[6]=0xAB;
 80036da:	23ab      	movs	r3, #171	; 0xab
 80036dc:	75bb      	strb	r3, [r7, #22]
		data[7]=0xCD;
 80036de:	23cd      	movs	r3, #205	; 0xcd
 80036e0:	75fb      	strb	r3, [r7, #23]

		CanSend(data, 0x08);
 80036e2:	f107 0310 	add.w	r3, r7, #16
 80036e6:	2108      	movs	r1, #8
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fe1b 	bl	8002324 <CanSend>
		}
	else{
		status_data->limping = 0;
	}

}
 80036ee:	e002      	b.n	80036f6 <test_limp+0x64>
		status_data->limping = 0;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036f6:	bf00      	nop
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <set_fan_duty_cycle>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
}

void set_fan_duty_cycle(status_data_t *status_data){
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

	if(status_data->max_temp > 39){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800370e:	2b27      	cmp	r3, #39	; 0x27
 8003710:	dd04      	ble.n	800371c <set_fan_duty_cycle+0x1c>
		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_PWM);
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <set_fan_duty_cycle+0x30>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2228      	movs	r2, #40	; 0x28
 8003718:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	else{
		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 8);
	}
}
 800371a:	e003      	b.n	8003724 <set_fan_duty_cycle+0x24>
		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 8);
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <set_fan_duty_cycle+0x30>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2208      	movs	r2, #8
 8003722:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	20000178 	.word	0x20000178

08003734 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373a:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_MspInit+0x44>)
 800373c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373e:	4a0e      	ldr	r2, [pc, #56]	; (8003778 <HAL_MspInit+0x44>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6613      	str	r3, [r2, #96]	; 0x60
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <HAL_MspInit+0x44>)
 8003748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_MspInit+0x44>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <HAL_MspInit+0x44>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6593      	str	r3, [r2, #88]	; 0x58
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_MspInit+0x44>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b09a      	sub	sp, #104	; 0x68
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	2244      	movs	r2, #68	; 0x44
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f005 fb6d 	bl	8008e7c <memset>
  if(hfdcan->Instance==FDCAN1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a24      	ldr	r2, [pc, #144]	; (8003838 <HAL_FDCAN_MspInit+0xbc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d141      	bne.n	8003830 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80037ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80037b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037b6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037b8:	f107 0310 	add.w	r3, r7, #16
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 fb1d 	bl	8005dfc <HAL_RCCEx_PeriphCLKConfig>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80037c8:	f7ff fb76 	bl	8002eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_FDCAN_MspInit+0xc0>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	4a1a      	ldr	r2, [pc, #104]	; (800383c <HAL_FDCAN_MspInit+0xc0>)
 80037d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037d6:	6593      	str	r3, [r2, #88]	; 0x58
 80037d8:	4b18      	ldr	r3, [pc, #96]	; (800383c <HAL_FDCAN_MspInit+0xc0>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e4:	4b15      	ldr	r3, [pc, #84]	; (800383c <HAL_FDCAN_MspInit+0xc0>)
 80037e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e8:	4a14      	ldr	r2, [pc, #80]	; (800383c <HAL_FDCAN_MspInit+0xc0>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_FDCAN_MspInit+0xc0>)
 80037f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80037fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003800:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380a:	2300      	movs	r3, #0
 800380c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800380e:	2309      	movs	r3, #9
 8003810:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003812:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003816:	4619      	mov	r1, r3
 8003818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800381c:	f001 fb6a 	bl	8004ef4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003820:	2200      	movs	r2, #0
 8003822:	2100      	movs	r1, #0
 8003824:	2015      	movs	r0, #21
 8003826:	f000 fc46 	bl	80040b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800382a:	2015      	movs	r0, #21
 800382c:	f000 fc5d 	bl	80040ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003830:	bf00      	nop
 8003832:	3768      	adds	r7, #104	; 0x68
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40006400 	.word	0x40006400
 800383c:	40021000 	.word	0x40021000

08003840 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a17      	ldr	r2, [pc, #92]	; (80038bc <HAL_SPI_MspInit+0x7c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d128      	bne.n	80038b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003862:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <HAL_SPI_MspInit+0x80>)
 8003864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003866:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <HAL_SPI_MspInit+0x80>)
 8003868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800386c:	6613      	str	r3, [r2, #96]	; 0x60
 800386e:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <HAL_SPI_MspInit+0x80>)
 8003870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387a:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <HAL_SPI_MspInit+0x80>)
 800387c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387e:	4a10      	ldr	r2, [pc, #64]	; (80038c0 <HAL_SPI_MspInit+0x80>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003886:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <HAL_SPI_MspInit+0x80>)
 8003888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003892:	23e0      	movs	r3, #224	; 0xe0
 8003894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003896:	2302      	movs	r3, #2
 8003898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389e:	2300      	movs	r3, #0
 80038a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038a2:	2305      	movs	r3, #5
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a6:	f107 0314 	add.w	r3, r7, #20
 80038aa:	4619      	mov	r1, r3
 80038ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038b0:	f001 fb20 	bl	8004ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80038b4:	bf00      	nop
 80038b6:	3728      	adds	r7, #40	; 0x28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40013000 	.word	0x40013000
 80038c0:	40021000 	.word	0x40021000

080038c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <HAL_TIM_Base_MspInit+0x38>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10b      	bne.n	80038ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <HAL_TIM_Base_MspInit+0x3c>)
 80038d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038da:	4a09      	ldr	r2, [pc, #36]	; (8003900 <HAL_TIM_Base_MspInit+0x3c>)
 80038dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038e0:	6613      	str	r3, [r2, #96]	; 0x60
 80038e2:	4b07      	ldr	r3, [pc, #28]	; (8003900 <HAL_TIM_Base_MspInit+0x3c>)
 80038e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80038ee:	bf00      	nop
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40013400 	.word	0x40013400
 8003900:	40021000 	.word	0x40021000

08003904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a11      	ldr	r2, [pc, #68]	; (8003968 <HAL_TIM_MspPostInit+0x64>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d11b      	bne.n	800395e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <HAL_TIM_MspPostInit+0x68>)
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	4a10      	ldr	r2, [pc, #64]	; (800396c <HAL_TIM_MspPostInit+0x68>)
 800392c:	f043 0302 	orr.w	r3, r3, #2
 8003930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_TIM_MspPostInit+0x68>)
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PB5     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800393e:	2320      	movs	r3, #32
 8003940:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003942:	2302      	movs	r3, #2
 8003944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394a:	2300      	movs	r3, #0
 800394c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800394e:	2303      	movs	r3, #3
 8003950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003952:	f107 030c 	add.w	r3, r7, #12
 8003956:	4619      	mov	r1, r3
 8003958:	4805      	ldr	r0, [pc, #20]	; (8003970 <HAL_TIM_MspPostInit+0x6c>)
 800395a:	f001 facb 	bl	8004ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800395e:	bf00      	nop
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40013400 	.word	0x40013400
 800396c:	40021000 	.word	0x40021000
 8003970:	48000400 	.word	0x48000400

08003974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b09a      	sub	sp, #104	; 0x68
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800398c:	f107 0310 	add.w	r3, r7, #16
 8003990:	2244      	movs	r2, #68	; 0x44
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f005 fa71 	bl	8008e7c <memset>
  if(huart->Instance==USART2)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1f      	ldr	r2, [pc, #124]	; (8003a1c <HAL_UART_MspInit+0xa8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d136      	bne.n	8003a12 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80039a4:	2302      	movs	r3, #2
 80039a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039ac:	f107 0310 	add.w	r3, r7, #16
 80039b0:	4618      	mov	r0, r3
 80039b2:	f002 fa23 	bl	8005dfc <HAL_RCCEx_PeriphCLKConfig>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80039bc:	f7ff fa7c 	bl	8002eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039c0:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <HAL_UART_MspInit+0xac>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <HAL_UART_MspInit+0xac>)
 80039c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ca:	6593      	str	r3, [r2, #88]	; 0x58
 80039cc:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <HAL_UART_MspInit+0xac>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <HAL_UART_MspInit+0xac>)
 80039da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039dc:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <HAL_UART_MspInit+0xac>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <HAL_UART_MspInit+0xac>)
 80039e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80039f0:	230c      	movs	r3, #12
 80039f2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f4:	2302      	movs	r3, #2
 80039f6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fc:	2300      	movs	r3, #0
 80039fe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a00:	2307      	movs	r3, #7
 8003a02:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a0e:	f001 fa71 	bl	8004ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a12:	bf00      	nop
 8003a14:	3768      	adds	r7, #104	; 0x68
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40004400 	.word	0x40004400
 8003a20:	40021000 	.word	0x40021000

08003a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a28:	e7fe      	b.n	8003a28 <NMI_Handler+0x4>

08003a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a2e:	e7fe      	b.n	8003a2e <HardFault_Handler+0x4>

08003a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <MemManage_Handler+0x4>

08003a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a3a:	e7fe      	b.n	8003a3a <BusFault_Handler+0x4>

08003a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a40:	e7fe      	b.n	8003a40 <UsageFault_Handler+0x4>

08003a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a70:	f000 fa06 	bl	8003e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <FDCAN1_IT0_IRQHandler+0x10>)
 8003a7e:	f000 ffd9 	bl	8004a34 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	200000b0 	.word	0x200000b0

08003a8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <SystemInit+0x20>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	4a05      	ldr	r2, [pc, #20]	; (8003aac <SystemInit+0x20>)
 8003a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aa0:	bf00      	nop
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <temp_calc>:

#include "temp_calc.h"
#include "math.h"
#include <stdint.h>

void temp_calc(uint8_t total_ic,  temp_data_t temp_data[][GPIO_NUM]){
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b090      	sub	sp, #64	; 0x40
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	6039      	str	r1, [r7, #0]
 8003aba:	71fb      	strb	r3, [r7, #7]
    float v, r, t;
    float B = 3430; // B-parameter from CSV file
 8003abc:	4bae      	ldr	r3, [pc, #696]	; (8003d78 <temp_calc+0x2c8>)
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    float R0 = 10000; // Reference resistance at 25 degrees Celsius
 8003ac0:	4bae      	ldr	r3, [pc, #696]	; (8003d7c <temp_calc+0x2cc>)
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    float T0 = 298.15; // Reference temperature in Kelvin (25 degrees Celsius)
 8003ac4:	4bae      	ldr	r3, [pc, #696]	; (8003d80 <temp_calc+0x2d0>)
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24

    float R1 = 10000; // Resistance of the voltage divider in ohms
 8003ac8:	4bac      	ldr	r3, [pc, #688]	; (8003d7c <temp_calc+0x2cc>)
 8003aca:	623b      	str	r3, [r7, #32]

    for(int i = 0; i < total_ic; i++){
 8003acc:	2300      	movs	r3, #0
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad0:	e09c      	b.n	8003c0c <temp_calc+0x15c>
        for(int j = 0; j < 6; j++){
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad6:	e092      	b.n	8003bfe <temp_calc+0x14e>
        	float Vs = (float)temp_data[i][5].raw / 10000; // Source voltage in volts Vref2
 8003ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ada:	4613      	mov	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4413      	add	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	8a9b      	ldrh	r3, [r3, #20]
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003af2:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8003d84 <temp_calc+0x2d4>
 8003af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003afa:	edc7 7a03 	vstr	s15, [r7, #12]
            v = (float)temp_data[i][j].raw / 10000; // Convert raw reading to volts
 8003afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	461a      	mov	r2, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b10:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003b14:	ee07 3a90 	vmov	s15, r3
 8003b18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b1c:	eddf 6a99 	vldr	s13, [pc, #612]	; 8003d84 <temp_calc+0x2d4>
 8003b20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b24:	edc7 7a06 	vstr	s15, [r7, #24]
            r = (v * R1) / (Vs - v); // Calculate resistance of the thermistor
 8003b28:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b30:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b34:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b38:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b44:	edc7 7a05 	vstr	s15, [r7, #20]
            t = log(r/R0);
 8003b48:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b50:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b54:	ee16 0a90 	vmov	r0, s13
 8003b58:	f7fc fcc2 	bl	80004e0 <__aeabi_f2d>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	ec43 2b10 	vmov	d0, r2, r3
 8003b64:	f005 f9bc 	bl	8008ee0 <log>
 8003b68:	ec53 2b10 	vmov	r2, r3, d0
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f7fc ffbe 	bl	8000af0 <__aeabi_d2f>
 8003b74:	4603      	mov	r3, r0
 8003b76:	613b      	str	r3, [r7, #16]
            t = t / B;
 8003b78:	edd7 6a04 	vldr	s13, [r7, #16]
 8003b7c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b84:	edc7 7a04 	vstr	s15, [r7, #16]
            t = t + 1/T0;
 8003b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b8c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b94:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b9c:	edc7 7a04 	vstr	s15, [r7, #16]
            t = 1/t;
 8003ba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bac:	edc7 7a04 	vstr	s15, [r7, #16]
            t -= 273.15; // Convert from Kelvin to Celsius
 8003bb0:	6938      	ldr	r0, [r7, #16]
 8003bb2:	f7fc fc95 	bl	80004e0 <__aeabi_f2d>
 8003bb6:	a36e      	add	r3, pc, #440	; (adr r3, 8003d70 <temp_calc+0x2c0>)
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f7fc fb30 	bl	8000220 <__aeabi_dsub>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f7fc ff92 	bl	8000af0 <__aeabi_d2f>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	613b      	str	r3, [r7, #16]
            temp_data[i][j].temp = (int)t;
 8003bd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bda:	4613      	mov	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	461a      	mov	r2, r3
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	441a      	add	r2, r3
 8003be8:	ee17 3a90 	vmov	r3, s15
 8003bec:	b219      	sxth	r1, r3
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	460a      	mov	r2, r1
 8003bf6:	805a      	strh	r2, [r3, #2]
        for(int j = 0; j < 6; j++){
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	f77f af69 	ble.w	8003ad8 <temp_calc+0x28>
    for(int i = 0; i < total_ic; i++){
 8003c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c08:	3301      	adds	r3, #1
 8003c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c10:	429a      	cmp	r2, r3
 8003c12:	f6ff af5e 	blt.w	8003ad2 <temp_calc+0x22>
        }
    }

    for(int i = 0; i < total_ic; i++){
 8003c16:	2300      	movs	r3, #0
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1a:	e09c      	b.n	8003d56 <temp_calc+0x2a6>
    	for(int j = 6; j < 10; j++){
 8003c1c:	2306      	movs	r3, #6
 8003c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c20:	e092      	b.n	8003d48 <temp_calc+0x298>
    		float Vs = (float)temp_data[i][5].raw / 10000; // Source voltage in volts Vref2
 8003c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	4413      	add	r3, r2
 8003c32:	8a9b      	ldrh	r3, [r3, #20]
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c3c:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003d84 <temp_calc+0x2d4>
 8003c40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c44:	edc7 7a07 	vstr	s15, [r7, #28]
    		v = (float)temp_data[i][j].raw / 10000; // Convert raw reading to volts
 8003c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4413      	add	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	461a      	mov	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4413      	add	r3, r2
 8003c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5a:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c66:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003d84 <temp_calc+0x2d4>
 8003c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c6e:	edc7 7a06 	vstr	s15, [r7, #24]
    		r = (v * R1) / (Vs - v); // Calculate resistance of the thermistor
 8003c72:	ed97 7a06 	vldr	s14, [r7, #24]
 8003c76:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c7a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003c7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c82:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c8e:	edc7 7a05 	vstr	s15, [r7, #20]
    		t = log(r/R0);
 8003c92:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c9e:	ee16 0a90 	vmov	r0, s13
 8003ca2:	f7fc fc1d 	bl	80004e0 <__aeabi_f2d>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	ec43 2b10 	vmov	d0, r2, r3
 8003cae:	f005 f917 	bl	8008ee0 <log>
 8003cb2:	ec53 2b10 	vmov	r2, r3, d0
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f7fc ff19 	bl	8000af0 <__aeabi_d2f>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	613b      	str	r3, [r7, #16]
    		t = t / B;
 8003cc2:	edd7 6a04 	vldr	s13, [r7, #16]
 8003cc6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cce:	edc7 7a04 	vstr	s15, [r7, #16]
    		t = t + 1/T0;
 8003cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cd6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cde:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce6:	edc7 7a04 	vstr	s15, [r7, #16]
    		t = 1/t;
 8003cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cee:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf6:	edc7 7a04 	vstr	s15, [r7, #16]
    		t -= 273.15; // Convert from Kelvin to Celsius
 8003cfa:	6938      	ldr	r0, [r7, #16]
 8003cfc:	f7fc fbf0 	bl	80004e0 <__aeabi_f2d>
 8003d00:	a31b      	add	r3, pc, #108	; (adr r3, 8003d70 <temp_calc+0x2c0>)
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	f7fc fa8b 	bl	8000220 <__aeabi_dsub>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	f7fc feed 	bl	8000af0 <__aeabi_d2f>
 8003d16:	4603      	mov	r3, r0
 8003d18:	613b      	str	r3, [r7, #16]
    		temp_data[i][j].temp = (int)t;
 8003d1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d24:	4613      	mov	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	4413      	add	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	441a      	add	r2, r3
 8003d32:	ee17 3a90 	vmov	r3, s15
 8003d36:	b219      	sxth	r1, r3
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	460a      	mov	r2, r1
 8003d40:	805a      	strh	r2, [r3, #2]
    	for(int j = 6; j < 10; j++){
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	3301      	adds	r3, #1
 8003d46:	633b      	str	r3, [r7, #48]	; 0x30
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	2b09      	cmp	r3, #9
 8003d4c:	f77f af69 	ble.w	8003c22 <temp_calc+0x172>
    for(int i = 0; i < total_ic; i++){
 8003d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d52:	3301      	adds	r3, #1
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	f6ff af5e 	blt.w	8003c1c <temp_calc+0x16c>
    	}
    }
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	3740      	adds	r7, #64	; 0x40
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	f3af 8000 	nop.w
 8003d70:	66666666 	.word	0x66666666
 8003d74:	40711266 	.word	0x40711266
 8003d78:	45566000 	.word	0x45566000
 8003d7c:	461c4000 	.word	0x461c4000
 8003d80:	43951333 	.word	0x43951333
 8003d84:	461c4000 	.word	0x461c4000

08003d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d88:	480d      	ldr	r0, [pc, #52]	; (8003dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d8c:	480d      	ldr	r0, [pc, #52]	; (8003dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d8e:	490e      	ldr	r1, [pc, #56]	; (8003dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d90:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <LoopForever+0xe>)
  movs r3, #0
 8003d92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003d94:	e002      	b.n	8003d9c <LoopCopyDataInit>

08003d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d9a:	3304      	adds	r3, #4

08003d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003da0:	d3f9      	bcc.n	8003d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003da2:	4a0b      	ldr	r2, [pc, #44]	; (8003dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003da4:	4c0b      	ldr	r4, [pc, #44]	; (8003dd4 <LoopForever+0x16>)
  movs r3, #0
 8003da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003da8:	e001      	b.n	8003dae <LoopFillZerobss>

08003daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dac:	3204      	adds	r2, #4

08003dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003db0:	d3fb      	bcc.n	8003daa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003db2:	f7ff fe6b 	bl	8003a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003db6:	f005 f86f 	bl	8008e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003dba:	f7fe fd97 	bl	80028ec <main>

08003dbe <LoopForever>:

LoopForever:
    b LoopForever
 8003dbe:	e7fe      	b.n	8003dbe <LoopForever>
  ldr   r0, =_estack
 8003dc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dc8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003dcc:	08009760 	.word	0x08009760
  ldr r2, =_sbss
 8003dd0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003dd4:	200004cc 	.word	0x200004cc

08003dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003dd8:	e7fe      	b.n	8003dd8 <ADC1_2_IRQHandler>

08003dda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003de4:	2003      	movs	r0, #3
 8003de6:	f000 f95b 	bl	80040a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dea:	2000      	movs	r0, #0
 8003dec:	f000 f80e 	bl	8003e0c <HAL_InitTick>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	71fb      	strb	r3, [r7, #7]
 8003dfa:	e001      	b.n	8003e00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003dfc:	f7ff fc9a 	bl	8003734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e00:	79fb      	ldrb	r3, [r7, #7]

}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003e18:	4b16      	ldr	r3, [pc, #88]	; (8003e74 <HAL_InitTick+0x68>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d022      	beq.n	8003e66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003e20:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <HAL_InitTick+0x6c>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <HAL_InitTick+0x68>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f966 	bl	8004106 <HAL_SYSTICK_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10f      	bne.n	8003e60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	d809      	bhi.n	8003e5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e46:	2200      	movs	r2, #0
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4e:	f000 f932 	bl	80040b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e52:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <HAL_InitTick+0x70>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	e007      	b.n	8003e6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
 8003e5e:	e004      	b.n	8003e6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e001      	b.n	8003e6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000034 	.word	0x20000034
 8003e78:	2000002c 	.word	0x2000002c
 8003e7c:	20000030 	.word	0x20000030

08003e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_IncTick+0x1c>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_IncTick+0x20>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	4a03      	ldr	r2, [pc, #12]	; (8003e9c <HAL_IncTick+0x1c>)
 8003e90:	6013      	str	r3, [r2, #0]
}
 8003e92:	bf00      	nop
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	20000390 	.word	0x20000390
 8003ea0:	20000034 	.word	0x20000034

08003ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <HAL_GetTick+0x14>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000390 	.word	0x20000390

08003ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ec4:	f7ff ffee 	bl	8003ea4 <HAL_GetTick>
 8003ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d004      	beq.n	8003ee0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_Delay+0x40>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4413      	add	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ee0:	bf00      	nop
 8003ee2:	f7ff ffdf 	bl	8003ea4 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d8f7      	bhi.n	8003ee2 <HAL_Delay+0x26>
  {
  }
}
 8003ef2:	bf00      	nop
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20000034 	.word	0x20000034

08003f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <__NVIC_SetPriorityGrouping+0x44>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f32:	4a04      	ldr	r2, [pc, #16]	; (8003f44 <__NVIC_SetPriorityGrouping+0x44>)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	60d3      	str	r3, [r2, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f4c:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <__NVIC_GetPriorityGrouping+0x18>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	f003 0307 	and.w	r3, r3, #7
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	e000ed00 	.word	0xe000ed00

08003f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	db0b      	blt.n	8003f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	f003 021f 	and.w	r2, r3, #31
 8003f7c:	4907      	ldr	r1, [pc, #28]	; (8003f9c <__NVIC_EnableIRQ+0x38>)
 8003f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	2001      	movs	r0, #1
 8003f86:	fa00 f202 	lsl.w	r2, r0, r2
 8003f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	e000e100 	.word	0xe000e100

08003fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	6039      	str	r1, [r7, #0]
 8003faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	db0a      	blt.n	8003fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	490c      	ldr	r1, [pc, #48]	; (8003fec <__NVIC_SetPriority+0x4c>)
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	0112      	lsls	r2, r2, #4
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fc8:	e00a      	b.n	8003fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	4908      	ldr	r1, [pc, #32]	; (8003ff0 <__NVIC_SetPriority+0x50>)
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	3b04      	subs	r3, #4
 8003fd8:	0112      	lsls	r2, r2, #4
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	440b      	add	r3, r1
 8003fde:	761a      	strb	r2, [r3, #24]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	e000e100 	.word	0xe000e100
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b089      	sub	sp, #36	; 0x24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f1c3 0307 	rsb	r3, r3, #7
 800400e:	2b04      	cmp	r3, #4
 8004010:	bf28      	it	cs
 8004012:	2304      	movcs	r3, #4
 8004014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	3304      	adds	r3, #4
 800401a:	2b06      	cmp	r3, #6
 800401c:	d902      	bls.n	8004024 <NVIC_EncodePriority+0x30>
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	3b03      	subs	r3, #3
 8004022:	e000      	b.n	8004026 <NVIC_EncodePriority+0x32>
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004028:	f04f 32ff 	mov.w	r2, #4294967295
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43da      	mvns	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	401a      	ands	r2, r3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800403c:	f04f 31ff 	mov.w	r1, #4294967295
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	fa01 f303 	lsl.w	r3, r1, r3
 8004046:	43d9      	mvns	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800404c:	4313      	orrs	r3, r2
         );
}
 800404e:	4618      	mov	r0, r3
 8004050:	3724      	adds	r7, #36	; 0x24
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3b01      	subs	r3, #1
 8004068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800406c:	d301      	bcc.n	8004072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800406e:	2301      	movs	r3, #1
 8004070:	e00f      	b.n	8004092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004072:	4a0a      	ldr	r2, [pc, #40]	; (800409c <SysTick_Config+0x40>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3b01      	subs	r3, #1
 8004078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800407a:	210f      	movs	r1, #15
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
 8004080:	f7ff ff8e 	bl	8003fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <SysTick_Config+0x40>)
 8004086:	2200      	movs	r2, #0
 8004088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800408a:	4b04      	ldr	r3, [pc, #16]	; (800409c <SysTick_Config+0x40>)
 800408c:	2207      	movs	r2, #7
 800408e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	e000e010 	.word	0xe000e010

080040a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ff29 	bl	8003f00 <__NVIC_SetPriorityGrouping>
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b086      	sub	sp, #24
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	4603      	mov	r3, r0
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040c4:	f7ff ff40 	bl	8003f48 <__NVIC_GetPriorityGrouping>
 80040c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	6978      	ldr	r0, [r7, #20]
 80040d0:	f7ff ff90 	bl	8003ff4 <NVIC_EncodePriority>
 80040d4:	4602      	mov	r2, r0
 80040d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ff5f 	bl	8003fa0 <__NVIC_SetPriority>
}
 80040e2:	bf00      	nop
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	4603      	mov	r3, r0
 80040f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ff33 	bl	8003f64 <__NVIC_EnableIRQ>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff ffa4 	bl	800405c <SysTick_Config>
 8004114:	4603      	mov	r3, r0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e147      	b.n	80043c2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff fb18 	bl	800377c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0210 	bic.w	r2, r2, #16
 800415a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800415c:	f7ff fea2 	bl	8003ea4 <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004162:	e012      	b.n	800418a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004164:	f7ff fe9e 	bl	8003ea4 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b0a      	cmp	r3, #10
 8004170:	d90b      	bls.n	800418a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2203      	movs	r2, #3
 8004182:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e11b      	b.n	80043c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b08      	cmp	r3, #8
 8004196:	d0e5      	beq.n	8004164 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041a8:	f7ff fe7c 	bl	8003ea4 <HAL_GetTick>
 80041ac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041ae:	e012      	b.n	80041d6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041b0:	f7ff fe78 	bl	8003ea4 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b0a      	cmp	r3, #10
 80041bc:	d90b      	bls.n	80041d6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c2:	f043 0201 	orr.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2203      	movs	r2, #3
 80041ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0f5      	b.n	80043c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0e5      	beq.n	80041b0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0202 	orr.w	r2, r2, #2
 80041f2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a74      	ldr	r2, [pc, #464]	; (80043cc <HAL_FDCAN_Init+0x2ac>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d103      	bne.n	8004206 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80041fe:	4a74      	ldr	r2, [pc, #464]	; (80043d0 <HAL_FDCAN_Init+0x2b0>)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	7c1b      	ldrb	r3, [r3, #16]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d108      	bne.n	8004220 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421c:	619a      	str	r2, [r3, #24]
 800421e:	e007      	b.n	8004230 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800422e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7c5b      	ldrb	r3, [r3, #17]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d108      	bne.n	800424a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004246:	619a      	str	r2, [r3, #24]
 8004248:	e007      	b.n	800425a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004258:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	7c9b      	ldrb	r3, [r3, #18]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d108      	bne.n	8004274 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004270:	619a      	str	r2, [r3, #24]
 8004272:	e007      	b.n	8004284 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004282:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699a      	ldr	r2, [r3, #24]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80042a8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0210 	bic.w	r2, r2, #16
 80042b8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d108      	bne.n	80042d4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0204 	orr.w	r2, r2, #4
 80042d0:	619a      	str	r2, [r3, #24]
 80042d2:	e02c      	b.n	800432e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d028      	beq.n	800432e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d01c      	beq.n	800431e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042f2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0210 	orr.w	r2, r2, #16
 8004302:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	2b03      	cmp	r3, #3
 800430a:	d110      	bne.n	800432e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0220 	orr.w	r2, r2, #32
 800431a:	619a      	str	r2, [r3, #24]
 800431c:	e007      	b.n	800432e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699a      	ldr	r2, [r3, #24]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0220 	orr.w	r2, r2, #32
 800432c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	3b01      	subs	r3, #1
 8004334:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	3b01      	subs	r3, #1
 800433c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800433e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004346:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	3b01      	subs	r3, #1
 8004350:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004356:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004358:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004362:	d115      	bne.n	8004390 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	3b01      	subs	r3, #1
 8004370:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004372:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	3b01      	subs	r3, #1
 800437a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800437c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	3b01      	subs	r3, #1
 8004386:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800438c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800438e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fcd2 	bl	8004d50 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40006400 	.word	0x40006400
 80043d0:	40006500 	.word	0x40006500

080043d4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043e4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d002      	beq.n	80043f2 <HAL_FDCAN_ConfigFilter+0x1e>
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d13d      	bne.n	800446e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d119      	bne.n	800442e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004406:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800440e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e01d      	b.n	800446a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	075a      	lsls	r2, r3, #29
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	079a      	lsls	r2, r3, #30
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4413      	add	r3, r2
 8004456:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3304      	adds	r3, #4
 8004462:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e006      	b.n	800447c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004472:	f043 0202 	orr.w	r2, r3, #2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
  }
}
 800447c:	4618      	mov	r0, r3
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d116      	bne.n	80044d0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044aa:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	011a      	lsls	r2, r3, #4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	431a      	orrs	r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	431a      	orrs	r2, r3
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e006      	b.n	80044de <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d4:	f043 0204 	orr.w	r2, r3, #4
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
  }
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d11f      	bne.n	8004542 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	d10d      	bne.n	8004524 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004510:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	025a      	lsls	r2, r3, #9
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004522:	e00c      	b.n	800453e <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800452c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	021a      	lsls	r2, r3, #8
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e006      	b.n	8004550 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004546:	f043 0204 	orr.w	r2, r3, #4
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d110      	bne.n	8004592 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0201 	bic.w	r2, r2, #1
 8004586:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e006      	b.n	80045a0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004596:	f043 0204 	orr.w	r2, r3, #4
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
  }
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d12c      	bne.n	800461e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80045cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e023      	b.n	800462c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fbfe 	bl	8004dfc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2101      	movs	r1, #1
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	fa01 f202 	lsl.w	r2, r1, r2
 800460c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004610:	2201      	movs	r2, #1
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	409a      	lsls	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e006      	b.n	800462c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004622:	f043 0208 	orr.w	r2, r3, #8
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004634:	b480      	push	{r7}
 8004636:	b08b      	sub	sp, #44	; 0x2c
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800464c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800464e:	7efb      	ldrb	r3, [r7, #27]
 8004650:	2b02      	cmp	r3, #2
 8004652:	f040 80e8 	bne.w	8004826 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d137      	bne.n	80046cc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	2b00      	cmp	r3, #0
 800466a:	d107      	bne.n	800467c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004670:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e0db      	b.n	8004834 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	0e1b      	lsrs	r3, r3, #24
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d10a      	bne.n	80046a4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004696:	0a5b      	lsrs	r3, r3, #9
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80046a0:	2301      	movs	r3, #1
 80046a2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	0a1b      	lsrs	r3, r3, #8
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	440b      	add	r3, r1
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ca:	e036      	b.n	800473a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d107      	bne.n	80046ec <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0a3      	b.n	8004834 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046f4:	0e1b      	lsrs	r3, r3, #24
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d10a      	bne.n	8004714 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004710:	2301      	movs	r3, #1
 8004712:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800471c:	0a1b      	lsrs	r3, r3, #8
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	440b      	add	r3, r1
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d107      	bne.n	800475e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	0c9b      	lsrs	r3, r3, #18
 8004754:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	e005      	b.n	800476a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	3304      	adds	r3, #4
 8004786:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	b29a      	uxth	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	f003 020f 	and.w	r2, r3, #15
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	0e1b      	lsrs	r3, r3, #24
 80047be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	0fda      	lsrs	r2, r3, #31
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	3304      	adds	r3, #4
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80047da:	2300      	movs	r3, #0
 80047dc:	623b      	str	r3, [r7, #32]
 80047de:	e00a      	b.n	80047f6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	441a      	add	r2, r3
 80047e6:	6839      	ldr	r1, [r7, #0]
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	440b      	add	r3, r1
 80047ec:	7812      	ldrb	r2, [r2, #0]
 80047ee:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	3301      	adds	r3, #1
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	4a11      	ldr	r2, [pc, #68]	; (8004840 <HAL_FDCAN_GetRxMessage+0x20c>)
 80047fc:	5cd3      	ldrb	r3, [r2, r3]
 80047fe:	461a      	mov	r2, r3
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	4293      	cmp	r3, r2
 8004804:	d3ec      	bcc.n	80047e0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b40      	cmp	r3, #64	; 0x40
 800480a:	d105      	bne.n	8004818 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004816:	e004      	b.n	8004822 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e006      	b.n	8004834 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482a:	f043 0208 	orr.w	r2, r3, #8
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
  }
}
 8004834:	4618      	mov	r0, r3
 8004836:	372c      	adds	r7, #44	; 0x2c
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	08009714 	.word	0x08009714

08004844 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800485a:	68fb      	ldr	r3, [r7, #12]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800487a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d003      	beq.n	800488a <HAL_FDCAN_ActivateNotification+0x22>
 8004882:	7dfb      	ldrb	r3, [r7, #23]
 8004884:	2b02      	cmp	r3, #2
 8004886:	f040 80c8 	bne.w	8004a1a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004890:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d03b      	beq.n	800491e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d031      	beq.n	800491e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d004      	beq.n	80048ce <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d027      	beq.n	800491e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01d      	beq.n	800491e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d004      	beq.n	80048f6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d013      	beq.n	800491e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00c      	beq.n	800492e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d107      	bne.n	800492e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0201 	orr.w	r2, r2, #1
 800492c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	2b00      	cmp	r3, #0
 8004936:	d004      	beq.n	8004942 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d13b      	bne.n	80049ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d131      	bne.n	80049ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	d127      	bne.n	80049ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004970:	2b00      	cmp	r3, #0
 8004972:	d004      	beq.n	800497e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d11d      	bne.n	80049ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004984:	2b00      	cmp	r3, #0
 8004986:	d004      	beq.n	8004992 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	2b00      	cmp	r3, #0
 8004990:	d113      	bne.n	80049ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00c      	beq.n	80049ca <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0202 	orr.w	r2, r2, #2
 80049c8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d009      	beq.n	80049e8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e006      	b.n	8004a28 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1e:	f043 0202 	orr.w	r2, r3, #2
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
  }
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08c      	sub	sp, #48	; 0x30
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a42:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a50:	4013      	ands	r3, r2
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a68:	4013      	ands	r3, r2
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a80:	4013      	ands	r3, r2
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8004a8e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	6a3a      	ldr	r2, [r7, #32]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004aa6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d006      	beq.n	8004ae6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2240      	movs	r2, #64	; 0x40
 8004ade:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f916 	bl	8004d12 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d019      	beq.n	8004b24 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d014      	beq.n	8004b24 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b02:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004b1c:	6939      	ldr	r1, [r7, #16]
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8d8 	bl	8004cd4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b30:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f8a2 	bl	8004c7e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b46:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fd fb9c 	bl	8002288 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f897 	bl	8004c94 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00c      	beq.n	8004b8a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b82:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f890 	bl	8004caa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d018      	beq.n	8004bc6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d013      	beq.n	8004bc6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004ba6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004bbe:	68f9      	ldr	r1, [r7, #12]
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f87c 	bl	8004cbe <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00c      	beq.n	8004bea <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004be2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f880 	bl	8004cea <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00c      	beq.n	8004c0e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c06:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f878 	bl	8004cfe <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00f      	beq.n	8004c38 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004c46:	69f9      	ldr	r1, [r7, #28]
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f876 	bl	8004d3a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d009      	beq.n	8004c68 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f858 	bl	8004d26 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004c76:	bf00      	nop
 8004c78:	3730      	adds	r7, #48	; 0x30
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004d58:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004d5a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d6a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d72:	041a      	lsls	r2, r3, #16
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d90:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	061a      	lsls	r2, r3, #24
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	e005      	b.n	8004dde <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d3f3      	bcc.n	8004dd2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	4000a400 	.word	0x4000a400

08004dfc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b089      	sub	sp, #36	; 0x24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004e1a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61fb      	str	r3, [r7, #28]
 8004e26:	e00a      	b.n	8004e3e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004e30:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004e36:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e3c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e48:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004e4e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004e54:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	440b      	add	r3, r1
 8004e70:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	3304      	adds	r3, #4
 8004e88:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e020      	b.n	8004ed2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	3303      	adds	r3, #3
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	3302      	adds	r3, #2
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	440b      	add	r3, r1
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004ea8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	3301      	adds	r3, #1
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	440b      	add	r3, r1
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004eb6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004ec0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	4a06      	ldr	r2, [pc, #24]	; (8004ef0 <FDCAN_CopyMessageToRAM+0xf4>)
 8004ed8:	5cd3      	ldrb	r3, [r2, r3]
 8004eda:	461a      	mov	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d3d6      	bcc.n	8004e90 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	3724      	adds	r7, #36	; 0x24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	08009714 	.word	0x08009714

08004ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f02:	e15a      	b.n	80051ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	2101      	movs	r1, #1
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f10:	4013      	ands	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 814c 	beq.w	80051b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d005      	beq.n	8004f34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d130      	bne.n	8004f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	2203      	movs	r2, #3
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	43db      	mvns	r3, r3
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43db      	mvns	r3, r3
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4013      	ands	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	f003 0201 	and.w	r2, r3, #1
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d017      	beq.n	8004fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	2203      	movs	r2, #3
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d123      	bne.n	8005026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	08da      	lsrs	r2, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3208      	adds	r2, #8
 8004fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4013      	ands	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	08da      	lsrs	r2, r3, #3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3208      	adds	r2, #8
 8005020:	6939      	ldr	r1, [r7, #16]
 8005022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	2203      	movs	r2, #3
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4013      	ands	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f003 0203 	and.w	r2, r3, #3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80a6 	beq.w	80051b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005068:	4b5b      	ldr	r3, [pc, #364]	; (80051d8 <HAL_GPIO_Init+0x2e4>)
 800506a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506c:	4a5a      	ldr	r2, [pc, #360]	; (80051d8 <HAL_GPIO_Init+0x2e4>)
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	6613      	str	r3, [r2, #96]	; 0x60
 8005074:	4b58      	ldr	r3, [pc, #352]	; (80051d8 <HAL_GPIO_Init+0x2e4>)
 8005076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005080:	4a56      	ldr	r2, [pc, #344]	; (80051dc <HAL_GPIO_Init+0x2e8>)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	3302      	adds	r3, #2
 8005088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	220f      	movs	r2, #15
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4013      	ands	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050aa:	d01f      	beq.n	80050ec <HAL_GPIO_Init+0x1f8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a4c      	ldr	r2, [pc, #304]	; (80051e0 <HAL_GPIO_Init+0x2ec>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d019      	beq.n	80050e8 <HAL_GPIO_Init+0x1f4>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a4b      	ldr	r2, [pc, #300]	; (80051e4 <HAL_GPIO_Init+0x2f0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d013      	beq.n	80050e4 <HAL_GPIO_Init+0x1f0>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a4a      	ldr	r2, [pc, #296]	; (80051e8 <HAL_GPIO_Init+0x2f4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00d      	beq.n	80050e0 <HAL_GPIO_Init+0x1ec>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a49      	ldr	r2, [pc, #292]	; (80051ec <HAL_GPIO_Init+0x2f8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <HAL_GPIO_Init+0x1e8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a48      	ldr	r2, [pc, #288]	; (80051f0 <HAL_GPIO_Init+0x2fc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d101      	bne.n	80050d8 <HAL_GPIO_Init+0x1e4>
 80050d4:	2305      	movs	r3, #5
 80050d6:	e00a      	b.n	80050ee <HAL_GPIO_Init+0x1fa>
 80050d8:	2306      	movs	r3, #6
 80050da:	e008      	b.n	80050ee <HAL_GPIO_Init+0x1fa>
 80050dc:	2304      	movs	r3, #4
 80050de:	e006      	b.n	80050ee <HAL_GPIO_Init+0x1fa>
 80050e0:	2303      	movs	r3, #3
 80050e2:	e004      	b.n	80050ee <HAL_GPIO_Init+0x1fa>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e002      	b.n	80050ee <HAL_GPIO_Init+0x1fa>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_GPIO_Init+0x1fa>
 80050ec:	2300      	movs	r3, #0
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	f002 0203 	and.w	r2, r2, #3
 80050f4:	0092      	lsls	r2, r2, #2
 80050f6:	4093      	lsls	r3, r2
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050fe:	4937      	ldr	r1, [pc, #220]	; (80051dc <HAL_GPIO_Init+0x2e8>)
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	089b      	lsrs	r3, r3, #2
 8005104:	3302      	adds	r3, #2
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800510c:	4b39      	ldr	r3, [pc, #228]	; (80051f4 <HAL_GPIO_Init+0x300>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	43db      	mvns	r3, r3
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4013      	ands	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005130:	4a30      	ldr	r2, [pc, #192]	; (80051f4 <HAL_GPIO_Init+0x300>)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005136:	4b2f      	ldr	r3, [pc, #188]	; (80051f4 <HAL_GPIO_Init+0x300>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	43db      	mvns	r3, r3
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4013      	ands	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800515a:	4a26      	ldr	r2, [pc, #152]	; (80051f4 <HAL_GPIO_Init+0x300>)
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005160:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <HAL_GPIO_Init+0x300>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	43db      	mvns	r3, r3
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4013      	ands	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005184:	4a1b      	ldr	r2, [pc, #108]	; (80051f4 <HAL_GPIO_Init+0x300>)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800518a:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <HAL_GPIO_Init+0x300>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	43db      	mvns	r3, r3
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4013      	ands	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051ae:	4a11      	ldr	r2, [pc, #68]	; (80051f4 <HAL_GPIO_Init+0x300>)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	3301      	adds	r3, #1
 80051b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f47f ae9d 	bne.w	8004f04 <HAL_GPIO_Init+0x10>
  }
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	40021000 	.word	0x40021000
 80051dc:	40010000 	.word	0x40010000
 80051e0:	48000400 	.word	0x48000400
 80051e4:	48000800 	.word	0x48000800
 80051e8:	48000c00 	.word	0x48000c00
 80051ec:	48001000 	.word	0x48001000
 80051f0:	48001400 	.word	0x48001400
 80051f4:	40010400 	.word	0x40010400

080051f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	887b      	ldrh	r3, [r7, #2]
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005210:	2301      	movs	r3, #1
 8005212:	73fb      	strb	r3, [r7, #15]
 8005214:	e001      	b.n	800521a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	807b      	strh	r3, [r7, #2]
 8005234:	4613      	mov	r3, r2
 8005236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005238:	787b      	ldrb	r3, [r7, #1]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800523e:	887a      	ldrh	r2, [r7, #2]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005244:	e002      	b.n	800524c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005246:	887a      	ldrh	r2, [r7, #2]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d141      	bne.n	80052ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005266:	4b4b      	ldr	r3, [pc, #300]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800526e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005272:	d131      	bne.n	80052d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005274:	4b47      	ldr	r3, [pc, #284]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800527a:	4a46      	ldr	r2, [pc, #280]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005280:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005284:	4b43      	ldr	r3, [pc, #268]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800528c:	4a41      	ldr	r2, [pc, #260]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005292:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005294:	4b40      	ldr	r3, [pc, #256]	; (8005398 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2232      	movs	r2, #50	; 0x32
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	4a3f      	ldr	r2, [pc, #252]	; (800539c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	0c9b      	lsrs	r3, r3, #18
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052aa:	e002      	b.n	80052b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052b2:	4b38      	ldr	r3, [pc, #224]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052be:	d102      	bne.n	80052c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f2      	bne.n	80052ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052c6:	4b33      	ldr	r3, [pc, #204]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d2:	d158      	bne.n	8005386 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e057      	b.n	8005388 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052d8:	4b2e      	ldr	r3, [pc, #184]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052de:	4a2d      	ldr	r2, [pc, #180]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052e8:	e04d      	b.n	8005386 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f0:	d141      	bne.n	8005376 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052f2:	4b28      	ldr	r3, [pc, #160]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052fe:	d131      	bne.n	8005364 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005300:	4b24      	ldr	r3, [pc, #144]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005306:	4a23      	ldr	r2, [pc, #140]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800530c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005310:	4b20      	ldr	r3, [pc, #128]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005318:	4a1e      	ldr	r2, [pc, #120]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800531e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005320:	4b1d      	ldr	r3, [pc, #116]	; (8005398 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2232      	movs	r2, #50	; 0x32
 8005326:	fb02 f303 	mul.w	r3, r2, r3
 800532a:	4a1c      	ldr	r2, [pc, #112]	; (800539c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	0c9b      	lsrs	r3, r3, #18
 8005332:	3301      	adds	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005336:	e002      	b.n	800533e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3b01      	subs	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800533e:	4b15      	ldr	r3, [pc, #84]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534a:	d102      	bne.n	8005352 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f2      	bne.n	8005338 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535e:	d112      	bne.n	8005386 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e011      	b.n	8005388 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005364:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800536a:	4a0a      	ldr	r2, [pc, #40]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005370:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005374:	e007      	b.n	8005386 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005376:	4b07      	ldr	r3, [pc, #28]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800537e:	4a05      	ldr	r2, [pc, #20]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005384:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	40007000 	.word	0x40007000
 8005398:	2000002c 	.word	0x2000002c
 800539c:	431bde83 	.word	0x431bde83

080053a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e2fe      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d075      	beq.n	80054aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053be:	4b97      	ldr	r3, [pc, #604]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 030c 	and.w	r3, r3, #12
 80053c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053c8:	4b94      	ldr	r3, [pc, #592]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0303 	and.w	r3, r3, #3
 80053d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	2b0c      	cmp	r3, #12
 80053d6:	d102      	bne.n	80053de <HAL_RCC_OscConfig+0x3e>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d002      	beq.n	80053e4 <HAL_RCC_OscConfig+0x44>
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d10b      	bne.n	80053fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e4:	4b8d      	ldr	r3, [pc, #564]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d05b      	beq.n	80054a8 <HAL_RCC_OscConfig+0x108>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d157      	bne.n	80054a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e2d9      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005404:	d106      	bne.n	8005414 <HAL_RCC_OscConfig+0x74>
 8005406:	4b85      	ldr	r3, [pc, #532]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a84      	ldr	r2, [pc, #528]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 800540c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	e01d      	b.n	8005450 <HAL_RCC_OscConfig+0xb0>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800541c:	d10c      	bne.n	8005438 <HAL_RCC_OscConfig+0x98>
 800541e:	4b7f      	ldr	r3, [pc, #508]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a7e      	ldr	r2, [pc, #504]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 8005424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	4b7c      	ldr	r3, [pc, #496]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a7b      	ldr	r2, [pc, #492]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 8005430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e00b      	b.n	8005450 <HAL_RCC_OscConfig+0xb0>
 8005438:	4b78      	ldr	r3, [pc, #480]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a77      	ldr	r2, [pc, #476]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 800543e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	4b75      	ldr	r3, [pc, #468]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a74      	ldr	r2, [pc, #464]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 800544a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800544e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d013      	beq.n	8005480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005458:	f7fe fd24 	bl	8003ea4 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005460:	f7fe fd20 	bl	8003ea4 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b64      	cmp	r3, #100	; 0x64
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e29e      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005472:	4b6a      	ldr	r3, [pc, #424]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCC_OscConfig+0xc0>
 800547e:	e014      	b.n	80054aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fe fd10 	bl	8003ea4 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005488:	f7fe fd0c 	bl	8003ea4 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	; 0x64
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e28a      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800549a:	4b60      	ldr	r3, [pc, #384]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0xe8>
 80054a6:	e000      	b.n	80054aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d075      	beq.n	80055a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b6:	4b59      	ldr	r3, [pc, #356]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
 80054be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054c0:	4b56      	ldr	r3, [pc, #344]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b0c      	cmp	r3, #12
 80054ce:	d102      	bne.n	80054d6 <HAL_RCC_OscConfig+0x136>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d002      	beq.n	80054dc <HAL_RCC_OscConfig+0x13c>
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d11f      	bne.n	800551c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054dc:	4b4f      	ldr	r3, [pc, #316]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_OscConfig+0x154>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e25d      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f4:	4b49      	ldr	r3, [pc, #292]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	061b      	lsls	r3, r3, #24
 8005502:	4946      	ldr	r1, [pc, #280]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 8005504:	4313      	orrs	r3, r2
 8005506:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005508:	4b45      	ldr	r3, [pc, #276]	; (8005620 <HAL_RCC_OscConfig+0x280>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f7fe fc7d 	bl	8003e0c <HAL_InitTick>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d043      	beq.n	80055a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e249      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d023      	beq.n	800556c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005524:	4b3d      	ldr	r3, [pc, #244]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a3c      	ldr	r2, [pc, #240]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 800552a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fe fcb8 	bl	8003ea4 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005538:	f7fe fcb4 	bl	8003ea4 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e232      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800554a:	4b34      	ldr	r3, [pc, #208]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005556:	4b31      	ldr	r3, [pc, #196]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	061b      	lsls	r3, r3, #24
 8005564:	492d      	ldr	r1, [pc, #180]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 8005566:	4313      	orrs	r3, r2
 8005568:	604b      	str	r3, [r1, #4]
 800556a:	e01a      	b.n	80055a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800556c:	4b2b      	ldr	r3, [pc, #172]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2a      	ldr	r2, [pc, #168]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 8005572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fe fc94 	bl	8003ea4 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005580:	f7fe fc90 	bl	8003ea4 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e20e      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005592:	4b22      	ldr	r3, [pc, #136]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_OscConfig+0x1e0>
 800559e:	e000      	b.n	80055a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d041      	beq.n	8005632 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d01c      	beq.n	80055f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b6:	4b19      	ldr	r3, [pc, #100]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80055b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055bc:	4a17      	ldr	r2, [pc, #92]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c6:	f7fe fc6d 	bl	8003ea4 <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055cc:	e008      	b.n	80055e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ce:	f7fe fc69 	bl	8003ea4 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e1e7      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055e0:	4b0e      	ldr	r3, [pc, #56]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80055e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0ef      	beq.n	80055ce <HAL_RCC_OscConfig+0x22e>
 80055ee:	e020      	b.n	8005632 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f0:	4b0a      	ldr	r3, [pc, #40]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80055f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f6:	4a09      	ldr	r2, [pc, #36]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005600:	f7fe fc50 	bl	8003ea4 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005606:	e00d      	b.n	8005624 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005608:	f7fe fc4c 	bl	8003ea4 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d906      	bls.n	8005624 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e1ca      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000
 8005620:	20000030 	.word	0x20000030
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005624:	4b8c      	ldr	r3, [pc, #560]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 8005626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1ea      	bne.n	8005608 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 80a6 	beq.w	800578c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005640:	2300      	movs	r3, #0
 8005642:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005644:	4b84      	ldr	r3, [pc, #528]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 8005646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_RCC_OscConfig+0x2b4>
 8005650:	2301      	movs	r3, #1
 8005652:	e000      	b.n	8005656 <HAL_RCC_OscConfig+0x2b6>
 8005654:	2300      	movs	r3, #0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00d      	beq.n	8005676 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800565a:	4b7f      	ldr	r3, [pc, #508]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 800565c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565e:	4a7e      	ldr	r2, [pc, #504]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005664:	6593      	str	r3, [r2, #88]	; 0x58
 8005666:	4b7c      	ldr	r3, [pc, #496]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005672:	2301      	movs	r3, #1
 8005674:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005676:	4b79      	ldr	r3, [pc, #484]	; (800585c <HAL_RCC_OscConfig+0x4bc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d118      	bne.n	80056b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005682:	4b76      	ldr	r3, [pc, #472]	; (800585c <HAL_RCC_OscConfig+0x4bc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a75      	ldr	r2, [pc, #468]	; (800585c <HAL_RCC_OscConfig+0x4bc>)
 8005688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800568e:	f7fe fc09 	bl	8003ea4 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005696:	f7fe fc05 	bl	8003ea4 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e183      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056a8:	4b6c      	ldr	r3, [pc, #432]	; (800585c <HAL_RCC_OscConfig+0x4bc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d108      	bne.n	80056ce <HAL_RCC_OscConfig+0x32e>
 80056bc:	4b66      	ldr	r3, [pc, #408]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	4a65      	ldr	r2, [pc, #404]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056cc:	e024      	b.n	8005718 <HAL_RCC_OscConfig+0x378>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	d110      	bne.n	80056f8 <HAL_RCC_OscConfig+0x358>
 80056d6:	4b60      	ldr	r3, [pc, #384]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 80056d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056dc:	4a5e      	ldr	r2, [pc, #376]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 80056de:	f043 0304 	orr.w	r3, r3, #4
 80056e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056e6:	4b5c      	ldr	r3, [pc, #368]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ec:	4a5a      	ldr	r2, [pc, #360]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056f6:	e00f      	b.n	8005718 <HAL_RCC_OscConfig+0x378>
 80056f8:	4b57      	ldr	r3, [pc, #348]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 80056fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fe:	4a56      	ldr	r2, [pc, #344]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005708:	4b53      	ldr	r3, [pc, #332]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570e:	4a52      	ldr	r2, [pc, #328]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 8005710:	f023 0304 	bic.w	r3, r3, #4
 8005714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d016      	beq.n	800574e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005720:	f7fe fbc0 	bl	8003ea4 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005726:	e00a      	b.n	800573e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005728:	f7fe fbbc 	bl	8003ea4 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	f241 3288 	movw	r2, #5000	; 0x1388
 8005736:	4293      	cmp	r3, r2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e138      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800573e:	4b46      	ldr	r3, [pc, #280]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 8005740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0ed      	beq.n	8005728 <HAL_RCC_OscConfig+0x388>
 800574c:	e015      	b.n	800577a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574e:	f7fe fba9 	bl	8003ea4 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005754:	e00a      	b.n	800576c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005756:	f7fe fba5 	bl	8003ea4 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f241 3288 	movw	r2, #5000	; 0x1388
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e121      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800576c:	4b3a      	ldr	r3, [pc, #232]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1ed      	bne.n	8005756 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800577a:	7ffb      	ldrb	r3, [r7, #31]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d105      	bne.n	800578c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005780:	4b35      	ldr	r3, [pc, #212]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 8005782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005784:	4a34      	ldr	r2, [pc, #208]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 8005786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800578a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d03c      	beq.n	8005812 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01c      	beq.n	80057da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057a0:	4b2d      	ldr	r3, [pc, #180]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 80057a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057a6:	4a2c      	ldr	r2, [pc, #176]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 80057a8:	f043 0301 	orr.w	r3, r3, #1
 80057ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b0:	f7fe fb78 	bl	8003ea4 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057b8:	f7fe fb74 	bl	8003ea4 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e0f2      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057ca:	4b23      	ldr	r3, [pc, #140]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 80057cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0ef      	beq.n	80057b8 <HAL_RCC_OscConfig+0x418>
 80057d8:	e01b      	b.n	8005812 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057da:	4b1f      	ldr	r3, [pc, #124]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 80057dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057e0:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 80057e2:	f023 0301 	bic.w	r3, r3, #1
 80057e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ea:	f7fe fb5b 	bl	8003ea4 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057f2:	f7fe fb57 	bl	8003ea4 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e0d5      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005804:	4b14      	ldr	r3, [pc, #80]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 8005806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1ef      	bne.n	80057f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 80c9 	beq.w	80059ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800581c:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 030c 	and.w	r3, r3, #12
 8005824:	2b0c      	cmp	r3, #12
 8005826:	f000 8083 	beq.w	8005930 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d15e      	bne.n	80058f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a08      	ldr	r2, [pc, #32]	; (8005858 <HAL_RCC_OscConfig+0x4b8>)
 8005838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800583c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583e:	f7fe fb31 	bl	8003ea4 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005844:	e00c      	b.n	8005860 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005846:	f7fe fb2d 	bl	8003ea4 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d905      	bls.n	8005860 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e0ab      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
 8005858:	40021000 	.word	0x40021000
 800585c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005860:	4b55      	ldr	r3, [pc, #340]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1ec      	bne.n	8005846 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800586c:	4b52      	ldr	r3, [pc, #328]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	4b52      	ldr	r3, [pc, #328]	; (80059bc <HAL_RCC_OscConfig+0x61c>)
 8005872:	4013      	ands	r3, r2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6a11      	ldr	r1, [r2, #32]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800587c:	3a01      	subs	r2, #1
 800587e:	0112      	lsls	r2, r2, #4
 8005880:	4311      	orrs	r1, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005886:	0212      	lsls	r2, r2, #8
 8005888:	4311      	orrs	r1, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800588e:	0852      	lsrs	r2, r2, #1
 8005890:	3a01      	subs	r2, #1
 8005892:	0552      	lsls	r2, r2, #21
 8005894:	4311      	orrs	r1, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800589a:	0852      	lsrs	r2, r2, #1
 800589c:	3a01      	subs	r2, #1
 800589e:	0652      	lsls	r2, r2, #25
 80058a0:	4311      	orrs	r1, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058a6:	06d2      	lsls	r2, r2, #27
 80058a8:	430a      	orrs	r2, r1
 80058aa:	4943      	ldr	r1, [pc, #268]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058b0:	4b41      	ldr	r3, [pc, #260]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a40      	ldr	r2, [pc, #256]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 80058b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058bc:	4b3e      	ldr	r3, [pc, #248]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4a3d      	ldr	r2, [pc, #244]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 80058c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fe faec 	bl	8003ea4 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fe fae8 	bl	8003ea4 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e066      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e2:	4b35      	ldr	r3, [pc, #212]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0x530>
 80058ee:	e05e      	b.n	80059ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f0:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a30      	ldr	r2, [pc, #192]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 80058f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fe fad2 	bl	8003ea4 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005904:	f7fe face 	bl	8003ea4 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e04c      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005916:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005922:	4b25      	ldr	r3, [pc, #148]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	4924      	ldr	r1, [pc, #144]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 8005928:	4b25      	ldr	r3, [pc, #148]	; (80059c0 <HAL_RCC_OscConfig+0x620>)
 800592a:	4013      	ands	r3, r2
 800592c:	60cb      	str	r3, [r1, #12]
 800592e:	e03e      	b.n	80059ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e039      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800593c:	4b1e      	ldr	r3, [pc, #120]	; (80059b8 <HAL_RCC_OscConfig+0x618>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f003 0203 	and.w	r2, r3, #3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	429a      	cmp	r2, r3
 800594e:	d12c      	bne.n	80059aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	3b01      	subs	r3, #1
 800595c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595e:	429a      	cmp	r2, r3
 8005960:	d123      	bne.n	80059aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d11b      	bne.n	80059aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d113      	bne.n	80059aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	3b01      	subs	r3, #1
 8005990:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005992:	429a      	cmp	r2, r3
 8005994:	d109      	bne.n	80059aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a0:	085b      	lsrs	r3, r3, #1
 80059a2:	3b01      	subs	r3, #1
 80059a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d001      	beq.n	80059ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40021000 	.word	0x40021000
 80059bc:	019f800c 	.word	0x019f800c
 80059c0:	feeefffc 	.word	0xfeeefffc

080059c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e11e      	b.n	8005c1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059dc:	4b91      	ldr	r3, [pc, #580]	; (8005c24 <HAL_RCC_ClockConfig+0x260>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d910      	bls.n	8005a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ea:	4b8e      	ldr	r3, [pc, #568]	; (8005c24 <HAL_RCC_ClockConfig+0x260>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f023 020f 	bic.w	r2, r3, #15
 80059f2:	498c      	ldr	r1, [pc, #560]	; (8005c24 <HAL_RCC_ClockConfig+0x260>)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fa:	4b8a      	ldr	r3, [pc, #552]	; (8005c24 <HAL_RCC_ClockConfig+0x260>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d001      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e106      	b.n	8005c1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d073      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d129      	bne.n	8005a74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a20:	4b81      	ldr	r3, [pc, #516]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0f4      	b.n	8005c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a30:	f000 f99e 	bl	8005d70 <RCC_GetSysClockFreqFromPLLSource>
 8005a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4a7c      	ldr	r2, [pc, #496]	; (8005c2c <HAL_RCC_ClockConfig+0x268>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d93f      	bls.n	8005abe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a3e:	4b7a      	ldr	r3, [pc, #488]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d033      	beq.n	8005abe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d12f      	bne.n	8005abe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a5e:	4b72      	ldr	r3, [pc, #456]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a66:	4a70      	ldr	r2, [pc, #448]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a6e:	2380      	movs	r3, #128	; 0x80
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	e024      	b.n	8005abe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d107      	bne.n	8005a8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a7c:	4b6a      	ldr	r3, [pc, #424]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d109      	bne.n	8005a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0c6      	b.n	8005c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a8c:	4b66      	ldr	r3, [pc, #408]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0be      	b.n	8005c1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a9c:	f000 f8ce 	bl	8005c3c <HAL_RCC_GetSysClockFreq>
 8005aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4a61      	ldr	r2, [pc, #388]	; (8005c2c <HAL_RCC_ClockConfig+0x268>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d909      	bls.n	8005abe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005aaa:	4b5f      	ldr	r3, [pc, #380]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ab2:	4a5d      	ldr	r2, [pc, #372]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005aba:	2380      	movs	r3, #128	; 0x80
 8005abc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005abe:	4b5a      	ldr	r3, [pc, #360]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f023 0203 	bic.w	r2, r3, #3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	4957      	ldr	r1, [pc, #348]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad0:	f7fe f9e8 	bl	8003ea4 <HAL_GetTick>
 8005ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad6:	e00a      	b.n	8005aee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad8:	f7fe f9e4 	bl	8003ea4 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e095      	b.n	8005c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aee:	4b4e      	ldr	r3, [pc, #312]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 020c 	and.w	r2, r3, #12
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d1eb      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d023      	beq.n	8005b54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b18:	4b43      	ldr	r3, [pc, #268]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	4a42      	ldr	r2, [pc, #264]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b30:	4b3d      	ldr	r3, [pc, #244]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b38:	4a3b      	ldr	r2, [pc, #236]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b40:	4b39      	ldr	r3, [pc, #228]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	4936      	ldr	r1, [pc, #216]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	608b      	str	r3, [r1, #8]
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2b80      	cmp	r3, #128	; 0x80
 8005b58:	d105      	bne.n	8005b66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b5a:	4b33      	ldr	r3, [pc, #204]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	4a32      	ldr	r2, [pc, #200]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b66:	4b2f      	ldr	r3, [pc, #188]	; (8005c24 <HAL_RCC_ClockConfig+0x260>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d21d      	bcs.n	8005bb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b74:	4b2b      	ldr	r3, [pc, #172]	; (8005c24 <HAL_RCC_ClockConfig+0x260>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f023 020f 	bic.w	r2, r3, #15
 8005b7c:	4929      	ldr	r1, [pc, #164]	; (8005c24 <HAL_RCC_ClockConfig+0x260>)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b84:	f7fe f98e 	bl	8003ea4 <HAL_GetTick>
 8005b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8a:	e00a      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b8c:	f7fe f98a 	bl	8003ea4 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e03b      	b.n	8005c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba2:	4b20      	ldr	r3, [pc, #128]	; (8005c24 <HAL_RCC_ClockConfig+0x260>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d1ed      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bbc:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4917      	ldr	r1, [pc, #92]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0308 	and.w	r3, r3, #8
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bda:	4b13      	ldr	r3, [pc, #76]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	490f      	ldr	r1, [pc, #60]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bee:	f000 f825 	bl	8005c3c <HAL_RCC_GetSysClockFreq>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <HAL_RCC_ClockConfig+0x264>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	091b      	lsrs	r3, r3, #4
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	490c      	ldr	r1, [pc, #48]	; (8005c30 <HAL_RCC_ClockConfig+0x26c>)
 8005c00:	5ccb      	ldrb	r3, [r1, r3]
 8005c02:	f003 031f 	and.w	r3, r3, #31
 8005c06:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0a:	4a0a      	ldr	r2, [pc, #40]	; (8005c34 <HAL_RCC_ClockConfig+0x270>)
 8005c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <HAL_RCC_ClockConfig+0x274>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fe f8fa 	bl	8003e0c <HAL_InitTick>
 8005c18:	4603      	mov	r3, r0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40022000 	.word	0x40022000
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	04c4b400 	.word	0x04c4b400
 8005c30:	080096fc 	.word	0x080096fc
 8005c34:	2000002c 	.word	0x2000002c
 8005c38:	20000030 	.word	0x20000030

08005c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c42:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d102      	bne.n	8005c54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c4e:	4b2a      	ldr	r3, [pc, #168]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	e047      	b.n	8005ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c54:	4b27      	ldr	r3, [pc, #156]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 030c 	and.w	r3, r3, #12
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d102      	bne.n	8005c66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c60:	4b26      	ldr	r3, [pc, #152]	; (8005cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	e03e      	b.n	8005ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c66:	4b23      	ldr	r3, [pc, #140]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 030c 	and.w	r3, r3, #12
 8005c6e:	2b0c      	cmp	r3, #12
 8005c70:	d136      	bne.n	8005ce0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c72:	4b20      	ldr	r3, [pc, #128]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	091b      	lsrs	r3, r3, #4
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	3301      	adds	r3, #1
 8005c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d10c      	bne.n	8005caa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c90:	4a1a      	ldr	r2, [pc, #104]	; (8005cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	4a16      	ldr	r2, [pc, #88]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c9a:	68d2      	ldr	r2, [r2, #12]
 8005c9c:	0a12      	lsrs	r2, r2, #8
 8005c9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	617b      	str	r3, [r7, #20]
      break;
 8005ca8:	e00c      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005caa:	4a13      	ldr	r2, [pc, #76]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb2:	4a10      	ldr	r2, [pc, #64]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cb4:	68d2      	ldr	r2, [r2, #12]
 8005cb6:	0a12      	lsrs	r2, r2, #8
 8005cb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cbc:	fb02 f303 	mul.w	r3, r2, r3
 8005cc0:	617b      	str	r3, [r7, #20]
      break;
 8005cc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	0e5b      	lsrs	r3, r3, #25
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	e001      	b.n	8005ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ce4:	693b      	ldr	r3, [r7, #16]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	00f42400 	.word	0x00f42400
 8005cfc:	007a1200 	.word	0x007a1200

08005d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d04:	4b03      	ldr	r3, [pc, #12]	; (8005d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d06:	681b      	ldr	r3, [r3, #0]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	2000002c 	.word	0x2000002c

08005d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d1c:	f7ff fff0 	bl	8005d00 <HAL_RCC_GetHCLKFreq>
 8005d20:	4602      	mov	r2, r0
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	4904      	ldr	r1, [pc, #16]	; (8005d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d2e:	5ccb      	ldrb	r3, [r1, r3]
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	0800970c 	.word	0x0800970c

08005d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d48:	f7ff ffda 	bl	8005d00 <HAL_RCC_GetHCLKFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	0adb      	lsrs	r3, r3, #11
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4904      	ldr	r1, [pc, #16]	; (8005d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	0800970c 	.word	0x0800970c

08005d70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d76:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d80:	4b1b      	ldr	r3, [pc, #108]	; (8005df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	091b      	lsrs	r3, r3, #4
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d10c      	bne.n	8005dae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d94:	4a17      	ldr	r2, [pc, #92]	; (8005df4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	4a14      	ldr	r2, [pc, #80]	; (8005df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d9e:	68d2      	ldr	r2, [r2, #12]
 8005da0:	0a12      	lsrs	r2, r2, #8
 8005da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	617b      	str	r3, [r7, #20]
    break;
 8005dac:	e00c      	b.n	8005dc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dae:	4a12      	ldr	r2, [pc, #72]	; (8005df8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db6:	4a0e      	ldr	r2, [pc, #56]	; (8005df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005db8:	68d2      	ldr	r2, [r2, #12]
 8005dba:	0a12      	lsrs	r2, r2, #8
 8005dbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
    break;
 8005dc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dc8:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	0e5b      	lsrs	r3, r3, #25
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005de2:	687b      	ldr	r3, [r7, #4]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	40021000 	.word	0x40021000
 8005df4:	007a1200 	.word	0x007a1200
 8005df8:	00f42400 	.word	0x00f42400

08005dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e04:	2300      	movs	r3, #0
 8005e06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e08:	2300      	movs	r3, #0
 8005e0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8098 	beq.w	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e1e:	4b43      	ldr	r3, [pc, #268]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10d      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e2a:	4b40      	ldr	r3, [pc, #256]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2e:	4a3f      	ldr	r2, [pc, #252]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e34:	6593      	str	r3, [r2, #88]	; 0x58
 8005e36:	4b3d      	ldr	r3, [pc, #244]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	60bb      	str	r3, [r7, #8]
 8005e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e42:	2301      	movs	r3, #1
 8005e44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e46:	4b3a      	ldr	r3, [pc, #232]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a39      	ldr	r2, [pc, #228]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e52:	f7fe f827 	bl	8003ea4 <HAL_GetTick>
 8005e56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e58:	e009      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e5a:	f7fe f823 	bl	8003ea4 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d902      	bls.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	74fb      	strb	r3, [r7, #19]
        break;
 8005e6c:	e005      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e6e:	4b30      	ldr	r3, [pc, #192]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0ef      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e7a:	7cfb      	ldrb	r3, [r7, #19]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d159      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e80:	4b2a      	ldr	r3, [pc, #168]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01e      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d019      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e9c:	4b23      	ldr	r3, [pc, #140]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ea8:	4b20      	ldr	r3, [pc, #128]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eae:	4a1f      	ldr	r2, [pc, #124]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005eb8:	4b1c      	ldr	r3, [pc, #112]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebe:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ec8:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d016      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eda:	f7fd ffe3 	bl	8003ea4 <HAL_GetTick>
 8005ede:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ee0:	e00b      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ee2:	f7fd ffdf 	bl	8003ea4 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d902      	bls.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	74fb      	strb	r3, [r7, #19]
            break;
 8005ef8:	e006      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005efa:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0ec      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005f08:	7cfb      	ldrb	r3, [r7, #19]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10b      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f0e:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	4903      	ldr	r1, [pc, #12]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f24:	e008      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f26:	7cfb      	ldrb	r3, [r7, #19]
 8005f28:	74bb      	strb	r3, [r7, #18]
 8005f2a:	e005      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	7cfb      	ldrb	r3, [r7, #19]
 8005f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f38:	7c7b      	ldrb	r3, [r7, #17]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d105      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f3e:	4ba6      	ldr	r3, [pc, #664]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f42:	4aa5      	ldr	r2, [pc, #660]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f56:	4ba0      	ldr	r3, [pc, #640]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5c:	f023 0203 	bic.w	r2, r3, #3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	499c      	ldr	r1, [pc, #624]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f78:	4b97      	ldr	r3, [pc, #604]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7e:	f023 020c 	bic.w	r2, r3, #12
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	4994      	ldr	r1, [pc, #592]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f9a:	4b8f      	ldr	r3, [pc, #572]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	498b      	ldr	r1, [pc, #556]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fbc:	4b86      	ldr	r3, [pc, #536]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	4983      	ldr	r1, [pc, #524]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fde:	4b7e      	ldr	r3, [pc, #504]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	497a      	ldr	r1, [pc, #488]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006000:	4b75      	ldr	r3, [pc, #468]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006006:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	4972      	ldr	r1, [pc, #456]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006022:	4b6d      	ldr	r3, [pc, #436]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	4969      	ldr	r1, [pc, #420]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006044:	4b64      	ldr	r3, [pc, #400]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	4961      	ldr	r1, [pc, #388]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006066:	4b5c      	ldr	r3, [pc, #368]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	4958      	ldr	r1, [pc, #352]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006084:	2b00      	cmp	r3, #0
 8006086:	d015      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006088:	4b53      	ldr	r3, [pc, #332]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800608a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	4950      	ldr	r1, [pc, #320]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006098:	4313      	orrs	r3, r2
 800609a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a6:	d105      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a8:	4b4b      	ldr	r3, [pc, #300]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4a4a      	ldr	r2, [pc, #296]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d015      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060c0:	4b45      	ldr	r3, [pc, #276]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	4942      	ldr	r1, [pc, #264]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060de:	d105      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060e0:	4b3d      	ldr	r3, [pc, #244]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	4a3c      	ldr	r2, [pc, #240]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d015      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060f8:	4b37      	ldr	r3, [pc, #220]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006106:	4934      	ldr	r1, [pc, #208]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006116:	d105      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006118:	4b2f      	ldr	r3, [pc, #188]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4a2e      	ldr	r2, [pc, #184]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800611e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006122:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d015      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006130:	4b29      	ldr	r3, [pc, #164]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	4926      	ldr	r1, [pc, #152]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800614e:	d105      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006150:	4b21      	ldr	r3, [pc, #132]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4a20      	ldr	r2, [pc, #128]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800615a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d015      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006168:	4b1b      	ldr	r3, [pc, #108]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	4918      	ldr	r1, [pc, #96]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006186:	d105      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006188:	4b13      	ldr	r3, [pc, #76]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4a12      	ldr	r2, [pc, #72]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006192:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d015      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80061a0:	4b0d      	ldr	r3, [pc, #52]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ae:	490a      	ldr	r1, [pc, #40]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061be:	d105      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	4a04      	ldr	r2, [pc, #16]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80061cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40021000 	.word	0x40021000

080061dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e09d      	b.n	800632a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d108      	bne.n	8006208 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061fe:	d009      	beq.n	8006214 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	61da      	str	r2, [r3, #28]
 8006206:	e005      	b.n	8006214 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fd fb06 	bl	8003840 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006254:	d902      	bls.n	800625c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	e002      	b.n	8006262 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800625c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006260:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800626a:	d007      	beq.n	800627c <HAL_SPI_Init+0xa0>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006274:	d002      	beq.n	800627c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062be:	ea42 0103 	orr.w	r1, r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	0c1b      	lsrs	r3, r3, #16
 80062d8:	f003 0204 	and.w	r2, r3, #4
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80062f8:	ea42 0103 	orr.w	r1, r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69da      	ldr	r2, [r3, #28]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006318:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b088      	sub	sp, #32
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	4613      	mov	r3, r2
 8006340:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_SPI_Transmit+0x22>
 8006350:	2302      	movs	r3, #2
 8006352:	e15f      	b.n	8006614 <HAL_SPI_Transmit+0x2e2>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800635c:	f7fd fda2 	bl	8003ea4 <HAL_GetTick>
 8006360:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b01      	cmp	r3, #1
 8006370:	d002      	beq.n	8006378 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006372:	2302      	movs	r3, #2
 8006374:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006376:	e148      	b.n	800660a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_SPI_Transmit+0x52>
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006388:	e13f      	b.n	800660a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2203      	movs	r2, #3
 800638e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	88fa      	ldrh	r2, [r7, #6]
 80063a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	88fa      	ldrh	r2, [r7, #6]
 80063a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d4:	d10f      	bne.n	80063f6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d007      	beq.n	8006414 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800641c:	d94f      	bls.n	80064be <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_SPI_Transmit+0xfa>
 8006426:	8afb      	ldrh	r3, [r7, #22]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d142      	bne.n	80064b2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	881a      	ldrh	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	1c9a      	adds	r2, r3, #2
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006450:	e02f      	b.n	80064b2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b02      	cmp	r3, #2
 800645e:	d112      	bne.n	8006486 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	881a      	ldrh	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	1c9a      	adds	r2, r3, #2
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647a:	b29b      	uxth	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006484:	e015      	b.n	80064b2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006486:	f7fd fd0d 	bl	8003ea4 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d803      	bhi.n	800649e <HAL_SPI_Transmit+0x16c>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649c:	d102      	bne.n	80064a4 <HAL_SPI_Transmit+0x172>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80064b0:	e0ab      	b.n	800660a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1ca      	bne.n	8006452 <HAL_SPI_Transmit+0x120>
 80064bc:	e080      	b.n	80065c0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_SPI_Transmit+0x19a>
 80064c6:	8afb      	ldrh	r3, [r7, #22]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d174      	bne.n	80065b6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d912      	bls.n	80064fc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	881a      	ldrh	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	1c9a      	adds	r2, r3, #2
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	3b02      	subs	r3, #2
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064fa:	e05c      	b.n	80065b6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	330c      	adds	r3, #12
 8006506:	7812      	ldrb	r2, [r2, #0]
 8006508:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006522:	e048      	b.n	80065b6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b02      	cmp	r3, #2
 8006530:	d12b      	bne.n	800658a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b01      	cmp	r3, #1
 800653a:	d912      	bls.n	8006562 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	881a      	ldrh	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b02      	subs	r3, #2
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006560:	e029      	b.n	80065b6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	330c      	adds	r3, #12
 800656c:	7812      	ldrb	r2, [r2, #0]
 800656e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657e:	b29b      	uxth	r3, r3
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006588:	e015      	b.n	80065b6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800658a:	f7fd fc8b 	bl	8003ea4 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d803      	bhi.n	80065a2 <HAL_SPI_Transmit+0x270>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d102      	bne.n	80065a8 <HAL_SPI_Transmit+0x276>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80065b4:	e029      	b.n	800660a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1b1      	bne.n	8006524 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 fcf9 	bl	8006fbc <SPI_EndRxTxTransaction>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065de:	2300      	movs	r3, #0
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e003      	b.n	800660a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006612:	7ffb      	ldrb	r3, [r7, #31]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af02      	add	r7, sp, #8
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	603b      	str	r3, [r7, #0]
 8006628:	4613      	mov	r3, r2
 800662a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	d002      	beq.n	8006642 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800663c:	2302      	movs	r3, #2
 800663e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006640:	e11a      	b.n	8006878 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800664a:	d112      	bne.n	8006672 <HAL_SPI_Receive+0x56>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10e      	bne.n	8006672 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2204      	movs	r2, #4
 8006658:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800665c:	88fa      	ldrh	r2, [r7, #6]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	4613      	mov	r3, r2
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f90e 	bl	800688a <HAL_SPI_TransmitReceive>
 800666e:	4603      	mov	r3, r0
 8006670:	e107      	b.n	8006882 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_SPI_Receive+0x64>
 800667c:	2302      	movs	r3, #2
 800667e:	e100      	b.n	8006882 <HAL_SPI_Receive+0x266>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006688:	f7fd fc0c 	bl	8003ea4 <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <HAL_SPI_Receive+0x7e>
 8006694:	88fb      	ldrh	r3, [r7, #6]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800669e:	e0eb      	b.n	8006878 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2204      	movs	r2, #4
 80066a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	88fa      	ldrh	r2, [r7, #6]
 80066b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	88fa      	ldrh	r2, [r7, #6]
 80066c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066ea:	d908      	bls.n	80066fe <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066fa:	605a      	str	r2, [r3, #4]
 80066fc:	e007      	b.n	800670e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800670c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006716:	d10f      	bne.n	8006738 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006726:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006736:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d007      	beq.n	8006756 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006754:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800675e:	d86f      	bhi.n	8006840 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006760:	e034      	b.n	80067cc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b01      	cmp	r3, #1
 800676e:	d117      	bne.n	80067a0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f103 020c 	add.w	r2, r3, #12
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800679e:	e015      	b.n	80067cc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067a0:	f7fd fb80 	bl	8003ea4 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d803      	bhi.n	80067b8 <HAL_SPI_Receive+0x19c>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d102      	bne.n	80067be <HAL_SPI_Receive+0x1a2>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80067ca:	e055      	b.n	8006878 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1c4      	bne.n	8006762 <HAL_SPI_Receive+0x146>
 80067d8:	e038      	b.n	800684c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d115      	bne.n	8006814 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	b292      	uxth	r2, r2
 80067f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	1c9a      	adds	r2, r3, #2
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006812:	e015      	b.n	8006840 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006814:	f7fd fb46 	bl	8003ea4 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d803      	bhi.n	800682c <HAL_SPI_Receive+0x210>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682a:	d102      	bne.n	8006832 <HAL_SPI_Receive+0x216>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800683e:	e01b      	b.n	8006878 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1c6      	bne.n	80067da <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fb5b 	bl	8006f0c <SPI_EndRxTransaction>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2220      	movs	r2, #32
 8006860:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	75fb      	strb	r3, [r7, #23]
 800686e:	e003      	b.n	8006878 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b08a      	sub	sp, #40	; 0x28
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	607a      	str	r2, [r7, #4]
 8006896:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006898:	2301      	movs	r3, #1
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d101      	bne.n	80068b0 <HAL_SPI_TransmitReceive+0x26>
 80068ac:	2302      	movs	r3, #2
 80068ae:	e20a      	b.n	8006cc6 <HAL_SPI_TransmitReceive+0x43c>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068b8:	f7fd faf4 	bl	8003ea4 <HAL_GetTick>
 80068bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80068cc:	887b      	ldrh	r3, [r7, #2]
 80068ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80068d0:	887b      	ldrh	r3, [r7, #2]
 80068d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068d4:	7efb      	ldrb	r3, [r7, #27]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d00e      	beq.n	80068f8 <HAL_SPI_TransmitReceive+0x6e>
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068e0:	d106      	bne.n	80068f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d102      	bne.n	80068f0 <HAL_SPI_TransmitReceive+0x66>
 80068ea:	7efb      	ldrb	r3, [r7, #27]
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d003      	beq.n	80068f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80068f0:	2302      	movs	r3, #2
 80068f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80068f6:	e1e0      	b.n	8006cba <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_SPI_TransmitReceive+0x80>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <HAL_SPI_TransmitReceive+0x80>
 8006904:	887b      	ldrh	r3, [r7, #2]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d103      	bne.n	8006912 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006910:	e1d3      	b.n	8006cba <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b04      	cmp	r3, #4
 800691c:	d003      	beq.n	8006926 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2205      	movs	r2, #5
 8006922:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	887a      	ldrh	r2, [r7, #2]
 8006936:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	887a      	ldrh	r2, [r7, #2]
 800693e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	887a      	ldrh	r2, [r7, #2]
 800694c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	887a      	ldrh	r2, [r7, #2]
 8006952:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006968:	d802      	bhi.n	8006970 <HAL_SPI_TransmitReceive+0xe6>
 800696a:	8a3b      	ldrh	r3, [r7, #16]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d908      	bls.n	8006982 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800697e:	605a      	str	r2, [r3, #4]
 8006980:	e007      	b.n	8006992 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006990:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b40      	cmp	r3, #64	; 0x40
 800699e:	d007      	beq.n	80069b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069b8:	f240 8081 	bls.w	8006abe <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <HAL_SPI_TransmitReceive+0x140>
 80069c4:	8a7b      	ldrh	r3, [r7, #18]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d16d      	bne.n	8006aa6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	881a      	ldrh	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	1c9a      	adds	r2, r3, #2
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069ee:	e05a      	b.n	8006aa6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d11b      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x1ac>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d016      	beq.n	8006a36 <HAL_SPI_TransmitReceive+0x1ac>
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d113      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a12:	881a      	ldrh	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	1c9a      	adds	r2, r3, #2
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d11c      	bne.n	8006a7e <HAL_SPI_TransmitReceive+0x1f4>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d016      	beq.n	8006a7e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	b292      	uxth	r2, r2
 8006a5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	1c9a      	adds	r2, r3, #2
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a7e:	f7fd fa11 	bl	8003ea4 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d80b      	bhi.n	8006aa6 <HAL_SPI_TransmitReceive+0x21c>
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d007      	beq.n	8006aa6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006aa4:	e109      	b.n	8006cba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d19f      	bne.n	80069f0 <HAL_SPI_TransmitReceive+0x166>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d199      	bne.n	80069f0 <HAL_SPI_TransmitReceive+0x166>
 8006abc:	e0e3      	b.n	8006c86 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x244>
 8006ac6:	8a7b      	ldrh	r3, [r7, #18]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	f040 80cf 	bne.w	8006c6c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d912      	bls.n	8006afe <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	881a      	ldrh	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae8:	1c9a      	adds	r2, r3, #2
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b02      	subs	r3, #2
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006afc:	e0b6      	b.n	8006c6c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	7812      	ldrb	r2, [r2, #0]
 8006b0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b24:	e0a2      	b.n	8006c6c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d134      	bne.n	8006b9e <HAL_SPI_TransmitReceive+0x314>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d02f      	beq.n	8006b9e <HAL_SPI_TransmitReceive+0x314>
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d12c      	bne.n	8006b9e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d912      	bls.n	8006b74 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	881a      	ldrh	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	1c9a      	adds	r2, r3, #2
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b02      	subs	r3, #2
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b72:	e012      	b.n	8006b9a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	330c      	adds	r3, #12
 8006b7e:	7812      	ldrb	r2, [r2, #0]
 8006b80:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d148      	bne.n	8006c3e <HAL_SPI_TransmitReceive+0x3b4>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d042      	beq.n	8006c3e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d923      	bls.n	8006c0c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	b292      	uxth	r2, r2
 8006bd0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	1c9a      	adds	r2, r3, #2
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b02      	subs	r3, #2
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d81f      	bhi.n	8006c3a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c08:	605a      	str	r2, [r3, #4]
 8006c0a:	e016      	b.n	8006c3a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f103 020c 	add.w	r2, r3, #12
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	7812      	ldrb	r2, [r2, #0]
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c3e:	f7fd f931 	bl	8003ea4 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d803      	bhi.n	8006c56 <HAL_SPI_TransmitReceive+0x3cc>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d102      	bne.n	8006c5c <HAL_SPI_TransmitReceive+0x3d2>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d107      	bne.n	8006c6c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006c6a:	e026      	b.n	8006cba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f47f af57 	bne.w	8006b26 <HAL_SPI_TransmitReceive+0x29c>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f47f af50 	bne.w	8006b26 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f996 	bl	8006fbc <SPI_EndRxTxTransaction>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cb0:	e003      	b.n	8006cba <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3728      	adds	r7, #40	; 0x28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ce0:	f7fd f8e0 	bl	8003ea4 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	1a9b      	subs	r3, r3, r2
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	4413      	add	r3, r2
 8006cee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006cf0:	f7fd f8d8 	bl	8003ea4 <HAL_GetTick>
 8006cf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cf6:	4b39      	ldr	r3, [pc, #228]	; (8006ddc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	015b      	lsls	r3, r3, #5
 8006cfc:	0d1b      	lsrs	r3, r3, #20
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	fb02 f303 	mul.w	r3, r2, r3
 8006d04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d06:	e054      	b.n	8006db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d050      	beq.n	8006db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d10:	f7fd f8c8 	bl	8003ea4 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	69fa      	ldr	r2, [r7, #28]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d902      	bls.n	8006d26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d13d      	bne.n	8006da2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d3e:	d111      	bne.n	8006d64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d48:	d004      	beq.n	8006d54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d52:	d107      	bne.n	8006d64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6c:	d10f      	bne.n	8006d8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e017      	b.n	8006dd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	bf0c      	ite	eq
 8006dc2:	2301      	moveq	r3, #1
 8006dc4:	2300      	movne	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d19b      	bne.n	8006d08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	2000002c 	.word	0x2000002c

08006de0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08a      	sub	sp, #40	; 0x28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006df2:	f7fd f857 	bl	8003ea4 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	4413      	add	r3, r2
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006e02:	f7fd f84f 	bl	8003ea4 <HAL_GetTick>
 8006e06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e10:	4b3d      	ldr	r3, [pc, #244]	; (8006f08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	00da      	lsls	r2, r3, #3
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	0d1b      	lsrs	r3, r3, #20
 8006e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
 8006e26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006e28:	e060      	b.n	8006eec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e30:	d107      	bne.n	8006e42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d104      	bne.n	8006e42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d050      	beq.n	8006eec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e4a:	f7fd f82b 	bl	8003ea4 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d902      	bls.n	8006e60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d13d      	bne.n	8006edc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e78:	d111      	bne.n	8006e9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e82:	d004      	beq.n	8006e8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8c:	d107      	bne.n	8006e9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea6:	d10f      	bne.n	8006ec8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ec6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e010      	b.n	8006efe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d196      	bne.n	8006e2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3728      	adds	r7, #40	; 0x28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	2000002c 	.word	0x2000002c

08006f0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f20:	d111      	bne.n	8006f46 <SPI_EndRxTransaction+0x3a>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f2a:	d004      	beq.n	8006f36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f34:	d107      	bne.n	8006f46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2180      	movs	r1, #128	; 0x80
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff febd 	bl	8006cd0 <SPI_WaitFlagStateUntilTimeout>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f60:	f043 0220 	orr.w	r2, r3, #32
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e023      	b.n	8006fb4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f74:	d11d      	bne.n	8006fb2 <SPI_EndRxTransaction+0xa6>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7e:	d004      	beq.n	8006f8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f88:	d113      	bne.n	8006fb2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff ff22 	bl	8006de0 <SPI_WaitFifoStateUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d007      	beq.n	8006fb2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa6:	f043 0220 	orr.w	r2, r3, #32
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e000      	b.n	8006fb4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff ff03 	bl	8006de0 <SPI_WaitFifoStateUntilTimeout>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe4:	f043 0220 	orr.w	r2, r3, #32
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e027      	b.n	8007040 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2180      	movs	r1, #128	; 0x80
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff fe68 	bl	8006cd0 <SPI_WaitFlagStateUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700a:	f043 0220 	orr.w	r2, r3, #32
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e014      	b.n	8007040 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2200      	movs	r2, #0
 800701e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff fedc 	bl	8006de0 <SPI_WaitFifoStateUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007032:	f043 0220 	orr.w	r2, r3, #32
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e000      	b.n	8007040 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e049      	b.n	80070ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fc fc28 	bl	80038c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f000 faa4 	bl	80075d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e049      	b.n	800719c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f841 	bl	80071a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3304      	adds	r3, #4
 8007132:	4619      	mov	r1, r3
 8007134:	4610      	mov	r0, r2
 8007136:	f000 fa4d 	bl	80075d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071d2:	2302      	movs	r3, #2
 80071d4:	e0ff      	b.n	80073d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b14      	cmp	r3, #20
 80071e2:	f200 80f0 	bhi.w	80073c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80071e6:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	08007241 	.word	0x08007241
 80071f0:	080073c7 	.word	0x080073c7
 80071f4:	080073c7 	.word	0x080073c7
 80071f8:	080073c7 	.word	0x080073c7
 80071fc:	08007281 	.word	0x08007281
 8007200:	080073c7 	.word	0x080073c7
 8007204:	080073c7 	.word	0x080073c7
 8007208:	080073c7 	.word	0x080073c7
 800720c:	080072c3 	.word	0x080072c3
 8007210:	080073c7 	.word	0x080073c7
 8007214:	080073c7 	.word	0x080073c7
 8007218:	080073c7 	.word	0x080073c7
 800721c:	08007303 	.word	0x08007303
 8007220:	080073c7 	.word	0x080073c7
 8007224:	080073c7 	.word	0x080073c7
 8007228:	080073c7 	.word	0x080073c7
 800722c:	08007345 	.word	0x08007345
 8007230:	080073c7 	.word	0x080073c7
 8007234:	080073c7 	.word	0x080073c7
 8007238:	080073c7 	.word	0x080073c7
 800723c:	08007385 	.word	0x08007385
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68b9      	ldr	r1, [r7, #8]
 8007246:	4618      	mov	r0, r3
 8007248:	f000 fa60 	bl	800770c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699a      	ldr	r2, [r3, #24]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0208 	orr.w	r2, r2, #8
 800725a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0204 	bic.w	r2, r2, #4
 800726a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6999      	ldr	r1, [r3, #24]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	691a      	ldr	r2, [r3, #16]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	619a      	str	r2, [r3, #24]
      break;
 800727e:	e0a5      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fad0 	bl	800782c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800729a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6999      	ldr	r1, [r3, #24]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	021a      	lsls	r2, r3, #8
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	619a      	str	r2, [r3, #24]
      break;
 80072c0:	e084      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68b9      	ldr	r1, [r7, #8]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 fb39 	bl	8007940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f042 0208 	orr.w	r2, r2, #8
 80072dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69da      	ldr	r2, [r3, #28]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f022 0204 	bic.w	r2, r2, #4
 80072ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	69d9      	ldr	r1, [r3, #28]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	61da      	str	r2, [r3, #28]
      break;
 8007300:	e064      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	4618      	mov	r0, r3
 800730a:	f000 fba1 	bl	8007a50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69da      	ldr	r2, [r3, #28]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800731c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69da      	ldr	r2, [r3, #28]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800732c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69d9      	ldr	r1, [r3, #28]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	021a      	lsls	r2, r3, #8
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	61da      	str	r2, [r3, #28]
      break;
 8007342:	e043      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fc0a 	bl	8007b64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0208 	orr.w	r2, r2, #8
 800735e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0204 	bic.w	r2, r2, #4
 800736e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007382:	e023      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fc4e 	bl	8007c2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800739e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	021a      	lsls	r2, r3, #8
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80073c4:	e002      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	75fb      	strb	r3, [r7, #23]
      break;
 80073ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop

080073e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_TIM_ConfigClockSource+0x1c>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e0de      	b.n	80075ba <HAL_TIM_ConfigClockSource+0x1da>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800741a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800741e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a63      	ldr	r2, [pc, #396]	; (80075c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	f000 80a9 	beq.w	800758e <HAL_TIM_ConfigClockSource+0x1ae>
 800743c:	4a61      	ldr	r2, [pc, #388]	; (80075c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	f200 80ae 	bhi.w	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007444:	4a60      	ldr	r2, [pc, #384]	; (80075c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007446:	4293      	cmp	r3, r2
 8007448:	f000 80a1 	beq.w	800758e <HAL_TIM_ConfigClockSource+0x1ae>
 800744c:	4a5e      	ldr	r2, [pc, #376]	; (80075c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	f200 80a6 	bhi.w	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007454:	4a5d      	ldr	r2, [pc, #372]	; (80075cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007456:	4293      	cmp	r3, r2
 8007458:	f000 8099 	beq.w	800758e <HAL_TIM_ConfigClockSource+0x1ae>
 800745c:	4a5b      	ldr	r2, [pc, #364]	; (80075cc <HAL_TIM_ConfigClockSource+0x1ec>)
 800745e:	4293      	cmp	r3, r2
 8007460:	f200 809e 	bhi.w	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007464:	4a5a      	ldr	r2, [pc, #360]	; (80075d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	f000 8091 	beq.w	800758e <HAL_TIM_ConfigClockSource+0x1ae>
 800746c:	4a58      	ldr	r2, [pc, #352]	; (80075d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	f200 8096 	bhi.w	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007474:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007478:	f000 8089 	beq.w	800758e <HAL_TIM_ConfigClockSource+0x1ae>
 800747c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007480:	f200 808e 	bhi.w	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007488:	d03e      	beq.n	8007508 <HAL_TIM_ConfigClockSource+0x128>
 800748a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800748e:	f200 8087 	bhi.w	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007496:	f000 8086 	beq.w	80075a6 <HAL_TIM_ConfigClockSource+0x1c6>
 800749a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749e:	d87f      	bhi.n	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80074a0:	2b70      	cmp	r3, #112	; 0x70
 80074a2:	d01a      	beq.n	80074da <HAL_TIM_ConfigClockSource+0xfa>
 80074a4:	2b70      	cmp	r3, #112	; 0x70
 80074a6:	d87b      	bhi.n	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80074a8:	2b60      	cmp	r3, #96	; 0x60
 80074aa:	d050      	beq.n	800754e <HAL_TIM_ConfigClockSource+0x16e>
 80074ac:	2b60      	cmp	r3, #96	; 0x60
 80074ae:	d877      	bhi.n	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80074b0:	2b50      	cmp	r3, #80	; 0x50
 80074b2:	d03c      	beq.n	800752e <HAL_TIM_ConfigClockSource+0x14e>
 80074b4:	2b50      	cmp	r3, #80	; 0x50
 80074b6:	d873      	bhi.n	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d058      	beq.n	800756e <HAL_TIM_ConfigClockSource+0x18e>
 80074bc:	2b40      	cmp	r3, #64	; 0x40
 80074be:	d86f      	bhi.n	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80074c0:	2b30      	cmp	r3, #48	; 0x30
 80074c2:	d064      	beq.n	800758e <HAL_TIM_ConfigClockSource+0x1ae>
 80074c4:	2b30      	cmp	r3, #48	; 0x30
 80074c6:	d86b      	bhi.n	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d060      	beq.n	800758e <HAL_TIM_ConfigClockSource+0x1ae>
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d867      	bhi.n	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d05c      	beq.n	800758e <HAL_TIM_ConfigClockSource+0x1ae>
 80074d4:	2b10      	cmp	r3, #16
 80074d6:	d05a      	beq.n	800758e <HAL_TIM_ConfigClockSource+0x1ae>
 80074d8:	e062      	b.n	80075a0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074ea:	f000 fc81 	bl	8007df0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	609a      	str	r2, [r3, #8]
      break;
 8007506:	e04f      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007518:	f000 fc6a 	bl	8007df0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800752a:	609a      	str	r2, [r3, #8]
      break;
 800752c:	e03c      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800753a:	461a      	mov	r2, r3
 800753c:	f000 fbdc 	bl	8007cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2150      	movs	r1, #80	; 0x50
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fc35 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 800754c:	e02c      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800755a:	461a      	mov	r2, r3
 800755c:	f000 fbfb 	bl	8007d56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2160      	movs	r1, #96	; 0x60
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fc25 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 800756c:	e01c      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800757a:	461a      	mov	r2, r3
 800757c:	f000 fbbc 	bl	8007cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2140      	movs	r1, #64	; 0x40
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fc15 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 800758c:	e00c      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4619      	mov	r1, r3
 8007598:	4610      	mov	r0, r2
 800759a:	f000 fc0c 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 800759e:	e003      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	73fb      	strb	r3, [r7, #15]
      break;
 80075a4:	e000      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80075a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	00100070 	.word	0x00100070
 80075c8:	00100040 	.word	0x00100040
 80075cc:	00100030 	.word	0x00100030
 80075d0:	00100020 	.word	0x00100020

080075d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a42      	ldr	r2, [pc, #264]	; (80076f0 <TIM_Base_SetConfig+0x11c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00f      	beq.n	800760c <TIM_Base_SetConfig+0x38>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f2:	d00b      	beq.n	800760c <TIM_Base_SetConfig+0x38>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a3f      	ldr	r2, [pc, #252]	; (80076f4 <TIM_Base_SetConfig+0x120>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d007      	beq.n	800760c <TIM_Base_SetConfig+0x38>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a3e      	ldr	r2, [pc, #248]	; (80076f8 <TIM_Base_SetConfig+0x124>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d003      	beq.n	800760c <TIM_Base_SetConfig+0x38>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a3d      	ldr	r2, [pc, #244]	; (80076fc <TIM_Base_SetConfig+0x128>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d108      	bne.n	800761e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a33      	ldr	r2, [pc, #204]	; (80076f0 <TIM_Base_SetConfig+0x11c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d01b      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762c:	d017      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a30      	ldr	r2, [pc, #192]	; (80076f4 <TIM_Base_SetConfig+0x120>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a2f      	ldr	r2, [pc, #188]	; (80076f8 <TIM_Base_SetConfig+0x124>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00f      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a2e      	ldr	r2, [pc, #184]	; (80076fc <TIM_Base_SetConfig+0x128>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00b      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a2d      	ldr	r2, [pc, #180]	; (8007700 <TIM_Base_SetConfig+0x12c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d007      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a2c      	ldr	r2, [pc, #176]	; (8007704 <TIM_Base_SetConfig+0x130>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d003      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a2b      	ldr	r2, [pc, #172]	; (8007708 <TIM_Base_SetConfig+0x134>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d108      	bne.n	8007670 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a16      	ldr	r2, [pc, #88]	; (80076f0 <TIM_Base_SetConfig+0x11c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00f      	beq.n	80076bc <TIM_Base_SetConfig+0xe8>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a17      	ldr	r2, [pc, #92]	; (80076fc <TIM_Base_SetConfig+0x128>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00b      	beq.n	80076bc <TIM_Base_SetConfig+0xe8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a16      	ldr	r2, [pc, #88]	; (8007700 <TIM_Base_SetConfig+0x12c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d007      	beq.n	80076bc <TIM_Base_SetConfig+0xe8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a15      	ldr	r2, [pc, #84]	; (8007704 <TIM_Base_SetConfig+0x130>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_Base_SetConfig+0xe8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a14      	ldr	r2, [pc, #80]	; (8007708 <TIM_Base_SetConfig+0x134>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d103      	bne.n	80076c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d105      	bne.n	80076e2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f023 0201 	bic.w	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	611a      	str	r2, [r3, #16]
  }
}
 80076e2:	bf00      	nop
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	40012c00 	.word	0x40012c00
 80076f4:	40000400 	.word	0x40000400
 80076f8:	40000800 	.word	0x40000800
 80076fc:	40013400 	.word	0x40013400
 8007700:	40014000 	.word	0x40014000
 8007704:	40014400 	.word	0x40014400
 8007708:	40014800 	.word	0x40014800

0800770c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	f023 0201 	bic.w	r2, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0303 	bic.w	r3, r3, #3
 8007746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f023 0302 	bic.w	r3, r3, #2
 8007758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a2c      	ldr	r2, [pc, #176]	; (8007818 <TIM_OC1_SetConfig+0x10c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d00f      	beq.n	800778c <TIM_OC1_SetConfig+0x80>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a2b      	ldr	r2, [pc, #172]	; (800781c <TIM_OC1_SetConfig+0x110>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00b      	beq.n	800778c <TIM_OC1_SetConfig+0x80>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a2a      	ldr	r2, [pc, #168]	; (8007820 <TIM_OC1_SetConfig+0x114>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d007      	beq.n	800778c <TIM_OC1_SetConfig+0x80>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a29      	ldr	r2, [pc, #164]	; (8007824 <TIM_OC1_SetConfig+0x118>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d003      	beq.n	800778c <TIM_OC1_SetConfig+0x80>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a28      	ldr	r2, [pc, #160]	; (8007828 <TIM_OC1_SetConfig+0x11c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d10c      	bne.n	80077a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f023 0308 	bic.w	r3, r3, #8
 8007792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f023 0304 	bic.w	r3, r3, #4
 80077a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a1b      	ldr	r2, [pc, #108]	; (8007818 <TIM_OC1_SetConfig+0x10c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d00f      	beq.n	80077ce <TIM_OC1_SetConfig+0xc2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a1a      	ldr	r2, [pc, #104]	; (800781c <TIM_OC1_SetConfig+0x110>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00b      	beq.n	80077ce <TIM_OC1_SetConfig+0xc2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a19      	ldr	r2, [pc, #100]	; (8007820 <TIM_OC1_SetConfig+0x114>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d007      	beq.n	80077ce <TIM_OC1_SetConfig+0xc2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a18      	ldr	r2, [pc, #96]	; (8007824 <TIM_OC1_SetConfig+0x118>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d003      	beq.n	80077ce <TIM_OC1_SetConfig+0xc2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a17      	ldr	r2, [pc, #92]	; (8007828 <TIM_OC1_SetConfig+0x11c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d111      	bne.n	80077f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	621a      	str	r2, [r3, #32]
}
 800780c:	bf00      	nop
 800780e:	371c      	adds	r7, #28
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	40012c00 	.word	0x40012c00
 800781c:	40013400 	.word	0x40013400
 8007820:	40014000 	.word	0x40014000
 8007824:	40014400 	.word	0x40014400
 8007828:	40014800 	.word	0x40014800

0800782c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	f023 0210 	bic.w	r2, r3, #16
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800785a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800785e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4313      	orrs	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f023 0320 	bic.w	r3, r3, #32
 800787a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a28      	ldr	r2, [pc, #160]	; (800792c <TIM_OC2_SetConfig+0x100>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <TIM_OC2_SetConfig+0x6c>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a27      	ldr	r2, [pc, #156]	; (8007930 <TIM_OC2_SetConfig+0x104>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d10d      	bne.n	80078b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800789e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a1d      	ldr	r2, [pc, #116]	; (800792c <TIM_OC2_SetConfig+0x100>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00f      	beq.n	80078dc <TIM_OC2_SetConfig+0xb0>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a1c      	ldr	r2, [pc, #112]	; (8007930 <TIM_OC2_SetConfig+0x104>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00b      	beq.n	80078dc <TIM_OC2_SetConfig+0xb0>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a1b      	ldr	r2, [pc, #108]	; (8007934 <TIM_OC2_SetConfig+0x108>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d007      	beq.n	80078dc <TIM_OC2_SetConfig+0xb0>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a1a      	ldr	r2, [pc, #104]	; (8007938 <TIM_OC2_SetConfig+0x10c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_OC2_SetConfig+0xb0>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a19      	ldr	r2, [pc, #100]	; (800793c <TIM_OC2_SetConfig+0x110>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d113      	bne.n	8007904 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40012c00 	.word	0x40012c00
 8007930:	40013400 	.word	0x40013400
 8007934:	40014000 	.word	0x40014000
 8007938:	40014400 	.word	0x40014400
 800793c:	40014800 	.word	0x40014800

08007940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800796e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0303 	bic.w	r3, r3, #3
 800797a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800798c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	021b      	lsls	r3, r3, #8
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	4313      	orrs	r3, r2
 8007998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a27      	ldr	r2, [pc, #156]	; (8007a3c <TIM_OC3_SetConfig+0xfc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d003      	beq.n	80079aa <TIM_OC3_SetConfig+0x6a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a26      	ldr	r2, [pc, #152]	; (8007a40 <TIM_OC3_SetConfig+0x100>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d10d      	bne.n	80079c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a1c      	ldr	r2, [pc, #112]	; (8007a3c <TIM_OC3_SetConfig+0xfc>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d00f      	beq.n	80079ee <TIM_OC3_SetConfig+0xae>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a1b      	ldr	r2, [pc, #108]	; (8007a40 <TIM_OC3_SetConfig+0x100>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00b      	beq.n	80079ee <TIM_OC3_SetConfig+0xae>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a1a      	ldr	r2, [pc, #104]	; (8007a44 <TIM_OC3_SetConfig+0x104>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d007      	beq.n	80079ee <TIM_OC3_SetConfig+0xae>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a19      	ldr	r2, [pc, #100]	; (8007a48 <TIM_OC3_SetConfig+0x108>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d003      	beq.n	80079ee <TIM_OC3_SetConfig+0xae>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a18      	ldr	r2, [pc, #96]	; (8007a4c <TIM_OC3_SetConfig+0x10c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d113      	bne.n	8007a16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	621a      	str	r2, [r3, #32]
}
 8007a30:	bf00      	nop
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	40013400 	.word	0x40013400
 8007a44:	40014000 	.word	0x40014000
 8007a48:	40014400 	.word	0x40014400
 8007a4c:	40014800 	.word	0x40014800

08007a50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	031b      	lsls	r3, r3, #12
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a28      	ldr	r2, [pc, #160]	; (8007b50 <TIM_OC4_SetConfig+0x100>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d003      	beq.n	8007abc <TIM_OC4_SetConfig+0x6c>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a27      	ldr	r2, [pc, #156]	; (8007b54 <TIM_OC4_SetConfig+0x104>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d10d      	bne.n	8007ad8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	031b      	lsls	r3, r3, #12
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ad6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a1d      	ldr	r2, [pc, #116]	; (8007b50 <TIM_OC4_SetConfig+0x100>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d00f      	beq.n	8007b00 <TIM_OC4_SetConfig+0xb0>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a1c      	ldr	r2, [pc, #112]	; (8007b54 <TIM_OC4_SetConfig+0x104>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00b      	beq.n	8007b00 <TIM_OC4_SetConfig+0xb0>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a1b      	ldr	r2, [pc, #108]	; (8007b58 <TIM_OC4_SetConfig+0x108>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d007      	beq.n	8007b00 <TIM_OC4_SetConfig+0xb0>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a1a      	ldr	r2, [pc, #104]	; (8007b5c <TIM_OC4_SetConfig+0x10c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d003      	beq.n	8007b00 <TIM_OC4_SetConfig+0xb0>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a19      	ldr	r2, [pc, #100]	; (8007b60 <TIM_OC4_SetConfig+0x110>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d113      	bne.n	8007b28 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	019b      	lsls	r3, r3, #6
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	019b      	lsls	r3, r3, #6
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	621a      	str	r2, [r3, #32]
}
 8007b42:	bf00      	nop
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	40012c00 	.word	0x40012c00
 8007b54:	40013400 	.word	0x40013400
 8007b58:	40014000 	.word	0x40014000
 8007b5c:	40014400 	.word	0x40014400
 8007b60:	40014800 	.word	0x40014800

08007b64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ba8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	041b      	lsls	r3, r3, #16
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a17      	ldr	r2, [pc, #92]	; (8007c18 <TIM_OC5_SetConfig+0xb4>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d00f      	beq.n	8007bde <TIM_OC5_SetConfig+0x7a>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a16      	ldr	r2, [pc, #88]	; (8007c1c <TIM_OC5_SetConfig+0xb8>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d00b      	beq.n	8007bde <TIM_OC5_SetConfig+0x7a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a15      	ldr	r2, [pc, #84]	; (8007c20 <TIM_OC5_SetConfig+0xbc>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d007      	beq.n	8007bde <TIM_OC5_SetConfig+0x7a>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a14      	ldr	r2, [pc, #80]	; (8007c24 <TIM_OC5_SetConfig+0xc0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d003      	beq.n	8007bde <TIM_OC5_SetConfig+0x7a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a13      	ldr	r2, [pc, #76]	; (8007c28 <TIM_OC5_SetConfig+0xc4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d109      	bne.n	8007bf2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007be4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	621a      	str	r2, [r3, #32]
}
 8007c0c:	bf00      	nop
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	40012c00 	.word	0x40012c00
 8007c1c:	40013400 	.word	0x40013400
 8007c20:	40014000 	.word	0x40014000
 8007c24:	40014400 	.word	0x40014400
 8007c28:	40014800 	.word	0x40014800

08007c2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	021b      	lsls	r3, r3, #8
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	051b      	lsls	r3, r3, #20
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a18      	ldr	r2, [pc, #96]	; (8007ce4 <TIM_OC6_SetConfig+0xb8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d00f      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x7c>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a17      	ldr	r2, [pc, #92]	; (8007ce8 <TIM_OC6_SetConfig+0xbc>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00b      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x7c>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a16      	ldr	r2, [pc, #88]	; (8007cec <TIM_OC6_SetConfig+0xc0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d007      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x7c>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a15      	ldr	r2, [pc, #84]	; (8007cf0 <TIM_OC6_SetConfig+0xc4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x7c>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a14      	ldr	r2, [pc, #80]	; (8007cf4 <TIM_OC6_SetConfig+0xc8>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d109      	bne.n	8007cbc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	029b      	lsls	r3, r3, #10
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40013400 	.word	0x40013400
 8007cec:	40014000 	.word	0x40014000
 8007cf0:	40014400 	.word	0x40014400
 8007cf4:	40014800 	.word	0x40014800

08007cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	f023 0201 	bic.w	r2, r3, #1
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f023 030a 	bic.w	r3, r3, #10
 8007d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	621a      	str	r2, [r3, #32]
}
 8007d4a:	bf00      	nop
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b087      	sub	sp, #28
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	f023 0210 	bic.w	r2, r3, #16
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	031b      	lsls	r3, r3, #12
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f043 0307 	orr.w	r3, r3, #7
 8007ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	609a      	str	r2, [r3, #8]
}
 8007de4:	bf00      	nop
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	021a      	lsls	r2, r3, #8
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	431a      	orrs	r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	609a      	str	r2, [r3, #8]
}
 8007e24:	bf00      	nop
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d109      	bne.n	8007e54 <HAL_TIMEx_PWMN_Start+0x24>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	bf14      	ite	ne
 8007e4c:	2301      	movne	r3, #1
 8007e4e:	2300      	moveq	r3, #0
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	e022      	b.n	8007e9a <HAL_TIMEx_PWMN_Start+0x6a>
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d109      	bne.n	8007e6e <HAL_TIMEx_PWMN_Start+0x3e>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	bf14      	ite	ne
 8007e66:	2301      	movne	r3, #1
 8007e68:	2300      	moveq	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	e015      	b.n	8007e9a <HAL_TIMEx_PWMN_Start+0x6a>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d109      	bne.n	8007e88 <HAL_TIMEx_PWMN_Start+0x58>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	bf14      	ite	ne
 8007e80:	2301      	movne	r3, #1
 8007e82:	2300      	moveq	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	e008      	b.n	8007e9a <HAL_TIMEx_PWMN_Start+0x6a>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	bf14      	ite	ne
 8007e94:	2301      	movne	r3, #1
 8007e96:	2300      	moveq	r3, #0
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e069      	b.n	8007f76 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d104      	bne.n	8007eb2 <HAL_TIMEx_PWMN_Start+0x82>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eb0:	e013      	b.n	8007eda <HAL_TIMEx_PWMN_Start+0xaa>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	d104      	bne.n	8007ec2 <HAL_TIMEx_PWMN_Start+0x92>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ec0:	e00b      	b.n	8007eda <HAL_TIMEx_PWMN_Start+0xaa>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b08      	cmp	r3, #8
 8007ec6:	d104      	bne.n	8007ed2 <HAL_TIMEx_PWMN_Start+0xa2>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ed0:	e003      	b.n	8007eda <HAL_TIMEx_PWMN_Start+0xaa>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2204      	movs	r2, #4
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 f966 	bl	80081b4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ef6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a20      	ldr	r2, [pc, #128]	; (8007f80 <HAL_TIMEx_PWMN_Start+0x150>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d018      	beq.n	8007f34 <HAL_TIMEx_PWMN_Start+0x104>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f0a:	d013      	beq.n	8007f34 <HAL_TIMEx_PWMN_Start+0x104>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1c      	ldr	r2, [pc, #112]	; (8007f84 <HAL_TIMEx_PWMN_Start+0x154>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d00e      	beq.n	8007f34 <HAL_TIMEx_PWMN_Start+0x104>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1b      	ldr	r2, [pc, #108]	; (8007f88 <HAL_TIMEx_PWMN_Start+0x158>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d009      	beq.n	8007f34 <HAL_TIMEx_PWMN_Start+0x104>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a19      	ldr	r2, [pc, #100]	; (8007f8c <HAL_TIMEx_PWMN_Start+0x15c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d004      	beq.n	8007f34 <HAL_TIMEx_PWMN_Start+0x104>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a18      	ldr	r2, [pc, #96]	; (8007f90 <HAL_TIMEx_PWMN_Start+0x160>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d115      	bne.n	8007f60 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689a      	ldr	r2, [r3, #8]
 8007f3a:	4b16      	ldr	r3, [pc, #88]	; (8007f94 <HAL_TIMEx_PWMN_Start+0x164>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b06      	cmp	r3, #6
 8007f44:	d015      	beq.n	8007f72 <HAL_TIMEx_PWMN_Start+0x142>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f4c:	d011      	beq.n	8007f72 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f042 0201 	orr.w	r2, r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5e:	e008      	b.n	8007f72 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0201 	orr.w	r2, r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	e000      	b.n	8007f74 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	40012c00 	.word	0x40012c00
 8007f84:	40000400 	.word	0x40000400
 8007f88:	40000800 	.word	0x40000800
 8007f8c:	40013400 	.word	0x40013400
 8007f90:	40014000 	.word	0x40014000
 8007f94:	00010007 	.word	0x00010007

08007f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d101      	bne.n	8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fac:	2302      	movs	r3, #2
 8007fae:	e065      	b.n	800807c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a2c      	ldr	r2, [pc, #176]	; (8008088 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d004      	beq.n	8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a2b      	ldr	r2, [pc, #172]	; (800808c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d108      	bne.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007fea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008000:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	4313      	orrs	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a1b      	ldr	r2, [pc, #108]	; (8008088 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d018      	beq.n	8008050 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008026:	d013      	beq.n	8008050 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a18      	ldr	r2, [pc, #96]	; (8008090 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d00e      	beq.n	8008050 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a17      	ldr	r2, [pc, #92]	; (8008094 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d009      	beq.n	8008050 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a12      	ldr	r2, [pc, #72]	; (800808c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d004      	beq.n	8008050 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a13      	ldr	r2, [pc, #76]	; (8008098 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d10c      	bne.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008056:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	4313      	orrs	r3, r2
 8008060:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	40012c00 	.word	0x40012c00
 800808c:	40013400 	.word	0x40013400
 8008090:	40000400 	.word	0x40000400
 8008094:	40000800 	.word	0x40000800
 8008098:	40014000 	.word	0x40014000

0800809c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d101      	bne.n	80080b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80080b4:	2302      	movs	r3, #2
 80080b6:	e073      	b.n	80081a0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	4313      	orrs	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	4313      	orrs	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	041b      	lsls	r3, r3, #16
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	4313      	orrs	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a19      	ldr	r2, [pc, #100]	; (80081ac <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d004      	beq.n	8008154 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a18      	ldr	r2, [pc, #96]	; (80081b0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d11c      	bne.n	800818e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815e:	051b      	lsls	r3, r3, #20
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40013400 	.word	0x40013400

080081b4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	2204      	movs	r2, #4
 80081c8:	fa02 f303 	lsl.w	r3, r2, r3
 80081cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6a1a      	ldr	r2, [r3, #32]
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	43db      	mvns	r3, r3
 80081d6:	401a      	ands	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6a1a      	ldr	r2, [r3, #32]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f003 030f 	and.w	r3, r3, #15
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	fa01 f303 	lsl.w	r3, r1, r3
 80081ec:	431a      	orrs	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	621a      	str	r2, [r3, #32]
}
 80081f2:	bf00      	nop
 80081f4:	371c      	adds	r7, #28
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e042      	b.n	8008296 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008216:	2b00      	cmp	r3, #0
 8008218:	d106      	bne.n	8008228 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fb fba6 	bl	8003974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2224      	movs	r2, #36	; 0x24
 800822c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0201 	bic.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 faf5 	bl	8008838 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f826 	bl	80082a0 <UART_SetConfig>
 8008254:	4603      	mov	r3, r0
 8008256:	2b01      	cmp	r3, #1
 8008258:	d101      	bne.n	800825e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e01b      	b.n	8008296 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800826c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800827c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f042 0201 	orr.w	r2, r2, #1
 800828c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fb74 	bl	800897c <UART_CheckIdleState>
 8008294:	4603      	mov	r3, r0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082a4:	b08c      	sub	sp, #48	; 0x30
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	431a      	orrs	r2, r3
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	431a      	orrs	r2, r3
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4bab      	ldr	r3, [pc, #684]	; (800857c <UART_SetConfig+0x2dc>)
 80082d0:	4013      	ands	r3, r2
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	6812      	ldr	r2, [r2, #0]
 80082d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082d8:	430b      	orrs	r3, r1
 80082da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	68da      	ldr	r2, [r3, #12]
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4aa0      	ldr	r2, [pc, #640]	; (8008580 <UART_SetConfig+0x2e0>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d004      	beq.n	800830c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008308:	4313      	orrs	r3, r2
 800830a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008316:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008320:	430b      	orrs	r3, r1
 8008322:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832a:	f023 010f 	bic.w	r1, r3, #15
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a91      	ldr	r2, [pc, #580]	; (8008584 <UART_SetConfig+0x2e4>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d125      	bne.n	8008390 <UART_SetConfig+0xf0>
 8008344:	4b90      	ldr	r3, [pc, #576]	; (8008588 <UART_SetConfig+0x2e8>)
 8008346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	2b03      	cmp	r3, #3
 8008350:	d81a      	bhi.n	8008388 <UART_SetConfig+0xe8>
 8008352:	a201      	add	r2, pc, #4	; (adr r2, 8008358 <UART_SetConfig+0xb8>)
 8008354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008358:	08008369 	.word	0x08008369
 800835c:	08008379 	.word	0x08008379
 8008360:	08008371 	.word	0x08008371
 8008364:	08008381 	.word	0x08008381
 8008368:	2301      	movs	r3, #1
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800836e:	e0d6      	b.n	800851e <UART_SetConfig+0x27e>
 8008370:	2302      	movs	r3, #2
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008376:	e0d2      	b.n	800851e <UART_SetConfig+0x27e>
 8008378:	2304      	movs	r3, #4
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837e:	e0ce      	b.n	800851e <UART_SetConfig+0x27e>
 8008380:	2308      	movs	r3, #8
 8008382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008386:	e0ca      	b.n	800851e <UART_SetConfig+0x27e>
 8008388:	2310      	movs	r3, #16
 800838a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800838e:	e0c6      	b.n	800851e <UART_SetConfig+0x27e>
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a7d      	ldr	r2, [pc, #500]	; (800858c <UART_SetConfig+0x2ec>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d138      	bne.n	800840c <UART_SetConfig+0x16c>
 800839a:	4b7b      	ldr	r3, [pc, #492]	; (8008588 <UART_SetConfig+0x2e8>)
 800839c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a0:	f003 030c 	and.w	r3, r3, #12
 80083a4:	2b0c      	cmp	r3, #12
 80083a6:	d82d      	bhi.n	8008404 <UART_SetConfig+0x164>
 80083a8:	a201      	add	r2, pc, #4	; (adr r2, 80083b0 <UART_SetConfig+0x110>)
 80083aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ae:	bf00      	nop
 80083b0:	080083e5 	.word	0x080083e5
 80083b4:	08008405 	.word	0x08008405
 80083b8:	08008405 	.word	0x08008405
 80083bc:	08008405 	.word	0x08008405
 80083c0:	080083f5 	.word	0x080083f5
 80083c4:	08008405 	.word	0x08008405
 80083c8:	08008405 	.word	0x08008405
 80083cc:	08008405 	.word	0x08008405
 80083d0:	080083ed 	.word	0x080083ed
 80083d4:	08008405 	.word	0x08008405
 80083d8:	08008405 	.word	0x08008405
 80083dc:	08008405 	.word	0x08008405
 80083e0:	080083fd 	.word	0x080083fd
 80083e4:	2300      	movs	r3, #0
 80083e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ea:	e098      	b.n	800851e <UART_SetConfig+0x27e>
 80083ec:	2302      	movs	r3, #2
 80083ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f2:	e094      	b.n	800851e <UART_SetConfig+0x27e>
 80083f4:	2304      	movs	r3, #4
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fa:	e090      	b.n	800851e <UART_SetConfig+0x27e>
 80083fc:	2308      	movs	r3, #8
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008402:	e08c      	b.n	800851e <UART_SetConfig+0x27e>
 8008404:	2310      	movs	r3, #16
 8008406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840a:	e088      	b.n	800851e <UART_SetConfig+0x27e>
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a5f      	ldr	r2, [pc, #380]	; (8008590 <UART_SetConfig+0x2f0>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d125      	bne.n	8008462 <UART_SetConfig+0x1c2>
 8008416:	4b5c      	ldr	r3, [pc, #368]	; (8008588 <UART_SetConfig+0x2e8>)
 8008418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800841c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008420:	2b30      	cmp	r3, #48	; 0x30
 8008422:	d016      	beq.n	8008452 <UART_SetConfig+0x1b2>
 8008424:	2b30      	cmp	r3, #48	; 0x30
 8008426:	d818      	bhi.n	800845a <UART_SetConfig+0x1ba>
 8008428:	2b20      	cmp	r3, #32
 800842a:	d00a      	beq.n	8008442 <UART_SetConfig+0x1a2>
 800842c:	2b20      	cmp	r3, #32
 800842e:	d814      	bhi.n	800845a <UART_SetConfig+0x1ba>
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <UART_SetConfig+0x19a>
 8008434:	2b10      	cmp	r3, #16
 8008436:	d008      	beq.n	800844a <UART_SetConfig+0x1aa>
 8008438:	e00f      	b.n	800845a <UART_SetConfig+0x1ba>
 800843a:	2300      	movs	r3, #0
 800843c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008440:	e06d      	b.n	800851e <UART_SetConfig+0x27e>
 8008442:	2302      	movs	r3, #2
 8008444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008448:	e069      	b.n	800851e <UART_SetConfig+0x27e>
 800844a:	2304      	movs	r3, #4
 800844c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008450:	e065      	b.n	800851e <UART_SetConfig+0x27e>
 8008452:	2308      	movs	r3, #8
 8008454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008458:	e061      	b.n	800851e <UART_SetConfig+0x27e>
 800845a:	2310      	movs	r3, #16
 800845c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008460:	e05d      	b.n	800851e <UART_SetConfig+0x27e>
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a4b      	ldr	r2, [pc, #300]	; (8008594 <UART_SetConfig+0x2f4>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d125      	bne.n	80084b8 <UART_SetConfig+0x218>
 800846c:	4b46      	ldr	r3, [pc, #280]	; (8008588 <UART_SetConfig+0x2e8>)
 800846e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008472:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008476:	2bc0      	cmp	r3, #192	; 0xc0
 8008478:	d016      	beq.n	80084a8 <UART_SetConfig+0x208>
 800847a:	2bc0      	cmp	r3, #192	; 0xc0
 800847c:	d818      	bhi.n	80084b0 <UART_SetConfig+0x210>
 800847e:	2b80      	cmp	r3, #128	; 0x80
 8008480:	d00a      	beq.n	8008498 <UART_SetConfig+0x1f8>
 8008482:	2b80      	cmp	r3, #128	; 0x80
 8008484:	d814      	bhi.n	80084b0 <UART_SetConfig+0x210>
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <UART_SetConfig+0x1f0>
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d008      	beq.n	80084a0 <UART_SetConfig+0x200>
 800848e:	e00f      	b.n	80084b0 <UART_SetConfig+0x210>
 8008490:	2300      	movs	r3, #0
 8008492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008496:	e042      	b.n	800851e <UART_SetConfig+0x27e>
 8008498:	2302      	movs	r3, #2
 800849a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800849e:	e03e      	b.n	800851e <UART_SetConfig+0x27e>
 80084a0:	2304      	movs	r3, #4
 80084a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084a6:	e03a      	b.n	800851e <UART_SetConfig+0x27e>
 80084a8:	2308      	movs	r3, #8
 80084aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ae:	e036      	b.n	800851e <UART_SetConfig+0x27e>
 80084b0:	2310      	movs	r3, #16
 80084b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b6:	e032      	b.n	800851e <UART_SetConfig+0x27e>
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a30      	ldr	r2, [pc, #192]	; (8008580 <UART_SetConfig+0x2e0>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d12a      	bne.n	8008518 <UART_SetConfig+0x278>
 80084c2:	4b31      	ldr	r3, [pc, #196]	; (8008588 <UART_SetConfig+0x2e8>)
 80084c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80084cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084d0:	d01a      	beq.n	8008508 <UART_SetConfig+0x268>
 80084d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084d6:	d81b      	bhi.n	8008510 <UART_SetConfig+0x270>
 80084d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084dc:	d00c      	beq.n	80084f8 <UART_SetConfig+0x258>
 80084de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084e2:	d815      	bhi.n	8008510 <UART_SetConfig+0x270>
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <UART_SetConfig+0x250>
 80084e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ec:	d008      	beq.n	8008500 <UART_SetConfig+0x260>
 80084ee:	e00f      	b.n	8008510 <UART_SetConfig+0x270>
 80084f0:	2300      	movs	r3, #0
 80084f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084f6:	e012      	b.n	800851e <UART_SetConfig+0x27e>
 80084f8:	2302      	movs	r3, #2
 80084fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084fe:	e00e      	b.n	800851e <UART_SetConfig+0x27e>
 8008500:	2304      	movs	r3, #4
 8008502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008506:	e00a      	b.n	800851e <UART_SetConfig+0x27e>
 8008508:	2308      	movs	r3, #8
 800850a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800850e:	e006      	b.n	800851e <UART_SetConfig+0x27e>
 8008510:	2310      	movs	r3, #16
 8008512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008516:	e002      	b.n	800851e <UART_SetConfig+0x27e>
 8008518:	2310      	movs	r3, #16
 800851a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a17      	ldr	r2, [pc, #92]	; (8008580 <UART_SetConfig+0x2e0>)
 8008524:	4293      	cmp	r3, r2
 8008526:	f040 80a8 	bne.w	800867a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800852a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800852e:	2b08      	cmp	r3, #8
 8008530:	d834      	bhi.n	800859c <UART_SetConfig+0x2fc>
 8008532:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <UART_SetConfig+0x298>)
 8008534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008538:	0800855d 	.word	0x0800855d
 800853c:	0800859d 	.word	0x0800859d
 8008540:	08008565 	.word	0x08008565
 8008544:	0800859d 	.word	0x0800859d
 8008548:	0800856b 	.word	0x0800856b
 800854c:	0800859d 	.word	0x0800859d
 8008550:	0800859d 	.word	0x0800859d
 8008554:	0800859d 	.word	0x0800859d
 8008558:	08008573 	.word	0x08008573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800855c:	f7fd fbdc 	bl	8005d18 <HAL_RCC_GetPCLK1Freq>
 8008560:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008562:	e021      	b.n	80085a8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008564:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <UART_SetConfig+0x2f8>)
 8008566:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008568:	e01e      	b.n	80085a8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800856a:	f7fd fb67 	bl	8005c3c <HAL_RCC_GetSysClockFreq>
 800856e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008570:	e01a      	b.n	80085a8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008578:	e016      	b.n	80085a8 <UART_SetConfig+0x308>
 800857a:	bf00      	nop
 800857c:	cfff69f3 	.word	0xcfff69f3
 8008580:	40008000 	.word	0x40008000
 8008584:	40013800 	.word	0x40013800
 8008588:	40021000 	.word	0x40021000
 800858c:	40004400 	.word	0x40004400
 8008590:	40004800 	.word	0x40004800
 8008594:	40004c00 	.word	0x40004c00
 8008598:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 812a 	beq.w	8008804 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b4:	4a9e      	ldr	r2, [pc, #632]	; (8008830 <UART_SetConfig+0x590>)
 80085b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ba:	461a      	mov	r2, r3
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	fbb3 f3f2 	udiv	r3, r3, r2
 80085c2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	4613      	mov	r3, r2
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	4413      	add	r3, r2
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d305      	bcc.n	80085e0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d903      	bls.n	80085e8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085e6:	e10d      	b.n	8008804 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	2200      	movs	r2, #0
 80085ec:	60bb      	str	r3, [r7, #8]
 80085ee:	60fa      	str	r2, [r7, #12]
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f4:	4a8e      	ldr	r2, [pc, #568]	; (8008830 <UART_SetConfig+0x590>)
 80085f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2200      	movs	r2, #0
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008606:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800860a:	f7f8 fac1 	bl	8000b90 <__aeabi_uldivmod>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4610      	mov	r0, r2
 8008614:	4619      	mov	r1, r3
 8008616:	f04f 0200 	mov.w	r2, #0
 800861a:	f04f 0300 	mov.w	r3, #0
 800861e:	020b      	lsls	r3, r1, #8
 8008620:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008624:	0202      	lsls	r2, r0, #8
 8008626:	6979      	ldr	r1, [r7, #20]
 8008628:	6849      	ldr	r1, [r1, #4]
 800862a:	0849      	lsrs	r1, r1, #1
 800862c:	2000      	movs	r0, #0
 800862e:	460c      	mov	r4, r1
 8008630:	4605      	mov	r5, r0
 8008632:	eb12 0804 	adds.w	r8, r2, r4
 8008636:	eb43 0905 	adc.w	r9, r3, r5
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	469a      	mov	sl, r3
 8008642:	4693      	mov	fp, r2
 8008644:	4652      	mov	r2, sl
 8008646:	465b      	mov	r3, fp
 8008648:	4640      	mov	r0, r8
 800864a:	4649      	mov	r1, r9
 800864c:	f7f8 faa0 	bl	8000b90 <__aeabi_uldivmod>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4613      	mov	r3, r2
 8008656:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800865e:	d308      	bcc.n	8008672 <UART_SetConfig+0x3d2>
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008666:	d204      	bcs.n	8008672 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6a3a      	ldr	r2, [r7, #32]
 800866e:	60da      	str	r2, [r3, #12]
 8008670:	e0c8      	b.n	8008804 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008678:	e0c4      	b.n	8008804 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008682:	d167      	bne.n	8008754 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008688:	2b08      	cmp	r3, #8
 800868a:	d828      	bhi.n	80086de <UART_SetConfig+0x43e>
 800868c:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <UART_SetConfig+0x3f4>)
 800868e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008692:	bf00      	nop
 8008694:	080086b9 	.word	0x080086b9
 8008698:	080086c1 	.word	0x080086c1
 800869c:	080086c9 	.word	0x080086c9
 80086a0:	080086df 	.word	0x080086df
 80086a4:	080086cf 	.word	0x080086cf
 80086a8:	080086df 	.word	0x080086df
 80086ac:	080086df 	.word	0x080086df
 80086b0:	080086df 	.word	0x080086df
 80086b4:	080086d7 	.word	0x080086d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086b8:	f7fd fb2e 	bl	8005d18 <HAL_RCC_GetPCLK1Freq>
 80086bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086be:	e014      	b.n	80086ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086c0:	f7fd fb40 	bl	8005d44 <HAL_RCC_GetPCLK2Freq>
 80086c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086c6:	e010      	b.n	80086ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086c8:	4b5a      	ldr	r3, [pc, #360]	; (8008834 <UART_SetConfig+0x594>)
 80086ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086cc:	e00d      	b.n	80086ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ce:	f7fd fab5 	bl	8005c3c <HAL_RCC_GetSysClockFreq>
 80086d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086d4:	e009      	b.n	80086ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086dc:	e005      	b.n	80086ea <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 8089 	beq.w	8008804 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	4a4e      	ldr	r2, [pc, #312]	; (8008830 <UART_SetConfig+0x590>)
 80086f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086fc:	461a      	mov	r2, r3
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	fbb3 f3f2 	udiv	r3, r3, r2
 8008704:	005a      	lsls	r2, r3, #1
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	085b      	lsrs	r3, r3, #1
 800870c:	441a      	add	r2, r3
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	fbb2 f3f3 	udiv	r3, r2, r3
 8008716:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	2b0f      	cmp	r3, #15
 800871c:	d916      	bls.n	800874c <UART_SetConfig+0x4ac>
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008724:	d212      	bcs.n	800874c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	b29b      	uxth	r3, r3
 800872a:	f023 030f 	bic.w	r3, r3, #15
 800872e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	085b      	lsrs	r3, r3, #1
 8008734:	b29b      	uxth	r3, r3
 8008736:	f003 0307 	and.w	r3, r3, #7
 800873a:	b29a      	uxth	r2, r3
 800873c:	8bfb      	ldrh	r3, [r7, #30]
 800873e:	4313      	orrs	r3, r2
 8008740:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	8bfa      	ldrh	r2, [r7, #30]
 8008748:	60da      	str	r2, [r3, #12]
 800874a:	e05b      	b.n	8008804 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008752:	e057      	b.n	8008804 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008754:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008758:	2b08      	cmp	r3, #8
 800875a:	d828      	bhi.n	80087ae <UART_SetConfig+0x50e>
 800875c:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <UART_SetConfig+0x4c4>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	08008789 	.word	0x08008789
 8008768:	08008791 	.word	0x08008791
 800876c:	08008799 	.word	0x08008799
 8008770:	080087af 	.word	0x080087af
 8008774:	0800879f 	.word	0x0800879f
 8008778:	080087af 	.word	0x080087af
 800877c:	080087af 	.word	0x080087af
 8008780:	080087af 	.word	0x080087af
 8008784:	080087a7 	.word	0x080087a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008788:	f7fd fac6 	bl	8005d18 <HAL_RCC_GetPCLK1Freq>
 800878c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800878e:	e014      	b.n	80087ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008790:	f7fd fad8 	bl	8005d44 <HAL_RCC_GetPCLK2Freq>
 8008794:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008796:	e010      	b.n	80087ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008798:	4b26      	ldr	r3, [pc, #152]	; (8008834 <UART_SetConfig+0x594>)
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800879c:	e00d      	b.n	80087ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800879e:	f7fd fa4d 	bl	8005c3c <HAL_RCC_GetSysClockFreq>
 80087a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087a4:	e009      	b.n	80087ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087ac:	e005      	b.n	80087ba <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087b8:	bf00      	nop
    }

    if (pclk != 0U)
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d021      	beq.n	8008804 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	4a1a      	ldr	r2, [pc, #104]	; (8008830 <UART_SetConfig+0x590>)
 80087c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ca:	461a      	mov	r2, r3
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	441a      	add	r2, r3
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d909      	bls.n	80087fe <UART_SetConfig+0x55e>
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f0:	d205      	bcs.n	80087fe <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60da      	str	r2, [r3, #12]
 80087fc:	e002      	b.n	8008804 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2201      	movs	r2, #1
 8008808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	2201      	movs	r2, #1
 8008810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2200      	movs	r2, #0
 8008818:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2200      	movs	r2, #0
 800881e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008820:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008824:	4618      	mov	r0, r3
 8008826:	3730      	adds	r7, #48	; 0x30
 8008828:	46bd      	mov	sp, r7
 800882a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800882e:	bf00      	nop
 8008830:	08009724 	.word	0x08009724
 8008834:	00f42400 	.word	0x00f42400

08008838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008844:	f003 0308 	and.w	r3, r3, #8
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00a      	beq.n	8008862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00a      	beq.n	8008884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	430a      	orrs	r2, r1
 8008882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00a      	beq.n	80088a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088aa:	f003 0304 	and.w	r3, r3, #4
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00a      	beq.n	80088c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	430a      	orrs	r2, r1
 80088c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	f003 0310 	and.w	r3, r3, #16
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00a      	beq.n	80088ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	f003 0320 	and.w	r3, r3, #32
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01a      	beq.n	800894e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008936:	d10a      	bne.n	800894e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	605a      	str	r2, [r3, #4]
  }
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b098      	sub	sp, #96	; 0x60
 8008980:	af02      	add	r7, sp, #8
 8008982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800898c:	f7fb fa8a 	bl	8003ea4 <HAL_GetTick>
 8008990:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0308 	and.w	r3, r3, #8
 800899c:	2b08      	cmp	r3, #8
 800899e:	d12f      	bne.n	8008a00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089a8:	2200      	movs	r2, #0
 80089aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f88e 	bl	8008ad0 <UART_WaitOnFlagUntilTimeout>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d022      	beq.n	8008a00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ce:	653b      	str	r3, [r7, #80]	; 0x50
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d8:	647b      	str	r3, [r7, #68]	; 0x44
 80089da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e6      	bne.n	80089ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e063      	b.n	8008ac8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0304 	and.w	r3, r3, #4
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	d149      	bne.n	8008aa2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a16:	2200      	movs	r2, #0
 8008a18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f857 	bl	8008ad0 <UART_WaitOnFlagUntilTimeout>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d03c      	beq.n	8008aa2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	623b      	str	r3, [r7, #32]
   return(result);
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a46:	633b      	str	r3, [r7, #48]	; 0x30
 8008a48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e6      	bne.n	8008a28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3308      	adds	r3, #8
 8008a60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3308      	adds	r3, #8
 8008a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a7a:	61fa      	str	r2, [r7, #28]
 8008a7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	69b9      	ldr	r1, [r7, #24]
 8008a80:	69fa      	ldr	r2, [r7, #28]
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	617b      	str	r3, [r7, #20]
   return(result);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e5      	bne.n	8008a5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e012      	b.n	8008ac8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3758      	adds	r7, #88	; 0x58
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	4613      	mov	r3, r2
 8008ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ae0:	e04f      	b.n	8008b82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae8:	d04b      	beq.n	8008b82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aea:	f7fb f9db 	bl	8003ea4 <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d302      	bcc.n	8008b00 <UART_WaitOnFlagUntilTimeout+0x30>
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e04e      	b.n	8008ba2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0304 	and.w	r3, r3, #4
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d037      	beq.n	8008b82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b80      	cmp	r3, #128	; 0x80
 8008b16:	d034      	beq.n	8008b82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b40      	cmp	r3, #64	; 0x40
 8008b1c:	d031      	beq.n	8008b82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	f003 0308 	and.w	r3, r3, #8
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	d110      	bne.n	8008b4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2208      	movs	r2, #8
 8008b32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 f838 	bl	8008baa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2208      	movs	r2, #8
 8008b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e029      	b.n	8008ba2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b5c:	d111      	bne.n	8008b82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 f81e 	bl	8008baa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2220      	movs	r2, #32
 8008b72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e00f      	b.n	8008ba2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69da      	ldr	r2, [r3, #28]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	bf0c      	ite	eq
 8008b92:	2301      	moveq	r3, #1
 8008b94:	2300      	movne	r3, #0
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	461a      	mov	r2, r3
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d0a0      	beq.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b095      	sub	sp, #84	; 0x54
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bba:	e853 3f00 	ldrex	r3, [r3]
 8008bbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8008bd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bd8:	e841 2300 	strex	r3, r2, [r1]
 8008bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e6      	bne.n	8008bb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3308      	adds	r3, #8
 8008bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	e853 3f00 	ldrex	r3, [r3]
 8008bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bfa:	f023 0301 	bic.w	r3, r3, #1
 8008bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3308      	adds	r3, #8
 8008c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e3      	bne.n	8008be4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d118      	bne.n	8008c56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	e853 3f00 	ldrex	r3, [r3]
 8008c30:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	f023 0310 	bic.w	r3, r3, #16
 8008c38:	647b      	str	r3, [r7, #68]	; 0x44
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	6979      	ldr	r1, [r7, #20]
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e6      	bne.n	8008c24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c6a:	bf00      	nop
 8008c6c:	3754      	adds	r7, #84	; 0x54
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d101      	bne.n	8008c8c <HAL_UARTEx_DisableFifoMode+0x16>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	e027      	b.n	8008cdc <HAL_UARTEx_DisableFifoMode+0x66>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2224      	movs	r2, #36	; 0x24
 8008c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0201 	bic.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008cba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d101      	bne.n	8008d00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	e02d      	b.n	8008d5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2224      	movs	r2, #36	; 0x24
 8008d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f022 0201 	bic.w	r2, r2, #1
 8008d26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f84f 	bl	8008de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d101      	bne.n	8008d7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	e02d      	b.n	8008dd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2224      	movs	r2, #36	; 0x24
 8008d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f022 0201 	bic.w	r2, r2, #1
 8008da2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f811 	bl	8008de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d108      	bne.n	8008e02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e00:	e031      	b.n	8008e66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e02:	2308      	movs	r3, #8
 8008e04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e06:	2308      	movs	r3, #8
 8008e08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	0e5b      	lsrs	r3, r3, #25
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	0f5b      	lsrs	r3, r3, #29
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	7b3a      	ldrb	r2, [r7, #12]
 8008e2e:	4911      	ldr	r1, [pc, #68]	; (8008e74 <UARTEx_SetNbDataToProcess+0x94>)
 8008e30:	5c8a      	ldrb	r2, [r1, r2]
 8008e32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e36:	7b3a      	ldrb	r2, [r7, #12]
 8008e38:	490f      	ldr	r1, [pc, #60]	; (8008e78 <UARTEx_SetNbDataToProcess+0x98>)
 8008e3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	7b7a      	ldrb	r2, [r7, #13]
 8008e4c:	4909      	ldr	r1, [pc, #36]	; (8008e74 <UARTEx_SetNbDataToProcess+0x94>)
 8008e4e:	5c8a      	ldrb	r2, [r1, r2]
 8008e50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e54:	7b7a      	ldrb	r2, [r7, #13]
 8008e56:	4908      	ldr	r1, [pc, #32]	; (8008e78 <UARTEx_SetNbDataToProcess+0x98>)
 8008e58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e66:	bf00      	nop
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	0800973c 	.word	0x0800973c
 8008e78:	08009744 	.word	0x08009744

08008e7c <memset>:
 8008e7c:	4402      	add	r2, r0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d100      	bne.n	8008e86 <memset+0xa>
 8008e84:	4770      	bx	lr
 8008e86:	f803 1b01 	strb.w	r1, [r3], #1
 8008e8a:	e7f9      	b.n	8008e80 <memset+0x4>

08008e8c <__errno>:
 8008e8c:	4b01      	ldr	r3, [pc, #4]	; (8008e94 <__errno+0x8>)
 8008e8e:	6818      	ldr	r0, [r3, #0]
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	20000084 	.word	0x20000084

08008e98 <__libc_init_array>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	4d0d      	ldr	r5, [pc, #52]	; (8008ed0 <__libc_init_array+0x38>)
 8008e9c:	4c0d      	ldr	r4, [pc, #52]	; (8008ed4 <__libc_init_array+0x3c>)
 8008e9e:	1b64      	subs	r4, r4, r5
 8008ea0:	10a4      	asrs	r4, r4, #2
 8008ea2:	2600      	movs	r6, #0
 8008ea4:	42a6      	cmp	r6, r4
 8008ea6:	d109      	bne.n	8008ebc <__libc_init_array+0x24>
 8008ea8:	4d0b      	ldr	r5, [pc, #44]	; (8008ed8 <__libc_init_array+0x40>)
 8008eaa:	4c0c      	ldr	r4, [pc, #48]	; (8008edc <__libc_init_array+0x44>)
 8008eac:	f000 fa1a 	bl	80092e4 <_init>
 8008eb0:	1b64      	subs	r4, r4, r5
 8008eb2:	10a4      	asrs	r4, r4, #2
 8008eb4:	2600      	movs	r6, #0
 8008eb6:	42a6      	cmp	r6, r4
 8008eb8:	d105      	bne.n	8008ec6 <__libc_init_array+0x2e>
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec0:	4798      	blx	r3
 8008ec2:	3601      	adds	r6, #1
 8008ec4:	e7ee      	b.n	8008ea4 <__libc_init_array+0xc>
 8008ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eca:	4798      	blx	r3
 8008ecc:	3601      	adds	r6, #1
 8008ece:	e7f2      	b.n	8008eb6 <__libc_init_array+0x1e>
 8008ed0:	08009758 	.word	0x08009758
 8008ed4:	08009758 	.word	0x08009758
 8008ed8:	08009758 	.word	0x08009758
 8008edc:	0800975c 	.word	0x0800975c

08008ee0 <log>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	ed2d 8b02 	vpush	{d8}
 8008ee6:	ec55 4b10 	vmov	r4, r5, d0
 8008eea:	f000 f841 	bl	8008f70 <__ieee754_log>
 8008eee:	4622      	mov	r2, r4
 8008ef0:	462b      	mov	r3, r5
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	eeb0 8a40 	vmov.f32	s16, s0
 8008efa:	eef0 8a60 	vmov.f32	s17, s1
 8008efe:	f7f7 fde1 	bl	8000ac4 <__aeabi_dcmpun>
 8008f02:	b998      	cbnz	r0, 8008f2c <log+0x4c>
 8008f04:	2200      	movs	r2, #0
 8008f06:	2300      	movs	r3, #0
 8008f08:	4620      	mov	r0, r4
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	f7f7 fdd0 	bl	8000ab0 <__aeabi_dcmpgt>
 8008f10:	b960      	cbnz	r0, 8008f2c <log+0x4c>
 8008f12:	2200      	movs	r2, #0
 8008f14:	2300      	movs	r3, #0
 8008f16:	4620      	mov	r0, r4
 8008f18:	4629      	mov	r1, r5
 8008f1a:	f7f7 fda1 	bl	8000a60 <__aeabi_dcmpeq>
 8008f1e:	b160      	cbz	r0, 8008f3a <log+0x5a>
 8008f20:	f7ff ffb4 	bl	8008e8c <__errno>
 8008f24:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8008f50 <log+0x70>
 8008f28:	2322      	movs	r3, #34	; 0x22
 8008f2a:	6003      	str	r3, [r0, #0]
 8008f2c:	eeb0 0a48 	vmov.f32	s0, s16
 8008f30:	eef0 0a68 	vmov.f32	s1, s17
 8008f34:	ecbd 8b02 	vpop	{d8}
 8008f38:	bd38      	pop	{r3, r4, r5, pc}
 8008f3a:	f7ff ffa7 	bl	8008e8c <__errno>
 8008f3e:	ecbd 8b02 	vpop	{d8}
 8008f42:	2321      	movs	r3, #33	; 0x21
 8008f44:	6003      	str	r3, [r0, #0]
 8008f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f4a:	4803      	ldr	r0, [pc, #12]	; (8008f58 <log+0x78>)
 8008f4c:	f000 b808 	b.w	8008f60 <nan>
 8008f50:	00000000 	.word	0x00000000
 8008f54:	fff00000 	.word	0xfff00000
 8008f58:	0800974c 	.word	0x0800974c
 8008f5c:	00000000 	.word	0x00000000

08008f60 <nan>:
 8008f60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f68 <nan+0x8>
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	00000000 	.word	0x00000000
 8008f6c:	7ff80000 	.word	0x7ff80000

08008f70 <__ieee754_log>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	ec51 0b10 	vmov	r0, r1, d0
 8008f78:	ed2d 8b04 	vpush	{d8-d9}
 8008f7c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008f80:	b083      	sub	sp, #12
 8008f82:	460d      	mov	r5, r1
 8008f84:	da29      	bge.n	8008fda <__ieee754_log+0x6a>
 8008f86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f8a:	4303      	orrs	r3, r0
 8008f8c:	ee10 2a10 	vmov	r2, s0
 8008f90:	d10c      	bne.n	8008fac <__ieee754_log+0x3c>
 8008f92:	49cf      	ldr	r1, [pc, #828]	; (80092d0 <__ieee754_log+0x360>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	2300      	movs	r3, #0
 8008f98:	2000      	movs	r0, #0
 8008f9a:	f7f7 fc23 	bl	80007e4 <__aeabi_ddiv>
 8008f9e:	ec41 0b10 	vmov	d0, r0, r1
 8008fa2:	b003      	add	sp, #12
 8008fa4:	ecbd 8b04 	vpop	{d8-d9}
 8008fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fac:	2900      	cmp	r1, #0
 8008fae:	da05      	bge.n	8008fbc <__ieee754_log+0x4c>
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	f7f7 f935 	bl	8000220 <__aeabi_dsub>
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	2300      	movs	r3, #0
 8008fba:	e7ee      	b.n	8008f9a <__ieee754_log+0x2a>
 8008fbc:	4bc5      	ldr	r3, [pc, #788]	; (80092d4 <__ieee754_log+0x364>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f7f7 fae6 	bl	8000590 <__aeabi_dmul>
 8008fc4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008fc8:	460d      	mov	r5, r1
 8008fca:	4ac3      	ldr	r2, [pc, #780]	; (80092d8 <__ieee754_log+0x368>)
 8008fcc:	4295      	cmp	r5, r2
 8008fce:	dd06      	ble.n	8008fde <__ieee754_log+0x6e>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	f7f7 f926 	bl	8000224 <__adddf3>
 8008fd8:	e7e1      	b.n	8008f9e <__ieee754_log+0x2e>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	e7f5      	b.n	8008fca <__ieee754_log+0x5a>
 8008fde:	152c      	asrs	r4, r5, #20
 8008fe0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008fe4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008fe8:	441c      	add	r4, r3
 8008fea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008fee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ff6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008ffa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008ffe:	ea42 0105 	orr.w	r1, r2, r5
 8009002:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009006:	2200      	movs	r2, #0
 8009008:	4bb4      	ldr	r3, [pc, #720]	; (80092dc <__ieee754_log+0x36c>)
 800900a:	f7f7 f909 	bl	8000220 <__aeabi_dsub>
 800900e:	1cab      	adds	r3, r5, #2
 8009010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009014:	2b02      	cmp	r3, #2
 8009016:	4682      	mov	sl, r0
 8009018:	468b      	mov	fp, r1
 800901a:	f04f 0200 	mov.w	r2, #0
 800901e:	dc53      	bgt.n	80090c8 <__ieee754_log+0x158>
 8009020:	2300      	movs	r3, #0
 8009022:	f7f7 fd1d 	bl	8000a60 <__aeabi_dcmpeq>
 8009026:	b1d0      	cbz	r0, 800905e <__ieee754_log+0xee>
 8009028:	2c00      	cmp	r4, #0
 800902a:	f000 8122 	beq.w	8009272 <__ieee754_log+0x302>
 800902e:	4620      	mov	r0, r4
 8009030:	f7f7 fa44 	bl	80004bc <__aeabi_i2d>
 8009034:	a390      	add	r3, pc, #576	; (adr r3, 8009278 <__ieee754_log+0x308>)
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	4606      	mov	r6, r0
 800903c:	460f      	mov	r7, r1
 800903e:	f7f7 faa7 	bl	8000590 <__aeabi_dmul>
 8009042:	a38f      	add	r3, pc, #572	; (adr r3, 8009280 <__ieee754_log+0x310>)
 8009044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009048:	4604      	mov	r4, r0
 800904a:	460d      	mov	r5, r1
 800904c:	4630      	mov	r0, r6
 800904e:	4639      	mov	r1, r7
 8009050:	f7f7 fa9e 	bl	8000590 <__aeabi_dmul>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4620      	mov	r0, r4
 800905a:	4629      	mov	r1, r5
 800905c:	e7ba      	b.n	8008fd4 <__ieee754_log+0x64>
 800905e:	a38a      	add	r3, pc, #552	; (adr r3, 8009288 <__ieee754_log+0x318>)
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	4650      	mov	r0, sl
 8009066:	4659      	mov	r1, fp
 8009068:	f7f7 fa92 	bl	8000590 <__aeabi_dmul>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	2000      	movs	r0, #0
 8009072:	499b      	ldr	r1, [pc, #620]	; (80092e0 <__ieee754_log+0x370>)
 8009074:	f7f7 f8d4 	bl	8000220 <__aeabi_dsub>
 8009078:	4652      	mov	r2, sl
 800907a:	4606      	mov	r6, r0
 800907c:	460f      	mov	r7, r1
 800907e:	465b      	mov	r3, fp
 8009080:	4650      	mov	r0, sl
 8009082:	4659      	mov	r1, fp
 8009084:	f7f7 fa84 	bl	8000590 <__aeabi_dmul>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	4630      	mov	r0, r6
 800908e:	4639      	mov	r1, r7
 8009090:	f7f7 fa7e 	bl	8000590 <__aeabi_dmul>
 8009094:	4606      	mov	r6, r0
 8009096:	460f      	mov	r7, r1
 8009098:	b914      	cbnz	r4, 80090a0 <__ieee754_log+0x130>
 800909a:	4632      	mov	r2, r6
 800909c:	463b      	mov	r3, r7
 800909e:	e0a2      	b.n	80091e6 <__ieee754_log+0x276>
 80090a0:	4620      	mov	r0, r4
 80090a2:	f7f7 fa0b 	bl	80004bc <__aeabi_i2d>
 80090a6:	a374      	add	r3, pc, #464	; (adr r3, 8009278 <__ieee754_log+0x308>)
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	4680      	mov	r8, r0
 80090ae:	4689      	mov	r9, r1
 80090b0:	f7f7 fa6e 	bl	8000590 <__aeabi_dmul>
 80090b4:	a372      	add	r3, pc, #456	; (adr r3, 8009280 <__ieee754_log+0x310>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	4604      	mov	r4, r0
 80090bc:	460d      	mov	r5, r1
 80090be:	4640      	mov	r0, r8
 80090c0:	4649      	mov	r1, r9
 80090c2:	f7f7 fa65 	bl	8000590 <__aeabi_dmul>
 80090c6:	e0a7      	b.n	8009218 <__ieee754_log+0x2a8>
 80090c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090cc:	f7f7 f8aa 	bl	8000224 <__adddf3>
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	4650      	mov	r0, sl
 80090d6:	4659      	mov	r1, fp
 80090d8:	f7f7 fb84 	bl	80007e4 <__aeabi_ddiv>
 80090dc:	ec41 0b18 	vmov	d8, r0, r1
 80090e0:	4620      	mov	r0, r4
 80090e2:	f7f7 f9eb 	bl	80004bc <__aeabi_i2d>
 80090e6:	ec53 2b18 	vmov	r2, r3, d8
 80090ea:	ec41 0b19 	vmov	d9, r0, r1
 80090ee:	ec51 0b18 	vmov	r0, r1, d8
 80090f2:	f7f7 fa4d 	bl	8000590 <__aeabi_dmul>
 80090f6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80090fa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4680      	mov	r8, r0
 8009106:	4689      	mov	r9, r1
 8009108:	f7f7 fa42 	bl	8000590 <__aeabi_dmul>
 800910c:	a360      	add	r3, pc, #384	; (adr r3, 8009290 <__ieee754_log+0x320>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	4606      	mov	r6, r0
 8009114:	460f      	mov	r7, r1
 8009116:	f7f7 fa3b 	bl	8000590 <__aeabi_dmul>
 800911a:	a35f      	add	r3, pc, #380	; (adr r3, 8009298 <__ieee754_log+0x328>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	f7f7 f880 	bl	8000224 <__adddf3>
 8009124:	4632      	mov	r2, r6
 8009126:	463b      	mov	r3, r7
 8009128:	f7f7 fa32 	bl	8000590 <__aeabi_dmul>
 800912c:	a35c      	add	r3, pc, #368	; (adr r3, 80092a0 <__ieee754_log+0x330>)
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	f7f7 f877 	bl	8000224 <__adddf3>
 8009136:	4632      	mov	r2, r6
 8009138:	463b      	mov	r3, r7
 800913a:	f7f7 fa29 	bl	8000590 <__aeabi_dmul>
 800913e:	a35a      	add	r3, pc, #360	; (adr r3, 80092a8 <__ieee754_log+0x338>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 f86e 	bl	8000224 <__adddf3>
 8009148:	4642      	mov	r2, r8
 800914a:	464b      	mov	r3, r9
 800914c:	f7f7 fa20 	bl	8000590 <__aeabi_dmul>
 8009150:	a357      	add	r3, pc, #348	; (adr r3, 80092b0 <__ieee754_log+0x340>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	4680      	mov	r8, r0
 8009158:	4689      	mov	r9, r1
 800915a:	4630      	mov	r0, r6
 800915c:	4639      	mov	r1, r7
 800915e:	f7f7 fa17 	bl	8000590 <__aeabi_dmul>
 8009162:	a355      	add	r3, pc, #340	; (adr r3, 80092b8 <__ieee754_log+0x348>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f7 f85c 	bl	8000224 <__adddf3>
 800916c:	4632      	mov	r2, r6
 800916e:	463b      	mov	r3, r7
 8009170:	f7f7 fa0e 	bl	8000590 <__aeabi_dmul>
 8009174:	a352      	add	r3, pc, #328	; (adr r3, 80092c0 <__ieee754_log+0x350>)
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	f7f7 f853 	bl	8000224 <__adddf3>
 800917e:	4632      	mov	r2, r6
 8009180:	463b      	mov	r3, r7
 8009182:	f7f7 fa05 	bl	8000590 <__aeabi_dmul>
 8009186:	460b      	mov	r3, r1
 8009188:	4602      	mov	r2, r0
 800918a:	4649      	mov	r1, r9
 800918c:	4640      	mov	r0, r8
 800918e:	f7f7 f849 	bl	8000224 <__adddf3>
 8009192:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009196:	9b01      	ldr	r3, [sp, #4]
 8009198:	3551      	adds	r5, #81	; 0x51
 800919a:	431d      	orrs	r5, r3
 800919c:	2d00      	cmp	r5, #0
 800919e:	4680      	mov	r8, r0
 80091a0:	4689      	mov	r9, r1
 80091a2:	dd48      	ble.n	8009236 <__ieee754_log+0x2c6>
 80091a4:	4b4e      	ldr	r3, [pc, #312]	; (80092e0 <__ieee754_log+0x370>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	4650      	mov	r0, sl
 80091aa:	4659      	mov	r1, fp
 80091ac:	f7f7 f9f0 	bl	8000590 <__aeabi_dmul>
 80091b0:	4652      	mov	r2, sl
 80091b2:	465b      	mov	r3, fp
 80091b4:	f7f7 f9ec 	bl	8000590 <__aeabi_dmul>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	4606      	mov	r6, r0
 80091be:	460f      	mov	r7, r1
 80091c0:	4640      	mov	r0, r8
 80091c2:	4649      	mov	r1, r9
 80091c4:	f7f7 f82e 	bl	8000224 <__adddf3>
 80091c8:	ec53 2b18 	vmov	r2, r3, d8
 80091cc:	f7f7 f9e0 	bl	8000590 <__aeabi_dmul>
 80091d0:	4680      	mov	r8, r0
 80091d2:	4689      	mov	r9, r1
 80091d4:	b964      	cbnz	r4, 80091f0 <__ieee754_log+0x280>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4630      	mov	r0, r6
 80091dc:	4639      	mov	r1, r7
 80091de:	f7f7 f81f 	bl	8000220 <__aeabi_dsub>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4650      	mov	r0, sl
 80091e8:	4659      	mov	r1, fp
 80091ea:	f7f7 f819 	bl	8000220 <__aeabi_dsub>
 80091ee:	e6d6      	b.n	8008f9e <__ieee754_log+0x2e>
 80091f0:	a321      	add	r3, pc, #132	; (adr r3, 8009278 <__ieee754_log+0x308>)
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	ec51 0b19 	vmov	r0, r1, d9
 80091fa:	f7f7 f9c9 	bl	8000590 <__aeabi_dmul>
 80091fe:	a320      	add	r3, pc, #128	; (adr r3, 8009280 <__ieee754_log+0x310>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	4604      	mov	r4, r0
 8009206:	460d      	mov	r5, r1
 8009208:	ec51 0b19 	vmov	r0, r1, d9
 800920c:	f7f7 f9c0 	bl	8000590 <__aeabi_dmul>
 8009210:	4642      	mov	r2, r8
 8009212:	464b      	mov	r3, r9
 8009214:	f7f7 f806 	bl	8000224 <__adddf3>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4630      	mov	r0, r6
 800921e:	4639      	mov	r1, r7
 8009220:	f7f6 fffe 	bl	8000220 <__aeabi_dsub>
 8009224:	4652      	mov	r2, sl
 8009226:	465b      	mov	r3, fp
 8009228:	f7f6 fffa 	bl	8000220 <__aeabi_dsub>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4620      	mov	r0, r4
 8009232:	4629      	mov	r1, r5
 8009234:	e7d9      	b.n	80091ea <__ieee754_log+0x27a>
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	4650      	mov	r0, sl
 800923c:	4659      	mov	r1, fp
 800923e:	f7f6 ffef 	bl	8000220 <__aeabi_dsub>
 8009242:	ec53 2b18 	vmov	r2, r3, d8
 8009246:	f7f7 f9a3 	bl	8000590 <__aeabi_dmul>
 800924a:	4606      	mov	r6, r0
 800924c:	460f      	mov	r7, r1
 800924e:	2c00      	cmp	r4, #0
 8009250:	f43f af23 	beq.w	800909a <__ieee754_log+0x12a>
 8009254:	a308      	add	r3, pc, #32	; (adr r3, 8009278 <__ieee754_log+0x308>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	ec51 0b19 	vmov	r0, r1, d9
 800925e:	f7f7 f997 	bl	8000590 <__aeabi_dmul>
 8009262:	a307      	add	r3, pc, #28	; (adr r3, 8009280 <__ieee754_log+0x310>)
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	4604      	mov	r4, r0
 800926a:	460d      	mov	r5, r1
 800926c:	ec51 0b19 	vmov	r0, r1, d9
 8009270:	e727      	b.n	80090c2 <__ieee754_log+0x152>
 8009272:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80092c8 <__ieee754_log+0x358>
 8009276:	e694      	b.n	8008fa2 <__ieee754_log+0x32>
 8009278:	fee00000 	.word	0xfee00000
 800927c:	3fe62e42 	.word	0x3fe62e42
 8009280:	35793c76 	.word	0x35793c76
 8009284:	3dea39ef 	.word	0x3dea39ef
 8009288:	55555555 	.word	0x55555555
 800928c:	3fd55555 	.word	0x3fd55555
 8009290:	df3e5244 	.word	0xdf3e5244
 8009294:	3fc2f112 	.word	0x3fc2f112
 8009298:	96cb03de 	.word	0x96cb03de
 800929c:	3fc74664 	.word	0x3fc74664
 80092a0:	94229359 	.word	0x94229359
 80092a4:	3fd24924 	.word	0x3fd24924
 80092a8:	55555593 	.word	0x55555593
 80092ac:	3fe55555 	.word	0x3fe55555
 80092b0:	d078c69f 	.word	0xd078c69f
 80092b4:	3fc39a09 	.word	0x3fc39a09
 80092b8:	1d8e78af 	.word	0x1d8e78af
 80092bc:	3fcc71c5 	.word	0x3fcc71c5
 80092c0:	9997fa04 	.word	0x9997fa04
 80092c4:	3fd99999 	.word	0x3fd99999
	...
 80092d0:	c3500000 	.word	0xc3500000
 80092d4:	43500000 	.word	0x43500000
 80092d8:	7fefffff 	.word	0x7fefffff
 80092dc:	3ff00000 	.word	0x3ff00000
 80092e0:	3fe00000 	.word	0x3fe00000

080092e4 <_init>:
 80092e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e6:	bf00      	nop
 80092e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ea:	bc08      	pop	{r3}
 80092ec:	469e      	mov	lr, r3
 80092ee:	4770      	bx	lr

080092f0 <_fini>:
 80092f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f2:	bf00      	nop
 80092f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f6:	bc08      	pop	{r3}
 80092f8:	469e      	mov	lr, r3
 80092fa:	4770      	bx	lr
