
dev_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000491c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b44  08004b44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b4c  08004b4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b50  08004b50  00014b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000000c  08004b60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004b60  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a76  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002846  00000000  00000000  00037ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003b710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002bb8  00000000  00000000  0003ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166dd  00000000  00000000  0003f5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cde4c  00000000  00000000  00055cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123b11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d0  00000000  00000000  00123b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004adc 	.word	0x08004adc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004adc 	.word	0x08004adc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <ReadCANBusMessage>:
	}

}

int ReadCANBusMessage(uint32_t messageIdentifier, uint8_t* RxData1)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
    /* Infinite loop to keep trying to read the message */
	uint8_t t = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	73fb      	strb	r3, [r7, #15]

    while(t < 100)
 800052a:	e015      	b.n	8000558 <ReadCANBusMessage+0x3c>
    {
    	t++;
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	3301      	adds	r3, #1
 8000530:	73fb      	strb	r3, [r7, #15]
        /* Check if a new message is available in RX FIFO 0 */
        if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData1) == HAL_OK)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <ReadCANBusMessage+0x4c>)
 8000536:	2140      	movs	r1, #64	; 0x40
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <ReadCANBusMessage+0x50>)
 800053a:	f001 f8a1 	bl	8001680 <HAL_FDCAN_GetRxMessage>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d109      	bne.n	8000558 <ReadCANBusMessage+0x3c>
        {
            /* Validate the Identifier */
            if(RxHeader.Identifier == messageIdentifier)
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <ReadCANBusMessage+0x4c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	429a      	cmp	r2, r3
 800054c:	d101      	bne.n	8000552 <ReadCANBusMessage+0x36>
            {
                return 0; // Message successfully read and validated
 800054e:	2300      	movs	r3, #0
 8000550:	e006      	b.n	8000560 <ReadCANBusMessage+0x44>
            }
            delay_u(10);
 8000552:	200a      	movs	r0, #10
 8000554:	f000 f80c 	bl	8000570 <delay_u>
    while(t < 100)
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	2b63      	cmp	r3, #99	; 0x63
 800055c:	d9e6      	bls.n	800052c <ReadCANBusMessage+0x10>
        }
        // Else, ignore the error and try again
    }
    return 1;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200001f0 	.word	0x200001f0
 800056c:	20000028 	.word	0x20000028

08000570 <delay_u>:
#include "conf.h"

extern SPI_HandleTypeDef hspi1;


void delay_u(uint32_t us){
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <delay_u+0x58>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <delay_u+0x58>)
 800057e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000582:	60d3      	str	r3, [r2, #12]
		    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <delay_u+0x5c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a10      	ldr	r2, [pc, #64]	; (80005cc <delay_u+0x5c>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6013      	str	r3, [r2, #0]
		    // Get the current number of clock cycles
		    uint32_t const startTicks = DWT->CYCCNT;
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <delay_u+0x5c>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	60fb      	str	r3, [r7, #12]
		    // Calculate the number of clock cycles for the desired delay
		    uint32_t const delayTicks = (SystemCoreClock / 1000000) * us;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <delay_u+0x60>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <delay_u+0x64>)
 800059c:	fba2 2303 	umull	r2, r3, r2, r3
 80005a0:	0c9a      	lsrs	r2, r3, #18
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	fb02 f303 	mul.w	r3, r2, r3
 80005a8:	60bb      	str	r3, [r7, #8]
		    // Wait until the number of clock cycles has elapsed
		    while (DWT->CYCCNT - startTicks < delayTicks);
 80005aa:	bf00      	nop
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <delay_u+0x5c>)
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d8f8      	bhi.n	80005ac <delay_u+0x3c>
}
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	e000edf0 	.word	0xe000edf0
 80005cc:	e0001000 	.word	0xe0001000
 80005d0:	20000000 	.word	0x20000000
 80005d4:	431bde83 	.word	0x431bde83

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fc92 	bl	8000f06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f815 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fa59 	bl	8000a9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ea:	f000 fa0b 	bl	8000a04 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005ee:	f000 f91b 	bl	8000828 <MX_SPI1_Init>
  MX_TIM8_Init();
 80005f2:	f000 f957 	bl	80008a4 <MX_TIM8_Init>
  MX_FDCAN1_Init();
 80005f6:	f000 f84b 	bl	8000690 <MX_FDCAN1_Init>
  while (1)
    {
      // Here we create a FDCAN message

	  uint8_t RxData[8];
	  ReadCANBusMessage(0x602, &RxData);
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	f240 6002 	movw	r0, #1538	; 0x602
 8000602:	f7ff ff8b 	bl	800051c <ReadCANBusMessage>
	  HAL_Delay(500);
 8000606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060a:	f000 fced 	bl	8000fe8 <HAL_Delay>
    {
 800060e:	e7f4      	b.n	80005fa <main+0x22>

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2238      	movs	r2, #56	; 0x38
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fa54 	bl	8004acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000636:	f001 fbd3 	bl	8001de0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063a:	2302      	movs	r3, #2
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2340      	movs	r3, #64	; 0x40
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fc69 	bl	8001f28 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800065c:	f000 fa78 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000664:	2301      	movs	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f001 ff6d 	bl	8002558 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000684:	f000 fa64 	bl	8000b50 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	; 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000696:	4b61      	ldr	r3, [pc, #388]	; (800081c <MX_FDCAN1_Init+0x18c>)
 8000698:	4a61      	ldr	r2, [pc, #388]	; (8000820 <MX_FDCAN1_Init+0x190>)
 800069a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800069c:	4b5f      	ldr	r3, [pc, #380]	; (800081c <MX_FDCAN1_Init+0x18c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006a2:	4b5e      	ldr	r3, [pc, #376]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006a8:	4b5c      	ldr	r3, [pc, #368]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80006ae:	4b5b      	ldr	r3, [pc, #364]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006b4:	4b59      	ldr	r3, [pc, #356]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006ba:	4b58      	ldr	r3, [pc, #352]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80006c0:	4b56      	ldr	r3, [pc, #344]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006c6:	4b55      	ldr	r3, [pc, #340]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80006cc:	4b53      	ldr	r3, [pc, #332]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006ce:	220d      	movs	r2, #13
 80006d0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80006d2:	4b52      	ldr	r3, [pc, #328]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006d8:	4b50      	ldr	r3, [pc, #320]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006da:	2201      	movs	r2, #1
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006de:	4b4f      	ldr	r3, [pc, #316]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80006e4:	4b4d      	ldr	r3, [pc, #308]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80006ea:	4b4c      	ldr	r3, [pc, #304]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 80006f0:	4b4a      	ldr	r3, [pc, #296]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006f2:	221c      	movs	r2, #28
 80006f4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006f6:	4b49      	ldr	r3, [pc, #292]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006fc:	4b47      	ldr	r3, [pc, #284]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000702:	4846      	ldr	r0, [pc, #280]	; (800081c <MX_FDCAN1_Init+0x18c>)
 8000704:	f000 fd76 	bl	80011f4 <HAL_FDCAN_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800070e:	f000 fa1f 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef	sFilterConfig;

  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan1, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8000712:	2201      	movs	r2, #1
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	4841      	ldr	r0, [pc, #260]	; (800081c <MX_FDCAN1_Init+0x18c>)
 8000718:	f000 ff51 	bl	80015be <HAL_FDCAN_ConfigRxFifoOverwrite>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_FDCAN1_Init+0x96>
  	{
  		Error_Handler();
 8000722:	f000 fa15 	bl	8000b50 <Error_Handler>
  	}
  	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan1, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8000726:	2201      	movs	r2, #1
 8000728:	2141      	movs	r1, #65	; 0x41
 800072a:	483c      	ldr	r0, [pc, #240]	; (800081c <MX_FDCAN1_Init+0x18c>)
 800072c:	f000 ff47 	bl	80015be <HAL_FDCAN_ConfigRxFifoOverwrite>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_FDCAN1_Init+0xaa>
  	{
  		Error_Handler();
 8000736:	f000 fa0b 	bl	8000b50 <Error_Handler>
  	}

    //only accept config/request can messages and sync can messages
  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIndex = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000742:	2302      	movs	r3, #2
 8000744:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterID1 = 1900; //CANID_CONFIG;
 800074a:	f240 736c 	movw	r3, #1900	; 0x76c
 800074e:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterID2 = 0x7FF;
 8000750:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000754:	617b      	str	r3, [r7, #20]
  	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4619      	mov	r1, r3
 800075a:	4830      	ldr	r0, [pc, #192]	; (800081c <MX_FDCAN1_Init+0x18c>)
 800075c:	f000 fea4 	bl	80014a8 <HAL_FDCAN_ConfigFilter>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_FDCAN1_Init+0xda>
  	{
  		Error_Handler();
 8000766:	f000 f9f3 	bl	8000b50 <Error_Handler>
  	}

    // Additional filter configuration for 0x52x messages
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000772:	2302      	movs	r3, #2
 8000774:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x520;   // Start of the range
 800077a:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800077e:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x700;   // Mask for the filter. This will allow IDs 0x520 - 0x52F
 8000780:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000784:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4824      	ldr	r0, [pc, #144]	; (800081c <MX_FDCAN1_Init+0x18c>)
 800078c:	f000 fe8c 	bl	80014a8 <HAL_FDCAN_ConfigFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_FDCAN1_Init+0x10a>
    {
        Error_Handler();
 8000796:	f000 f9db 	bl	8000b50 <Error_Handler>
    }

  	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 800079a:	2301      	movs	r3, #1
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2301      	movs	r3, #1
 80007a0:	2202      	movs	r2, #2
 80007a2:	2102      	movs	r1, #2
 80007a4:	481d      	ldr	r0, [pc, #116]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80007a6:	f000 fed9 	bl	800155c <HAL_FDCAN_ConfigGlobalFilter>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_FDCAN1_Init+0x124>
  	{
  		Error_Handler();
 80007b0:	f000 f9ce 	bl	8000b50 <Error_Handler>
  	}

  	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80007b4:	4819      	ldr	r0, [pc, #100]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80007b6:	f000 ff3b 	bl	8001630 <HAL_FDCAN_Start>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_FDCAN1_Init+0x134>
  	{
  		Error_Handler();
 80007c0:	f000 f9c6 	bl	8000b50 <Error_Handler>
  	}
  	if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80007c4:	2200      	movs	r2, #0
 80007c6:	2101      	movs	r1, #1
 80007c8:	4814      	ldr	r0, [pc, #80]	; (800081c <MX_FDCAN1_Init+0x18c>)
 80007ca:	f001 f833 	bl	8001834 <HAL_FDCAN_ActivateNotification>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_FDCAN1_Init+0x148>
  	{
  		Error_Handler();
 80007d4:	f000 f9bc 	bl	8000b50 <Error_Handler>
  	}

  	TxHeader.Identifier = 0x123; // Modify this with your identifier
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_FDCAN1_Init+0x194>)
 80007da:	f240 1223 	movw	r2, #291	; 0x123
 80007de:	601a      	str	r2, [r3, #0]
  	TxHeader.IdType = FDCAN_STANDARD_ID;
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_FDCAN1_Init+0x194>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_FDCAN1_Init+0x194>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_FDCAN1_Init+0x194>)
 80007ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007f2:	60da      	str	r2, [r3, #12]
  	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_FDCAN1_Init+0x194>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_FDCAN1_Init+0x194>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_FDCAN1_Init+0x194>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_FDCAN1_Init+0x194>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  	TxHeader.MessageMarker = 0;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <MX_FDCAN1_Init+0x194>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000028 	.word	0x20000028
 8000820:	40006400 	.word	0x40006400
 8000824:	200001cc 	.word	0x200001cc

08000828 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_SPI1_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_SPI1_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_SPI1_Init+0x74>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_SPI1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_SPI1_Init+0x74>)
 8000842:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000846:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_SPI1_Init+0x74>)
 800084a:	2202      	movs	r2, #2
 800084c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_SPI1_Init+0x74>)
 8000850:	2201      	movs	r2, #1
 8000852:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_SPI1_Init+0x74>)
 8000856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800085a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_SPI1_Init+0x74>)
 800085e:	2238      	movs	r2, #56	; 0x38
 8000860:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_SPI1_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_SPI1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_SPI1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_SPI1_Init+0x74>)
 8000876:	2207      	movs	r2, #7
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_SPI1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_SPI1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_SPI1_Init+0x74>)
 8000888:	f002 fa72 	bl	8002d70 <HAL_SPI_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 f95d 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000008c 	.word	0x2000008c
 80008a0:	40013000 	.word	0x40013000

080008a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09c      	sub	sp, #112	; 0x70
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
 80008d4:	615a      	str	r2, [r3, #20]
 80008d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2234      	movs	r2, #52	; 0x34
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 f8f4 	bl	8004acc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008e4:	4b45      	ldr	r3, [pc, #276]	; (80009fc <MX_TIM8_Init+0x158>)
 80008e6:	4a46      	ldr	r2, [pc, #280]	; (8000a00 <MX_TIM8_Init+0x15c>)
 80008e8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80008ea:	4b44      	ldr	r3, [pc, #272]	; (80009fc <MX_TIM8_Init+0x158>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b42      	ldr	r3, [pc, #264]	; (80009fc <MX_TIM8_Init+0x158>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80008f6:	4b41      	ldr	r3, [pc, #260]	; (80009fc <MX_TIM8_Init+0x158>)
 80008f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b3f      	ldr	r3, [pc, #252]	; (80009fc <MX_TIM8_Init+0x158>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000904:	4b3d      	ldr	r3, [pc, #244]	; (80009fc <MX_TIM8_Init+0x158>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800090a:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <MX_TIM8_Init+0x158>)
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000910:	483a      	ldr	r0, [pc, #232]	; (80009fc <MX_TIM8_Init+0x158>)
 8000912:	f002 fad8 	bl	8002ec6 <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800091c:	f000 f918 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000926:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800092a:	4619      	mov	r1, r3
 800092c:	4833      	ldr	r0, [pc, #204]	; (80009fc <MX_TIM8_Init+0x158>)
 800092e:	f002 fc97 	bl	8003260 <HAL_TIM_ConfigClockSource>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000938:	f000 f90a 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800093c:	482f      	ldr	r0, [pc, #188]	; (80009fc <MX_TIM8_Init+0x158>)
 800093e:	f002 fb19 	bl	8002f74 <HAL_TIM_PWM_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000948:	f000 f902 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000958:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800095c:	4619      	mov	r1, r3
 800095e:	4827      	ldr	r0, [pc, #156]	; (80009fc <MX_TIM8_Init+0x158>)
 8000960:	f003 f99a 	bl	8003c98 <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800096a:	f000 f8f1 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096e:	2360      	movs	r3, #96	; 0x60
 8000970:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000976:	2300      	movs	r3, #0
 8000978:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800097a:	2300      	movs	r3, #0
 800097c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800098a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800098e:	2208      	movs	r2, #8
 8000990:	4619      	mov	r1, r3
 8000992:	481a      	ldr	r0, [pc, #104]	; (80009fc <MX_TIM8_Init+0x158>)
 8000994:	f002 fb50 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800099e:	f000 f8d7 	bl	8000b50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4807      	ldr	r0, [pc, #28]	; (80009fc <MX_TIM8_Init+0x158>)
 80009e0:	f003 f9dc 	bl	8003d9c <HAL_TIMEx_ConfigBreakDeadTime>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80009ea:	f000 f8b1 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80009ee:	4803      	ldr	r0, [pc, #12]	; (80009fc <MX_TIM8_Init+0x158>)
 80009f0:	f000 f994 	bl	8000d1c <HAL_TIM_MspPostInit>

}
 80009f4:	bf00      	nop
 80009f6:	3770      	adds	r7, #112	; 0x70
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000f0 	.word	0x200000f0
 8000a00:	40013400 	.word	0x40013400

08000a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a0a:	4a23      	ldr	r2, [pc, #140]	; (8000a98 <MX_USART2_UART_Init+0x94>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a4e:	f003 fa45 	bl	8003edc <HAL_UART_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a58:	f000 f87a 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a60:	f003 ff46 	bl	80048f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 f871 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a72:	f003 ff7b 	bl	800496c <HAL_UARTEx_SetRxFifoThreshold>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 f868 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a82:	f003 fefc 	bl	800487e <HAL_UARTEx_DisableFifoMode>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a8c:	f000 f860 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000013c 	.word	0x2000013c
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a24      	ldr	r2, [pc, #144]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000ab8:	f043 0320 	orr.w	r3, r3, #32
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0320 	and.w	r3, r3, #32
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8000afa:	2200      	movs	r2, #0
 8000afc:	f248 7110 	movw	r1, #34576	; 0x8710
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f001 f954 	bl	8001db0 <HAL_GPIO_WritePin>
                          |FAN_control_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_Pin Led_debug_Pin PRE_Done_Pin AMS_Ok_Pin
                           FAN_control_Pin */
  GPIO_InitStruct.Pin = CS_Pin|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8000b08:	f248 7310 	movw	r3, #34576	; 0x8710
 8000b0c:	60fb      	str	r3, [r7, #12]
                          |FAN_control_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f000 ffc2 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_PRE_Pin AIR__Pin AIR_B7_Pin */
  GPIO_InitStruct.Pin = AIR_PRE_Pin|AIR__Pin|AIR_B7_Pin;
 8000b28:	23d0      	movs	r3, #208	; 0xd0
 8000b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_GPIO_Init+0xb0>)
 8000b3c:	f000 ffb6 	bl	8001aac <HAL_GPIO_Init>

}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	48000400 	.word	0x48000400

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6593      	str	r3, [r2, #88]	; 0x58
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b09a      	sub	sp, #104	; 0x68
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	2244      	movs	r2, #68	; 0x44
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 ff81 	bl	8004acc <memset>
  if(hfdcan->Instance==FDCAN1)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a20      	ldr	r2, [pc, #128]	; (8000c50 <HAL_FDCAN_MspInit+0xac>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d139      	bne.n	8000c48 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bde:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 fed3 	bl	8002990 <HAL_RCCEx_PeriphCLKConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000bf0:	f7ff ffae 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_FDCAN_MspInit+0xb0>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf8:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <HAL_FDCAN_MspInit+0xb0>)
 8000bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_FDCAN_MspInit+0xb0>)
 8000c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_FDCAN_MspInit+0xb0>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <HAL_FDCAN_MspInit+0xb0>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_FDCAN_MspInit+0xb0>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c28:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c36:	2309      	movs	r3, #9
 8000c38:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f000 ff32 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3768      	adds	r7, #104	; 0x68
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40006400 	.word	0x40006400
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_SPI_MspInit+0x7c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d128      	bne.n	8000ccc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_SPI_MspInit+0x80>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7e:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <HAL_SPI_MspInit+0x80>)
 8000c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c84:	6613      	str	r3, [r2, #96]	; 0x60
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_SPI_MspInit+0x80>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_SPI_MspInit+0x80>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_SPI_MspInit+0x80>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_SPI_MspInit+0x80>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000caa:	23e0      	movs	r3, #224	; 0xe0
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fef0 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40013000 	.word	0x40013000
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_TIM_Base_MspInit+0x38>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10b      	bne.n	8000d06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_TIM_Base_MspInit+0x3c>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40013400 	.word	0x40013400
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <HAL_TIM_MspPostInit+0x64>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d11b      	bne.n	8000d76 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_TIM_MspPostInit+0x68>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <HAL_TIM_MspPostInit+0x68>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_TIM_MspPostInit+0x68>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PB5     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d56:	2320      	movs	r3, #32
 8000d58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000d66:	2303      	movs	r3, #3
 8000d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_TIM_MspPostInit+0x6c>)
 8000d72:	f000 fe9b 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3720      	adds	r7, #32
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40013400 	.word	0x40013400
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48000400 	.word	0x48000400

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b09a      	sub	sp, #104	; 0x68
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2244      	movs	r2, #68	; 0x44
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 fe8d 	bl	8004acc <memset>
  if(huart->Instance==USART2)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <HAL_UART_MspInit+0xa8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d136      	bne.n	8000e2a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 fde1 	bl	8002990 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd4:	f7ff febc 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de2:	6593      	str	r3, [r2, #88]	; 0x58
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df4:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000e08:	230c      	movs	r3, #12
 8000e0a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f000 fe41 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3768      	adds	r7, #104	; 0x68
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40021000 	.word	0x40021000

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 f890 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eba:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <LoopForever+0xe>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed0:	4c0b      	ldr	r4, [pc, #44]	; (8000f00 <LoopForever+0x16>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ede:	f7ff ffd7 	bl	8000e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f003 fdcf 	bl	8004a84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee6:	f7ff fb77 	bl	80005d8 <main>

08000eea <LoopForever>:

LoopForever:
    b LoopForever
 8000eea:	e7fe      	b.n	8000eea <LoopForever>
  ldr   r0, =_estack
 8000eec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ef8:	08004b54 	.word	0x08004b54
  ldr r2, =_sbss
 8000efc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f00:	2000021c 	.word	0x2000021c

08000f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_2_IRQHandler>

08000f06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f93d 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f80e 	bl	8000f38 <HAL_InitTick>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	e001      	b.n	8000f2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f28:	f7ff fe18 	bl	8000b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]

}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_InitTick+0x68>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d022      	beq.n	8000f92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_InitTick+0x6c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_InitTick+0x68>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f93a 	bl	80011da <HAL_SYSTICK_Config>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10f      	bne.n	8000f8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	d809      	bhi.n	8000f86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f72:	2200      	movs	r2, #0
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	f000 f914 	bl	80011a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_InitTick+0x70>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	e007      	b.n	8000f96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e004      	b.n	8000f96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	e001      	b.n	8000f96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_IncTick+0x1c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <HAL_IncTick+0x1c>)
 8000fbc:	6013      	str	r3, [r2, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	20000218 	.word	0x20000218
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000218 	.word	0x20000218

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d004      	beq.n	800100c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_Delay+0x40>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100c:	bf00      	nop
 800100e:	f7ff ffdf 	bl	8000fd0 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	429a      	cmp	r2, r3
 800101c:	d8f7      	bhi.n	800100e <HAL_Delay+0x26>
  {
  }
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000008 	.word	0x20000008

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff47 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff5e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff90 	bl	80010e4 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5f 	bl	8001090 <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffb2 	bl	800114c <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e147      	b.n	8001496 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d106      	bne.n	8001220 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fcc2 	bl	8000ba4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0210 	bic.w	r2, r2, #16
 800122e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001230:	f7ff fece 	bl	8000fd0 <HAL_GetTick>
 8001234:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001236:	e012      	b.n	800125e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001238:	f7ff feca 	bl	8000fd0 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b0a      	cmp	r3, #10
 8001244:	d90b      	bls.n	800125e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2203      	movs	r2, #3
 8001256:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e11b      	b.n	8001496 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b08      	cmp	r3, #8
 800126a:	d0e5      	beq.n	8001238 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699a      	ldr	r2, [r3, #24]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800127c:	f7ff fea8 	bl	8000fd0 <HAL_GetTick>
 8001280:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001282:	e012      	b.n	80012aa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001284:	f7ff fea4 	bl	8000fd0 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b0a      	cmp	r3, #10
 8001290:	d90b      	bls.n	80012aa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2203      	movs	r2, #3
 80012a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0f5      	b.n	8001496 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0e5      	beq.n	8001284 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699a      	ldr	r2, [r3, #24]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0202 	orr.w	r2, r2, #2
 80012c6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a74      	ldr	r2, [pc, #464]	; (80014a0 <HAL_FDCAN_Init+0x2ac>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d103      	bne.n	80012da <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80012d2:	4a74      	ldr	r2, [pc, #464]	; (80014a4 <HAL_FDCAN_Init+0x2b0>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7c1b      	ldrb	r3, [r3, #16]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d108      	bne.n	80012f4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	699a      	ldr	r2, [r3, #24]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012f0:	619a      	str	r2, [r3, #24]
 80012f2:	e007      	b.n	8001304 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001302:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7c5b      	ldrb	r3, [r3, #17]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d108      	bne.n	800131e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800131a:	619a      	str	r2, [r3, #24]
 800131c:	e007      	b.n	800132e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699a      	ldr	r2, [r3, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800132c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7c9b      	ldrb	r3, [r3, #18]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001344:	619a      	str	r2, [r3, #24]
 8001346:	e007      	b.n	8001358 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001356:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800137c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0210 	bic.w	r2, r2, #16
 800138c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d108      	bne.n	80013a8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	699a      	ldr	r2, [r3, #24]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0204 	orr.w	r2, r2, #4
 80013a4:	619a      	str	r2, [r3, #24]
 80013a6:	e02c      	b.n	8001402 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d028      	beq.n	8001402 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d01c      	beq.n	80013f2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013c6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0210 	orr.w	r2, r2, #16
 80013d6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d110      	bne.n	8001402 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0220 	orr.w	r2, r2, #32
 80013ee:	619a      	str	r2, [r3, #24]
 80013f0:	e007      	b.n	8001402 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	699a      	ldr	r2, [r3, #24]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0220 	orr.w	r2, r2, #32
 8001400:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	3b01      	subs	r3, #1
 8001408:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	3b01      	subs	r3, #1
 8001410:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001412:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800141a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	3b01      	subs	r3, #1
 8001424:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800142a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800142c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001436:	d115      	bne.n	8001464 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	3b01      	subs	r3, #1
 8001444:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001446:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	3b01      	subs	r3, #1
 800144e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001450:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	3b01      	subs	r3, #1
 800145a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001460:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001462:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 fac0 	bl	8001a00 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40006400 	.word	0x40006400
 80014a4:	40006500 	.word	0x40006500

080014a8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80014b8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d002      	beq.n	80014c6 <HAL_FDCAN_ConfigFilter+0x1e>
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d13d      	bne.n	8001542 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d119      	bne.n	8001502 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014da:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80014e2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	e01d      	b.n	800153e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	075a      	lsls	r2, r3, #29
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	079a      	lsls	r2, r3, #30
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4313      	orrs	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3304      	adds	r3, #4
 8001536:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e006      	b.n	8001550 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001546:	f043 0202 	orr.w	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
  }
}
 8001550:	4618      	mov	r0, r3
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d116      	bne.n	80015a4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800157e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	011a      	lsls	r2, r3, #4
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	431a      	orrs	r2, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	431a      	orrs	r2, r3
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	431a      	orrs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e006      	b.n	80015b2 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a8:	f043 0204 	orr.w	r2, r3, #4
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
  }
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d11f      	bne.n	8001616 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2b40      	cmp	r3, #64	; 0x40
 80015da:	d10d      	bne.n	80015f8 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e4:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	025a      	lsls	r2, r3, #9
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80015f6:	e00c      	b.n	8001612 <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001600:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	021a      	lsls	r2, r3, #8
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e006      	b.n	8001624 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161a:	f043 0204 	orr.w	r2, r3, #4
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
  }
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d110      	bne.n	8001666 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e006      	b.n	8001674 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	f043 0204 	orr.w	r2, r3, #4
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
  }
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001680:	b480      	push	{r7}
 8001682:	b08b      	sub	sp, #44	; 0x2c
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001694:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001696:	7efb      	ldrb	r3, [r7, #27]
 8001698:	2b02      	cmp	r3, #2
 800169a:	f040 80bc 	bne.w	8001816 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b40      	cmp	r3, #64	; 0x40
 80016a2:	d121      	bne.n	80016e8 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d107      	bne.n	80016c4 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0af      	b.n	8001824 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	4613      	mov	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	440b      	add	r3, r1
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
 80016e6:	e020      	b.n	800172a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e08d      	b.n	8001824 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	4613      	mov	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	440b      	add	r3, r1
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d107      	bne.n	800174e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	0c9b      	lsrs	r3, r3, #18
 8001744:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	e005      	b.n	800175a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	3304      	adds	r3, #4
 8001776:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	b29a      	uxth	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	0e1b      	lsrs	r3, r3, #24
 80017ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0fda      	lsrs	r2, r3, #31
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	3304      	adds	r3, #4
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	e00a      	b.n	80017e4 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	441a      	add	r2, r3
 80017d4:	6839      	ldr	r1, [r7, #0]
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	440b      	add	r3, r1
 80017da:	7812      	ldrb	r2, [r2, #0]
 80017dc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	3301      	adds	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0c1b      	lsrs	r3, r3, #16
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	461a      	mov	r2, r3
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d3eb      	bcc.n	80017ce <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b40      	cmp	r3, #64	; 0x40
 80017fa:	d105      	bne.n	8001808 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001806:	e004      	b.n	8001812 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e006      	b.n	8001824 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	f043 0208 	orr.w	r2, r3, #8
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
  }
}
 8001824:	4618      	mov	r0, r3
 8001826:	372c      	adds	r7, #44	; 0x2c
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	08004b0c 	.word	0x08004b0c

08001834 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001846:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d003      	beq.n	8001856 <HAL_FDCAN_ActivateNotification+0x22>
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	2b02      	cmp	r3, #2
 8001852:	f040 80c8 	bne.w	80019e6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d03b      	beq.n	80018ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d031      	beq.n	80018ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b00      	cmp	r3, #0
 8001898:	d027      	beq.n	80018ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d01d      	beq.n	80018ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d013      	beq.n	80018ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00c      	beq.n	80018fa <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d107      	bne.n	80018fa <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0201 	orr.w	r2, r2, #1
 80018f8:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d13b      	bne.n	8001986 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d131      	bne.n	8001986 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	d127      	bne.n	8001986 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800193c:	2b00      	cmp	r3, #0
 800193e:	d004      	beq.n	800194a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d11d      	bne.n	8001986 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	d113      	bne.n	8001986 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00c      	beq.n	8001996 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0202 	orr.w	r2, r2, #2
 8001994:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	430a      	orrs	r2, r1
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e006      	b.n	80019f4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ea:	f043 0202 	orr.w	r2, r3, #2
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
  }
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	371c      	adds	r7, #28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001a0a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a1a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	041a      	lsls	r2, r3, #16
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a40:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a48:	061a      	lsls	r2, r3, #24
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e005      	b.n	8001a8e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3f3      	bcc.n	8001a82 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	4000a400 	.word	0x4000a400

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001aba:	e15a      	b.n	8001d72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 814c 	beq.w	8001d6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d005      	beq.n	8001aec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d130      	bne.n	8001b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b22:	2201      	movs	r2, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 0201 	and.w	r2, r3, #1
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d017      	beq.n	8001b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d123      	bne.n	8001bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	6939      	ldr	r1, [r7, #16]
 8001bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0203 	and.w	r2, r3, #3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80a6 	beq.w	8001d6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c20:	4b5b      	ldr	r3, [pc, #364]	; (8001d90 <HAL_GPIO_Init+0x2e4>)
 8001c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c24:	4a5a      	ldr	r2, [pc, #360]	; (8001d90 <HAL_GPIO_Init+0x2e4>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6613      	str	r3, [r2, #96]	; 0x60
 8001c2c:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <HAL_GPIO_Init+0x2e4>)
 8001c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c38:	4a56      	ldr	r2, [pc, #344]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c62:	d01f      	beq.n	8001ca4 <HAL_GPIO_Init+0x1f8>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a4c      	ldr	r2, [pc, #304]	; (8001d98 <HAL_GPIO_Init+0x2ec>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d019      	beq.n	8001ca0 <HAL_GPIO_Init+0x1f4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a4b      	ldr	r2, [pc, #300]	; (8001d9c <HAL_GPIO_Init+0x2f0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d013      	beq.n	8001c9c <HAL_GPIO_Init+0x1f0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a4a      	ldr	r2, [pc, #296]	; (8001da0 <HAL_GPIO_Init+0x2f4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00d      	beq.n	8001c98 <HAL_GPIO_Init+0x1ec>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a49      	ldr	r2, [pc, #292]	; (8001da4 <HAL_GPIO_Init+0x2f8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d007      	beq.n	8001c94 <HAL_GPIO_Init+0x1e8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a48      	ldr	r2, [pc, #288]	; (8001da8 <HAL_GPIO_Init+0x2fc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d101      	bne.n	8001c90 <HAL_GPIO_Init+0x1e4>
 8001c8c:	2305      	movs	r3, #5
 8001c8e:	e00a      	b.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001c90:	2306      	movs	r3, #6
 8001c92:	e008      	b.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001c94:	2304      	movs	r3, #4
 8001c96:	e006      	b.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e004      	b.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e002      	b.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	f002 0203 	and.w	r2, r2, #3
 8001cac:	0092      	lsls	r2, r2, #2
 8001cae:	4093      	lsls	r3, r2
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb6:	4937      	ldr	r1, [pc, #220]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cc4:	4b39      	ldr	r3, [pc, #228]	; (8001dac <HAL_GPIO_Init+0x300>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ce8:	4a30      	ldr	r2, [pc, #192]	; (8001dac <HAL_GPIO_Init+0x300>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cee:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <HAL_GPIO_Init+0x300>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d12:	4a26      	ldr	r2, [pc, #152]	; (8001dac <HAL_GPIO_Init+0x300>)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_GPIO_Init+0x300>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d3c:	4a1b      	ldr	r2, [pc, #108]	; (8001dac <HAL_GPIO_Init+0x300>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_GPIO_Init+0x300>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d66:	4a11      	ldr	r2, [pc, #68]	; (8001dac <HAL_GPIO_Init+0x300>)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f47f ae9d 	bne.w	8001abc <HAL_GPIO_Init+0x10>
  }
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40010000 	.word	0x40010000
 8001d98:	48000400 	.word	0x48000400
 8001d9c:	48000800 	.word	0x48000800
 8001da0:	48000c00 	.word	0x48000c00
 8001da4:	48001000 	.word	0x48001000
 8001da8:	48001400 	.word	0x48001400
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dc0:	787b      	ldrb	r3, [r7, #1]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d141      	bne.n	8001e72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dee:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dfa:	d131      	bne.n	8001e60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dfc:	4b47      	ldr	r3, [pc, #284]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e02:	4a46      	ldr	r2, [pc, #280]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e0c:	4b43      	ldr	r3, [pc, #268]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e14:	4a41      	ldr	r2, [pc, #260]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2232      	movs	r2, #50	; 0x32
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	4a3f      	ldr	r2, [pc, #252]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	0c9b      	lsrs	r3, r3, #18
 8001e2e:	3301      	adds	r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e32:	e002      	b.n	8001e3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e3a:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e46:	d102      	bne.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f2      	bne.n	8001e34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e4e:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5a:	d158      	bne.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e057      	b.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e60:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e66:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e70:	e04d      	b.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e78:	d141      	bne.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e7a:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e86:	d131      	bne.n	8001eec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e88:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e8e:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2232      	movs	r2, #50	; 0x32
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	0c9b      	lsrs	r3, r3, #18
 8001eba:	3301      	adds	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ebe:	e002      	b.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed2:	d102      	bne.n	8001eda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f2      	bne.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee6:	d112      	bne.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e011      	b.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001efc:	e007      	b.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f06:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	20000000 	.word	0x20000000
 8001f24:	431bde83 	.word	0x431bde83

08001f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e306      	b.n	8002548 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d075      	beq.n	8002032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f46:	4b97      	ldr	r3, [pc, #604]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f50:	4b94      	ldr	r3, [pc, #592]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3e>
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d002      	beq.n	8001f6c <HAL_RCC_OscConfig+0x44>
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d10b      	bne.n	8001f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	4b8d      	ldr	r3, [pc, #564]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d05b      	beq.n	8002030 <HAL_RCC_OscConfig+0x108>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d157      	bne.n	8002030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e2e1      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d106      	bne.n	8001f9c <HAL_RCC_OscConfig+0x74>
 8001f8e:	4b85      	ldr	r3, [pc, #532]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a84      	ldr	r2, [pc, #528]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e01d      	b.n	8001fd8 <HAL_RCC_OscConfig+0xb0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x98>
 8001fa6:	4b7f      	ldr	r3, [pc, #508]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a7e      	ldr	r2, [pc, #504]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b7c      	ldr	r3, [pc, #496]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a7b      	ldr	r2, [pc, #492]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCC_OscConfig+0xb0>
 8001fc0:	4b78      	ldr	r3, [pc, #480]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a77      	ldr	r2, [pc, #476]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b75      	ldr	r3, [pc, #468]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a74      	ldr	r2, [pc, #464]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fff6 	bl	8000fd0 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7fe fff2 	bl	8000fd0 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e2a6      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ffa:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xc0>
 8002006:	e014      	b.n	8002032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7fe ffe2 	bl	8000fd0 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7fe ffde 	bl	8000fd0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e292      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002022:	4b60      	ldr	r3, [pc, #384]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0xe8>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d075      	beq.n	800212a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203e:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002048:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b0c      	cmp	r3, #12
 8002056:	d102      	bne.n	800205e <HAL_RCC_OscConfig+0x136>
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d002      	beq.n	8002064 <HAL_RCC_OscConfig+0x13c>
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b04      	cmp	r3, #4
 8002062:	d11f      	bne.n	80020a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002064:	4b4f      	ldr	r3, [pc, #316]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_OscConfig+0x154>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e265      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207c:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	4946      	ldr	r1, [pc, #280]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002090:	4b45      	ldr	r3, [pc, #276]	; (80021a8 <HAL_RCC_OscConfig+0x280>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe ff4f 	bl	8000f38 <HAL_InitTick>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d043      	beq.n	8002128 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e251      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d023      	beq.n	80020f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ac:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3c      	ldr	r2, [pc, #240]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe ff8a 	bl	8000fd0 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c0:	f7fe ff86 	bl	8000fd0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e23a      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d2:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	061b      	lsls	r3, r3, #24
 80020ec:	492d      	ldr	r1, [pc, #180]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
 80020f2:	e01a      	b.n	800212a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2a      	ldr	r2, [pc, #168]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 80020fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7fe ff66 	bl	8000fd0 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002108:	f7fe ff62 	bl	8000fd0 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e216      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x1e0>
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d041      	beq.n	80021ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01c      	beq.n	8002178 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213e:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8002140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002144:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214e:	f7fe ff3f 	bl	8000fd0 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002156:	f7fe ff3b 	bl	8000fd0 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e1ef      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 800216a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0ef      	beq.n	8002156 <HAL_RCC_OscConfig+0x22e>
 8002176:	e020      	b.n	80021ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 800217a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7fe ff22 	bl	8000fd0 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800218e:	e00d      	b.n	80021ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002190:	f7fe ff1e 	bl	8000fd0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d906      	bls.n	80021ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1d2      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ac:	4b8c      	ldr	r3, [pc, #560]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 80021ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1ea      	bne.n	8002190 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80a6 	beq.w	8002314 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c8:	2300      	movs	r3, #0
 80021ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021cc:	4b84      	ldr	r3, [pc, #528]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_OscConfig+0x2b4>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x2b6>
 80021dc:	2300      	movs	r3, #0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b7f      	ldr	r3, [pc, #508]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	4a7e      	ldr	r2, [pc, #504]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6593      	str	r3, [r2, #88]	; 0x58
 80021ee:	4b7c      	ldr	r3, [pc, #496]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021fa:	2301      	movs	r3, #1
 80021fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fe:	4b79      	ldr	r3, [pc, #484]	; (80023e4 <HAL_RCC_OscConfig+0x4bc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800220a:	4b76      	ldr	r3, [pc, #472]	; (80023e4 <HAL_RCC_OscConfig+0x4bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a75      	ldr	r2, [pc, #468]	; (80023e4 <HAL_RCC_OscConfig+0x4bc>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7fe fedb 	bl	8000fd0 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7fe fed7 	bl	8000fd0 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e18b      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002230:	4b6c      	ldr	r3, [pc, #432]	; (80023e4 <HAL_RCC_OscConfig+0x4bc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d108      	bne.n	8002256 <HAL_RCC_OscConfig+0x32e>
 8002244:	4b66      	ldr	r3, [pc, #408]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224a:	4a65      	ldr	r2, [pc, #404]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002254:	e024      	b.n	80022a0 <HAL_RCC_OscConfig+0x378>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b05      	cmp	r3, #5
 800225c:	d110      	bne.n	8002280 <HAL_RCC_OscConfig+0x358>
 800225e:	4b60      	ldr	r3, [pc, #384]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002264:	4a5e      	ldr	r2, [pc, #376]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800226e:	4b5c      	ldr	r3, [pc, #368]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	4a5a      	ldr	r2, [pc, #360]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800227e:	e00f      	b.n	80022a0 <HAL_RCC_OscConfig+0x378>
 8002280:	4b57      	ldr	r3, [pc, #348]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	4a56      	ldr	r2, [pc, #344]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002290:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d016      	beq.n	80022d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7fe fe92 	bl	8000fd0 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe fe8e 	bl	8000fd0 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e140      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c6:	4b46      	ldr	r3, [pc, #280]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ed      	beq.n	80022b0 <HAL_RCC_OscConfig+0x388>
 80022d4:	e015      	b.n	8002302 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7fe fe7b 	bl	8000fd0 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe fe77 	bl	8000fd0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e129      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f4:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1ed      	bne.n	80022de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002302:	7ffb      	ldrb	r3, [r7, #31]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002308:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	4a34      	ldr	r2, [pc, #208]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 800230e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002312:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d03c      	beq.n	800239a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01c      	beq.n	8002362 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 800232a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800232e:	4a2c      	ldr	r2, [pc, #176]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7fe fe4a 	bl	8000fd0 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002340:	f7fe fe46 	bl	8000fd0 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0fa      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 8002354:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ef      	beq.n	8002340 <HAL_RCC_OscConfig+0x418>
 8002360:	e01b      	b.n	800239a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 8002364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002368:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002372:	f7fe fe2d 	bl	8000fd0 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800237a:	f7fe fe29 	bl	8000fd0 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0dd      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 800238e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1ef      	bne.n	800237a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 80d1 	beq.w	8002546 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	2b0c      	cmp	r3, #12
 80023ae:	f000 808b 	beq.w	80024c8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d15e      	bne.n	8002478 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <HAL_RCC_OscConfig+0x4b8>)
 80023c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe fe03 	bl	8000fd0 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023cc:	e00c      	b.n	80023e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fdff 	bl	8000fd0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d905      	bls.n	80023e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0b3      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e8:	4b59      	ldr	r3, [pc, #356]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ec      	bne.n	80023ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f4:	4b56      	ldr	r3, [pc, #344]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	4b56      	ldr	r3, [pc, #344]	; (8002554 <HAL_RCC_OscConfig+0x62c>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6a11      	ldr	r1, [r2, #32]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002404:	3a01      	subs	r2, #1
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800240e:	0212      	lsls	r2, r2, #8
 8002410:	4311      	orrs	r1, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002416:	0852      	lsrs	r2, r2, #1
 8002418:	3a01      	subs	r2, #1
 800241a:	0552      	lsls	r2, r2, #21
 800241c:	4311      	orrs	r1, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002422:	0852      	lsrs	r2, r2, #1
 8002424:	3a01      	subs	r2, #1
 8002426:	0652      	lsls	r2, r2, #25
 8002428:	4311      	orrs	r1, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800242e:	06d2      	lsls	r2, r2, #27
 8002430:	430a      	orrs	r2, r1
 8002432:	4947      	ldr	r1, [pc, #284]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 8002434:	4313      	orrs	r3, r2
 8002436:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002438:	4b45      	ldr	r3, [pc, #276]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a44      	ldr	r2, [pc, #272]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002444:	4b42      	ldr	r3, [pc, #264]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a41      	ldr	r2, [pc, #260]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 800244a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fdbe 	bl	8000fd0 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7fe fdba 	bl	8000fd0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e06e      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246a:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x530>
 8002476:	e066      	b.n	8002546 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b35      	ldr	r3, [pc, #212]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a34      	ldr	r2, [pc, #208]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 800247e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002482:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002484:	4b32      	ldr	r3, [pc, #200]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a31      	ldr	r2, [pc, #196]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002490:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 8002496:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fd96 	bl	8000fd0 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fd92 	bl	8000fd0 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e046      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ba:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x580>
 80024c6:	e03e      	b.n	8002546 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e039      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024d4:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d12c      	bne.n	8002542 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	3b01      	subs	r3, #1
 80024f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d123      	bne.n	8002542 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d11b      	bne.n	8002542 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d113      	bne.n	8002542 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	3b01      	subs	r3, #1
 8002528:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d109      	bne.n	8002542 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	3b01      	subs	r3, #1
 800253c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	019f800c 	.word	0x019f800c

08002558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e11e      	b.n	80027ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b91      	ldr	r3, [pc, #580]	; (80027b8 <HAL_RCC_ClockConfig+0x260>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d910      	bls.n	80025a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b8e      	ldr	r3, [pc, #568]	; (80027b8 <HAL_RCC_ClockConfig+0x260>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 020f 	bic.w	r2, r3, #15
 8002586:	498c      	ldr	r1, [pc, #560]	; (80027b8 <HAL_RCC_ClockConfig+0x260>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b8a      	ldr	r3, [pc, #552]	; (80027b8 <HAL_RCC_ClockConfig+0x260>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e106      	b.n	80027ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d073      	beq.n	8002694 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d129      	bne.n	8002608 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b4:	4b81      	ldr	r3, [pc, #516]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0f4      	b.n	80027ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025c4:	f000 f99e 	bl	8002904 <RCC_GetSysClockFreqFromPLLSource>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4a7c      	ldr	r2, [pc, #496]	; (80027c0 <HAL_RCC_ClockConfig+0x268>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d93f      	bls.n	8002652 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025d2:	4b7a      	ldr	r3, [pc, #488]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d033      	beq.n	8002652 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d12f      	bne.n	8002652 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025f2:	4b72      	ldr	r3, [pc, #456]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025fa:	4a70      	ldr	r2, [pc, #448]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 80025fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002600:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e024      	b.n	8002652 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d107      	bne.n	8002620 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002610:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0c6      	b.n	80027ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002620:	4b66      	ldr	r3, [pc, #408]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0be      	b.n	80027ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002630:	f000 f8ce 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8002634:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4a61      	ldr	r2, [pc, #388]	; (80027c0 <HAL_RCC_ClockConfig+0x268>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d909      	bls.n	8002652 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800263e:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002646:	4a5d      	ldr	r2, [pc, #372]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 8002648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002652:	4b5a      	ldr	r3, [pc, #360]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f023 0203 	bic.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4957      	ldr	r1, [pc, #348]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002664:	f7fe fcb4 	bl	8000fd0 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	e00a      	b.n	8002682 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f7fe fcb0 	bl	8000fd0 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e095      	b.n	80027ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b4e      	ldr	r3, [pc, #312]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 020c 	and.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	429a      	cmp	r2, r3
 8002692:	d1eb      	bne.n	800266c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d023      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026ac:	4b43      	ldr	r3, [pc, #268]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a42      	ldr	r2, [pc, #264]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 80026b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d007      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026c4:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026cc:	4a3b      	ldr	r2, [pc, #236]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 80026ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d4:	4b39      	ldr	r3, [pc, #228]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4936      	ldr	r1, [pc, #216]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
 80026e6:	e008      	b.n	80026fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b80      	cmp	r3, #128	; 0x80
 80026ec:	d105      	bne.n	80026fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026ee:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4a32      	ldr	r2, [pc, #200]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 80026f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026fa:	4b2f      	ldr	r3, [pc, #188]	; (80027b8 <HAL_RCC_ClockConfig+0x260>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d21d      	bcs.n	8002744 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002708:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <HAL_RCC_ClockConfig+0x260>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f023 020f 	bic.w	r2, r3, #15
 8002710:	4929      	ldr	r1, [pc, #164]	; (80027b8 <HAL_RCC_ClockConfig+0x260>)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002718:	f7fe fc5a 	bl	8000fd0 <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	e00a      	b.n	8002736 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7fe fc56 	bl	8000fd0 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e03b      	b.n	80027ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_RCC_ClockConfig+0x260>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d1ed      	bne.n	8002720 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4917      	ldr	r1, [pc, #92]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	490f      	ldr	r1, [pc, #60]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002782:	f000 f825 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8002786:	4602      	mov	r2, r0
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_RCC_ClockConfig+0x264>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	490c      	ldr	r1, [pc, #48]	; (80027c4 <HAL_RCC_ClockConfig+0x26c>)
 8002794:	5ccb      	ldrb	r3, [r1, r3]
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	fa22 f303 	lsr.w	r3, r2, r3
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <HAL_RCC_ClockConfig+0x270>)
 80027a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x274>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fbc6 	bl	8000f38 <HAL_InitTick>
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40021000 	.word	0x40021000
 80027c0:	04c4b400 	.word	0x04c4b400
 80027c4:	08004af4 	.word	0x08004af4
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027d6:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027e2:	4b2a      	ldr	r3, [pc, #168]	; (800288c <HAL_RCC_GetSysClockFreq+0xbc>)
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	e047      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027e8:	4b27      	ldr	r3, [pc, #156]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d102      	bne.n	80027fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	e03e      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027fa:	4b23      	ldr	r3, [pc, #140]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d136      	bne.n	8002874 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3301      	adds	r3, #1
 800281c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d10c      	bne.n	800283e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002824:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	4a16      	ldr	r2, [pc, #88]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb8>)
 800282e:	68d2      	ldr	r2, [r2, #12]
 8002830:	0a12      	lsrs	r2, r2, #8
 8002832:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	617b      	str	r3, [r7, #20]
      break;
 800283c:	e00c      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	4a10      	ldr	r2, [pc, #64]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002848:	68d2      	ldr	r2, [r2, #12]
 800284a:	0a12      	lsrs	r2, r2, #8
 800284c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]
      break;
 8002856:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb8>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0e5b      	lsrs	r3, r3, #25
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	3301      	adds	r3, #1
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	e001      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002878:	693b      	ldr	r3, [r7, #16]
}
 800287a:	4618      	mov	r0, r3
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	00f42400 	.word	0x00f42400
 8002890:	007a1200 	.word	0x007a1200

08002894 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028b0:	f7ff fff0 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4904      	ldr	r1, [pc, #16]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	08004b04 	.word	0x08004b04

080028d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028dc:	f7ff ffda 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0adb      	lsrs	r3, r3, #11
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4904      	ldr	r1, [pc, #16]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000
 8002900:	08004b04 	.word	0x08004b04

08002904 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800290a:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	3301      	adds	r3, #1
 8002920:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d10c      	bne.n	8002942 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002928:	4a17      	ldr	r2, [pc, #92]	; (8002988 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002932:	68d2      	ldr	r2, [r2, #12]
 8002934:	0a12      	lsrs	r2, r2, #8
 8002936:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	617b      	str	r3, [r7, #20]
    break;
 8002940:	e00c      	b.n	800295c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800294c:	68d2      	ldr	r2, [r2, #12]
 800294e:	0a12      	lsrs	r2, r2, #8
 8002950:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
    break;
 800295a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	0e5b      	lsrs	r3, r3, #25
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	3301      	adds	r3, #1
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002976:	687b      	ldr	r3, [r7, #4]
}
 8002978:	4618      	mov	r0, r3
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	40021000 	.word	0x40021000
 8002988:	007a1200 	.word	0x007a1200
 800298c:	00f42400 	.word	0x00f42400

08002990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002998:	2300      	movs	r3, #0
 800299a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800299c:	2300      	movs	r3, #0
 800299e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8098 	beq.w	8002ade <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b2:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	4b40      	ldr	r3, [pc, #256]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	4a3f      	ldr	r2, [pc, #252]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6593      	str	r3, [r2, #88]	; 0x58
 80029ca:	4b3d      	ldr	r3, [pc, #244]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d6:	2301      	movs	r3, #1
 80029d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029da:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a39      	ldr	r2, [pc, #228]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029e6:	f7fe faf3 	bl	8000fd0 <HAL_GetTick>
 80029ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029ec:	e009      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ee:	f7fe faef 	bl	8000fd0 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d902      	bls.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	74fb      	strb	r3, [r7, #19]
        break;
 8002a00:	e005      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a02:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0ef      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d159      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d01e      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d019      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a30:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	4a1b      	ldr	r2, [pc, #108]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a5c:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe faaf 	bl	8000fd0 <HAL_GetTick>
 8002a72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a74:	e00b      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7fe faab 	bl	8000fd0 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d902      	bls.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	74fb      	strb	r3, [r7, #19]
            break;
 8002a8c:	e006      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ec      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10b      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	4903      	ldr	r1, [pc, #12]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ab8:	e008      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	74bb      	strb	r3, [r7, #18]
 8002abe:	e005      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002acc:	7c7b      	ldrb	r3, [r7, #17]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad2:	4ba6      	ldr	r3, [pc, #664]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	4aa5      	ldr	r2, [pc, #660]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aea:	4ba0      	ldr	r3, [pc, #640]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	f023 0203 	bic.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	499c      	ldr	r1, [pc, #624]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b0c:	4b97      	ldr	r3, [pc, #604]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f023 020c 	bic.w	r2, r3, #12
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	4994      	ldr	r1, [pc, #592]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b2e:	4b8f      	ldr	r3, [pc, #572]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	498b      	ldr	r1, [pc, #556]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b50:	4b86      	ldr	r3, [pc, #536]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	4983      	ldr	r1, [pc, #524]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b72:	4b7e      	ldr	r3, [pc, #504]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	497a      	ldr	r1, [pc, #488]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b94:	4b75      	ldr	r3, [pc, #468]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	4972      	ldr	r1, [pc, #456]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bb6:	4b6d      	ldr	r3, [pc, #436]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	4969      	ldr	r1, [pc, #420]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bd8:	4b64      	ldr	r3, [pc, #400]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4961      	ldr	r1, [pc, #388]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bfa:	4b5c      	ldr	r3, [pc, #368]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	4958      	ldr	r1, [pc, #352]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d015      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c1c:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	4950      	ldr	r1, [pc, #320]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c3a:	d105      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c3c:	4b4b      	ldr	r3, [pc, #300]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a4a      	ldr	r2, [pc, #296]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c54:	4b45      	ldr	r3, [pc, #276]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	4942      	ldr	r1, [pc, #264]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c72:	d105      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c74:	4b3d      	ldr	r3, [pc, #244]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a3c      	ldr	r2, [pc, #240]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d015      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c8c:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4934      	ldr	r1, [pc, #208]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002caa:	d105      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cac:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4a2e      	ldr	r2, [pc, #184]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d015      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cc4:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	4926      	ldr	r1, [pc, #152]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce4:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d015      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	4918      	ldr	r1, [pc, #96]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d1a:	d105      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d015      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	490a      	ldr	r1, [pc, #40]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d52:	d105      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d60:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000

08002d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e09d      	b.n	8002ebe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d108      	bne.n	8002d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d92:	d009      	beq.n	8002da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
 8002d9a:	e005      	b.n	8002da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fd ff48 	bl	8000c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002de8:	d902      	bls.n	8002df0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e002      	b.n	8002df6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002dfe:	d007      	beq.n	8002e10 <HAL_SPI_Init+0xa0>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e08:	d002      	beq.n	8002e10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	ea42 0103 	orr.w	r1, r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	f003 0204 	and.w	r2, r3, #4
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e8c:	ea42 0103 	orr.w	r1, r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e049      	b.n	8002f6c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7fd fef5 	bl	8000cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f000 faa5 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e049      	b.n	800301a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f841 	bl	8003022 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	f000 fa4e 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003052:	2302      	movs	r3, #2
 8003054:	e0ff      	b.n	8003256 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b14      	cmp	r3, #20
 8003062:	f200 80f0 	bhi.w	8003246 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003066:	a201      	add	r2, pc, #4	; (adr r2, 800306c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	080030c1 	.word	0x080030c1
 8003070:	08003247 	.word	0x08003247
 8003074:	08003247 	.word	0x08003247
 8003078:	08003247 	.word	0x08003247
 800307c:	08003101 	.word	0x08003101
 8003080:	08003247 	.word	0x08003247
 8003084:	08003247 	.word	0x08003247
 8003088:	08003247 	.word	0x08003247
 800308c:	08003143 	.word	0x08003143
 8003090:	08003247 	.word	0x08003247
 8003094:	08003247 	.word	0x08003247
 8003098:	08003247 	.word	0x08003247
 800309c:	08003183 	.word	0x08003183
 80030a0:	08003247 	.word	0x08003247
 80030a4:	08003247 	.word	0x08003247
 80030a8:	08003247 	.word	0x08003247
 80030ac:	080031c5 	.word	0x080031c5
 80030b0:	08003247 	.word	0x08003247
 80030b4:	08003247 	.word	0x08003247
 80030b8:	08003247 	.word	0x08003247
 80030bc:	08003205 	.word	0x08003205
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fa54 	bl	8003574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0208 	orr.w	r2, r2, #8
 80030da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0204 	bic.w	r2, r2, #4
 80030ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6999      	ldr	r1, [r3, #24]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	619a      	str	r2, [r3, #24]
      break;
 80030fe:	e0a5      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fac4 	bl	8003694 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800311a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6999      	ldr	r1, [r3, #24]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	021a      	lsls	r2, r3, #8
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	619a      	str	r2, [r3, #24]
      break;
 8003140:	e084      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fb2d 	bl	80037a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0208 	orr.w	r2, r2, #8
 800315c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0204 	bic.w	r2, r2, #4
 800316c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69d9      	ldr	r1, [r3, #28]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	61da      	str	r2, [r3, #28]
      break;
 8003180:	e064      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fb95 	bl	80038b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800319c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69d9      	ldr	r1, [r3, #28]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	021a      	lsls	r2, r3, #8
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	61da      	str	r2, [r3, #28]
      break;
 80031c2:	e043      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fbfe 	bl	80039cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0208 	orr.w	r2, r2, #8
 80031de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0204 	bic.w	r2, r2, #4
 80031ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003202:	e023      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fc42 	bl	8003a94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800321e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800322e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	021a      	lsls	r2, r3, #8
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003244:	e002      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
      break;
 800324a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003254:	7dfb      	ldrb	r3, [r7, #23]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop

08003260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_TIM_ConfigClockSource+0x1c>
 8003278:	2302      	movs	r3, #2
 800327a:	e0de      	b.n	800343a <HAL_TIM_ConfigClockSource+0x1da>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800329a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800329e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a63      	ldr	r2, [pc, #396]	; (8003444 <HAL_TIM_ConfigClockSource+0x1e4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	f000 80a9 	beq.w	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 80032bc:	4a61      	ldr	r2, [pc, #388]	; (8003444 <HAL_TIM_ConfigClockSource+0x1e4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	f200 80ae 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 80032c4:	4a60      	ldr	r2, [pc, #384]	; (8003448 <HAL_TIM_ConfigClockSource+0x1e8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f000 80a1 	beq.w	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 80032cc:	4a5e      	ldr	r2, [pc, #376]	; (8003448 <HAL_TIM_ConfigClockSource+0x1e8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	f200 80a6 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 80032d4:	4a5d      	ldr	r2, [pc, #372]	; (800344c <HAL_TIM_ConfigClockSource+0x1ec>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	f000 8099 	beq.w	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 80032dc:	4a5b      	ldr	r2, [pc, #364]	; (800344c <HAL_TIM_ConfigClockSource+0x1ec>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	f200 809e 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 80032e4:	4a5a      	ldr	r2, [pc, #360]	; (8003450 <HAL_TIM_ConfigClockSource+0x1f0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	f000 8091 	beq.w	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 80032ec:	4a58      	ldr	r2, [pc, #352]	; (8003450 <HAL_TIM_ConfigClockSource+0x1f0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	f200 8096 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 80032f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80032f8:	f000 8089 	beq.w	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 80032fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003300:	f200 808e 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003308:	d03e      	beq.n	8003388 <HAL_TIM_ConfigClockSource+0x128>
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330e:	f200 8087 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003316:	f000 8086 	beq.w	8003426 <HAL_TIM_ConfigClockSource+0x1c6>
 800331a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331e:	d87f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d01a      	beq.n	800335a <HAL_TIM_ConfigClockSource+0xfa>
 8003324:	2b70      	cmp	r3, #112	; 0x70
 8003326:	d87b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003328:	2b60      	cmp	r3, #96	; 0x60
 800332a:	d050      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x16e>
 800332c:	2b60      	cmp	r3, #96	; 0x60
 800332e:	d877      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003330:	2b50      	cmp	r3, #80	; 0x50
 8003332:	d03c      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0x14e>
 8003334:	2b50      	cmp	r3, #80	; 0x50
 8003336:	d873      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d058      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x18e>
 800333c:	2b40      	cmp	r3, #64	; 0x40
 800333e:	d86f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003340:	2b30      	cmp	r3, #48	; 0x30
 8003342:	d064      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 8003344:	2b30      	cmp	r3, #48	; 0x30
 8003346:	d86b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d060      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 800334c:	2b20      	cmp	r3, #32
 800334e:	d867      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d05c      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 8003354:	2b10      	cmp	r3, #16
 8003356:	d05a      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 8003358:	e062      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6899      	ldr	r1, [r3, #8]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f000 fc75 	bl	8003c58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800337c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	609a      	str	r2, [r3, #8]
      break;
 8003386:	e04f      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f000 fc5e 	bl	8003c58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033aa:	609a      	str	r2, [r3, #8]
      break;
 80033ac:	e03c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f000 fbd0 	bl	8003b60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2150      	movs	r1, #80	; 0x50
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fc29 	bl	8003c1e <TIM_ITRx_SetConfig>
      break;
 80033cc:	e02c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	461a      	mov	r2, r3
 80033dc:	f000 fbef 	bl	8003bbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2160      	movs	r1, #96	; 0x60
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fc19 	bl	8003c1e <TIM_ITRx_SetConfig>
      break;
 80033ec:	e01c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f000 fbb0 	bl	8003b60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2140      	movs	r1, #64	; 0x40
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fc09 	bl	8003c1e <TIM_ITRx_SetConfig>
      break;
 800340c:	e00c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f000 fc00 	bl	8003c1e <TIM_ITRx_SetConfig>
      break;
 800341e:	e003      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
      break;
 8003424:	e000      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	00100070 	.word	0x00100070
 8003448:	00100040 	.word	0x00100040
 800344c:	00100030 	.word	0x00100030
 8003450:	00100020 	.word	0x00100020

08003454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a3c      	ldr	r2, [pc, #240]	; (8003558 <TIM_Base_SetConfig+0x104>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00f      	beq.n	800348c <TIM_Base_SetConfig+0x38>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003472:	d00b      	beq.n	800348c <TIM_Base_SetConfig+0x38>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a39      	ldr	r2, [pc, #228]	; (800355c <TIM_Base_SetConfig+0x108>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d007      	beq.n	800348c <TIM_Base_SetConfig+0x38>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a38      	ldr	r2, [pc, #224]	; (8003560 <TIM_Base_SetConfig+0x10c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d003      	beq.n	800348c <TIM_Base_SetConfig+0x38>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a37      	ldr	r2, [pc, #220]	; (8003564 <TIM_Base_SetConfig+0x110>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d108      	bne.n	800349e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a2d      	ldr	r2, [pc, #180]	; (8003558 <TIM_Base_SetConfig+0x104>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01b      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ac:	d017      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2a      	ldr	r2, [pc, #168]	; (800355c <TIM_Base_SetConfig+0x108>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a29      	ldr	r2, [pc, #164]	; (8003560 <TIM_Base_SetConfig+0x10c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00f      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a28      	ldr	r2, [pc, #160]	; (8003564 <TIM_Base_SetConfig+0x110>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00b      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a27      	ldr	r2, [pc, #156]	; (8003568 <TIM_Base_SetConfig+0x114>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d007      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a26      	ldr	r2, [pc, #152]	; (800356c <TIM_Base_SetConfig+0x118>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d003      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a25      	ldr	r2, [pc, #148]	; (8003570 <TIM_Base_SetConfig+0x11c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d108      	bne.n	80034f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a10      	ldr	r2, [pc, #64]	; (8003558 <TIM_Base_SetConfig+0x104>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00f      	beq.n	800353c <TIM_Base_SetConfig+0xe8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a11      	ldr	r2, [pc, #68]	; (8003564 <TIM_Base_SetConfig+0x110>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00b      	beq.n	800353c <TIM_Base_SetConfig+0xe8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a10      	ldr	r2, [pc, #64]	; (8003568 <TIM_Base_SetConfig+0x114>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d007      	beq.n	800353c <TIM_Base_SetConfig+0xe8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a0f      	ldr	r2, [pc, #60]	; (800356c <TIM_Base_SetConfig+0x118>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <TIM_Base_SetConfig+0xe8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a0e      	ldr	r2, [pc, #56]	; (8003570 <TIM_Base_SetConfig+0x11c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d103      	bne.n	8003544 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	615a      	str	r2, [r3, #20]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40013400 	.word	0x40013400
 8003568:	40014000 	.word	0x40014000
 800356c:	40014400 	.word	0x40014400
 8003570:	40014800 	.word	0x40014800

08003574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f023 0201 	bic.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f023 0302 	bic.w	r3, r3, #2
 80035c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a2c      	ldr	r2, [pc, #176]	; (8003680 <TIM_OC1_SetConfig+0x10c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00f      	beq.n	80035f4 <TIM_OC1_SetConfig+0x80>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a2b      	ldr	r2, [pc, #172]	; (8003684 <TIM_OC1_SetConfig+0x110>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00b      	beq.n	80035f4 <TIM_OC1_SetConfig+0x80>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a2a      	ldr	r2, [pc, #168]	; (8003688 <TIM_OC1_SetConfig+0x114>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d007      	beq.n	80035f4 <TIM_OC1_SetConfig+0x80>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a29      	ldr	r2, [pc, #164]	; (800368c <TIM_OC1_SetConfig+0x118>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_OC1_SetConfig+0x80>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a28      	ldr	r2, [pc, #160]	; (8003690 <TIM_OC1_SetConfig+0x11c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d10c      	bne.n	800360e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f023 0308 	bic.w	r3, r3, #8
 80035fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a1b      	ldr	r2, [pc, #108]	; (8003680 <TIM_OC1_SetConfig+0x10c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00f      	beq.n	8003636 <TIM_OC1_SetConfig+0xc2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a1a      	ldr	r2, [pc, #104]	; (8003684 <TIM_OC1_SetConfig+0x110>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00b      	beq.n	8003636 <TIM_OC1_SetConfig+0xc2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a19      	ldr	r2, [pc, #100]	; (8003688 <TIM_OC1_SetConfig+0x114>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d007      	beq.n	8003636 <TIM_OC1_SetConfig+0xc2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a18      	ldr	r2, [pc, #96]	; (800368c <TIM_OC1_SetConfig+0x118>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d003      	beq.n	8003636 <TIM_OC1_SetConfig+0xc2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a17      	ldr	r2, [pc, #92]	; (8003690 <TIM_OC1_SetConfig+0x11c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d111      	bne.n	800365a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800363c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	621a      	str	r2, [r3, #32]
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40013400 	.word	0x40013400
 8003688:	40014000 	.word	0x40014000
 800368c:	40014400 	.word	0x40014400
 8003690:	40014800 	.word	0x40014800

08003694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f023 0210 	bic.w	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f023 0320 	bic.w	r3, r3, #32
 80036e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a28      	ldr	r2, [pc, #160]	; (8003794 <TIM_OC2_SetConfig+0x100>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d003      	beq.n	8003700 <TIM_OC2_SetConfig+0x6c>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a27      	ldr	r2, [pc, #156]	; (8003798 <TIM_OC2_SetConfig+0x104>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d10d      	bne.n	800371c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800371a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <TIM_OC2_SetConfig+0x100>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00f      	beq.n	8003744 <TIM_OC2_SetConfig+0xb0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a1c      	ldr	r2, [pc, #112]	; (8003798 <TIM_OC2_SetConfig+0x104>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00b      	beq.n	8003744 <TIM_OC2_SetConfig+0xb0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a1b      	ldr	r2, [pc, #108]	; (800379c <TIM_OC2_SetConfig+0x108>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d007      	beq.n	8003744 <TIM_OC2_SetConfig+0xb0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a1a      	ldr	r2, [pc, #104]	; (80037a0 <TIM_OC2_SetConfig+0x10c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <TIM_OC2_SetConfig+0xb0>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <TIM_OC2_SetConfig+0x110>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d113      	bne.n	800376c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800374a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40013400 	.word	0x40013400
 800379c:	40014000 	.word	0x40014000
 80037a0:	40014400 	.word	0x40014400
 80037a4:	40014800 	.word	0x40014800

080037a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a27      	ldr	r2, [pc, #156]	; (80038a4 <TIM_OC3_SetConfig+0xfc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <TIM_OC3_SetConfig+0x6a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a26      	ldr	r2, [pc, #152]	; (80038a8 <TIM_OC3_SetConfig+0x100>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10d      	bne.n	800382e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a1c      	ldr	r2, [pc, #112]	; (80038a4 <TIM_OC3_SetConfig+0xfc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00f      	beq.n	8003856 <TIM_OC3_SetConfig+0xae>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1b      	ldr	r2, [pc, #108]	; (80038a8 <TIM_OC3_SetConfig+0x100>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00b      	beq.n	8003856 <TIM_OC3_SetConfig+0xae>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a1a      	ldr	r2, [pc, #104]	; (80038ac <TIM_OC3_SetConfig+0x104>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <TIM_OC3_SetConfig+0xae>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a19      	ldr	r2, [pc, #100]	; (80038b0 <TIM_OC3_SetConfig+0x108>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d003      	beq.n	8003856 <TIM_OC3_SetConfig+0xae>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <TIM_OC3_SetConfig+0x10c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d113      	bne.n	800387e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800385c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	621a      	str	r2, [r3, #32]
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40013400 	.word	0x40013400
 80038ac:	40014000 	.word	0x40014000
 80038b0:	40014400 	.word	0x40014400
 80038b4:	40014800 	.word	0x40014800

080038b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	031b      	lsls	r3, r3, #12
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a28      	ldr	r2, [pc, #160]	; (80039b8 <TIM_OC4_SetConfig+0x100>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <TIM_OC4_SetConfig+0x6c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a27      	ldr	r2, [pc, #156]	; (80039bc <TIM_OC4_SetConfig+0x104>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d10d      	bne.n	8003940 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800392a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	031b      	lsls	r3, r3, #12
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800393e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <TIM_OC4_SetConfig+0x100>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00f      	beq.n	8003968 <TIM_OC4_SetConfig+0xb0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <TIM_OC4_SetConfig+0x104>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00b      	beq.n	8003968 <TIM_OC4_SetConfig+0xb0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <TIM_OC4_SetConfig+0x108>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d007      	beq.n	8003968 <TIM_OC4_SetConfig+0xb0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a1a      	ldr	r2, [pc, #104]	; (80039c4 <TIM_OC4_SetConfig+0x10c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_OC4_SetConfig+0xb0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a19      	ldr	r2, [pc, #100]	; (80039c8 <TIM_OC4_SetConfig+0x110>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d113      	bne.n	8003990 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800396e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003976:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	019b      	lsls	r3, r3, #6
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	621a      	str	r2, [r3, #32]
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40013400 	.word	0x40013400
 80039c0:	40014000 	.word	0x40014000
 80039c4:	40014400 	.word	0x40014400
 80039c8:	40014800 	.word	0x40014800

080039cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a17      	ldr	r2, [pc, #92]	; (8003a80 <TIM_OC5_SetConfig+0xb4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00f      	beq.n	8003a46 <TIM_OC5_SetConfig+0x7a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <TIM_OC5_SetConfig+0xb8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <TIM_OC5_SetConfig+0x7a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <TIM_OC5_SetConfig+0xbc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d007      	beq.n	8003a46 <TIM_OC5_SetConfig+0x7a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <TIM_OC5_SetConfig+0xc0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_OC5_SetConfig+0x7a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <TIM_OC5_SetConfig+0xc4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d109      	bne.n	8003a5a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	621a      	str	r2, [r3, #32]
}
 8003a74:	bf00      	nop
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40013400 	.word	0x40013400
 8003a88:	40014000 	.word	0x40014000
 8003a8c:	40014400 	.word	0x40014400
 8003a90:	40014800 	.word	0x40014800

08003a94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	051b      	lsls	r3, r3, #20
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <TIM_OC6_SetConfig+0xb8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00f      	beq.n	8003b10 <TIM_OC6_SetConfig+0x7c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <TIM_OC6_SetConfig+0xbc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00b      	beq.n	8003b10 <TIM_OC6_SetConfig+0x7c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <TIM_OC6_SetConfig+0xc0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d007      	beq.n	8003b10 <TIM_OC6_SetConfig+0x7c>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a15      	ldr	r2, [pc, #84]	; (8003b58 <TIM_OC6_SetConfig+0xc4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <TIM_OC6_SetConfig+0x7c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <TIM_OC6_SetConfig+0xc8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d109      	bne.n	8003b24 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	029b      	lsls	r3, r3, #10
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	621a      	str	r2, [r3, #32]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40013400 	.word	0x40013400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800

08003b60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f023 0201 	bic.w	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f023 030a 	bic.w	r3, r3, #10
 8003b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b087      	sub	sp, #28
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f023 0210 	bic.w	r2, r3, #16
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	031b      	lsls	r3, r3, #12
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	621a      	str	r2, [r3, #32]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f043 0307 	orr.w	r3, r3, #7
 8003c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	609a      	str	r2, [r3, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	021a      	lsls	r2, r3, #8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e065      	b.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2c      	ldr	r2, [pc, #176]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2b      	ldr	r2, [pc, #172]	; (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d108      	bne.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d018      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d26:	d013      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00e      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d009      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d004      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d10c      	bne.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40013400 	.word	0x40013400
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40000800 	.word	0x40000800
 8003d98:	40014000 	.word	0x40014000

08003d9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e087      	b.n	8003ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a25      	ldr	r2, [pc, #148]	; (8003ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d106      	bne.n	8003e54 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1e      	ldr	r2, [pc, #120]	; (8003ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d004      	beq.n	8003e68 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a1d      	ldr	r2, [pc, #116]	; (8003ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d126      	bne.n	8003eb6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	051b      	lsls	r3, r3, #20
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a0e      	ldr	r2, [pc, #56]	; (8003ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a0d      	ldr	r2, [pc, #52]	; (8003ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d106      	bne.n	8003eb6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40013400 	.word	0x40013400

08003edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e042      	b.n	8003f74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d106      	bne.n	8003f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fc ff43 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2224      	movs	r2, #36	; 0x24
 8003f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0201 	bic.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f82c 	bl	8003f7c <UART_SetConfig>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e022      	b.n	8003f74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 faec 	bl	8004514 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fb73 	bl	8004658 <UART_CheckIdleState>
 8003f72:	4603      	mov	r3, r0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f80:	b08c      	sub	sp, #48	; 0x30
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4bab      	ldr	r3, [pc, #684]	; (8004258 <UART_SetConfig+0x2dc>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4aa0      	ldr	r2, [pc, #640]	; (800425c <UART_SetConfig+0x2e0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ff2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	f023 010f 	bic.w	r1, r3, #15
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a91      	ldr	r2, [pc, #580]	; (8004260 <UART_SetConfig+0x2e4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d125      	bne.n	800406c <UART_SetConfig+0xf0>
 8004020:	4b90      	ldr	r3, [pc, #576]	; (8004264 <UART_SetConfig+0x2e8>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b03      	cmp	r3, #3
 800402c:	d81a      	bhi.n	8004064 <UART_SetConfig+0xe8>
 800402e:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <UART_SetConfig+0xb8>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	08004045 	.word	0x08004045
 8004038:	08004055 	.word	0x08004055
 800403c:	0800404d 	.word	0x0800404d
 8004040:	0800405d 	.word	0x0800405d
 8004044:	2301      	movs	r3, #1
 8004046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404a:	e0d6      	b.n	80041fa <UART_SetConfig+0x27e>
 800404c:	2302      	movs	r3, #2
 800404e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004052:	e0d2      	b.n	80041fa <UART_SetConfig+0x27e>
 8004054:	2304      	movs	r3, #4
 8004056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800405a:	e0ce      	b.n	80041fa <UART_SetConfig+0x27e>
 800405c:	2308      	movs	r3, #8
 800405e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004062:	e0ca      	b.n	80041fa <UART_SetConfig+0x27e>
 8004064:	2310      	movs	r3, #16
 8004066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800406a:	e0c6      	b.n	80041fa <UART_SetConfig+0x27e>
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a7d      	ldr	r2, [pc, #500]	; (8004268 <UART_SetConfig+0x2ec>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d138      	bne.n	80040e8 <UART_SetConfig+0x16c>
 8004076:	4b7b      	ldr	r3, [pc, #492]	; (8004264 <UART_SetConfig+0x2e8>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b0c      	cmp	r3, #12
 8004082:	d82d      	bhi.n	80040e0 <UART_SetConfig+0x164>
 8004084:	a201      	add	r2, pc, #4	; (adr r2, 800408c <UART_SetConfig+0x110>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	080040c1 	.word	0x080040c1
 8004090:	080040e1 	.word	0x080040e1
 8004094:	080040e1 	.word	0x080040e1
 8004098:	080040e1 	.word	0x080040e1
 800409c:	080040d1 	.word	0x080040d1
 80040a0:	080040e1 	.word	0x080040e1
 80040a4:	080040e1 	.word	0x080040e1
 80040a8:	080040e1 	.word	0x080040e1
 80040ac:	080040c9 	.word	0x080040c9
 80040b0:	080040e1 	.word	0x080040e1
 80040b4:	080040e1 	.word	0x080040e1
 80040b8:	080040e1 	.word	0x080040e1
 80040bc:	080040d9 	.word	0x080040d9
 80040c0:	2300      	movs	r3, #0
 80040c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040c6:	e098      	b.n	80041fa <UART_SetConfig+0x27e>
 80040c8:	2302      	movs	r3, #2
 80040ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ce:	e094      	b.n	80041fa <UART_SetConfig+0x27e>
 80040d0:	2304      	movs	r3, #4
 80040d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040d6:	e090      	b.n	80041fa <UART_SetConfig+0x27e>
 80040d8:	2308      	movs	r3, #8
 80040da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040de:	e08c      	b.n	80041fa <UART_SetConfig+0x27e>
 80040e0:	2310      	movs	r3, #16
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040e6:	e088      	b.n	80041fa <UART_SetConfig+0x27e>
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a5f      	ldr	r2, [pc, #380]	; (800426c <UART_SetConfig+0x2f0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d125      	bne.n	800413e <UART_SetConfig+0x1c2>
 80040f2:	4b5c      	ldr	r3, [pc, #368]	; (8004264 <UART_SetConfig+0x2e8>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040fc:	2b30      	cmp	r3, #48	; 0x30
 80040fe:	d016      	beq.n	800412e <UART_SetConfig+0x1b2>
 8004100:	2b30      	cmp	r3, #48	; 0x30
 8004102:	d818      	bhi.n	8004136 <UART_SetConfig+0x1ba>
 8004104:	2b20      	cmp	r3, #32
 8004106:	d00a      	beq.n	800411e <UART_SetConfig+0x1a2>
 8004108:	2b20      	cmp	r3, #32
 800410a:	d814      	bhi.n	8004136 <UART_SetConfig+0x1ba>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <UART_SetConfig+0x19a>
 8004110:	2b10      	cmp	r3, #16
 8004112:	d008      	beq.n	8004126 <UART_SetConfig+0x1aa>
 8004114:	e00f      	b.n	8004136 <UART_SetConfig+0x1ba>
 8004116:	2300      	movs	r3, #0
 8004118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800411c:	e06d      	b.n	80041fa <UART_SetConfig+0x27e>
 800411e:	2302      	movs	r3, #2
 8004120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004124:	e069      	b.n	80041fa <UART_SetConfig+0x27e>
 8004126:	2304      	movs	r3, #4
 8004128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800412c:	e065      	b.n	80041fa <UART_SetConfig+0x27e>
 800412e:	2308      	movs	r3, #8
 8004130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004134:	e061      	b.n	80041fa <UART_SetConfig+0x27e>
 8004136:	2310      	movs	r3, #16
 8004138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800413c:	e05d      	b.n	80041fa <UART_SetConfig+0x27e>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a4b      	ldr	r2, [pc, #300]	; (8004270 <UART_SetConfig+0x2f4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d125      	bne.n	8004194 <UART_SetConfig+0x218>
 8004148:	4b46      	ldr	r3, [pc, #280]	; (8004264 <UART_SetConfig+0x2e8>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004152:	2bc0      	cmp	r3, #192	; 0xc0
 8004154:	d016      	beq.n	8004184 <UART_SetConfig+0x208>
 8004156:	2bc0      	cmp	r3, #192	; 0xc0
 8004158:	d818      	bhi.n	800418c <UART_SetConfig+0x210>
 800415a:	2b80      	cmp	r3, #128	; 0x80
 800415c:	d00a      	beq.n	8004174 <UART_SetConfig+0x1f8>
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	d814      	bhi.n	800418c <UART_SetConfig+0x210>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <UART_SetConfig+0x1f0>
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d008      	beq.n	800417c <UART_SetConfig+0x200>
 800416a:	e00f      	b.n	800418c <UART_SetConfig+0x210>
 800416c:	2300      	movs	r3, #0
 800416e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004172:	e042      	b.n	80041fa <UART_SetConfig+0x27e>
 8004174:	2302      	movs	r3, #2
 8004176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417a:	e03e      	b.n	80041fa <UART_SetConfig+0x27e>
 800417c:	2304      	movs	r3, #4
 800417e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004182:	e03a      	b.n	80041fa <UART_SetConfig+0x27e>
 8004184:	2308      	movs	r3, #8
 8004186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800418a:	e036      	b.n	80041fa <UART_SetConfig+0x27e>
 800418c:	2310      	movs	r3, #16
 800418e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004192:	e032      	b.n	80041fa <UART_SetConfig+0x27e>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a30      	ldr	r2, [pc, #192]	; (800425c <UART_SetConfig+0x2e0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d12a      	bne.n	80041f4 <UART_SetConfig+0x278>
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <UART_SetConfig+0x2e8>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041ac:	d01a      	beq.n	80041e4 <UART_SetConfig+0x268>
 80041ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041b2:	d81b      	bhi.n	80041ec <UART_SetConfig+0x270>
 80041b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b8:	d00c      	beq.n	80041d4 <UART_SetConfig+0x258>
 80041ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041be:	d815      	bhi.n	80041ec <UART_SetConfig+0x270>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <UART_SetConfig+0x250>
 80041c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c8:	d008      	beq.n	80041dc <UART_SetConfig+0x260>
 80041ca:	e00f      	b.n	80041ec <UART_SetConfig+0x270>
 80041cc:	2300      	movs	r3, #0
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041d2:	e012      	b.n	80041fa <UART_SetConfig+0x27e>
 80041d4:	2302      	movs	r3, #2
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041da:	e00e      	b.n	80041fa <UART_SetConfig+0x27e>
 80041dc:	2304      	movs	r3, #4
 80041de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e2:	e00a      	b.n	80041fa <UART_SetConfig+0x27e>
 80041e4:	2308      	movs	r3, #8
 80041e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ea:	e006      	b.n	80041fa <UART_SetConfig+0x27e>
 80041ec:	2310      	movs	r3, #16
 80041ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f2:	e002      	b.n	80041fa <UART_SetConfig+0x27e>
 80041f4:	2310      	movs	r3, #16
 80041f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a17      	ldr	r2, [pc, #92]	; (800425c <UART_SetConfig+0x2e0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	f040 80a8 	bne.w	8004356 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004206:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800420a:	2b08      	cmp	r3, #8
 800420c:	d834      	bhi.n	8004278 <UART_SetConfig+0x2fc>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x298>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004239 	.word	0x08004239
 8004218:	08004279 	.word	0x08004279
 800421c:	08004241 	.word	0x08004241
 8004220:	08004279 	.word	0x08004279
 8004224:	08004247 	.word	0x08004247
 8004228:	08004279 	.word	0x08004279
 800422c:	08004279 	.word	0x08004279
 8004230:	08004279 	.word	0x08004279
 8004234:	0800424f 	.word	0x0800424f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe fb38 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 800423c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800423e:	e021      	b.n	8004284 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <UART_SetConfig+0x2f8>)
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004244:	e01e      	b.n	8004284 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004246:	f7fe fac3 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800424a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800424c:	e01a      	b.n	8004284 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800424e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004254:	e016      	b.n	8004284 <UART_SetConfig+0x308>
 8004256:	bf00      	nop
 8004258:	cfff69f3 	.word	0xcfff69f3
 800425c:	40008000 	.word	0x40008000
 8004260:	40013800 	.word	0x40013800
 8004264:	40021000 	.word	0x40021000
 8004268:	40004400 	.word	0x40004400
 800426c:	40004800 	.word	0x40004800
 8004270:	40004c00 	.word	0x40004c00
 8004274:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004282:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 812a 	beq.w	80044e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	4a9e      	ldr	r2, [pc, #632]	; (800450c <UART_SetConfig+0x590>)
 8004292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004296:	461a      	mov	r2, r3
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	fbb3 f3f2 	udiv	r3, r3, r2
 800429e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d305      	bcc.n	80042bc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d903      	bls.n	80042c4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042c2:	e10d      	b.n	80044e0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	2200      	movs	r2, #0
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	60fa      	str	r2, [r7, #12]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	4a8e      	ldr	r2, [pc, #568]	; (800450c <UART_SetConfig+0x590>)
 80042d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2200      	movs	r2, #0
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042e6:	f7fb ff97 	bl	8000218 <__aeabi_uldivmod>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	020b      	lsls	r3, r1, #8
 80042fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004300:	0202      	lsls	r2, r0, #8
 8004302:	6979      	ldr	r1, [r7, #20]
 8004304:	6849      	ldr	r1, [r1, #4]
 8004306:	0849      	lsrs	r1, r1, #1
 8004308:	2000      	movs	r0, #0
 800430a:	460c      	mov	r4, r1
 800430c:	4605      	mov	r5, r0
 800430e:	eb12 0804 	adds.w	r8, r2, r4
 8004312:	eb43 0905 	adc.w	r9, r3, r5
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	469a      	mov	sl, r3
 800431e:	4693      	mov	fp, r2
 8004320:	4652      	mov	r2, sl
 8004322:	465b      	mov	r3, fp
 8004324:	4640      	mov	r0, r8
 8004326:	4649      	mov	r1, r9
 8004328:	f7fb ff76 	bl	8000218 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4613      	mov	r3, r2
 8004332:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800433a:	d308      	bcc.n	800434e <UART_SetConfig+0x3d2>
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004342:	d204      	bcs.n	800434e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6a3a      	ldr	r2, [r7, #32]
 800434a:	60da      	str	r2, [r3, #12]
 800434c:	e0c8      	b.n	80044e0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004354:	e0c4      	b.n	80044e0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435e:	d167      	bne.n	8004430 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004360:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004364:	2b08      	cmp	r3, #8
 8004366:	d828      	bhi.n	80043ba <UART_SetConfig+0x43e>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0x3f4>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004395 	.word	0x08004395
 8004374:	0800439d 	.word	0x0800439d
 8004378:	080043a5 	.word	0x080043a5
 800437c:	080043bb 	.word	0x080043bb
 8004380:	080043ab 	.word	0x080043ab
 8004384:	080043bb 	.word	0x080043bb
 8004388:	080043bb 	.word	0x080043bb
 800438c:	080043bb 	.word	0x080043bb
 8004390:	080043b3 	.word	0x080043b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004394:	f7fe fa8a 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8004398:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800439a:	e014      	b.n	80043c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800439c:	f7fe fa9c 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 80043a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043a2:	e010      	b.n	80043c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a4:	4b5a      	ldr	r3, [pc, #360]	; (8004510 <UART_SetConfig+0x594>)
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043a8:	e00d      	b.n	80043c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043aa:	f7fe fa11 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 80043ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043b0:	e009      	b.n	80043c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043b8:	e005      	b.n	80043c6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80043c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8089 	beq.w	80044e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	4a4e      	ldr	r2, [pc, #312]	; (800450c <UART_SetConfig+0x590>)
 80043d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043d8:	461a      	mov	r2, r3
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80043e0:	005a      	lsls	r2, r3, #1
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	441a      	add	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	2b0f      	cmp	r3, #15
 80043f8:	d916      	bls.n	8004428 <UART_SetConfig+0x4ac>
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004400:	d212      	bcs.n	8004428 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f023 030f 	bic.w	r3, r3, #15
 800440a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	b29b      	uxth	r3, r3
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	b29a      	uxth	r2, r3
 8004418:	8bfb      	ldrh	r3, [r7, #30]
 800441a:	4313      	orrs	r3, r2
 800441c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	8bfa      	ldrh	r2, [r7, #30]
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	e05b      	b.n	80044e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800442e:	e057      	b.n	80044e0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004430:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004434:	2b08      	cmp	r3, #8
 8004436:	d828      	bhi.n	800448a <UART_SetConfig+0x50e>
 8004438:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <UART_SetConfig+0x4c4>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	08004465 	.word	0x08004465
 8004444:	0800446d 	.word	0x0800446d
 8004448:	08004475 	.word	0x08004475
 800444c:	0800448b 	.word	0x0800448b
 8004450:	0800447b 	.word	0x0800447b
 8004454:	0800448b 	.word	0x0800448b
 8004458:	0800448b 	.word	0x0800448b
 800445c:	0800448b 	.word	0x0800448b
 8004460:	08004483 	.word	0x08004483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004464:	f7fe fa22 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8004468:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800446a:	e014      	b.n	8004496 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800446c:	f7fe fa34 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 8004470:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004472:	e010      	b.n	8004496 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004474:	4b26      	ldr	r3, [pc, #152]	; (8004510 <UART_SetConfig+0x594>)
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004478:	e00d      	b.n	8004496 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447a:	f7fe f9a9 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800447e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004480:	e009      	b.n	8004496 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004488:	e005      	b.n	8004496 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004494:	bf00      	nop
    }

    if (pclk != 0U)
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d021      	beq.n	80044e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	4a1a      	ldr	r2, [pc, #104]	; (800450c <UART_SetConfig+0x590>)
 80044a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044a6:	461a      	mov	r2, r3
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	441a      	add	r2, r3
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80044be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	2b0f      	cmp	r3, #15
 80044c4:	d909      	bls.n	80044da <UART_SetConfig+0x55e>
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d205      	bcs.n	80044da <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60da      	str	r2, [r3, #12]
 80044d8:	e002      	b.n	80044e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2200      	movs	r2, #0
 80044f4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80044fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004500:	4618      	mov	r0, r3
 8004502:	3730      	adds	r7, #48	; 0x30
 8004504:	46bd      	mov	sp, r7
 8004506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800450a:	bf00      	nop
 800450c:	08004b1c 	.word	0x08004b1c
 8004510:	00f42400 	.word	0x00f42400

08004514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01a      	beq.n	800462a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004612:	d10a      	bne.n	800462a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  }
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af02      	add	r7, sp, #8
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004668:	f7fc fcb2 	bl	8000fd0 <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b08      	cmp	r3, #8
 800467a:	d10e      	bne.n	800469a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800467c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f82f 	bl	80046ee <UART_WaitOnFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e025      	b.n	80046e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d10e      	bne.n	80046c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f819 	bl	80046ee <UART_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e00f      	b.n	80046e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b09c      	sub	sp, #112	; 0x70
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	4613      	mov	r3, r2
 80046fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fe:	e0a9      	b.n	8004854 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	f000 80a5 	beq.w	8004854 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470a:	f7fc fc61 	bl	8000fd0 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004716:	429a      	cmp	r2, r3
 8004718:	d302      	bcc.n	8004720 <UART_WaitOnFlagUntilTimeout+0x32>
 800471a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800471c:	2b00      	cmp	r3, #0
 800471e:	d140      	bne.n	80047a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800472e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004730:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004734:	667b      	str	r3, [r7, #100]	; 0x64
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800473e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004740:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004744:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800474c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e6      	bne.n	8004720 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3308      	adds	r3, #8
 8004758:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	663b      	str	r3, [r7, #96]	; 0x60
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3308      	adds	r3, #8
 8004770:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004772:	64ba      	str	r2, [r7, #72]	; 0x48
 8004774:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e069      	b.n	8004876 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d051      	beq.n	8004854 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047be:	d149      	bne.n	8004854 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e6      	bne.n	80047ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3308      	adds	r3, #8
 8004802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	613b      	str	r3, [r7, #16]
   return(result);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	66bb      	str	r3, [r7, #104]	; 0x68
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3308      	adds	r3, #8
 800481a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800481c:	623a      	str	r2, [r7, #32]
 800481e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	69f9      	ldr	r1, [r7, #28]
 8004822:	6a3a      	ldr	r2, [r7, #32]
 8004824:	e841 2300 	strex	r3, r2, [r1]
 8004828:	61bb      	str	r3, [r7, #24]
   return(result);
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e5      	bne.n	80047fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e010      	b.n	8004876 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69da      	ldr	r2, [r3, #28]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4013      	ands	r3, r2
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	429a      	cmp	r2, r3
 8004862:	bf0c      	ite	eq
 8004864:	2301      	moveq	r3, #1
 8004866:	2300      	movne	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	79fb      	ldrb	r3, [r7, #7]
 800486e:	429a      	cmp	r2, r3
 8004870:	f43f af46 	beq.w	8004700 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3770      	adds	r7, #112	; 0x70
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_UARTEx_DisableFifoMode+0x16>
 8004890:	2302      	movs	r3, #2
 8004892:	e027      	b.n	80048e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0201 	bic.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80048c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004904:	2302      	movs	r3, #2
 8004906:	e02d      	b.n	8004964 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2224      	movs	r2, #36	; 0x24
 8004914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f84f 	bl	80049e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004980:	2302      	movs	r3, #2
 8004982:	e02d      	b.n	80049e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2224      	movs	r2, #36	; 0x24
 8004990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f811 	bl	80049e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d108      	bne.n	8004a0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a08:	e031      	b.n	8004a6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a0e:	2308      	movs	r3, #8
 8004a10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	0e5b      	lsrs	r3, r3, #25
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	0f5b      	lsrs	r3, r3, #29
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a32:	7bbb      	ldrb	r3, [r7, #14]
 8004a34:	7b3a      	ldrb	r2, [r7, #12]
 8004a36:	4911      	ldr	r1, [pc, #68]	; (8004a7c <UARTEx_SetNbDataToProcess+0x94>)
 8004a38:	5c8a      	ldrb	r2, [r1, r2]
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a3e:	7b3a      	ldrb	r2, [r7, #12]
 8004a40:	490f      	ldr	r1, [pc, #60]	; (8004a80 <UARTEx_SetNbDataToProcess+0x98>)
 8004a42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a44:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	7b7a      	ldrb	r2, [r7, #13]
 8004a54:	4909      	ldr	r1, [pc, #36]	; (8004a7c <UARTEx_SetNbDataToProcess+0x94>)
 8004a56:	5c8a      	ldrb	r2, [r1, r2]
 8004a58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a5c:	7b7a      	ldrb	r2, [r7, #13]
 8004a5e:	4908      	ldr	r1, [pc, #32]	; (8004a80 <UARTEx_SetNbDataToProcess+0x98>)
 8004a60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a62:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a6e:	bf00      	nop
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	08004b34 	.word	0x08004b34
 8004a80:	08004b3c 	.word	0x08004b3c

08004a84 <__libc_init_array>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	4d0d      	ldr	r5, [pc, #52]	; (8004abc <__libc_init_array+0x38>)
 8004a88:	4c0d      	ldr	r4, [pc, #52]	; (8004ac0 <__libc_init_array+0x3c>)
 8004a8a:	1b64      	subs	r4, r4, r5
 8004a8c:	10a4      	asrs	r4, r4, #2
 8004a8e:	2600      	movs	r6, #0
 8004a90:	42a6      	cmp	r6, r4
 8004a92:	d109      	bne.n	8004aa8 <__libc_init_array+0x24>
 8004a94:	4d0b      	ldr	r5, [pc, #44]	; (8004ac4 <__libc_init_array+0x40>)
 8004a96:	4c0c      	ldr	r4, [pc, #48]	; (8004ac8 <__libc_init_array+0x44>)
 8004a98:	f000 f820 	bl	8004adc <_init>
 8004a9c:	1b64      	subs	r4, r4, r5
 8004a9e:	10a4      	asrs	r4, r4, #2
 8004aa0:	2600      	movs	r6, #0
 8004aa2:	42a6      	cmp	r6, r4
 8004aa4:	d105      	bne.n	8004ab2 <__libc_init_array+0x2e>
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}
 8004aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aac:	4798      	blx	r3
 8004aae:	3601      	adds	r6, #1
 8004ab0:	e7ee      	b.n	8004a90 <__libc_init_array+0xc>
 8004ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab6:	4798      	blx	r3
 8004ab8:	3601      	adds	r6, #1
 8004aba:	e7f2      	b.n	8004aa2 <__libc_init_array+0x1e>
 8004abc:	08004b4c 	.word	0x08004b4c
 8004ac0:	08004b4c 	.word	0x08004b4c
 8004ac4:	08004b4c 	.word	0x08004b4c
 8004ac8:	08004b50 	.word	0x08004b50

08004acc <memset>:
 8004acc:	4402      	add	r2, r0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d100      	bne.n	8004ad6 <memset+0xa>
 8004ad4:	4770      	bx	lr
 8004ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8004ada:	e7f9      	b.n	8004ad0 <memset+0x4>

08004adc <_init>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr

08004ae8 <_fini>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr
